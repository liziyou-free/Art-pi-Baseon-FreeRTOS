
ART-PI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021194  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d40  08021434  08021434  00031434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08026174  08026174  00036174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08026178  08026178  00036178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a4  24000000  0802617c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RxDecripSection 00000060  240000a4  08026220  000400a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 00000060  24000104  08026280  00040104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000d2e4  24000164  080262e0  00040164  2**2
                  ALLOC
  9 ._user_heap_stack 00001000  2400d448  080262e0  0004d448  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00040164  2**0
                  CONTENTS, READONLY
 11 .debug_info   000441c0  00000000  00000000  00040192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00009f52  00000000  00000000  00084352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002d98  00000000  00000000  0008e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002ba0  00000000  00000000  00091040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004fd89  00000000  00000000  00093be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004c3ac  00000000  00000000  000e3969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00189141  00000000  00000000  0012fd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002b8e56  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c0d0  00000000  00000000  002b8ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000164 	.word	0x24000164
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802141c 	.word	0x0802141c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000168 	.word	0x24000168
 80002dc:	0802141c 	.word	0x0802141c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <sdram_config>:
/* Includes ------------------------------------------------------------------*/
#include "fmc.h"

/* USER CODE BEGIN 0 */

static void sdram_config (SDRAM_HandleTypeDef *SdramHandle){
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_CommandTypeDef  SdramTypdef={0};
 8000398:	f107 030c 	add.w	r3, r7, #12
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
  /*        使能时钟        */
  SdramTypdef.CommandMode= FMC_SDRAM_CMD_CLK_ENABLE;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
  SdramTypdef.AutoRefreshNumber= 1;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
  SdramTypdef.CommandTarget= FMC_SDRAM_CMD_TARGET_BANK1;
 80003ae:	2310      	movs	r3, #16
 80003b0:	613b      	str	r3, [r7, #16]
  SdramTypdef.ModeRegisterDefinition= 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  HAL_SDRAM_SendCommand(SdramHandle,&SdramTypdef,50);
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	2232      	movs	r2, #50	; 0x32
 80003bc:	4619      	mov	r1, r3
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f009 f8f2 	bl	80095a8 <HAL_SDRAM_SendCommand>
  
  /*        上电延时200US       */
  uint16_t delay_200us;
  while(++delay_200us); //延迟
 80003c4:	8bfb      	ldrh	r3, [r7, #30]
 80003c6:	3301      	adds	r3, #1
 80003c8:	83fb      	strh	r3, [r7, #30]
 80003ca:	8bfb      	ldrh	r3, [r7, #30]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d1f9      	bne.n	80003c4 <sdram_config+0x34>
  
  /*        全部充电        */
  SdramTypdef.CommandMode= FMC_SDRAM_CMD_PALL;
 80003d0:	2302      	movs	r3, #2
 80003d2:	60fb      	str	r3, [r7, #12]
  SdramTypdef.AutoRefreshNumber= 1;
 80003d4:	2301      	movs	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
  SdramTypdef.CommandTarget= FMC_SDRAM_CMD_TARGET_BANK1;
 80003d8:	2310      	movs	r3, #16
 80003da:	613b      	str	r3, [r7, #16]
  SdramTypdef.ModeRegisterDefinition= 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  HAL_SDRAM_SendCommand(SdramHandle,&SdramTypdef,50);
 80003e0:	f107 030c 	add.w	r3, r7, #12
 80003e4:	2232      	movs	r2, #50	; 0x32
 80003e6:	4619      	mov	r1, r3
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f009 f8dd 	bl	80095a8 <HAL_SDRAM_SendCommand>
  
  /*        设置自刷新次数     */
  HAL_SDRAM_SetAutoRefreshNumber(SdramHandle,8);
 80003ee:	2108      	movs	r1, #8
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f009 f936 	bl	8009662 <HAL_SDRAM_SetAutoRefreshNumber>
  
  /*        设置模式        */
  SdramTypdef.CommandMode= FMC_SDRAM_CMD_LOAD_MODE;
 80003f6:	2304      	movs	r3, #4
 80003f8:	60fb      	str	r3, [r7, #12]
  SdramTypdef.AutoRefreshNumber= 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
  SdramTypdef.CommandTarget= FMC_SDRAM_CMD_TARGET_BANK1;
 80003fe:	2310      	movs	r3, #16
 8000400:	613b      	str	r3, [r7, #16]
  SdramTypdef.ModeRegisterDefinition= 0x01|0x02<<4|1<<9;
 8000402:	f240 2321 	movw	r3, #545	; 0x221
 8000406:	61bb      	str	r3, [r7, #24]
  HAL_SDRAM_SendCommand(SdramHandle,&SdramTypdef,50);
 8000408:	f107 030c 	add.w	r3, r7, #12
 800040c:	2232      	movs	r2, #50	; 0x32
 800040e:	4619      	mov	r1, r3
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f009 f8c9 	bl	80095a8 <HAL_SDRAM_SendCommand>
  
  /*        设置刷新率       */
  HAL_SDRAM_ProgramRefreshRate(SdramHandle,677);
 8000416:	f240 21a5 	movw	r1, #677	; 0x2a5
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f009 f8f9 	bl	8009612 <HAL_SDRAM_ProgramRefreshRate>
}
 8000420:	bf00      	nop
 8000422:	3720      	adds	r7, #32
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
 800043c:	615a      	str	r2, [r3, #20]
 800043e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000440:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <MX_FMC_Init+0xa0>)
 8000442:	4a22      	ldr	r2, [pc, #136]	; (80004cc <MX_FMC_Init+0xa4>)
 8000444:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <MX_FMC_Init+0xa0>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_FMC_Init+0xa0>)
 800044e:	2201      	movs	r2, #1
 8000450:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <MX_FMC_Init+0xa0>)
 8000454:	2208      	movs	r2, #8
 8000456:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_FMC_Init+0xa0>)
 800045a:	2210      	movs	r2, #16
 800045c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_FMC_Init+0xa0>)
 8000460:	2240      	movs	r2, #64	; 0x40
 8000462:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_FMC_Init+0xa0>)
 8000466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800046a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <MX_FMC_Init+0xa0>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MX_FMC_Init+0xa0>)
 8000474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000478:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_FMC_Init+0xa0>)
 800047c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000480:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_FMC_Init+0xa0>)
 8000484:	2200      	movs	r2, #0
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000488:	2302      	movs	r3, #2
 800048a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 800048c:	2308      	movs	r3, #8
 800048e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000490:	2306      	movs	r3, #6
 8000492:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000494:	2306      	movs	r3, #6
 8000496:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 6;
 8000498:	2306      	movs	r3, #6
 800049a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800049c:	2302      	movs	r3, #2
 800049e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4807      	ldr	r0, [pc, #28]	; (80004c8 <MX_FMC_Init+0xa0>)
 80004aa:	f009 f841 	bl	8009530 <HAL_SDRAM_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80004b4:	f000 fb12 	bl	8000adc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  sdram_config(&hsdram1);
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <MX_FMC_Init+0xa0>)
 80004ba:	f7ff ff69 	bl	8000390 <sdram_config>
  /* USER CODE END FMC_Init 2 */
}
 80004be:	bf00      	nop
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	24000180 	.word	0x24000180
 80004cc:	52004140 	.word	0x52004140

080004d0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b0b6      	sub	sp, #216	; 0xd8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80004e6:	4b61      	ldr	r3, [pc, #388]	; (800066c <HAL_FMC_MspInit+0x19c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	f040 80b9 	bne.w	8000662 <HAL_FMC_MspInit+0x192>
    return;
  }
  FMC_Initialized = 1;
 80004f0:	4b5e      	ldr	r3, [pc, #376]	; (800066c <HAL_FMC_MspInit+0x19c>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	22bc      	movs	r2, #188	; 0xbc
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f01f ff3e 	bl	8020380 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000508:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 800050a:	2319      	movs	r3, #25
 800050c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 240;
 800050e:	23f0      	movs	r3, #240	; 0xf0
 8000510:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000512:	2302      	movs	r3, #2
 8000514:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000516:	2302      	movs	r3, #2
 8000518:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000522:	2300      	movs	r3, #0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000526:	2302      	movs	r3, #2
 8000528:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800052a:	f107 0308 	add.w	r3, r7, #8
 800052e:	4618      	mov	r0, r3
 8000530:	f005 fa14 	bl	800595c <HAL_RCCEx_PeriphCLKConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_FMC_MspInit+0x6e>
    {
      Error_Handler();
 800053a:	f000 facf 	bl	8000adc <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800053e:	4b4c      	ldr	r3, [pc, #304]	; (8000670 <HAL_FMC_MspInit+0x1a0>)
 8000540:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000544:	4a4a      	ldr	r2, [pc, #296]	; (8000670 <HAL_FMC_MspInit+0x1a0>)
 8000546:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800054e:	4b48      	ldr	r3, [pc, #288]	; (8000670 <HAL_FMC_MspInit+0x1a0>)
 8000550:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800055c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000560:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000564:	2302      	movs	r3, #2
 8000566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000570:	2303      	movs	r3, #3
 8000572:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000576:	230c      	movs	r3, #12
 8000578:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800057c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000580:	4619      	mov	r1, r3
 8000582:	483c      	ldr	r0, [pc, #240]	; (8000674 <HAL_FMC_MspInit+0x1a4>)
 8000584:	f004 f858 	bl	8004638 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000588:	f248 1337 	movw	r3, #33079	; 0x8137
 800058c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000590:	2302      	movs	r3, #2
 8000592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005a2:	230c      	movs	r3, #12
 80005a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005ac:	4619      	mov	r1, r3
 80005ae:	4832      	ldr	r0, [pc, #200]	; (8000678 <HAL_FMC_MspInit+0x1a8>)
 80005b0:	f004 f842 	bl	8004638 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80005b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80005b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005ce:	230c      	movs	r3, #12
 80005d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005d8:	4619      	mov	r1, r3
 80005da:	4828      	ldr	r0, [pc, #160]	; (800067c <HAL_FMC_MspInit+0x1ac>)
 80005dc:	f004 f82c 	bl	8004638 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80005e0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80005e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005fa:	230c      	movs	r3, #12
 80005fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000600:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000604:	4619      	mov	r1, r3
 8000606:	481e      	ldr	r0, [pc, #120]	; (8000680 <HAL_FMC_MspInit+0x1b0>)
 8000608:	f004 f816 	bl	8004638 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800060c:	230c      	movs	r3, #12
 800060e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	2302      	movs	r3, #2
 8000614:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000624:	230c      	movs	r3, #12
 8000626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800062e:	4619      	mov	r1, r3
 8000630:	4814      	ldr	r0, [pc, #80]	; (8000684 <HAL_FMC_MspInit+0x1b4>)
 8000632:	f004 f801 	bl	8004638 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000636:	2320      	movs	r3, #32
 8000638:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800064e:	230c      	movs	r3, #12
 8000650:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000654:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000658:	4619      	mov	r1, r3
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <HAL_FMC_MspInit+0x1b8>)
 800065c:	f003 ffec 	bl	8004638 <HAL_GPIO_Init>
 8000660:	e000      	b.n	8000664 <HAL_FMC_MspInit+0x194>
    return;
 8000662:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000664:	37d8      	adds	r7, #216	; 0xd8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	240001b4 	.word	0x240001b4
 8000670:	58024400 	.word	0x58024400
 8000674:	58021000 	.word	0x58021000
 8000678:	58021800 	.word	0x58021800
 800067c:	58020c00 	.word	0x58020c00
 8000680:	58021400 	.word	0x58021400
 8000684:	58020800 	.word	0x58020800
 8000688:	58021c00 	.word	0x58021c00

0800068c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000694:	f7ff ff1c 	bl	80004d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <MX_FREERTOS_Init+0x18>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_FREERTOS_Init+0x1c>)
 80006fa:	f00a fe32 	bl	800b362 <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a03      	ldr	r2, [pc, #12]	; (8000710 <MX_FREERTOS_Init+0x20>)
 8000702:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	080256d8 	.word	0x080256d8
 800070c:	08000715 	.word	0x08000715
 8000710:	240001b8 	.word	0x240001b8

08000714 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800071c:	f000 fdfa 	bl	8001314 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  defualt_thread_entry();
 8000720:	f001 fc5e 	bl	8001fe0 <defualt_thread_entry>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f00a feae 	bl	800b486 <osDelay>
 800072a:	e7fb      	b.n	8000724 <StartDefaultTask+0x10>

0800072c <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0xe4>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000738:	4a35      	ldr	r2, [pc, #212]	; (8000810 <MX_GPIO_Init+0xe4>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000742:	4b33      	ldr	r3, [pc, #204]	; (8000810 <MX_GPIO_Init+0xe4>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_GPIO_Init+0xe4>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000756:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <MX_GPIO_Init+0xe4>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_GPIO_Init+0xe4>)
 8000762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_GPIO_Init+0xe4>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000774:	4a26      	ldr	r2, [pc, #152]	; (8000810 <MX_GPIO_Init+0xe4>)
 8000776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_GPIO_Init+0xe4>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_GPIO_Init+0xe4>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000792:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <MX_GPIO_Init+0xe4>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_GPIO_Init+0xe4>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_GPIO_Init+0xe4>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_GPIO_Init+0xe4>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_GPIO_Init+0xe4>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c0:	f003 0320 	and.w	r3, r3, #32
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_GPIO_Init+0xe4>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <MX_GPIO_Init+0xe4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_GPIO_Init+0xe4>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_GPIO_Init+0xe4>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <MX_GPIO_Init+0xe4>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_GPIO_Init+0xe4>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

}
 8000804:	bf00      	nop
 8000806:	3724      	adds	r7, #36	; 0x24
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	58024400 	.word	0x58024400

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* MCU Configuration--------------------------------------------------------*/
  MPU_Config();
 800081a:	f001 fc83 	bl	8002124 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800081e:	4b52      	ldr	r3, [pc, #328]	; (8000968 <main+0x154>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d11b      	bne.n	8000862 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800082a:	f3bf 8f4f 	dsb	sy
}
 800082e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000830:	f3bf 8f6f 	isb	sy
}
 8000834:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000836:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <main+0x154>)
 8000838:	2200      	movs	r2, #0
 800083a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800083e:	f3bf 8f4f 	dsb	sy
}
 8000842:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000844:	f3bf 8f6f 	isb	sy
}
 8000848:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800084a:	4b47      	ldr	r3, [pc, #284]	; (8000968 <main+0x154>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a46      	ldr	r2, [pc, #280]	; (8000968 <main+0x154>)
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000856:	f3bf 8f4f 	dsb	sy
}
 800085a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085c:	f3bf 8f6f 	isb	sy
}
 8000860:	e000      	b.n	8000864 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000862:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000864:	4b40      	ldr	r3, [pc, #256]	; (8000968 <main+0x154>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800086c:	2b00      	cmp	r3, #0
 800086e:	d138      	bne.n	80008e2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000870:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <main+0x154>)
 8000872:	2200      	movs	r2, #0
 8000874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000878:	f3bf 8f4f 	dsb	sy
}
 800087c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <main+0x154>)
 8000880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000884:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	0b5b      	lsrs	r3, r3, #13
 800088a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800088e:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000898:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	015a      	lsls	r2, r3, #5
 800089e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008a2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a8:	492f      	ldr	r1, [pc, #188]	; (8000968 <main+0x154>)
 80008aa:	4313      	orrs	r3, r2
 80008ac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	60fa      	str	r2, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1ef      	bne.n	800089a <main+0x86>
    } while(sets-- != 0U);
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	613a      	str	r2, [r7, #16]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1e5      	bne.n	8000890 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80008c4:	f3bf 8f4f 	dsb	sy
}
 80008c8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <main+0x154>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a26      	ldr	r2, [pc, #152]	; (8000968 <main+0x154>)
 80008d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d6:	f3bf 8f4f 	dsb	sy
}
 80008da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008dc:	f3bf 8f6f 	isb	sy
}
 80008e0:	e000      	b.n	80008e4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008e2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f001 fe82 	bl	80025ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f842 	bl	8000970 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <main+0x158>)
 80008ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80008f2:	4a1e      	ldr	r2, [pc, #120]	; (800096c <main+0x158>)
 80008f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008f8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <main+0x158>)
 80008fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_D2SRAM2_CLK_ENABLE();
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <main+0x158>)
 800090c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000910:	4a16      	ldr	r2, [pc, #88]	; (800096c <main+0x158>)
 8000912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000916:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <main+0x158>)
 800091c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000920:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <main+0x158>)
 800092a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <main+0x158>)
 8000930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000934:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <main+0x158>)
 800093a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800093e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f7ff fef1 	bl	800072c <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800094a:	f000 f8cd 	bl	8000ae8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800094e:	f000 fa9d 	bl	8000e8c <MX_FATFS_Init>
  MX_FMC_Init();
 8000952:	f7ff fd69 	bl	8000428 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  components_init();
 8000956:	f001 fb27 	bl	8001fa8 <components_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800095a:	f00a fc81 	bl	800b260 <osKernelInitialize>
  MX_FREERTOS_Init();
 800095e:	f7ff fec7 	bl	80006f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000962:	f00a fcc3 	bl	800b2ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000966:	e7fe      	b.n	8000966 <main+0x152>
 8000968:	e000ed00 	.word	0xe000ed00
 800096c:	58024400 	.word	0x58024400

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09e      	sub	sp, #120	; 0x78
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097a:	224c      	movs	r2, #76	; 0x4c
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f01f fcfe 	bl	8020380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2220      	movs	r2, #32
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f01f fcf7 	bl	8020380 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000992:	2002      	movs	r0, #2
 8000994:	f004 f81a 	bl	80049cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b4c      	ldr	r3, [pc, #304]	; (8000ad0 <SystemClock_Config+0x160>)
 800099e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a0:	4a4b      	ldr	r2, [pc, #300]	; (8000ad0 <SystemClock_Config+0x160>)
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009a8:	4b49      	ldr	r3, [pc, #292]	; (8000ad0 <SystemClock_Config+0x160>)
 80009aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <SystemClock_Config+0x164>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a47      	ldr	r2, [pc, #284]	; (8000ad4 <SystemClock_Config+0x164>)
 80009b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <SystemClock_Config+0x164>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ca:	bf00      	nop
 80009cc:	4b41      	ldr	r3, [pc, #260]	; (8000ad4 <SystemClock_Config+0x164>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d8:	d1f8      	bne.n	80009cc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <SystemClock_Config+0x168>)
 80009dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009e0:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <SystemClock_Config+0x168>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <SystemClock_Config+0x168>)
 80009ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009f8:	2300      	movs	r3, #0
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <SystemClock_Config+0x164>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a34      	ldr	r2, [pc, #208]	; (8000ad4 <SystemClock_Config+0x164>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <SystemClock_Config+0x164>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <SystemClock_Config+0x160>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	4a2e      	ldr	r2, [pc, #184]	; (8000ad0 <SystemClock_Config+0x160>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <SystemClock_Config+0x160>)
 8000a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a2a:	bf00      	nop
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <SystemClock_Config+0x164>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a38:	d1f8      	bne.n	8000a2c <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <SystemClock_Config+0x168>)
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3e:	f023 0303 	bic.w	r3, r3, #3
 8000a42:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <SystemClock_Config+0x168>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a54:	2302      	movs	r3, #2
 8000a56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a60:	23c0      	movs	r3, #192	; 0xc0
 8000a62:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a70:	2308      	movs	r3, #8
 8000a72:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 ffdd 	bl	8004a40 <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000a8c:	f000 f826 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a90:	233f      	movs	r3, #63	; 0x3f
 8000a92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a94:	2303      	movs	r3, #3
 8000a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aa0:	2340      	movs	r3, #64	; 0x40
 8000aa2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aa4:	2340      	movs	r3, #64	; 0x40
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fbef 	bl	800529c <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000ac4:	f000 f80a 	bl	8000adc <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3778      	adds	r7, #120	; 0x78
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	58000400 	.word	0x58000400
 8000ad4:	58024800 	.word	0x58024800
 8000ad8:	58024400 	.word	0x58024400

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_SDMMC1_SD_Init+0x34>)
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <MX_SDMMC1_SD_Init+0x38>)
 8000af0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_SDMMC1_SD_Init+0x34>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_SDMMC1_SD_Init+0x34>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_SDMMC1_SD_Init+0x34>)
 8000b00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b04:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <MX_SDMMC1_SD_Init+0x34>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 3;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <MX_SDMMC1_SD_Init+0x34>)
 8000b0e:	2203      	movs	r2, #3
 8000b10:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	240001bc 	.word	0x240001bc
 8000b20:	52007000 	.word	0x52007000

08000b24 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b0ba      	sub	sp, #232	; 0xe8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	22bc      	movs	r2, #188	; 0xbc
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f01f fc1b 	bl	8020380 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a3b      	ldr	r2, [pc, #236]	; (8000c3c <HAL_SD_MspInit+0x118>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d16e      	bne.n	8000c32 <HAL_SD_MspInit+0x10e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b58:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5e:	f107 0318 	add.w	r3, r7, #24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f004 fefa 	bl	800595c <HAL_RCCEx_PeriphCLKConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000b6e:	f7ff ffb5 	bl	8000adc <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <HAL_SD_MspInit+0x11c>)
 8000b74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b78:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_SD_MspInit+0x11c>)
 8000b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b7e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_SD_MspInit+0x11c>)
 8000b84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <HAL_SD_MspInit+0x11c>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <HAL_SD_MspInit+0x11c>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <HAL_SD_MspInit+0x11c>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <HAL_SD_MspInit+0x11c>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <HAL_SD_MspInit+0x11c>)
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_SD_MspInit+0x11c>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8000bcc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000be6:	230c      	movs	r3, #12
 8000be8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4814      	ldr	r0, [pc, #80]	; (8000c44 <HAL_SD_MspInit+0x120>)
 8000bf4:	f003 fd20 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c10:	230c      	movs	r3, #12
 8000c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c16:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <HAL_SD_MspInit+0x124>)
 8000c1e:	f003 fd0b 	bl	8004638 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2105      	movs	r1, #5
 8000c26:	2031      	movs	r0, #49	; 0x31
 8000c28:	f001 fe91 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000c2c:	2031      	movs	r0, #49	; 0x31
 8000c2e:	f001 fea8 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000c32:	bf00      	nop
 8000c34:	37e8      	adds	r7, #232	; 0xe8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	52007000 	.word	0x52007000
 8000c40:	58024400 	.word	0x58024400
 8000c44:	58020800 	.word	0x58020800
 8000c48:	58020c00 	.word	0x58020c00

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_MspInit+0x38>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_MspInit+0x38>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_MspInit+0x38>)
 8000c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	210f      	movs	r1, #15
 8000c74:	f06f 0001 	mvn.w	r0, #1
 8000c78:	f001 fe69 	bl	800294e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58024400 	.word	0x58024400

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f001 fd0a 	bl	80026d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cbc:	f00d fc44 	bl	800e548 <xTaskGetSchedulerState>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d001      	beq.n	8000cca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cc6:	f00b fc57 	bl	800c578 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <SDMMC1_IRQHandler+0x10>)
 8000cd6:	f007 fa37 	bl	8008148 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	240001bc 	.word	0x240001bc

08000ce4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <ETH_IRQHandler+0x10>)
 8000cea:	f002 fb07 	bl	80032fc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24004c50 	.word	0x24004c50

08000cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_kill>:

int _kill(int pid, int sig)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <_kill+0x20>)
 8000d14:	2216      	movs	r2, #22
 8000d16:	601a      	str	r2, [r3, #0]
	return -1;
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	2400d3c8 	.word	0x2400d3c8

08000d2c <_exit>:

void _exit (int status)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ffe5 	bl	8000d08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d3e:	e7fe      	b.n	8000d3e <_exit+0x12>

08000d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e00a      	b.n	8000d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d52:	f3af 8000 	nop.w
 8000d56:	4601      	mov	r1, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf0      	blt.n	8000d52 <_read+0x12>
	}

return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e009      	b.n	8000da0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf1      	blt.n	8000d8c <_write+0x12>
	}
	return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dda:	605a      	str	r2, [r3, #4]
	return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_isatty>:

int _isatty(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	return 1;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d205      	bcs.n	8000e58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <_sbrk+0x6c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	371c      	adds	r7, #28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	24080000 	.word	0x24080000
 8000e7c:	00000800 	.word	0x00000800
 8000e80:	24000238 	.word	0x24000238
 8000e84:	2400d448 	.word	0x2400d448
 8000e88:	2400d3c8 	.word	0x2400d3c8

08000e8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8000e90:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <MX_FATFS_Init+0x18>)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_FATFS_Init+0x1c>)
 8000e94:	f00a f9a0 	bl	800b1d8 <FATFS_LinkDriver>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <MX_FATFS_Init+0x20>)
 8000e9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	24000240 	.word	0x24000240
 8000ea8:	080256fc 	.word	0x080256fc
 8000eac:	2400023c 	.word	0x2400023c

08000eb0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8000eba:	f000 f885 	bl	8000fc8 <BSP_SD_IsDetected>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d001      	beq.n	8000ec8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e012      	b.n	8000eee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <BSP_SD_Init+0x48>)
 8000eca:	f006 fed3 	bl	8007c74 <HAL_SD_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000ed8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <BSP_SD_Init+0x48>)
 8000ede:	f007 fd83 	bl	80089e8 <HAL_SD_ConfigWideBusOperation>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	240001bc 	.word	0x240001bc

08000efc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <BSP_SD_ReadBlocks_DMA+0x30>)
 8000f14:	f006 ffc8 	bl	8007ea8 <HAL_SD_ReadBlocks_DMA>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	240001bc 	.word	0x240001bc

08000f30 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	68f9      	ldr	r1, [r7, #12]
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <BSP_SD_WriteBlocks_DMA+0x30>)
 8000f48:	f007 f856 	bl	8007ff8 <HAL_SD_WriteBlocks_DMA>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	240001bc 	.word	0x240001bc

08000f64 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <BSP_SD_GetCardState+0x1c>)
 8000f6a:	f007 fe4f 	bl	8008c0c <HAL_SD_GetCardState>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	bf14      	ite	ne
 8000f74:	2301      	movne	r3, #1
 8000f76:	2300      	moveq	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	240001bc 	.word	0x240001bc

08000f84 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4803      	ldr	r0, [pc, #12]	; (8000f9c <BSP_SD_GetCardInfo+0x18>)
 8000f90:	f007 fcfe 	bl	8008990 <HAL_SD_GetCardInfo>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	240001bc 	.word	0x240001bc

08000fa0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8000fa8:	f000 f990 	bl	80012cc <BSP_SD_WriteCpltCallback>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8000fbc:	f000 f998 	bl	80012f0 <BSP_SD_ReadCpltCallback>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	b2db      	uxtb	r3, r3
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8000fea:	f00a f9a5 	bl	800b338 <osKernelGetTickCount>
 8000fee:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8000ff0:	e006      	b.n	8001000 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8000ff2:	f7ff ffb7 	bl	8000f64 <BSP_SD_GetCardState>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e009      	b.n	8001014 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8001000:	f00a f99a 	bl	800b338 <osKernelGetTickCount>
 8001004:	4602      	mov	r2, r0
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f0      	bhi.n	8000ff2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <SD_CheckStatus+0x38>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800102c:	f7ff ff9a 	bl	8000f64 <BSP_SD_GetCardState>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d107      	bne.n	8001046 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <SD_CheckStatus+0x38>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	f023 0301 	bic.w	r3, r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SD_CheckStatus+0x38>)
 8001044:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <SD_CheckStatus+0x38>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	24000000 	.word	0x24000000

08001058 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <SD_initialize+0x7c>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8001068:	f00a f91e 	bl	800b2a8 <osKernelGetState>
 800106c:	4603      	mov	r3, r0
 800106e:	2b02      	cmp	r3, #2
 8001070:	d129      	bne.n	80010c6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8001072:	f7ff ff1d 	bl	8000eb0 <BSP_SD_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d107      	bne.n	800108c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffcc 	bl	800101c <SD_CheckStatus>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <SD_initialize+0x7c>)
 800108a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <SD_initialize+0x7c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d017      	beq.n	80010c6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <SD_initialize+0x80>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d107      	bne.n	80010ae <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800109e:	2200      	movs	r2, #0
 80010a0:	2102      	movs	r1, #2
 80010a2:	200a      	movs	r0, #10
 80010a4:	f00a fc5c 	bl	800b960 <osMessageQueueNew>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <SD_initialize+0x80>)
 80010ac:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <SD_initialize+0x80>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d107      	bne.n	80010c6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <SD_initialize+0x7c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SD_initialize+0x7c>)
 80010c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <SD_initialize+0x7c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	24000000 	.word	0x24000000
 80010d8:	24000244 	.word	0x24000244

080010dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff97 	bl	800101c <SD_CheckStatus>
 80010ee:	4603      	mov	r3, r0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800110c:	f247 5030 	movw	r0, #30000	; 0x7530
 8001110:	f7ff ff67 	bl	8000fe2 <SD_CheckStatusWithTimeout>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	da01      	bge.n	800111e <SD_read+0x26>
  {
    return res;
 800111a:	7ffb      	ldrb	r3, [r7, #31]
 800111c:	e02f      	b.n	800117e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	68b8      	ldr	r0, [r7, #8]
 8001124:	f7ff feea 	bl	8000efc <BSP_SD_ReadBlocks_DMA>
 8001128:	4603      	mov	r3, r0
 800112a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800112c:	7fbb      	ldrb	r3, [r7, #30]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d124      	bne.n	800117c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <SD_read+0x90>)
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	f107 0112 	add.w	r1, r7, #18
 800113a:	f247 5330 	movw	r3, #30000	; 0x7530
 800113e:	2200      	movs	r2, #0
 8001140:	f00a fce2 	bl	800bb08 <osMessageQueueGet>
 8001144:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d117      	bne.n	800117c <SD_read+0x84>
 800114c:	8a7b      	ldrh	r3, [r7, #18]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d114      	bne.n	800117c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8001152:	f00a f8f1 	bl	800b338 <osKernelGetTickCount>
 8001156:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8001158:	e007      	b.n	800116a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800115a:	f7ff ff03 	bl	8000f64 <BSP_SD_GetCardState>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <SD_read+0x72>
              {
                res = RES_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8001168:	e008      	b.n	800117c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800116a:	f00a f8e5 	bl	800b338 <osKernelGetTickCount>
 800116e:	4602      	mov	r2, r0
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f247 522f 	movw	r2, #29999	; 0x752f
 8001178:	4293      	cmp	r3, r2
 800117a:	d9ee      	bls.n	800115a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800117c:	7ffb      	ldrb	r3, [r7, #31]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	24000244 	.word	0x24000244

0800118c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80011a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80011a4:	f7ff ff1d 	bl	8000fe2 <SD_CheckStatusWithTimeout>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da01      	bge.n	80011b2 <SD_write+0x26>
  {
    return res;
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	e02d      	b.n	800120e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f7ff feba 	bl	8000f30 <BSP_SD_WriteBlocks_DMA>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d124      	bne.n	800120c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <SD_write+0x8c>)
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	f107 0112 	add.w	r1, r7, #18
 80011ca:	f247 5330 	movw	r3, #30000	; 0x7530
 80011ce:	2200      	movs	r2, #0
 80011d0:	f00a fc9a 	bl	800bb08 <osMessageQueueGet>
 80011d4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d117      	bne.n	800120c <SD_write+0x80>
 80011dc:	8a7b      	ldrh	r3, [r7, #18]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d114      	bne.n	800120c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80011e2:	f00a f8a9 	bl	800b338 <osKernelGetTickCount>
 80011e6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80011e8:	e007      	b.n	80011fa <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80011ea:	f7ff febb 	bl	8000f64 <BSP_SD_GetCardState>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <SD_write+0x6e>
          {
            res = RES_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	77fb      	strb	r3, [r7, #31]
            break;
 80011f8:	e008      	b.n	800120c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80011fa:	f00a f89d 	bl	800b338 <osKernelGetTickCount>
 80011fe:	4602      	mov	r2, r0
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f247 522f 	movw	r2, #29999	; 0x752f
 8001208:	4293      	cmp	r3, r2
 800120a:	d9ee      	bls.n	80011ea <SD_write+0x5e>
    }

  }
#endif

  return res;
 800120c:	7ffb      	ldrb	r3, [r7, #31]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	24000244 	.word	0x24000244

0800121c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	603a      	str	r2, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	460b      	mov	r3, r1
 800122a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <SD_ioctl+0xac>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SD_ioctl+0x28>
 8001240:	2303      	movs	r3, #3
 8001242:	e03c      	b.n	80012be <SD_ioctl+0xa2>

  switch (cmd)
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d834      	bhi.n	80012b4 <SD_ioctl+0x98>
 800124a:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <SD_ioctl+0x34>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	08001261 	.word	0x08001261
 8001254:	08001269 	.word	0x08001269
 8001258:	08001281 	.word	0x08001281
 800125c:	0800129b 	.word	0x0800129b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001266:	e028      	b.n	80012ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe89 	bl	8000f84 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8001272:	6a3a      	ldr	r2, [r7, #32]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800127e:	e01c      	b.n	80012ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe7d 	bl	8000f84 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	b29a      	uxth	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001298:	e00f      	b.n	80012ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe70 	bl	8000f84 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	0a5a      	lsrs	r2, r3, #9
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80012b2:	e002      	b.n	80012ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80012b4:	2304      	movs	r3, #4
 80012b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80012ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3730      	adds	r7, #48	; 0x30
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	24000000 	.word	0x24000000

080012cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80012d2:	2302      	movs	r3, #2
 80012d4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <BSP_SD_WriteCpltCallback+0x20>)
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	1db9      	adds	r1, r7, #6
 80012dc:	2300      	movs	r3, #0
 80012de:	2200      	movs	r2, #0
 80012e0:	f00a fbb2 	bl	800ba48 <osMessageQueuePut>
#endif
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	24000244 	.word	0x24000244

080012f0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80012f6:	2301      	movs	r3, #1
 80012f8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <BSP_SD_ReadCpltCallback+0x20>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	1db9      	adds	r1, r7, #6
 8001300:	2300      	movs	r3, #0
 8001302:	2200      	movs	r2, #0
 8001304:	f00a fba0 	bl	800ba48 <osMessageQueuePut>
#endif
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	24000244 	.word	0x24000244

08001314 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800131a:	2100      	movs	r1, #0
 800131c:	2000      	movs	r0, #0
 800131e:	f01e f87d 	bl	801f41c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_LWIP_Init+0x9c>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_LWIP_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_LWIP_Init+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_LWIP_Init+0xa8>)
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <MX_LWIP_Init+0xac>)
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2300      	movs	r3, #0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_LWIP_Init+0xa4>)
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <MX_LWIP_Init+0xa0>)
 8001344:	491a      	ldr	r1, [pc, #104]	; (80013b0 <MX_LWIP_Init+0x9c>)
 8001346:	481f      	ldr	r0, [pc, #124]	; (80013c4 <MX_LWIP_Init+0xb0>)
 8001348:	f015 f9b0 	bl	80166ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800134c:	481d      	ldr	r0, [pc, #116]	; (80013c4 <MX_LWIP_Init+0xb0>)
 800134e:	f015 fbdb 	bl	8016b08 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_LWIP_Init+0xb0>)
 8001354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8001364:	4817      	ldr	r0, [pc, #92]	; (80013c4 <MX_LWIP_Init+0xb0>)
 8001366:	f015 fbdf 	bl	8016b28 <netif_set_up>
 800136a:	e002      	b.n	8001372 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800136c:	4815      	ldr	r0, [pc, #84]	; (80013c4 <MX_LWIP_Init+0xb0>)
 800136e:	f015 fc59 	bl	8016c24 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001372:	4915      	ldr	r1, [pc, #84]	; (80013c8 <MX_LWIP_Init+0xb4>)
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <MX_LWIP_Init+0xb0>)
 8001376:	f015 fd13 	bl	8016da0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800137a:	2224      	movs	r2, #36	; 0x24
 800137c:	2100      	movs	r1, #0
 800137e:	4813      	ldr	r0, [pc, #76]	; (80013cc <MX_LWIP_Init+0xb8>)
 8001380:	f01e fffe 	bl	8020380 <memset>
  attributes.name = "EthLink";
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_LWIP_Init+0xb8>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_LWIP_Init+0xbc>)
 8001388:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_LWIP_Init+0xb8>)
 800138c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001390:	615a      	str	r2, [r3, #20]
  attributes.priority = 5;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_LWIP_Init+0xb8>)
 8001394:	2205      	movs	r2, #5
 8001396:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <MX_LWIP_Init+0xb8>)
 800139a:	490a      	ldr	r1, [pc, #40]	; (80013c4 <MX_LWIP_Init+0xb0>)
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <MX_LWIP_Init+0xc0>)
 800139e:	f009 ffe0 	bl	800b362 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80013a2:	4808      	ldr	r0, [pc, #32]	; (80013c4 <MX_LWIP_Init+0xb0>)
 80013a4:	f00f ff60 	bl	8011268 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2400028c 	.word	0x2400028c
 80013b4:	24000290 	.word	0x24000290
 80013b8:	24000294 	.word	0x24000294
 80013bc:	0801f32d 	.word	0x0801f32d
 80013c0:	0800187d 	.word	0x0800187d
 80013c4:	24000248 	.word	0x24000248
 80013c8:	080013d9 	.word	0x080013d9
 80013cc:	24000298 	.word	0x24000298
 80013d0:	08021440 	.word	0x08021440
 80013d4:	08001b61 	.word	0x08001b61

080013d8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <HAL_ETH_RxCpltCallback+0x1c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00a fa49 	bl	800b890 <osSemaphoreRelease>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	24004c48 	.word	0x24004c48

0800140c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_ETH_TxCpltCallback+0x1c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f00a fa39 	bl	800b890 <osSemaphoreRelease>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	24004c4c 	.word	0x24004c4c

0800142c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f002 fb7d 	bl	8003b34 <HAL_ETH_GetDMAError>
 800143a:	4603      	mov	r3, r0
 800143c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001440:	2b80      	cmp	r3, #128	; 0x80
 8001442:	d104      	bne.n	800144e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <HAL_ETH_ErrorCallback+0x2c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f00a fa21 	bl	800b890 <osSemaphoreRelease>
  }
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	24004c48 	.word	0x24004c48

0800145c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0aa      	sub	sp, #168	; 0xa8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	2264      	movs	r2, #100	; 0x64
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f01e ff7e 	bl	8020380 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8001484:	4b85      	ldr	r3, [pc, #532]	; (800169c <low_level_init+0x240>)
 8001486:	4a86      	ldr	r2, [pc, #536]	; (80016a0 <low_level_init+0x244>)
 8001488:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800148a:	2300      	movs	r3, #0
 800148c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8001492:	23e1      	movs	r3, #225	; 0xe1
 8001494:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800149a:	2300      	movs	r3, #0
 800149c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800149e:	2300      	movs	r3, #0
 80014a0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80014a2:	4a7e      	ldr	r2, [pc, #504]	; (800169c <low_level_init+0x240>)
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80014aa:	4b7c      	ldr	r3, [pc, #496]	; (800169c <low_level_init+0x240>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80014b0:	4b7a      	ldr	r3, [pc, #488]	; (800169c <low_level_init+0x240>)
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <low_level_init+0x248>)
 80014b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80014b6:	4b79      	ldr	r3, [pc, #484]	; (800169c <low_level_init+0x240>)
 80014b8:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <low_level_init+0x24c>)
 80014ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80014bc:	4b77      	ldr	r3, [pc, #476]	; (800169c <low_level_init+0x240>)
 80014be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80014c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80014c4:	4875      	ldr	r0, [pc, #468]	; (800169c <low_level_init+0x240>)
 80014c6:	f001 faf3 	bl	8002ab0 <HAL_ETH_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80014d0:	2238      	movs	r2, #56	; 0x38
 80014d2:	2100      	movs	r1, #0
 80014d4:	4875      	ldr	r0, [pc, #468]	; (80016ac <low_level_init+0x250>)
 80014d6:	f01e ff53 	bl	8020380 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80014da:	4b74      	ldr	r3, [pc, #464]	; (80016ac <low_level_init+0x250>)
 80014dc:	2221      	movs	r2, #33	; 0x21
 80014de:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80014e0:	4b72      	ldr	r3, [pc, #456]	; (80016ac <low_level_init+0x250>)
 80014e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014e6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80014e8:	4b70      	ldr	r3, [pc, #448]	; (80016ac <low_level_init+0x250>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80014ee:	4870      	ldr	r0, [pc, #448]	; (80016b0 <low_level_init+0x254>)
 80014f0:	f014 febc 	bl	801626c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2206      	movs	r2, #6
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80014fc:	4b67      	ldr	r3, [pc, #412]	; (800169c <low_level_init+0x240>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8001508:	4b64      	ldr	r3, [pc, #400]	; (800169c <low_level_init+0x240>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	785a      	ldrb	r2, [r3, #1]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8001514:	4b61      	ldr	r3, [pc, #388]	; (800169c <low_level_init+0x240>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	789a      	ldrb	r2, [r3, #2]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8001520:	4b5e      	ldr	r3, [pc, #376]	; (800169c <low_level_init+0x240>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	78da      	ldrb	r2, [r3, #3]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800152c:	4b5b      	ldr	r3, [pc, #364]	; (800169c <low_level_init+0x240>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	791a      	ldrb	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <low_level_init+0x240>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	795a      	ldrb	r2, [r3, #5]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800154a:	859a      	strh	r2, [r3, #44]	; 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001552:	f043 030a 	orr.w	r3, r3, #10
 8001556:	b2da      	uxtb	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800155e:	2200      	movs	r2, #0
 8001560:	2101      	movs	r1, #1
 8001562:	2001      	movs	r0, #1
 8001564:	f00a f8b8 	bl	800b6d8 <osSemaphoreNew>
 8001568:	4603      	mov	r3, r0
 800156a:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <low_level_init+0x258>)
 800156c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	2001      	movs	r0, #1
 8001574:	f00a f8b0 	bl	800b6d8 <osSemaphoreNew>
 8001578:	4603      	mov	r3, r0
 800157a:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <low_level_init+0x25c>)
 800157c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800157e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001582:	2224      	movs	r2, #36	; 0x24
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f01e fefa 	bl	8020380 <memset>
  attributes.name = "EthIf";
 800158c:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <low_level_init+0x260>)
 800158e:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8001590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8001598:	2330      	movs	r3, #48	; 0x30
 800159a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800159e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a2:	461a      	mov	r2, r3
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4846      	ldr	r0, [pc, #280]	; (80016c0 <low_level_init+0x264>)
 80015a8:	f009 fedb 	bl	800b362 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80015ac:	4945      	ldr	r1, [pc, #276]	; (80016c4 <low_level_init+0x268>)
 80015ae:	4846      	ldr	r0, [pc, #280]	; (80016c8 <low_level_init+0x26c>)
 80015b0:	f000 fe32 	bl	8002218 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80015b4:	4844      	ldr	r0, [pc, #272]	; (80016c8 <low_level_init+0x26c>)
 80015b6:	f000 fe61 	bl	800227c <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80015ba:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d165      	bne.n	800168e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80015c2:	4841      	ldr	r0, [pc, #260]	; (80016c8 <low_level_init+0x26c>)
 80015c4:	f000 ff02 	bl	80023cc <LAN8742_GetLinkState>
 80015c8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80015cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	dc06      	bgt.n	80015e2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f015 fba9 	bl	8016d2c <netif_set_link_down>
      netif_set_down(netif);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f015 fb22 	bl	8016c24 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80015e0:	e057      	b.n	8001692 <low_level_init+0x236>
      switch (PHYLinkState)
 80015e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015e6:	3b02      	subs	r3, #2
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d82b      	bhi.n	8001644 <low_level_init+0x1e8>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <low_level_init+0x198>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001605 	.word	0x08001605
 80015f8:	08001617 	.word	0x08001617
 80015fc:	08001627 	.word	0x08001627
 8001600:	08001637 	.word	0x08001637
        duplex = ETH_FULLDUPLEX_MODE;
 8001604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800160c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001610:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001614:	e01f      	b.n	8001656 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800161c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001620:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001624:	e017      	b.n	8001656 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8001626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001634:	e00f      	b.n	8001656 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001642:	e008      	b.n	8001656 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8001644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800164c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001650:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001654:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	480f      	ldr	r0, [pc, #60]	; (800169c <low_level_init+0x240>)
 800165e:	f002 f823 	bl	80036a8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8001662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8001668:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <low_level_init+0x240>)
 8001676:	f002 f9eb 	bl	8003a50 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <low_level_init+0x240>)
 800167c:	f001 fb60 	bl	8002d40 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f015 fa51 	bl	8016b28 <netif_set_up>
    netif_set_link_up(netif);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f015 fb10 	bl	8016cac <netif_set_link_up>
}
 800168c:	e001      	b.n	8001692 <low_level_init+0x236>
    Error_Handler();
 800168e:	f7ff fa25 	bl	8000adc <Error_Handler>
}
 8001692:	bf00      	nop
 8001694:	37a8      	adds	r7, #168	; 0xa8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	24004c50 	.word	0x24004c50
 80016a0:	40028000 	.word	0x40028000
 80016a4:	24000104 	.word	0x24000104
 80016a8:	240000a4 	.word	0x240000a4
 80016ac:	24004d00 	.word	0x24004d00
 80016b0:	08025710 	.word	0x08025710
 80016b4:	24004c48 	.word	0x24004c48
 80016b8:	24004c4c 	.word	0x24004c4c
 80016bc:	08021448 	.word	0x08021448
 80016c0:	08001829 	.word	0x08001829
 80016c4:	24000004 	.word	0x24000004
 80016c8:	24004d38 	.word	0x24004d38

080016cc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b092      	sub	sp, #72	; 0x48
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2230      	movs	r2, #48	; 0x30
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f01e fe47 	bl	8020380 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2230      	movs	r2, #48	; 0x30
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f01e fe40 	bl	8020380 <memset>

  for(q = p; q != NULL; q = q->next)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	643b      	str	r3, [r7, #64]	; 0x40
 8001704:	e045      	b.n	8001792 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8001706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001708:	2b03      	cmp	r3, #3
 800170a:	d902      	bls.n	8001712 <low_level_output+0x46>
      return ERR_IF;
 800170c:	f06f 030b 	mvn.w	r3, #11
 8001710:	e065      	b.n	80017de <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8001712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001714:	6859      	ldr	r1, [r3, #4]
 8001716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	3348      	adds	r3, #72	; 0x48
 8001722:	443b      	add	r3, r7
 8001724:	3b3c      	subs	r3, #60	; 0x3c
 8001726:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8001728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800172a:	895b      	ldrh	r3, [r3, #10]
 800172c:	4619      	mov	r1, r3
 800172e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	3348      	adds	r3, #72	; 0x48
 800173a:	443b      	add	r3, r7
 800173c:	3b38      	subs	r3, #56	; 0x38
 800173e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8001740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001742:	2b00      	cmp	r3, #0
 8001744:	d011      	beq.n	800176a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8001746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	f107 000c 	add.w	r0, r7, #12
 800174e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001750:	460b      	mov	r3, r1
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	440b      	add	r3, r1
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	18c1      	adds	r1, r0, r3
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	3348      	adds	r3, #72	; 0x48
 8001764:	443b      	add	r3, r7
 8001766:	3b34      	subs	r3, #52	; 0x34
 8001768:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800176a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8001772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	3348      	adds	r3, #72	; 0x48
 800177e:	443b      	add	r3, r7
 8001780:	3b34      	subs	r3, #52	; 0x34
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
    }

    i++;
 8001786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001788:	3301      	adds	r3, #1
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800178c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
 8001792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1b6      	bne.n	8001706 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	891b      	ldrh	r3, [r3, #8]
 800179c:	461a      	mov	r2, r3
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <low_level_output+0x11c>)
 80017a0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <low_level_output+0x11c>)
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80017aa:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <low_level_output+0x11c>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f016 f881 	bl	80178b8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80017b6:	490c      	ldr	r1, [pc, #48]	; (80017e8 <low_level_output+0x11c>)
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <low_level_output+0x120>)
 80017ba:	f001 fbc5 	bl	8002f48 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80017be:	bf00      	nop
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <low_level_output+0x124>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00a f80f 	bl	800b7ec <osSemaphoreAcquire>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f5      	bne.n	80017c0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <low_level_output+0x120>)
 80017d6:	f001 fd36 	bl	8003246 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80017da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3748      	adds	r7, #72	; 0x48
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	24004d00 	.word	0x24004d00
 80017ec:	24004c50 	.word	0x24004c50
 80017f0:	24004c4c 	.word	0x24004c4c

080017f4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <low_level_input+0x2c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <low_level_input+0x30>)
 8001810:	f001 fbeb 	bl	8002fea <HAL_ETH_ReadData>
  }

  return p;
 8001814:	68fb      	ldr	r3, [r7, #12]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	24004c44 	.word	0x24004c44
 8001824:	24004c50 	.word	0x24004c50

08001828 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <ethernetif_input+0x50>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	4618      	mov	r0, r3
 8001842:	f009 ffd3 	bl	800b7ec <osSemaphoreAcquire>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f5      	bne.n	8001838 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800184c:	68b8      	ldr	r0, [r7, #8]
 800184e:	f7ff ffd1 	bl	80017f4 <low_level_input>
 8001852:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00a      	beq.n	8001870 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	4798      	blx	r3
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f015 ff7e 	bl	801776c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1ea      	bne.n	800184c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8001876:	e7df      	b.n	8001838 <ethernetif_input+0x10>
 8001878:	24004c48 	.word	0x24004c48

0800187c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d106      	bne.n	8001898 <ethernetif_init+0x1c>
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <ethernetif_init+0x48>)
 800188c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8001890:	490d      	ldr	r1, [pc, #52]	; (80018c8 <ethernetif_init+0x4c>)
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <ethernetif_init+0x50>)
 8001894:	f01e fe5c 	bl	8020550 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2273      	movs	r2, #115	; 0x73
 800189c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = IFNAME1;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2274      	movs	r2, #116	; 0x74
 80018a4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <ethernetif_init+0x54>)
 80018ac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <ethernetif_init+0x58>)
 80018b2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fdd1 	bl	800145c <low_level_init>

  return ERR_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	08021450 	.word	0x08021450
 80018c8:	08021474 	.word	0x08021474
 80018cc:	08021484 	.word	0x08021484
 80018d0:	080137ad 	.word	0x080137ad
 80018d4:	080016cd 	.word	0x080016cd

080018d8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	4809      	ldr	r0, [pc, #36]	; (800190c <pbuf_free_custom+0x34>)
 80018e8:	f014 fdb0 	bl	801644c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <pbuf_free_custom+0x38>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d107      	bne.n	8001904 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <pbuf_free_custom+0x38>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <pbuf_free_custom+0x3c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f009 ffc6 	bl	800b890 <osSemaphoreRelease>
  }
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	08025710 	.word	0x08025710
 8001910:	24004c44 	.word	0x24004c44
 8001914:	24004c48 	.word	0x24004c48

08001918 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800191c:	f000 feec 	bl	80026f8 <HAL_GetTick>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	; 0x38
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a5a      	ldr	r2, [pc, #360]	; (8001ab0 <HAL_ETH_MspInit+0x188>)
 8001946:	4293      	cmp	r3, r2
 8001948:	f040 80ae 	bne.w	8001aa8 <HAL_ETH_MspInit+0x180>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 800194e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001952:	4a58      	ldr	r2, [pc, #352]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 8001954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001958:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800195c:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 800195e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001966:	623b      	str	r3, [r7, #32]
 8001968:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800196a:	4b52      	ldr	r3, [pc, #328]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 800196c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001970:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800197a:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 800197c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001988:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 800198a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198e:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001998:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 800199a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019a6:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ac:	4a41      	ldr	r2, [pc, #260]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 80019ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b6:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	4a3a      	ldr	r2, [pc, #232]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d4:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	4a32      	ldr	r2, [pc, #200]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f2:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <HAL_ETH_MspInit+0x18c>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_13;
 8001a00:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a12:	230b      	movs	r3, #11
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4826      	ldr	r0, [pc, #152]	; (8001ab8 <HAL_ETH_MspInit+0x190>)
 8001a1e:	f002 fe0b 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001a22:	2332      	movs	r3, #50	; 0x32
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a32:	230b      	movs	r3, #11
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	481f      	ldr	r0, [pc, #124]	; (8001abc <HAL_ETH_MspInit+0x194>)
 8001a3e:	f002 fdfb 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 8001a42:	2386      	movs	r3, #134	; 0x86
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a52:	230b      	movs	r3, #11
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4818      	ldr	r0, [pc, #96]	; (8001ac0 <HAL_ETH_MspInit+0x198>)
 8001a5e:	f002 fdeb 	bl	8004638 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2105      	movs	r1, #5
 8001a66:	203d      	movs	r0, #61	; 0x3d
 8001a68:	f000 ff71 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001a6c:	203d      	movs	r0, #61	; 0x3d
 8001a6e:	f000 ff88 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */
//    memset((void *)0x30004000, 0, 1024*80);
    /* PHY REST-PIN */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a72:	2308      	movs	r3, #8
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	4619      	mov	r1, r3
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <HAL_ETH_MspInit+0x198>)
 8001a8a:	f002 fdd5 	bl	8004638 <HAL_GPIO_Init>
    /* Rest PHY */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2108      	movs	r1, #8
 8001a92:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <HAL_ETH_MspInit+0x198>)
 8001a94:	f002 ff80 	bl	8004998 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8001a98:	20c8      	movs	r0, #200	; 0xc8
 8001a9a:	f000 fe39 	bl	8002710 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2108      	movs	r1, #8
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <HAL_ETH_MspInit+0x198>)
 8001aa4:	f002 ff78 	bl	8004998 <HAL_GPIO_WritePin>
    
  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3738      	adds	r7, #56	; 0x38
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40028000 	.word	0x40028000
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	58021800 	.word	0x58021800
 8001abc:	58020800 	.word	0x58020800
 8001ac0:	58020000 	.word	0x58020000

08001ac4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <ETH_PHY_IO_Init+0x10>)
 8001aca:	f001 ffdb 	bl	8003a84 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	24004c50 	.word	0x24004c50

08001ad8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	4807      	ldr	r0, [pc, #28]	; (8001b18 <ETH_PHY_IO_ReadReg+0x30>)
 8001afc:	f001 fd2c 	bl	8003558 <HAL_ETH_ReadPHYRegister>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	e000      	b.n	8001b0e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	24004c50 	.word	0x24004c50

08001b1c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <ETH_PHY_IO_WriteReg+0x30>)
 8001b30:	f001 fd66 	bl	8003600 <HAL_ETH_WritePHYRegister>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e000      	b.n	8001b42 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	24004c50 	.word	0x24004c50

08001b50 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001b54:	f000 fdd0 	bl	80026f8 <HAL_GetTick>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0a0      	sub	sp, #128	; 0x80
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	2264      	movs	r2, #100	; 0x64
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f01e fc05 	bl	8020380 <memset>
  int32_t PHYLinkState = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b7e:	2300      	movs	r3, #0
 8001b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b82:	2300      	movs	r3, #0
 8001b84:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001b8a:	483a      	ldr	r0, [pc, #232]	; (8001c74 <ethernet_link_thread+0x114>)
 8001b8c:	f000 fc1e 	bl	80023cc <LAN8742_GetLinkState>
 8001b90:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8001b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00c      	beq.n	8001bbe <ethernet_link_thread+0x5e>
 8001ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	dc09      	bgt.n	8001bbe <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8001baa:	4833      	ldr	r0, [pc, #204]	; (8001c78 <ethernet_link_thread+0x118>)
 8001bac:	f001 f954 	bl	8002e58 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8001bb0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001bb2:	f015 f837 	bl	8016c24 <netif_set_down>
    netif_set_link_down(netif);
 8001bb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001bb8:	f015 f8b8 	bl	8016d2c <netif_set_link_down>
 8001bbc:	e055      	b.n	8001c6a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8001bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d14e      	bne.n	8001c6a <ethernet_link_thread+0x10a>
 8001bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	dd4b      	ble.n	8001c6a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8001bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bd4:	3b02      	subs	r3, #2
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d82a      	bhi.n	8001c30 <ethernet_link_thread+0xd0>
 8001bda:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <ethernet_link_thread+0x80>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001bf1 	.word	0x08001bf1
 8001be4:	08001c03 	.word	0x08001c03
 8001be8:	08001c13 	.word	0x08001c13
 8001bec:	08001c23 	.word	0x08001c23
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8001bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001bf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bfa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001c00:	e017      	b.n	8001c32 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c0a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001c10:	e00f      	b.n	8001c32 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8001c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c16:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001c20:	e007      	b.n	8001c32 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001c26:	2300      	movs	r3, #0
 8001c28:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001c2e:	e000      	b.n	8001c32 <ethernet_link_thread+0xd2>
    default:
      break;
 8001c30:	bf00      	nop
    }

    if(linkchanged)
 8001c32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d018      	beq.n	8001c6a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480e      	ldr	r0, [pc, #56]	; (8001c78 <ethernet_link_thread+0x118>)
 8001c40:	f001 fd32 	bl	80036a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8001c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c46:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8001c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c4a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	4619      	mov	r1, r3
 8001c52:	4809      	ldr	r0, [pc, #36]	; (8001c78 <ethernet_link_thread+0x118>)
 8001c54:	f001 fefc 	bl	8003a50 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <ethernet_link_thread+0x118>)
 8001c5a:	f001 f80f 	bl	8002c7c <HAL_ETH_Start>
      netif_set_up(netif);
 8001c5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c60:	f014 ff62 	bl	8016b28 <netif_set_up>
      netif_set_link_up(netif);
 8001c64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c66:	f015 f821 	bl	8016cac <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8001c6a:	2064      	movs	r0, #100	; 0x64
 8001c6c:	f009 fc0b 	bl	800b486 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001c70:	e78b      	b.n	8001b8a <ethernet_link_thread+0x2a>
 8001c72:	bf00      	nop
 8001c74:	24004d38 	.word	0x24004d38
 8001c78:	24004c50 	.word	0x24004c50

08001c7c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8001c84:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <HAL_ETH_RxAllocateCallback+0x54>)
 8001c86:	f014 fb6d 	bl	8016364 <memp_malloc_pool>
 8001c8a:	60f8      	str	r0, [r7, #12]
  if (p)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d014      	beq.n	8001cbc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f103 0220 	add.w	r2, r3, #32
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_ETH_RxAllocateCallback+0x58>)
 8001ca0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001caa:	9201      	str	r2, [sp, #4]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2241      	movs	r2, #65	; 0x41
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f015 fb9f 	bl	80173f8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8001cba:	e005      	b.n	8001cc8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	08025710 	.word	0x08025710
 8001cd4:	080018d9 	.word	0x080018d9
 8001cd8:	24004c44 	.word	0x24004c44

08001cdc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08d      	sub	sp, #52	; 0x34
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3b20      	subs	r3, #32
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	2200      	movs	r2, #0
 8001d06:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8001d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d103      	bne.n	8001d1e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8001d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e003      	b.n	8001d26 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d24:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8001d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d32:	e009      	b.n	8001d48 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	891a      	ldrh	r2, [r3, #8]
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d40:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f2      	bne.n	8001d34 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	623a      	str	r2, [r7, #32]
 8001d54:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	dd1d      	ble.n	8001d98 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f003 021f 	and.w	r2, r3, #31
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	4413      	add	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6c:	f3bf 8f4f 	dsb	sy
}
 8001d70:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d72:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_ETH_RxLinkCallback+0xcc>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3320      	adds	r3, #32
 8001d7e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	3b20      	subs	r3, #32
 8001d84:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	dcf2      	bgt.n	8001d72 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d8c:	f3bf 8f4f 	dsb	sy
}
 8001d90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d92:	f3bf 8f6f 	isb	sy
}
 8001d96:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001d98:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8001d9a:	bf00      	nop
 8001d9c:	3734      	adds	r7, #52	; 0x34
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f015 fcd9 	bl	801776c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dc8:	f000 fb88 	bl	80024dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dce:	490d      	ldr	r1, [pc, #52]	; (8001e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd4:	e002      	b.n	8001ddc <LoopCopyDataInit>

08001dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dda:	3304      	adds	r3, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de0:	d3f9      	bcc.n	8001dd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de4:	4c0a      	ldr	r4, [pc, #40]	; (8001e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de8:	e001      	b.n	8001dee <LoopFillZerobss>

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dec:	3204      	adds	r2, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df2:	f01e fa7b 	bl	80202ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df6:	f7fe fd0d 	bl	8000814 <main>
  bx  lr
 8001dfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dfc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e04:	240000a4 	.word	0x240000a4
  ldr r2, =_sidata
 8001e08:	0802617c 	.word	0x0802617c
  ldr r2, =_sbss
 8001e0c:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 8001e10:	2400d448 	.word	0x2400d448

08001e14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC3_IRQHandler>

08001e16 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e24:	b672      	cpsid	i
}
 8001e26:	bf00      	nop
 8001e28:	f7fe fe58 	bl	8000adc <Error_Handler>
 8001e2c:	e7fe      	b.n	8001e2c <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e007      	b.n	8001e44 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d9f4      	bls.n	8001e34 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	721a      	strb	r2, [r3, #8]
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d104      	bne.n	8001e70 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e66:	b672      	cpsid	i
}
 8001e68:	bf00      	nop
 8001e6a:	f7fe fe37 	bl	8000adc <Error_Handler>
 8001e6e:	e7fe      	b.n	8001e6e <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7a1b      	ldrb	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d904      	bls.n	8001e82 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
 8001e7c:	f7fe fe2e 	bl	8000adc <Error_Handler>
 8001e80:	e7fe      	b.n	8001e80 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7a1b      	ldrb	r3, [r3, #8]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	b2d1      	uxtb	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	7211      	strb	r1, [r2, #8]
 8001e8e:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001e90:	f3ef 8211 	mrs	r2, BASEPRI
 8001e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	60fa      	str	r2, [r7, #12]
 8001ea6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d104      	bne.n	8001ed0 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec6:	b672      	cpsid	i
}
 8001ec8:	bf00      	nop
 8001eca:	f7fe fe07 	bl	8000adc <Error_Handler>
 8001ece:	e7fe      	b.n	8001ece <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7a1b      	ldrb	r3, [r3, #8]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7a1b      	ldrb	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d904      	bls.n	8001eee <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
}
 8001ee6:	bf00      	nop
 8001ee8:	f7fe fdf8 	bl	8000adc <Error_Handler>
 8001eec:	e7fe      	b.n	8001eec <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7a1b      	ldrb	r3, [r3, #8]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001f02:	bf00      	nop
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <__retarget_lock_init_recursive+0x48>)
 8001f1c:	2216      	movs	r2, #22
 8001f1e:	601a      	str	r2, [r3, #0]
    return;
 8001f20:	e015      	b.n	8001f4e <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001f22:	200c      	movs	r0, #12
 8001f24:	f01e fa06 	bl	8020334 <malloc>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff6a 	bl	8001e16 <stm32_lock_init>
    return;
 8001f42:	e004      	b.n	8001f4e <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
}
 8001f46:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001f48:	f7fe fdc8 	bl	8000adc <Error_Handler>
 8001f4c:	e7fe      	b.n	8001f4c <__retarget_lock_init_recursive+0x40>
}
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2400d3c8 	.word	0x2400d3c8

08001f58 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d104      	bne.n	8001f70 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f66:	b672      	cpsid	i
}
 8001f68:	bf00      	nop
 8001f6a:	f7fe fdb7 	bl	8000adc <Error_Handler>
 8001f6e:	e7fe      	b.n	8001f6e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff70 	bl	8001e58 <stm32_lock_acquire>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d104      	bne.n	8001f98 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8e:	b672      	cpsid	i
}
 8001f90:	bf00      	nop
 8001f92:	f7fe fda3 	bl	8000adc <Error_Handler>
 8001f96:	e7fe      	b.n	8001f96 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff8c 	bl	8001eb8 <stm32_lock_release>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <components_init>:


/*************************** User Code Area ***************************/


void components_init(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
    
    netTaskHandle = osThreadNew(Net_Task_BaseOn_FreeRTOS, NULL, &netTask_attributes);
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <components_init+0x2c>)
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <components_init+0x30>)
 8001fb2:	f009 f9d6 	bl	800b362 <osThreadNew>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <components_init+0x34>)
 8001fba:	6013      	str	r3, [r2, #0]
    if (!netTaskHandle) {
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <components_init+0x34>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d104      	bne.n	8001fce <components_init+0x26>
        goto err;
 8001fc4:	bf00      	nop
    }
    return;
  err:
    for(;;)
    {
        osDelay(1);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f009 fa5d 	bl	800b486 <osDelay>
 8001fcc:	e7fb      	b.n	8001fc6 <components_init+0x1e>
    return;
 8001fce:	bf00      	nop
    }
    
}
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	0802571c 	.word	0x0802571c
 8001fd8:	08002051 	.word	0x08002051
 8001fdc:	24004d7c 	.word	0x24004d7c

08001fe0 <defualt_thread_entry>:


void defualt_thread_entry(void){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    
    
    sdram_speed_test();
 8001fe4:	f000 f804 	bl	8001ff0 <sdram_speed_test>
    lwiperf_example_init();
 8001fe8:	f009 f8a0 	bl	800b12c <lwiperf_example_init>
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <sdram_speed_test>:

uint32_t *test_buffer = (uint32_t *)0xC0000000;   //[(1024*1024*16)/4] __attribute__((section("sdram0")));

static volatile int start_time = 0, end_time = 0, final_value = 0;

void sdram_speed_test() {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
    
    start_time = HAL_GetTick();
 8001ff4:	f000 fb80 	bl	80026f8 <HAL_GetTick>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <sdram_speed_test+0x4c>)
 8001ffe:	601a      	str	r2, [r3, #0]
    memset(test_buffer, 0xA5A5, 1024*1024*32);
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <sdram_speed_test+0x50>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002008:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800200c:	4618      	mov	r0, r3
 800200e:	f01e f9b7 	bl	8020380 <memset>
    end_time = HAL_GetTick();
 8002012:	f000 fb71 	bl	80026f8 <HAL_GetTick>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <sdram_speed_test+0x54>)
 800201c:	601a      	str	r2, [r3, #0]
    final_value = end_time - start_time;
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <sdram_speed_test+0x54>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <sdram_speed_test+0x4c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <sdram_speed_test+0x58>)
 800202a:	6013      	str	r3, [r2, #0]
    printf("time :%d", final_value);
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <sdram_speed_test+0x58>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	4806      	ldr	r0, [pc, #24]	; (800204c <sdram_speed_test+0x5c>)
 8002034:	f01e fa8c 	bl	8020550 <iprintf>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	24004d80 	.word	0x24004d80
 8002040:	24000018 	.word	0x24000018
 8002044:	24004d84 	.word	0x24004d84
 8002048:	24004d88 	.word	0x24004d88
 800204c:	080214b4 	.word	0x080214b4

08002050 <Net_Task_BaseOn_FreeRTOS>:


void Net_Task_BaseOn_FreeRTOS(void *argumnet) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    
    int sct = 0; 
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
    static int res = 0;
    char *dtr = "Hello,word!@FreedomLi";
 800205c:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <Net_Task_BaseOn_FreeRTOS+0xc4>)
 800205e:	61bb      	str	r3, [r7, #24]
    struct sockaddr_in dst_ip ;
  retry:
    memset(&dst_ip,0,sizeof(struct sockaddr_in));
 8002060:	f107 0308 	add.w	r3, r7, #8
 8002064:	2210      	movs	r2, #16
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f01e f989 	bl	8020380 <memset>
    while(!netif_is_link_up(&gnetif))
 800206e:	e002      	b.n	8002076 <Net_Task_BaseOn_FreeRTOS+0x26>
    {
        osDelay(100);
 8002070:	2064      	movs	r0, #100	; 0x64
 8002072:	f009 fa08 	bl	800b486 <osDelay>
    while(!netif_is_link_up(&gnetif))
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <Net_Task_BaseOn_FreeRTOS+0xc8>)
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f5      	beq.n	8002070 <Net_Task_BaseOn_FreeRTOS+0x20>
    }
    sct = socket(AF_INET,SOCK_STREAM,0);
 8002084:	2200      	movs	r2, #0
 8002086:	2101      	movs	r1, #1
 8002088:	2002      	movs	r0, #2
 800208a:	f016 fb09 	bl	80186a0 <lwip_socket>
 800208e:	61f8      	str	r0, [r7, #28]
    if(sct<0){    
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	da02      	bge.n	800209c <Net_Task_BaseOn_FreeRTOS+0x4c>
        close(sct);
 8002096:	69f8      	ldr	r0, [r7, #28]
 8002098:	f016 f91c 	bl	80182d4 <lwip_close>
    }
    
    dst_ip.sin_port = htons(6666);
 800209c:	f641 200a 	movw	r0, #6666	; 0x1a0a
 80020a0:	f00e fd16 	bl	8010ad0 <lwip_htons>
 80020a4:	4603      	mov	r3, r0
 80020a6:	817b      	strh	r3, [r7, #10]
    dst_ip.sin_family = AF_INET;
 80020a8:	2302      	movs	r3, #2
 80020aa:	727b      	strb	r3, [r7, #9]
    dst_ip.sin_addr.s_addr = inet_addr("192.168.0.198");
 80020ac:	481b      	ldr	r0, [pc, #108]	; (800211c <Net_Task_BaseOn_FreeRTOS+0xcc>)
 80020ae:	f012 fce0 	bl	8014a72 <ipaddr_addr>
 80020b2:	4603      	mov	r3, r0
 80020b4:	60fb      	str	r3, [r7, #12]
    
    res = connect(sct,(struct sockaddr*)&dst_ip, sizeof(struct sockaddr_in));
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	2210      	movs	r2, #16
 80020bc:	4619      	mov	r1, r3
 80020be:	69f8      	ldr	r0, [r7, #28]
 80020c0:	f016 f95e 	bl	8018380 <lwip_connect>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a16      	ldr	r2, [pc, #88]	; (8002120 <Net_Task_BaseOn_FreeRTOS+0xd0>)
 80020c8:	6013      	str	r3, [r2, #0]
    if(res<0){
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <Net_Task_BaseOn_FreeRTOS+0xd0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da07      	bge.n	80020e2 <Net_Task_BaseOn_FreeRTOS+0x92>
        closesocket(sct);
 80020d2:	69f8      	ldr	r0, [r7, #28]
 80020d4:	f016 f8fe 	bl	80182d4 <lwip_close>
        osDelay(500);
 80020d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020dc:	f009 f9d3 	bl	800b486 <osDelay>
        goto retry;
 80020e0:	e7be      	b.n	8002060 <Net_Task_BaseOn_FreeRTOS+0x10>
    }
    while (1) {
        res = write(sct, dtr, strlen(dtr));
 80020e2:	69b8      	ldr	r0, [r7, #24]
 80020e4:	f7fe f8fc 	bl	80002e0 <strlen>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	69f8      	ldr	r0, [r7, #28]
 80020f0:	f016 fb34 	bl	801875c <lwip_write>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <Net_Task_BaseOn_FreeRTOS+0xd0>)
 80020f8:	6013      	str	r3, [r2, #0]
        if (res == -1) {
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <Net_Task_BaseOn_FreeRTOS+0xd0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d103      	bne.n	800210c <Net_Task_BaseOn_FreeRTOS+0xbc>
            closesocket(sct);
 8002104:	69f8      	ldr	r0, [r7, #28]
 8002106:	f016 f8e5 	bl	80182d4 <lwip_close>
            goto retry;
 800210a:	e7a9      	b.n	8002060 <Net_Task_BaseOn_FreeRTOS+0x10>
        }
        osDelay(20);
 800210c:	2014      	movs	r0, #20
 800210e:	f009 f9ba 	bl	800b486 <osDelay>
        res = write(sct, dtr, strlen(dtr));
 8002112:	e7e6      	b.n	80020e2 <Net_Task_BaseOn_FreeRTOS+0x92>
 8002114:	080214c0 	.word	0x080214c0
 8002118:	24000248 	.word	0x24000248
 800211c:	080214d8 	.word	0x080214d8
 8002120:	24004d8c 	.word	0x24004d8c

08002124 <MPU_Config>:
    }
}


void MPU_Config( void )
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 800212a:	f000 fc45 	bl	80029b8 <HAL_MPU_Disable>
  
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800212e:	2301      	movs	r3, #1
 8002130:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = 0x24000000;
 8002132:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8002136:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8002138:	2312      	movs	r3, #18
 800213a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800213c:	2303      	movs	r3, #3
 800213e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8002148:	2301      	movs	r3, #1
 800214a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 800214c:	2300      	movs	r3, #0
 800214e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8002150:	2301      	movs	r3, #1
 8002152:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8002154:	2300      	movs	r3, #0
 8002156:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800215c:	463b      	mov	r3, r7
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fc62 	bl	8002a28 <HAL_MPU_ConfigRegion>

  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8002164:	2301      	movs	r3, #1
 8002166:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = 0x20000000;
 8002168:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800216c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_128KB;
 800216e:	2310      	movs	r3, #16
 8002170:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002172:	2303      	movs	r3, #3
 8002174:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 800217e:	2301      	movs	r3, #1
 8002180:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 8002182:	2301      	movs	r3, #1
 8002184:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8002186:	2301      	movs	r3, #1
 8002188:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800218a:	2300      	movs	r3, #0
 800218c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002192:	463b      	mov	r3, r7
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fc47 	bl	8002a28 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU attributes as Device not cacheable 
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800219e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80021a2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80021a4:	2310      	movs	r3, #16
 80021a6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80021a8:	2303      	movs	r3, #3
 80021aa:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80021b8:	2302      	movs	r3, #2
 80021ba:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021bc:	2300      	movs	r3, #0
 80021be:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80021c0:	2300      	movs	r3, #0
 80021c2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021c8:	463b      	mov	r3, r7
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fc2c 	bl	8002a28 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30044000;
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MPU_Config+0xf0>)
 80021d6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80021d8:	230e      	movs	r3, #14
 80021da:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80021dc:	2303      	movs	r3, #3
 80021de:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80021ec:	2303      	movs	r3, #3
 80021ee:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80021f4:	2300      	movs	r3, #0
 80021f6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021fc:	463b      	mov	r3, r7
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fc12 	bl	8002a28 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002204:	2004      	movs	r0, #4
 8002206:	f000 fbef 	bl	80029e8 <HAL_MPU_Enable>
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	30044000 	.word	0x30044000

08002218 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00b      	beq.n	8002240 <LAN8742_RegisterBusIO+0x28>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <LAN8742_RegisterBusIO+0x28>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <LAN8742_RegisterBusIO+0x28>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002240:	f04f 33ff 	mov.w	r3, #4294967295
 8002244:	e014      	b.n	8002270 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d17c      	bne.n	8002396 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2220      	movs	r2, #32
 80022ae:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e01c      	b.n	80022f0 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f107 0208 	add.w	r2, r7, #8
 80022be:	2112      	movs	r1, #18
 80022c0:	6978      	ldr	r0, [r7, #20]
 80022c2:	4798      	blx	r3
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	da03      	bge.n	80022d2 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80022ca:	f06f 0304 	mvn.w	r3, #4
 80022ce:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80022d0:	e00b      	b.n	80022ea <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d105      	bne.n	80022ea <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
         break;
 80022e8:	e005      	b.n	80022f6 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b1f      	cmp	r3, #31
 80022f4:	d9df      	bls.n	80022b6 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b1f      	cmp	r3, #31
 80022fc:	d902      	bls.n	8002304 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80022fe:	f06f 0302 	mvn.w	r3, #2
 8002302:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d145      	bne.n	8002396 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6810      	ldr	r0, [r2, #0]
 8002312:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002316:	2100      	movs	r1, #0
 8002318:	4798      	blx	r3
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	db37      	blt.n	8002390 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6810      	ldr	r0, [r2, #0]
 8002328:	f107 0208 	add.w	r2, r7, #8
 800232c:	2100      	movs	r1, #0
 800232e:	4798      	blx	r3
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	db28      	blt.n	8002388 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	4798      	blx	r3
 800233c:	4603      	mov	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002340:	e01c      	b.n	800237c <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	4798      	blx	r3
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002354:	d80e      	bhi.n	8002374 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6810      	ldr	r0, [r2, #0]
 800235e:	f107 0208 	add.w	r2, r7, #8
 8002362:	2100      	movs	r1, #0
 8002364:	4798      	blx	r3
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	da07      	bge.n	800237c <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800236c:	f06f 0304 	mvn.w	r3, #4
 8002370:	613b      	str	r3, [r7, #16]
                 break;
 8002372:	e010      	b.n	8002396 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002374:	f06f 0301 	mvn.w	r3, #1
 8002378:	613b      	str	r3, [r7, #16]
               break;
 800237a:	e00c      	b.n	8002396 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1dd      	bne.n	8002342 <LAN8742_Init+0xc6>
 8002386:	e006      	b.n	8002396 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002388:	f06f 0304 	mvn.w	r3, #4
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	e002      	b.n	8002396 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002390:	f06f 0303 	mvn.w	r3, #3
 8002394:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d112      	bne.n	80023c2 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	4798      	blx	r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80023a6:	bf00      	nop
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4798      	blx	r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80023ba:	d9f5      	bls.n	80023a8 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80023c2:	693b      	ldr	r3, [r7, #16]
 }
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6810      	ldr	r0, [r2, #0]
 80023e0:	f107 020c 	add.w	r2, r7, #12
 80023e4:	2101      	movs	r1, #1
 80023e6:	4798      	blx	r3
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da02      	bge.n	80023f4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023ee:	f06f 0304 	mvn.w	r3, #4
 80023f2:	e06e      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6810      	ldr	r0, [r2, #0]
 80023fc:	f107 020c 	add.w	r2, r7, #12
 8002400:	2101      	movs	r1, #1
 8002402:	4798      	blx	r3
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	da02      	bge.n	8002410 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800240a:	f06f 0304 	mvn.w	r3, #4
 800240e:	e060      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800241a:	2301      	movs	r3, #1
 800241c:	e059      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6810      	ldr	r0, [r2, #0]
 8002426:	f107 020c 	add.w	r2, r7, #12
 800242a:	2100      	movs	r1, #0
 800242c:	4798      	blx	r3
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	da02      	bge.n	800243a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002434:	f06f 0304 	mvn.w	r3, #4
 8002438:	e04b      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11b      	bne.n	800247c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <LAN8742_GetLinkState+0x90>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002458:	2302      	movs	r3, #2
 800245a:	e03a      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002466:	2303      	movs	r3, #3
 8002468:	e033      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002474:	2304      	movs	r3, #4
 8002476:	e02c      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002478:	2305      	movs	r3, #5
 800247a:	e02a      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6810      	ldr	r0, [r2, #0]
 8002484:	f107 020c 	add.w	r2, r7, #12
 8002488:	211f      	movs	r1, #31
 800248a:	4798      	blx	r3
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	da02      	bge.n	8002498 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002492:	f06f 0304 	mvn.w	r3, #4
 8002496:	e01c      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80024a2:	2306      	movs	r3, #6
 80024a4:	e015      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 031c 	and.w	r3, r3, #28
 80024ac:	2b18      	cmp	r3, #24
 80024ae:	d101      	bne.n	80024b4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80024b0:	2302      	movs	r3, #2
 80024b2:	e00e      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 031c 	and.w	r3, r3, #28
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d101      	bne.n	80024c2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80024be:	2303      	movs	r3, #3
 80024c0:	e007      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 031c 	and.w	r3, r3, #28
 80024c8:	2b14      	cmp	r3, #20
 80024ca:	d101      	bne.n	80024d0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80024cc:	2304      	movs	r3, #4
 80024ce:	e000      	b.n	80024d2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80024d0:	2305      	movs	r3, #5
    }				
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024e0:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <SystemInit+0xe4>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	4a36      	ldr	r2, [pc, #216]	; (80025c0 <SystemInit+0xe4>)
 80024e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024f0:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <SystemInit+0xe8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	2b06      	cmp	r3, #6
 80024fa:	d807      	bhi.n	800250c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024fc:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <SystemInit+0xe8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 030f 	bic.w	r3, r3, #15
 8002504:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <SystemInit+0xe8>)
 8002506:	f043 0307 	orr.w	r3, r3, #7
 800250a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800250c:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <SystemInit+0xec>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2d      	ldr	r2, [pc, #180]	; (80025c8 <SystemInit+0xec>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <SystemInit+0xec>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <SystemInit+0xec>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4929      	ldr	r1, [pc, #164]	; (80025c8 <SystemInit+0xec>)
 8002524:	4b29      	ldr	r3, [pc, #164]	; (80025cc <SystemInit+0xf0>)
 8002526:	4013      	ands	r3, r2
 8002528:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <SystemInit+0xe8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <SystemInit+0xe8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 030f 	bic.w	r3, r3, #15
 800253e:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <SystemInit+0xe8>)
 8002540:	f043 0307 	orr.w	r3, r3, #7
 8002544:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <SystemInit+0xec>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <SystemInit+0xec>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <SystemInit+0xec>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <SystemInit+0xec>)
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <SystemInit+0xf4>)
 800255c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <SystemInit+0xec>)
 8002560:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <SystemInit+0xf8>)
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <SystemInit+0xec>)
 8002566:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <SystemInit+0xfc>)
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <SystemInit+0xec>)
 800256c:	2200      	movs	r2, #0
 800256e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <SystemInit+0xec>)
 8002572:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <SystemInit+0xfc>)
 8002574:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <SystemInit+0xec>)
 8002578:	2200      	movs	r2, #0
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <SystemInit+0xec>)
 800257e:	4a16      	ldr	r2, [pc, #88]	; (80025d8 <SystemInit+0xfc>)
 8002580:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <SystemInit+0xec>)
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <SystemInit+0xec>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <SystemInit+0xec>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002592:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <SystemInit+0xec>)
 8002596:	2200      	movs	r2, #0
 8002598:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <SystemInit+0x100>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <SystemInit+0x104>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025a6:	d202      	bcs.n	80025ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <SystemInit+0x108>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <SystemInit+0x10c>)
 80025b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80025b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	52002000 	.word	0x52002000
 80025c8:	58024400 	.word	0x58024400
 80025cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80025d0:	02020200 	.word	0x02020200
 80025d4:	01ff0000 	.word	0x01ff0000
 80025d8:	01010280 	.word	0x01010280
 80025dc:	5c001000 	.word	0x5c001000
 80025e0:	ffff0000 	.word	0xffff0000
 80025e4:	51008108 	.word	0x51008108
 80025e8:	52004000 	.word	0x52004000

080025ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f2:	2003      	movs	r0, #3
 80025f4:	f000 f9a0 	bl	8002938 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025f8:	f003 f806 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_Init+0x68>)
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	4913      	ldr	r1, [pc, #76]	; (8002658 <HAL_Init+0x6c>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
 8002614:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_Init+0x68>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <HAL_Init+0x6c>)
 8002620:	5cd3      	ldrb	r3, [r2, r3]
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
 800262c:	4a0b      	ldr	r2, [pc, #44]	; (800265c <HAL_Init+0x70>)
 800262e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002630:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <HAL_Init+0x74>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002636:	200f      	movs	r0, #15
 8002638:	f000 f814 	bl	8002664 <HAL_InitTick>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e002      	b.n	800264c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002646:	f7fe fb01 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	58024400 	.word	0x58024400
 8002658:	08025740 	.word	0x08025740
 800265c:	24000020 	.word	0x24000020
 8002660:	2400001c 	.word	0x2400001c

08002664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_InitTick+0x60>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e021      	b.n	80026bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_InitTick+0x64>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_InitTick+0x60>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002686:	fbb3 f3f1 	udiv	r3, r3, r1
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f985 	bl	800299e <HAL_SYSTICK_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e00e      	b.n	80026bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d80a      	bhi.n	80026ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f000 f94f 	bl	800294e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b0:	4a06      	ldr	r2, [pc, #24]	; (80026cc <HAL_InitTick+0x68>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	24000028 	.word	0x24000028
 80026c8:	2400001c 	.word	0x2400001c
 80026cc:	24000024 	.word	0x24000024

080026d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_IncTick+0x20>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x24>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_IncTick+0x24>)
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	24000028 	.word	0x24000028
 80026f4:	24004d90 	.word	0x24004d90

080026f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return uwTick;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_GetTick+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	24004d90 	.word	0x24004d90

08002710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff ffee 	bl	80026f8 <HAL_GetTick>
 800271c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d005      	beq.n	8002736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_Delay+0x44>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002736:	bf00      	nop
 8002738:	f7ff ffde 	bl	80026f8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	429a      	cmp	r2, r3
 8002746:	d8f7      	bhi.n	8002738 <HAL_Delay+0x28>
  {
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	24000028 	.word	0x24000028

08002758 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_GetREVID+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0c1b      	lsrs	r3, r3, #16
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	5c001000 	.word	0x5c001000

08002770 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	58000400 	.word	0x58000400

08002798 <__NVIC_SetPriorityGrouping>:
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <__NVIC_SetPriorityGrouping+0x40>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c6:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <__NVIC_SetPriorityGrouping+0x40>)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	60d3      	str	r3, [r2, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00
 80027dc:	05fa0000 	.word	0x05fa0000

080027e0 <__NVIC_GetPriorityGrouping>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <__NVIC_EnableIRQ+0x38>)
 8002816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db0a      	blt.n	8002862 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	490c      	ldr	r1, [pc, #48]	; (8002884 <__NVIC_SetPriority+0x4c>)
 8002852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002856:	0112      	lsls	r2, r2, #4
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	440b      	add	r3, r1
 800285c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002860:	e00a      	b.n	8002878 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4908      	ldr	r1, [pc, #32]	; (8002888 <__NVIC_SetPriority+0x50>)
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b04      	subs	r3, #4
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	440b      	add	r3, r1
 8002876:	761a      	strb	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <NVIC_EncodePriority>:
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f1c3 0307 	rsb	r3, r3, #7
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf28      	it	cs
 80028aa:	2304      	movcs	r3, #4
 80028ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d902      	bls.n	80028bc <NVIC_EncodePriority+0x30>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b03      	subs	r3, #3
 80028ba:	e000      	b.n	80028be <NVIC_EncodePriority+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43d9      	mvns	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	4313      	orrs	r3, r2
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002904:	d301      	bcc.n	800290a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002906:	2301      	movs	r3, #1
 8002908:	e00f      	b.n	800292a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <SysTick_Config+0x40>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002912:	210f      	movs	r1, #15
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f7ff ff8e 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <SysTick_Config+0x40>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <SysTick_Config+0x40>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff29 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800295c:	f7ff ff40 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 8002960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7ff ff90 	bl	800288c <NVIC_EncodePriority>
 800296c:	4602      	mov	r2, r0
 800296e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff5f 	bl	8002838 <__NVIC_SetPriority>
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800298c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff33 	bl	80027fc <__NVIC_EnableIRQ>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ffa4 	bl	80028f4 <SysTick_Config>
 80029ac:	4603      	mov	r3, r0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029bc:	f3bf 8f5f 	dmb	sy
}
 80029c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_MPU_Disable+0x28>)
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <HAL_MPU_Disable+0x28>)
 80029c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029cc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_MPU_Disable+0x2c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00
 80029e4:	e000ed90 	.word	0xe000ed90

080029e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80029f0:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <HAL_MPU_Enable+0x38>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_MPU_Enable+0x3c>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_MPU_Enable+0x3c>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002a06:	f3bf 8f4f 	dsb	sy
}
 8002a0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a0c:	f3bf 8f6f 	isb	sy
}
 8002a10:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000ed90 	.word	0xe000ed90
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	785a      	ldrb	r2, [r3, #1]
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_MPU_ConfigRegion+0x84>)
 8002a36:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d029      	beq.n	8002a94 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_MPU_ConfigRegion+0x84>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7b1b      	ldrb	r3, [r3, #12]
 8002a4c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7adb      	ldrb	r3, [r3, #11]
 8002a52:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7a9b      	ldrb	r3, [r3, #10]
 8002a5a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7b5b      	ldrb	r3, [r3, #13]
 8002a62:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7b9b      	ldrb	r3, [r3, #14]
 8002a6a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7bdb      	ldrb	r3, [r3, #15]
 8002a72:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7a5b      	ldrb	r3, [r3, #9]
 8002a7a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7a1b      	ldrb	r3, [r3, #8]
 8002a82:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a84:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a8c:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a8e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a90:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002a92:	e005      	b.n	8002aa0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_MPU_ConfigRegion+0x84>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002a9a:	4b04      	ldr	r3, [pc, #16]	; (8002aac <HAL_MPU_ConfigRegion+0x84>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed90 	.word	0xe000ed90

08002ab0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0cf      	b.n	8002c62 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2223      	movs	r2, #35	; 0x23
 8002ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7fe ff27 	bl	8001928 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ada:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <HAL_ETH_Init+0x1bc>)
 8002adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ae0:	4a62      	ldr	r2, [pc, #392]	; (8002c6c <HAL_ETH_Init+0x1bc>)
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002aea:	4b60      	ldr	r3, [pc, #384]	; (8002c6c <HAL_ETH_Init+0x1bc>)
 8002aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7a1b      	ldrb	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d103      	bne.n	8002b08 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7ff fe35 	bl	8002770 <HAL_SYSCFG_ETHInterfaceSelect>
 8002b06:	e003      	b.n	8002b10 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002b08:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002b0c:	f7ff fe30 	bl	8002770 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002b10:	4b57      	ldr	r3, [pc, #348]	; (8002c70 <HAL_ETH_Init+0x1c0>)
 8002b12:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7ff fde4 	bl	80026f8 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b32:	e011      	b.n	8002b58 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b34:	f7ff fde0 	bl	80026f8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b42:	d909      	bls.n	8002b58 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	22e0      	movs	r2, #224	; 0xe0
 8002b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e084      	b.n	8002c62 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e4      	bne.n	8002b34 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 ff8a 	bl	8003a84 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b70:	f002 fec4 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4a3f      	ldr	r2, [pc, #252]	; (8002c74 <HAL_ETH_Init+0x1c4>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	0c9a      	lsrs	r2, r3, #18
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3a01      	subs	r2, #1
 8002b84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f001 f983 	bl	8003e94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002b9a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ba6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002baa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	22e0      	movs	r2, #224	; 0xe0
 8002bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e049      	b.n	8002c62 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002bda:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <HAL_ETH_Init+0x1c8>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6952      	ldr	r2, [r2, #20]
 8002be2:	0051      	lsls	r1, r2, #1
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f001 f9eb 	bl	8003fce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f001 fa31 	bl	8004060 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	3305      	adds	r3, #5
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	021a      	lsls	r2, r3, #8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	3303      	adds	r3, #3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	061a      	lsls	r2, r3, #24
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	3301      	adds	r3, #1
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c4a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	58024400 	.word	0x58024400
 8002c70:	58000400 	.word	0x58000400
 8002c74:	431bde83 	.word	0x431bde83
 8002c78:	ffff8001 	.word	0xffff8001

08002c7c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d153      	bne.n	8002d36 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2223      	movs	r2, #35	; 0x23
 8002c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fa64 	bl	800316a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0202 	orr.w	r2, r2, #2
 8002cb0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cde:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cee:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d0a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d16:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8002d22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d26:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2223      	movs	r2, #35	; 0x23
 8002d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d179      	bne.n	8002e46 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2223      	movs	r2, #35	; 0x23
 8002d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <HAL_ETH_Start_IT+0x110>)
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_ETH_Start_IT+0x114>)
 8002d82:	430b      	orrs	r3, r1
 8002d84:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f9eb 	bl	800316a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0202 	orr.w	r2, r2, #2
 8002da2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002de0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dfc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e08:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8002e14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e18:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e24:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8002e30:	430b      	orrs	r3, r1
 8002e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e36:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2223      	movs	r2, #35	; 0x23
 8002e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	0c020060 	.word	0x0c020060
 8002e54:	0c20c000 	.word	0x0c20c000

08002e58 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	2b23      	cmp	r3, #35	; 0x23
 8002e68:	d165      	bne.n	8002f36 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2223      	movs	r2, #35	; 0x23
 8002e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e7a:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_ETH_Stop_IT+0xec>)
 8002e84:	400b      	ands	r3, r1
 8002e86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e8a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e96:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ea6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ec2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0202 	bic.w	r2, r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e00e      	b.n	8002f1e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	3212      	adds	r2, #18
 8002f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d9ed      	bls.n	8002f00 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	ffff2f3e 	.word	0xffff2f3e

08002f48 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e03a      	b.n	8002fe2 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f72:	2b23      	cmp	r3, #35	; 0x23
 8002f74:	d134      	bne.n	8002fe0 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f001 f8ca 	bl	800411c <ETH_Prepare_Tx_Descriptors>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	f043 0202 	orr.w	r2, r3, #2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e01f      	b.n	8002fe2 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002fa2:	f3bf 8f4f 	dsb	sy
}
 8002fa6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d904      	bls.n	8002fc4 <HAL_ETH_Transmit_IT+0x7c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	1f1a      	subs	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3106      	adds	r1, #6
 8002fd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fd8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b088      	sub	sp, #32
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0a5      	b.n	8003162 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301c:	2b23      	cmp	r3, #35	; 0x23
 800301e:	d001      	beq.n	8003024 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e09e      	b.n	8003162 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	3212      	adds	r2, #18
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303a:	f1c3 0304 	rsb	r3, r3, #4
 800303e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003040:	e067      	b.n	8003112 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <HAL_ETH_ReadData+0x88>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d03d      	beq.n	80030ee <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00d      	beq.n	80030b8 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80030c8:	461a      	mov	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f7fe fe05 	bl	8001cdc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	441a      	add	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d902      	bls.n	8003100 <HAL_ETH_ReadData+0x116>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3b04      	subs	r3, #4
 80030fe:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	3212      	adds	r2, #18
 8003106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3301      	adds	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	db06      	blt.n	8003128 <HAL_ETH_ReadData+0x13e>
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d202      	bcs.n	8003128 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d08c      	beq.n	8003042 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	441a      	add	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f814 	bl	800316a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d108      	bne.n	8003160 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b088      	sub	sp, #32
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003176:	2301      	movs	r3, #1
 8003178:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800317e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	3212      	adds	r2, #18
 8003186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003190:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003192:	e03b      	b.n	800320c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d112      	bne.n	80031c2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800319c:	f107 030c 	add.w	r3, r7, #12
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe fd6b 	bl	8001c7c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	74fb      	strb	r3, [r7, #19]
 80031b0:	e007      	b.n	80031c2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	461a      	mov	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	461a      	mov	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d021      	beq.n	800320c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80031c8:	f3bf 8f5f 	dmb	sy
}
 80031cc:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	e003      	b.n	80031e8 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80031e6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d902      	bls.n	80031fa <ETH_UpdateDescriptor+0x90>
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3b04      	subs	r3, #4
 80031f8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	3212      	adds	r2, #18
 8003200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003204:	617b      	str	r3, [r7, #20]
      desccount--;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	3b01      	subs	r3, #1
 800320a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <ETH_UpdateDescriptor+0xae>
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1bd      	bne.n	8003194 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	429a      	cmp	r2, r3
 8003220:	d00d      	beq.n	800323e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322a:	461a      	mov	r2, r3
 800322c:	2300      	movs	r3, #0
 800322e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800323e:	bf00      	nop
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3318      	adds	r3, #24
 8003252:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003264:	e03f      	b.n	80032e6 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8003266:	2301      	movs	r3, #1
 8003268:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3b01      	subs	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	3304      	adds	r3, #4
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	3301      	adds	r3, #1
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800328e:	7bbb      	ldrb	r3, [r7, #14]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d028      	beq.n	80032e6 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68d9      	ldr	r1, [r3, #12]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	440b      	add	r3, r1
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	db1b      	blt.n	80032e2 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	3304      	adds	r3, #4
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fd78 	bl	8001dac <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	3304      	adds	r3, #4
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	2200      	movs	r2, #0
 80032c8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	3301      	adds	r3, #1
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c
 80032e0:	e001      	b.n	80032e6 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_ETH_ReleaseTxPacket+0xac>
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1b9      	bne.n	8003266 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d115      	bne.n	8003344 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003320:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d10b      	bne.n	8003344 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003334:	461a      	mov	r2, r3
 8003336:	f248 0340 	movw	r3, #32832	; 0x8040
 800333a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe f854 	bl	80013ec <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	d115      	bne.n	8003384 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003360:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10b      	bne.n	8003384 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003374:	461a      	mov	r2, r3
 8003376:	f248 0301 	movw	r3, #32769	; 0x8001
 800337a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe f844 	bl	800140c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003398:	d153      	bne.n	8003442 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80033a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ae:	d148      	bne.n	8003442 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f043 0208 	orr.w	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80033cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d4:	d11e      	bne.n	8003414 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033de:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80033e2:	f241 1302 	movw	r3, #4354	; 0x1102
 80033e6:	4013      	ands	r3, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003402:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003406:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	22e0      	movs	r2, #224	; 0xe0
 800340e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003412:	e013      	b.n	800343c <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003420:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003432:	461a      	mov	r2, r3
 8003434:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8003438:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fd fff5 	bl	800142c <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800344a:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800345c:	2b00      	cmp	r3, #0
 800345e:	d019      	beq.n	8003494 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	22e0      	movs	r2, #224	; 0xe0
 8003482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd ffd0 	bl	800142c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d10f      	bne.n	80034c4 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034ac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f830 	bl	800351c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d10f      	bne.n	80034f4 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f822 	bl	8003530 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <HAL_ETH_IRQHandler+0x21c>)
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_ETH_IRQHandler+0x21c>)
 8003502:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f81b 	bl	8003544 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	58000080 	.word	0x58000080

0800351c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e03e      	b.n	80035f8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003582:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	055b      	lsls	r3, r3, #21
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	041b      	lsls	r3, r3, #16
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f043 030c 	orr.w	r3, r3, #12
 80035a6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80035ba:	f7ff f89d 	bl	80026f8 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80035c0:	e009      	b.n	80035d6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80035c2:	f7ff f899 	bl	80026f8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035d0:	d901      	bls.n	80035d6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e010      	b.n	80035f8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ed      	bne.n	80035c2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e03c      	b.n	800369c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800362a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	055b      	lsls	r3, r3, #21
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	041b      	lsls	r3, r3, #16
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 030c 	bic.w	r3, r3, #12
 800364e:	f043 0304 	orr.w	r3, r3, #4
 8003652:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b29a      	uxth	r2, r3
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8003662:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8003666:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800366e:	f7ff f843 	bl	80026f8 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003674:	e009      	b.n	800368a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003676:	f7ff f83f 	bl	80026f8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003684:	d901      	bls.n	800368a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e008      	b.n	800369c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1ed      	bne.n	8003676 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40028000 	.word	0x40028000

080036a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e1c3      	b.n	8003a44 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800374a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf14      	ite	ne
 8003752:	2301      	movne	r3, #1
 8003754:	2300      	moveq	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf14      	ite	ne
 80037a2:	2301      	movne	r3, #1
 80037a4:	2300      	moveq	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800383a:	2b00      	cmp	r3, #0
 800383c:	bf14      	ite	ne
 800383e:	2301      	movne	r3, #1
 8003840:	2300      	moveq	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf14      	ite	ne
 8003866:	2301      	movne	r3, #1
 8003868:	2300      	moveq	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	0e5b      	lsrs	r3, r3, #25
 8003906:	f003 021f 	and.w	r2, r3, #31
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf14      	ite	ne
 8003946:	2301      	movne	r3, #1
 8003948:	2300      	moveq	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	b29a      	uxth	r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80039d0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80039e0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e00b      	b.n	8003a7c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d105      	bne.n	8003a7a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f86d 	bl	8003b50 <ETH_SetMACConfig>

    return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
  }
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003a9e:	f001 ff2d 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 8003aa2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d908      	bls.n	8003abe <HAL_ETH_SetMDIOClockRange+0x3a>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d804      	bhi.n	8003abe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e027      	b.n	8003b0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d908      	bls.n	8003ad8 <HAL_ETH_SetMDIOClockRange+0x54>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d204      	bcs.n	8003ad8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e01a      	b.n	8003b0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d303      	bcc.n	8003ae8 <HAL_ETH_SetMDIOClockRange+0x64>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d911      	bls.n	8003b0c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4a10      	ldr	r2, [pc, #64]	; (8003b2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d908      	bls.n	8003b02 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d804      	bhi.n	8003b02 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	e005      	b.n	8003b0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e000      	b.n	8003b0e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003b0c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	01312cff 	.word	0x01312cff
 8003b24:	02160ebf 	.word	0x02160ebf
 8003b28:	03938700 	.word	0x03938700
 8003b2c:	05f5e0ff 	.word	0x05f5e0ff
 8003b30:	08f0d17f 	.word	0x08f0d17f

08003b34 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003b62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	791b      	ldrb	r3, [r3, #4]
 8003b68:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003b6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	7b1b      	ldrb	r3, [r3, #12]
 8003b70:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003b72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	7b5b      	ldrb	r3, [r3, #13]
 8003b78:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003b7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	7b9b      	ldrb	r3, [r3, #14]
 8003b80:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003b82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	7bdb      	ldrb	r3, [r3, #15]
 8003b88:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003b8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	7c12      	ldrb	r2, [r2, #16]
 8003b90:	2a00      	cmp	r2, #0
 8003b92:	d102      	bne.n	8003b9a <ETH_SetMACConfig+0x4a>
 8003b94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b98:	e000      	b.n	8003b9c <ETH_SetMACConfig+0x4c>
 8003b9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003b9c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	7c52      	ldrb	r2, [r2, #17]
 8003ba2:	2a00      	cmp	r2, #0
 8003ba4:	d102      	bne.n	8003bac <ETH_SetMACConfig+0x5c>
 8003ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003baa:	e000      	b.n	8003bae <ETH_SetMACConfig+0x5e>
 8003bac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003bae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	7c9b      	ldrb	r3, [r3, #18]
 8003bb4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003bb6:	431a      	orrs	r2, r3
               macconf->Speed |
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003bbc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003bc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	7f1b      	ldrb	r3, [r3, #28]
 8003bc8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003bca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	7f5b      	ldrb	r3, [r3, #29]
 8003bd0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003bd2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	7f92      	ldrb	r2, [r2, #30]
 8003bd8:	2a00      	cmp	r2, #0
 8003bda:	d102      	bne.n	8003be2 <ETH_SetMACConfig+0x92>
 8003bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be0:	e000      	b.n	8003be4 <ETH_SetMACConfig+0x94>
 8003be2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003be4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	7fdb      	ldrb	r3, [r3, #31]
 8003bea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003bec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003bf4:	2a00      	cmp	r2, #0
 8003bf6:	d102      	bne.n	8003bfe <ETH_SetMACConfig+0xae>
 8003bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfc:	e000      	b.n	8003c00 <ETH_SetMACConfig+0xb0>
 8003bfe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003c00:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003c06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c0e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003c10:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <ETH_SetMACConfig+0x22c>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	68f9      	ldr	r1, [r7, #12]
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c3a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003c3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c44:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c4e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003c50:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003c58:	2a00      	cmp	r2, #0
 8003c5a:	d102      	bne.n	8003c62 <ETH_SetMACConfig+0x112>
 8003c5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c60:	e000      	b.n	8003c64 <ETH_SetMACConfig+0x114>
 8003c62:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003c64:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <ETH_SetMACConfig+0x230>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	68f9      	ldr	r1, [r7, #12]
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c88:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <ETH_SetMACConfig+0x234>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	68f9      	ldr	r1, [r7, #12]
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003cac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003cb2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	d101      	bne.n	8003cc2 <ETH_SetMACConfig+0x172>
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	e000      	b.n	8003cc4 <ETH_SetMACConfig+0x174>
 8003cc2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003cc4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cd6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003cda:	4013      	ands	r3, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003cec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003cf4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f023 0103 	bic.w	r1, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003d1a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003d36:	2a00      	cmp	r2, #0
 8003d38:	d101      	bne.n	8003d3e <ETH_SetMACConfig+0x1ee>
 8003d3a:	2240      	movs	r2, #64	; 0x40
 8003d3c:	e000      	b.n	8003d40 <ETH_SetMACConfig+0x1f0>
 8003d3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003d40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003d48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003d4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003d52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003d60:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	00048083 	.word	0x00048083
 8003d80:	c0f88000 	.word	0xc0f88000
 8003d84:	fffffef0 	.word	0xfffffef0

08003d88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <ETH_SetDMAConfig+0xf8>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	6811      	ldr	r1, [r2, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	791b      	ldrb	r3, [r3, #4]
 8003db4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003dba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	7b1b      	ldrb	r3, [r3, #12]
 8003dc0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <ETH_SetDMAConfig+0xfc>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	68f9      	ldr	r1, [r7, #12]
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003de0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	7b5b      	ldrb	r3, [r3, #13]
 8003de6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003dfc:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <ETH_SetDMAConfig+0x100>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	430b      	orrs	r3, r1
 8003e08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e0c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	7d1b      	ldrb	r3, [r3, #20]
 8003e18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e1a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	7f5b      	ldrb	r3, [r3, #29]
 8003e20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <ETH_SetDMAConfig+0x104>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e42:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	7f1b      	ldrb	r3, [r3, #28]
 8003e4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <ETH_SetDMAConfig+0x108>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e70:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	ffff87fd 	.word	0xffff87fd
 8003e84:	ffff2ffe 	.word	0xffff2ffe
 8003e88:	fffec000 	.word	0xfffec000
 8003e8c:	ffc0efef 	.word	0xffc0efef
 8003e90:	7fc0ffff 	.word	0x7fc0ffff

08003e94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b0a4      	sub	sp, #144	; 0x90
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ed4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003eec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003ef0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003f16:	2300      	movs	r3, #0
 8003f18:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003f3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f48:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003f50:	2302      	movs	r3, #2
 8003f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fde6 	bl	8003b50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f84:	2301      	movs	r3, #1
 8003f86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fa2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003fb4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003fba:	f107 0308 	add.w	r3, r7, #8
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fee1 	bl	8003d88 <ETH_SetDMAConfig>
}
 8003fc6:	bf00      	nop
 8003fc8:	3790      	adds	r7, #144	; 0x90
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b085      	sub	sp, #20
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e01d      	b.n	8004018 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68d9      	ldr	r1, [r3, #12]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	440b      	add	r3, r1
 8003fec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2200      	movs	r2, #0
 8004004:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	3206      	adds	r2, #6
 800400e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3301      	adds	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b03      	cmp	r3, #3
 800401c:	d9de      	bls.n	8003fdc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402c:	461a      	mov	r2, r3
 800402e:	2303      	movs	r3, #3
 8004030:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004040:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004050:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e023      	b.n	80040b6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6919      	ldr	r1, [r3, #16]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2200      	movs	r2, #0
 800408a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2200      	movs	r2, #0
 8004096:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	3212      	adds	r2, #18
 80040ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3301      	adds	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d9d8      	bls.n	800406e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e2:	461a      	mov	r2, r3
 80040e4:	2303      	movs	r3, #3
 80040e6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800411c:	b480      	push	{r7}
 800411e:	b08d      	sub	sp, #52	; 0x34
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3318      	adds	r3, #24
 800412c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004146:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800415a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415e:	d007      	beq.n	8004170 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	3304      	adds	r3, #4
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004170:	2302      	movs	r3, #2
 8004172:	e259      	b.n	8004628 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d044      	beq.n	800420a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	4b75      	ldr	r3, [pc, #468]	; (800435c <ETH_Prepare_Tx_Descriptors+0x240>)
 8004186:	4013      	ands	r3, r2
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418c:	431a      	orrs	r2, r3
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80041ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d027      	beq.n	800420a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	431a      	orrs	r2, r3
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	431a      	orrs	r2, r3
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80041f8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004208:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00e      	beq.n	8004234 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	4b51      	ldr	r3, [pc, #324]	; (8004360 <ETH_Prepare_Tx_Descriptors+0x244>)
 800421c:	4013      	ands	r3, r2
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	6992      	ldr	r2, [r2, #24]
 8004222:	431a      	orrs	r2, r3
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d036      	beq.n	80042ba <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004258:	f3bf 8f5f 	dmb	sy
}
 800425c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	3301      	adds	r3, #1
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	2b03      	cmp	r3, #3
 8004274:	d902      	bls.n	800427c <ETH_Prepare_Tx_Descriptors+0x160>
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	3b04      	subs	r3, #4
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004284:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	3301      	adds	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004298:	d10f      	bne.n	80042ba <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80042a4:	f3bf 8f5f 	dmb	sy
}
 80042a8:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	e1b6      	b.n	8004628 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	3301      	adds	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	4b24      	ldr	r3, [pc, #144]	; (8004360 <ETH_Prepare_Tx_Descriptors+0x244>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	6852      	ldr	r2, [r2, #4]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <ETH_Prepare_Tx_Descriptors+0x248>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	6852      	ldr	r2, [r2, #4]
 8004300:	0412      	lsls	r2, r2, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	e008      	b.n	800431c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	2200      	movs	r2, #0
 800430e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <ETH_Prepare_Tx_Descriptors+0x248>)
 8004316:	4013      	ands	r3, r2
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d021      	beq.n	800436c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	04db      	lsls	r3, r3, #19
 8004336:	431a      	orrs	r2, r3
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8004342:	4013      	ands	r3, r2
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	69d2      	ldr	r2, [r2, #28]
 8004348:	431a      	orrs	r2, r3
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	e02e      	b.n	80043ba <ETH_Prepare_Tx_Descriptors+0x29e>
 800435c:	ffff0000 	.word	0xffff0000
 8004360:	ffffc000 	.word	0xffffc000
 8004364:	c000ffff 	.word	0xc000ffff
 8004368:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	4b7b      	ldr	r3, [pc, #492]	; (8004560 <ETH_Prepare_Tx_Descriptors+0x444>)
 8004372:	4013      	ands	r3, r2
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	6852      	ldr	r2, [r2, #4]
 8004378:	431a      	orrs	r2, r3
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	431a      	orrs	r2, r3
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	431a      	orrs	r2, r3
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80043f0:	f3bf 8f5f 	dmb	sy
}
 80043f4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80da 	beq.w	80045c4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	431a      	orrs	r2, r3
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004422:	e0cf      	b.n	80045c4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	3301      	adds	r3, #1
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	2b03      	cmp	r3, #3
 800443a:	d902      	bls.n	8004442 <ETH_Prepare_Tx_Descriptors+0x326>
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	3b04      	subs	r3, #4
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004464:	d007      	beq.n	8004476 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	3304      	adds	r3, #4
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d029      	beq.n	80044ca <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004482:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004484:	2300      	movs	r3, #0
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
 8004488:	e019      	b.n	80044be <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800448a:	f3bf 8f5f 	dmb	sy
}
 800448e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	3301      	adds	r3, #1
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d902      	bls.n	80044ae <ETH_Prepare_Tx_Descriptors+0x392>
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	3b04      	subs	r3, #4
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b6:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	3301      	adds	r3, #1
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d3e1      	bcc.n	800448a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80044c6:	2302      	movs	r3, #2
 80044c8:	e0ae      	b.n	8004628 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	3301      	adds	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <ETH_Prepare_Tx_Descriptors+0x448>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	6852      	ldr	r2, [r2, #4]
 80044ec:	431a      	orrs	r2, r3
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d012      	beq.n	8004520 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004510:	4013      	ands	r3, r2
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	6852      	ldr	r2, [r2, #4]
 8004516:	0412      	lsls	r2, r2, #16
 8004518:	431a      	orrs	r2, r3
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	609a      	str	r2, [r3, #8]
 800451e:	e008      	b.n	8004532 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2200      	movs	r2, #0
 8004524:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800452c:	4013      	ands	r3, r2
 800452e:	6a3a      	ldr	r2, [r7, #32]
 8004530:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	d018      	beq.n	8004570 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <ETH_Prepare_Tx_Descriptors+0x450>)
 8004544:	4013      	ands	r3, r2
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	69d2      	ldr	r2, [r2, #28]
 800454a:	431a      	orrs	r2, r3
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	60da      	str	r2, [r3, #12]
 800455c:	e020      	b.n	80045a0 <ETH_Prepare_Tx_Descriptors+0x484>
 800455e:	bf00      	nop
 8004560:	ffff8000 	.word	0xffff8000
 8004564:	ffffc000 	.word	0xffffc000
 8004568:	c000ffff 	.word	0xc000ffff
 800456c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	4b2f      	ldr	r3, [pc, #188]	; (8004634 <ETH_Prepare_Tx_Descriptors+0x518>)
 8004576:	4013      	ands	r3, r2
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	6852      	ldr	r2, [r2, #4]
 800457c:	431a      	orrs	r2, r3
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d008      	beq.n	80045a0 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	431a      	orrs	r2, r3
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80045a6:	f3bf 8f5f 	dmb	sy
}
 80045aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f47f af2b 	bne.w	8004424 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d006      	beq.n	80045e2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	e005      	b.n	80045ee <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045fe:	6979      	ldr	r1, [r7, #20]
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	3304      	adds	r3, #4
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004610:	b672      	cpsid	i
}
 8004612:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	4413      	add	r3, r2
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004622:	b662      	cpsie	i
}
 8004624:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3734      	adds	r7, #52	; 0x34
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	ffff8000 	.word	0xffff8000

08004638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004646:	4b89      	ldr	r3, [pc, #548]	; (800486c <HAL_GPIO_Init+0x234>)
 8004648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800464a:	e194      	b.n	8004976 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8186 	beq.w	8004970 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d005      	beq.n	800467c <HAL_GPIO_Init+0x44>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d130      	bne.n	80046de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	2203      	movs	r2, #3
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046b2:	2201      	movs	r2, #1
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	f003 0201 	and.w	r2, r3, #1
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d017      	beq.n	800471a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	2203      	movs	r2, #3
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d123      	bne.n	800476e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3208      	adds	r2, #8
 800472e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	220f      	movs	r2, #15
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	08da      	lsrs	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3208      	adds	r2, #8
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	2203      	movs	r2, #3
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0203 	and.w	r2, r3, #3
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80e0 	beq.w	8004970 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b0:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <HAL_GPIO_Init+0x238>)
 80047b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047b6:	4a2e      	ldr	r2, [pc, #184]	; (8004870 <HAL_GPIO_Init+0x238>)
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_GPIO_Init+0x238>)
 80047c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ce:	4a29      	ldr	r2, [pc, #164]	; (8004874 <HAL_GPIO_Init+0x23c>)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	3302      	adds	r3, #2
 80047d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	220f      	movs	r2, #15
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a20      	ldr	r2, [pc, #128]	; (8004878 <HAL_GPIO_Init+0x240>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d052      	beq.n	80048a0 <HAL_GPIO_Init+0x268>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	; (800487c <HAL_GPIO_Init+0x244>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <HAL_GPIO_Init+0x22e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <HAL_GPIO_Init+0x248>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d02b      	beq.n	8004862 <HAL_GPIO_Init+0x22a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <HAL_GPIO_Init+0x24c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d025      	beq.n	800485e <HAL_GPIO_Init+0x226>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1c      	ldr	r2, [pc, #112]	; (8004888 <HAL_GPIO_Init+0x250>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d01f      	beq.n	800485a <HAL_GPIO_Init+0x222>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_GPIO_Init+0x254>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d019      	beq.n	8004856 <HAL_GPIO_Init+0x21e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1a      	ldr	r2, [pc, #104]	; (8004890 <HAL_GPIO_Init+0x258>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_GPIO_Init+0x21a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a19      	ldr	r2, [pc, #100]	; (8004894 <HAL_GPIO_Init+0x25c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00d      	beq.n	800484e <HAL_GPIO_Init+0x216>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_GPIO_Init+0x260>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <HAL_GPIO_Init+0x212>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a17      	ldr	r2, [pc, #92]	; (800489c <HAL_GPIO_Init+0x264>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d101      	bne.n	8004846 <HAL_GPIO_Init+0x20e>
 8004842:	2309      	movs	r3, #9
 8004844:	e02d      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004846:	230a      	movs	r3, #10
 8004848:	e02b      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800484a:	2308      	movs	r3, #8
 800484c:	e029      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800484e:	2307      	movs	r3, #7
 8004850:	e027      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004852:	2306      	movs	r3, #6
 8004854:	e025      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004856:	2305      	movs	r3, #5
 8004858:	e023      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800485a:	2304      	movs	r3, #4
 800485c:	e021      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800485e:	2303      	movs	r3, #3
 8004860:	e01f      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004862:	2302      	movs	r3, #2
 8004864:	e01d      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004866:	2301      	movs	r3, #1
 8004868:	e01b      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800486a:	bf00      	nop
 800486c:	58000080 	.word	0x58000080
 8004870:	58024400 	.word	0x58024400
 8004874:	58000400 	.word	0x58000400
 8004878:	58020000 	.word	0x58020000
 800487c:	58020400 	.word	0x58020400
 8004880:	58020800 	.word	0x58020800
 8004884:	58020c00 	.word	0x58020c00
 8004888:	58021000 	.word	0x58021000
 800488c:	58021400 	.word	0x58021400
 8004890:	58021800 	.word	0x58021800
 8004894:	58021c00 	.word	0x58021c00
 8004898:	58022000 	.word	0x58022000
 800489c:	58022400 	.word	0x58022400
 80048a0:	2300      	movs	r3, #0
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	f002 0203 	and.w	r2, r2, #3
 80048a8:	0092      	lsls	r2, r2, #2
 80048aa:	4093      	lsls	r3, r2
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b2:	4938      	ldr	r1, [pc, #224]	; (8004994 <HAL_GPIO_Init+0x35c>)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	3302      	adds	r3, #2
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	3301      	adds	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	f47f ae63 	bne.w	800464c <HAL_GPIO_Init+0x14>
  }
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	3724      	adds	r7, #36	; 0x24
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	58000400 	.word	0x58000400

08004998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
 80049a4:	4613      	mov	r3, r2
 80049a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049a8:	787b      	ldrb	r3, [r7, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049b4:	e003      	b.n	80049be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	041a      	lsls	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	619a      	str	r2, [r3, #24]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049d4:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_PWREx_ConfigSupply+0x70>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d00a      	beq.n	80049f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049e0:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <HAL_PWREx_ConfigSupply+0x70>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d001      	beq.n	80049f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e01f      	b.n	8004a32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e01d      	b.n	8004a32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <HAL_PWREx_ConfigSupply+0x70>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f023 0207 	bic.w	r2, r3, #7
 80049fe:	490f      	ldr	r1, [pc, #60]	; (8004a3c <HAL_PWREx_ConfigSupply+0x70>)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a06:	f7fd fe77 	bl	80026f8 <HAL_GetTick>
 8004a0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a0c:	e009      	b.n	8004a22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a0e:	f7fd fe73 	bl	80026f8 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a1c:	d901      	bls.n	8004a22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e007      	b.n	8004a32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_PWREx_ConfigSupply+0x70>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2e:	d1ee      	bne.n	8004a0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	58024800 	.word	0x58024800

08004a40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	; 0x30
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f000 bc1d 	b.w	800528e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8087 	beq.w	8004b70 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a62:	4b99      	ldr	r3, [pc, #612]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a6c:	4b96      	ldr	r3, [pc, #600]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d007      	beq.n	8004a88 <HAL_RCC_OscConfig+0x48>
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b18      	cmp	r3, #24
 8004a7c:	d110      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x60>
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d10b      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a88:	4b8f      	ldr	r3, [pc, #572]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d06c      	beq.n	8004b6e <HAL_RCC_OscConfig+0x12e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d168      	bne.n	8004b6e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e3f6      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d106      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x78>
 8004aaa:	4b87      	ldr	r3, [pc, #540]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a86      	ldr	r2, [pc, #536]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e02e      	b.n	8004b16 <HAL_RCC_OscConfig+0xd6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10c      	bne.n	8004ada <HAL_RCC_OscConfig+0x9a>
 8004ac0:	4b81      	ldr	r3, [pc, #516]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a80      	ldr	r2, [pc, #512]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4b7e      	ldr	r3, [pc, #504]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a7d      	ldr	r2, [pc, #500]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e01d      	b.n	8004b16 <HAL_RCC_OscConfig+0xd6>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae2:	d10c      	bne.n	8004afe <HAL_RCC_OscConfig+0xbe>
 8004ae4:	4b78      	ldr	r3, [pc, #480]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a77      	ldr	r2, [pc, #476]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b75      	ldr	r3, [pc, #468]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a74      	ldr	r2, [pc, #464]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e00b      	b.n	8004b16 <HAL_RCC_OscConfig+0xd6>
 8004afe:	4b72      	ldr	r3, [pc, #456]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a71      	ldr	r2, [pc, #452]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b6f      	ldr	r3, [pc, #444]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6e      	ldr	r2, [pc, #440]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d013      	beq.n	8004b46 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1e:	f7fd fdeb 	bl	80026f8 <HAL_GetTick>
 8004b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b26:	f7fd fde7 	bl	80026f8 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b64      	cmp	r3, #100	; 0x64
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e3aa      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b38:	4b63      	ldr	r3, [pc, #396]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f0      	beq.n	8004b26 <HAL_RCC_OscConfig+0xe6>
 8004b44:	e014      	b.n	8004b70 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fd fdd7 	bl	80026f8 <HAL_GetTick>
 8004b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b4e:	f7fd fdd3 	bl	80026f8 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b64      	cmp	r3, #100	; 0x64
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e396      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b60:	4b59      	ldr	r3, [pc, #356]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0x10e>
 8004b6c:	e000      	b.n	8004b70 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80cb 	beq.w	8004d14 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7e:	4b52      	ldr	r3, [pc, #328]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b86:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b88:	4b4f      	ldr	r3, [pc, #316]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x164>
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2b18      	cmp	r3, #24
 8004b98:	d156      	bne.n	8004c48 <HAL_RCC_OscConfig+0x208>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d151      	bne.n	8004c48 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba4:	4b48      	ldr	r3, [pc, #288]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_OscConfig+0x17c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e368      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bbc:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 0219 	bic.w	r2, r3, #25
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	493f      	ldr	r1, [pc, #252]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bce:	f7fd fd93 	bl	80026f8 <HAL_GetTick>
 8004bd2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd6:	f7fd fd8f 	bl	80026f8 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e352      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be8:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf4:	f7fd fdb0 	bl	8002758 <HAL_GetREVID>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d817      	bhi.n	8004c32 <HAL_RCC_OscConfig+0x1f2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d108      	bne.n	8004c1c <HAL_RCC_OscConfig+0x1dc>
 8004c0a:	4b2f      	ldr	r3, [pc, #188]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c12:	4a2d      	ldr	r2, [pc, #180]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c18:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c1a:	e07b      	b.n	8004d14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1c:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	031b      	lsls	r3, r3, #12
 8004c2a:	4927      	ldr	r1, [pc, #156]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c30:	e070      	b.n	8004d14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	4921      	ldr	r1, [pc, #132]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c46:	e065      	b.n	8004d14 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d048      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f023 0219 	bic.w	r2, r3, #25
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	491a      	ldr	r1, [pc, #104]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fd fd49 	bl	80026f8 <HAL_GetTick>
 8004c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c6a:	f7fd fd45 	bl	80026f8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e308      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c7c:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c88:	f7fd fd66 	bl	8002758 <HAL_GetREVID>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d81a      	bhi.n	8004ccc <HAL_RCC_OscConfig+0x28c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d108      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x270>
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ca6:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cac:	6053      	str	r3, [r2, #4]
 8004cae:	e031      	b.n	8004d14 <HAL_RCC_OscConfig+0x2d4>
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	031b      	lsls	r3, r3, #12
 8004cbe:	4902      	ldr	r1, [pc, #8]	; (8004cc8 <HAL_RCC_OscConfig+0x288>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
 8004cc4:	e026      	b.n	8004d14 <HAL_RCC_OscConfig+0x2d4>
 8004cc6:	bf00      	nop
 8004cc8:	58024400 	.word	0x58024400
 8004ccc:	4b9a      	ldr	r3, [pc, #616]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	4997      	ldr	r1, [pc, #604]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	604b      	str	r3, [r1, #4]
 8004ce0:	e018      	b.n	8004d14 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce2:	4b95      	ldr	r3, [pc, #596]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a94      	ldr	r2, [pc, #592]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cee:	f7fd fd03 	bl	80026f8 <HAL_GetTick>
 8004cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf6:	f7fd fcff 	bl	80026f8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e2c2      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d08:	4b8b      	ldr	r3, [pc, #556]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a9 	beq.w	8004e74 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d22:	4b85      	ldr	r3, [pc, #532]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d2c:	4b82      	ldr	r3, [pc, #520]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d007      	beq.n	8004d48 <HAL_RCC_OscConfig+0x308>
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b18      	cmp	r3, #24
 8004d3c:	d13a      	bne.n	8004db4 <HAL_RCC_OscConfig+0x374>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d135      	bne.n	8004db4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d48:	4b7b      	ldr	r3, [pc, #492]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_OscConfig+0x320>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e296      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d60:	f7fd fcfa 	bl	8002758 <HAL_GetREVID>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d817      	bhi.n	8004d9e <HAL_RCC_OscConfig+0x35e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d108      	bne.n	8004d88 <HAL_RCC_OscConfig+0x348>
 8004d76:	4b70      	ldr	r3, [pc, #448]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d7e:	4a6e      	ldr	r2, [pc, #440]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d84:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d86:	e075      	b.n	8004e74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d88:	4b6b      	ldr	r3, [pc, #428]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	069b      	lsls	r3, r3, #26
 8004d96:	4968      	ldr	r1, [pc, #416]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d9c:	e06a      	b.n	8004e74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d9e:	4b66      	ldr	r3, [pc, #408]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	061b      	lsls	r3, r3, #24
 8004dac:	4962      	ldr	r1, [pc, #392]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004db2:	e05f      	b.n	8004e74 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d042      	beq.n	8004e42 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004dbc:	4b5e      	ldr	r3, [pc, #376]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5d      	ldr	r2, [pc, #372]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fd fc96 	bl	80026f8 <HAL_GetTick>
 8004dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004dd0:	f7fd fc92 	bl	80026f8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e255      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004de2:	4b55      	ldr	r3, [pc, #340]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dee:	f7fd fcb3 	bl	8002758 <HAL_GetREVID>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d817      	bhi.n	8004e2c <HAL_RCC_OscConfig+0x3ec>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d108      	bne.n	8004e16 <HAL_RCC_OscConfig+0x3d6>
 8004e04:	4b4c      	ldr	r3, [pc, #304]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e0c:	4a4a      	ldr	r2, [pc, #296]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e12:	6053      	str	r3, [r2, #4]
 8004e14:	e02e      	b.n	8004e74 <HAL_RCC_OscConfig+0x434>
 8004e16:	4b48      	ldr	r3, [pc, #288]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	069b      	lsls	r3, r3, #26
 8004e24:	4944      	ldr	r1, [pc, #272]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	604b      	str	r3, [r1, #4]
 8004e2a:	e023      	b.n	8004e74 <HAL_RCC_OscConfig+0x434>
 8004e2c:	4b42      	ldr	r3, [pc, #264]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	061b      	lsls	r3, r3, #24
 8004e3a:	493f      	ldr	r1, [pc, #252]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60cb      	str	r3, [r1, #12]
 8004e40:	e018      	b.n	8004e74 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e42:	4b3d      	ldr	r3, [pc, #244]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a3c      	ldr	r2, [pc, #240]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fd fc53 	bl	80026f8 <HAL_GetTick>
 8004e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e56:	f7fd fc4f 	bl	80026f8 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e212      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e68:	4b33      	ldr	r3, [pc, #204]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f0      	bne.n	8004e56 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d036      	beq.n	8004eee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d019      	beq.n	8004ebc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e88:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8c:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7fd fc30 	bl	80026f8 <HAL_GetTick>
 8004e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fd fc2c 	bl	80026f8 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1ef      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eae:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x45c>
 8004eba:	e018      	b.n	8004eee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ebc:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fd fc16 	bl	80026f8 <HAL_GetTick>
 8004ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed0:	f7fd fc12 	bl	80026f8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e1d5      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d039      	beq.n	8004f6e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01c      	beq.n	8004f3c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f02:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f0e:	f7fd fbf3 	bl	80026f8 <HAL_GetTick>
 8004f12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f16:	f7fd fbef 	bl	80026f8 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e1b2      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCC_OscConfig+0x4f8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
 8004f34:	e01b      	b.n	8004f6e <HAL_RCC_OscConfig+0x52e>
 8004f36:	bf00      	nop
 8004f38:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f3c:	4b9b      	ldr	r3, [pc, #620]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a9a      	ldr	r2, [pc, #616]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f48:	f7fd fbd6 	bl	80026f8 <HAL_GetTick>
 8004f4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f50:	f7fd fbd2 	bl	80026f8 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e195      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f62:	4b92      	ldr	r3, [pc, #584]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8081 	beq.w	800507e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f7c:	4b8c      	ldr	r3, [pc, #560]	; (80051b0 <HAL_RCC_OscConfig+0x770>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a8b      	ldr	r2, [pc, #556]	; (80051b0 <HAL_RCC_OscConfig+0x770>)
 8004f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f88:	f7fd fbb6 	bl	80026f8 <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f90:	f7fd fbb2 	bl	80026f8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e175      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa2:	4b83      	ldr	r3, [pc, #524]	; (80051b0 <HAL_RCC_OscConfig+0x770>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x584>
 8004fb6:	4b7d      	ldr	r3, [pc, #500]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4a7c      	ldr	r2, [pc, #496]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc2:	e02d      	b.n	8005020 <HAL_RCC_OscConfig+0x5e0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10c      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x5a6>
 8004fcc:	4b77      	ldr	r3, [pc, #476]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	4a76      	ldr	r2, [pc, #472]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd8:	4b74      	ldr	r3, [pc, #464]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a73      	ldr	r2, [pc, #460]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004fde:	f023 0304 	bic.w	r3, r3, #4
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe4:	e01c      	b.n	8005020 <HAL_RCC_OscConfig+0x5e0>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	d10c      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c8>
 8004fee:	4b6f      	ldr	r3, [pc, #444]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	4a6e      	ldr	r2, [pc, #440]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	f043 0304 	orr.w	r3, r3, #4
 8004ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffa:	4b6c      	ldr	r3, [pc, #432]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	4a6b      	ldr	r2, [pc, #428]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6713      	str	r3, [r2, #112]	; 0x70
 8005006:	e00b      	b.n	8005020 <HAL_RCC_OscConfig+0x5e0>
 8005008:	4b68      	ldr	r3, [pc, #416]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	4a67      	ldr	r2, [pc, #412]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	6713      	str	r3, [r2, #112]	; 0x70
 8005014:	4b65      	ldr	r3, [pc, #404]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4a64      	ldr	r2, [pc, #400]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 800501a:	f023 0304 	bic.w	r3, r3, #4
 800501e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d015      	beq.n	8005054 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fd fb66 	bl	80026f8 <HAL_GetTick>
 800502c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800502e:	e00a      	b.n	8005046 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005030:	f7fd fb62 	bl	80026f8 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e123      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005046:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0ee      	beq.n	8005030 <HAL_RCC_OscConfig+0x5f0>
 8005052:	e014      	b.n	800507e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005054:	f7fd fb50 	bl	80026f8 <HAL_GetTick>
 8005058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800505a:	e00a      	b.n	8005072 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800505c:	f7fd fb4c 	bl	80026f8 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	; 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e10d      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005072:	4b4e      	ldr	r3, [pc, #312]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1ee      	bne.n	800505c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8102 	beq.w	800528c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005088:	4b48      	ldr	r3, [pc, #288]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005090:	2b18      	cmp	r3, #24
 8005092:	f000 80bd 	beq.w	8005210 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	2b02      	cmp	r3, #2
 800509c:	f040 809e 	bne.w	80051dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a0:	4b42      	ldr	r3, [pc, #264]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a41      	ldr	r2, [pc, #260]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 80050a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fd fb24 	bl	80026f8 <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b4:	f7fd fb20 	bl	80026f8 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0e3      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050c6:	4b39      	ldr	r3, [pc, #228]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050d2:	4b36      	ldr	r3, [pc, #216]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 80050d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050d6:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <HAL_RCC_OscConfig+0x774>)
 80050d8:	4013      	ands	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050e2:	0112      	lsls	r2, r2, #4
 80050e4:	430a      	orrs	r2, r1
 80050e6:	4931      	ldr	r1, [pc, #196]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	628b      	str	r3, [r1, #40]	; 0x28
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	3b01      	subs	r3, #1
 80050f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fa:	3b01      	subs	r3, #1
 80050fc:	025b      	lsls	r3, r3, #9
 80050fe:	b29b      	uxth	r3, r3
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	3b01      	subs	r3, #1
 8005108:	041b      	lsls	r3, r3, #16
 800510a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005114:	3b01      	subs	r3, #1
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800511c:	4923      	ldr	r1, [pc, #140]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	4a21      	ldr	r2, [pc, #132]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800512e:	4b1f      	ldr	r3, [pc, #124]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005132:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <HAL_RCC_OscConfig+0x778>)
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800513a:	00d2      	lsls	r2, r2, #3
 800513c:	491b      	ldr	r1, [pc, #108]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005142:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	f023 020c 	bic.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	4917      	ldr	r1, [pc, #92]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005154:	4b15      	ldr	r3, [pc, #84]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f023 0202 	bic.w	r2, r3, #2
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005160:	4912      	ldr	r1, [pc, #72]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005162:	4313      	orrs	r3, r2
 8005164:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005166:	4b11      	ldr	r3, [pc, #68]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	4a10      	ldr	r2, [pc, #64]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 800516c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005170:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005172:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005188:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	4a07      	ldr	r2, [pc, #28]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a04      	ldr	r2, [pc, #16]	; (80051ac <HAL_RCC_OscConfig+0x76c>)
 800519c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fd faa9 	bl	80026f8 <HAL_GetTick>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051a8:	e011      	b.n	80051ce <HAL_RCC_OscConfig+0x78e>
 80051aa:	bf00      	nop
 80051ac:	58024400 	.word	0x58024400
 80051b0:	58024800 	.word	0x58024800
 80051b4:	fffffc0c 	.word	0xfffffc0c
 80051b8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051bc:	f7fd fa9c 	bl	80026f8 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e05f      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051ce:	4b32      	ldr	r3, [pc, #200]	; (8005298 <HAL_RCC_OscConfig+0x858>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x77c>
 80051da:	e057      	b.n	800528c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051dc:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <HAL_RCC_OscConfig+0x858>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2d      	ldr	r2, [pc, #180]	; (8005298 <HAL_RCC_OscConfig+0x858>)
 80051e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fd fa86 	bl	80026f8 <HAL_GetTick>
 80051ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fd fa82 	bl	80026f8 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e045      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005202:	4b25      	ldr	r3, [pc, #148]	; (8005298 <HAL_RCC_OscConfig+0x858>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x7b0>
 800520e:	e03d      	b.n	800528c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005210:	4b21      	ldr	r3, [pc, #132]	; (8005298 <HAL_RCC_OscConfig+0x858>)
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005216:	4b20      	ldr	r3, [pc, #128]	; (8005298 <HAL_RCC_OscConfig+0x858>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	2b01      	cmp	r3, #1
 8005222:	d031      	beq.n	8005288 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f003 0203 	and.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d12a      	bne.n	8005288 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d122      	bne.n	8005288 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d11a      	bne.n	8005288 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	0a5b      	lsrs	r3, r3, #9
 8005256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d111      	bne.n	8005288 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d108      	bne.n	8005288 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	0e1b      	lsrs	r3, r3, #24
 800527a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3730      	adds	r7, #48	; 0x30
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	58024400 	.word	0x58024400

0800529c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e19c      	b.n	80055ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b8a      	ldr	r3, [pc, #552]	; (80054dc <HAL_RCC_ClockConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d910      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b87      	ldr	r3, [pc, #540]	; (80054dc <HAL_RCC_ClockConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 020f 	bic.w	r2, r3, #15
 80052c6:	4985      	ldr	r1, [pc, #532]	; (80054dc <HAL_RCC_ClockConfig+0x240>)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b83      	ldr	r3, [pc, #524]	; (80054dc <HAL_RCC_ClockConfig+0x240>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e184      	b.n	80055ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	4b7b      	ldr	r3, [pc, #492]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d908      	bls.n	800530e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052fc:	4b78      	ldr	r3, [pc, #480]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	4975      	ldr	r1, [pc, #468]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800530a:	4313      	orrs	r3, r2
 800530c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d010      	beq.n	800533c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	4b70      	ldr	r3, [pc, #448]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005326:	429a      	cmp	r2, r3
 8005328:	d908      	bls.n	800533c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800532a:	4b6d      	ldr	r3, [pc, #436]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	496a      	ldr	r1, [pc, #424]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 8005338:	4313      	orrs	r3, r2
 800533a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d010      	beq.n	800536a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	4b64      	ldr	r3, [pc, #400]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005354:	429a      	cmp	r2, r3
 8005356:	d908      	bls.n	800536a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005358:	4b61      	ldr	r3, [pc, #388]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	495e      	ldr	r1, [pc, #376]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 8005366:	4313      	orrs	r3, r2
 8005368:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d010      	beq.n	8005398 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69da      	ldr	r2, [r3, #28]
 800537a:	4b59      	ldr	r3, [pc, #356]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005382:	429a      	cmp	r2, r3
 8005384:	d908      	bls.n	8005398 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005386:	4b56      	ldr	r3, [pc, #344]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	4953      	ldr	r1, [pc, #332]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 8005394:	4313      	orrs	r3, r2
 8005396:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d010      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d908      	bls.n	80053c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b4:	4b4a      	ldr	r3, [pc, #296]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f023 020f 	bic.w	r2, r3, #15
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4947      	ldr	r1, [pc, #284]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d055      	beq.n	800547e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053d2:	4b43      	ldr	r3, [pc, #268]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4940      	ldr	r1, [pc, #256]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053ec:	4b3c      	ldr	r3, [pc, #240]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d121      	bne.n	800543c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0f6      	b.n	80055ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d107      	bne.n	8005414 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005404:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d115      	bne.n	800543c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0ea      	b.n	80055ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d107      	bne.n	800542c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800541c:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0de      	b.n	80055ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800542c:	4b2c      	ldr	r3, [pc, #176]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0d6      	b.n	80055ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800543c:	4b28      	ldr	r3, [pc, #160]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f023 0207 	bic.w	r2, r3, #7
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4925      	ldr	r1, [pc, #148]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800544a:	4313      	orrs	r3, r2
 800544c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544e:	f7fd f953 	bl	80026f8 <HAL_GetTick>
 8005452:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005454:	e00a      	b.n	800546c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005456:	f7fd f94f 	bl	80026f8 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f241 3288 	movw	r2, #5000	; 0x1388
 8005464:	4293      	cmp	r3, r2
 8005466:	d901      	bls.n	800546c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e0be      	b.n	80055ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546c:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	429a      	cmp	r2, r3
 800547c:	d1eb      	bne.n	8005456 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d010      	beq.n	80054ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	429a      	cmp	r2, r3
 8005498:	d208      	bcs.n	80054ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800549a:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f023 020f 	bic.w	r2, r3, #15
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	490e      	ldr	r1, [pc, #56]	; (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_RCC_ClockConfig+0x240>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d214      	bcs.n	80054e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ba:	4b08      	ldr	r3, [pc, #32]	; (80054dc <HAL_RCC_ClockConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 020f 	bic.w	r2, r3, #15
 80054c2:	4906      	ldr	r1, [pc, #24]	; (80054dc <HAL_RCC_ClockConfig+0x240>)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ca:	4b04      	ldr	r3, [pc, #16]	; (80054dc <HAL_RCC_ClockConfig+0x240>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e086      	b.n	80055ea <HAL_RCC_ClockConfig+0x34e>
 80054dc:	52002000 	.word	0x52002000
 80054e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d010      	beq.n	8005512 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	4b3f      	ldr	r3, [pc, #252]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d208      	bcs.n	8005512 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005500:	4b3c      	ldr	r3, [pc, #240]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	4939      	ldr	r1, [pc, #228]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 800550e:	4313      	orrs	r3, r2
 8005510:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695a      	ldr	r2, [r3, #20]
 8005522:	4b34      	ldr	r3, [pc, #208]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800552a:	429a      	cmp	r2, r3
 800552c:	d208      	bcs.n	8005540 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800552e:	4b31      	ldr	r3, [pc, #196]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	492e      	ldr	r1, [pc, #184]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 800553c:	4313      	orrs	r3, r2
 800553e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	d010      	beq.n	800556e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699a      	ldr	r2, [r3, #24]
 8005550:	4b28      	ldr	r3, [pc, #160]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005558:	429a      	cmp	r2, r3
 800555a:	d208      	bcs.n	800556e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800555c:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	4922      	ldr	r1, [pc, #136]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 800556a:	4313      	orrs	r3, r2
 800556c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d010      	beq.n	800559c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005586:	429a      	cmp	r2, r3
 8005588:	d208      	bcs.n	800559c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800558a:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	4917      	ldr	r1, [pc, #92]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 8005598:	4313      	orrs	r3, r2
 800559a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800559c:	f000 f834 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 80055a0:	4602      	mov	r2, r0
 80055a2:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	0a1b      	lsrs	r3, r3, #8
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	4912      	ldr	r1, [pc, #72]	; (80055f8 <HAL_RCC_ClockConfig+0x35c>)
 80055ae:	5ccb      	ldrb	r3, [r1, r3]
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055ba:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <HAL_RCC_ClockConfig+0x358>)
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	4a0d      	ldr	r2, [pc, #52]	; (80055f8 <HAL_RCC_ClockConfig+0x35c>)
 80055c4:	5cd3      	ldrb	r3, [r2, r3]
 80055c6:	f003 031f 	and.w	r3, r3, #31
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <HAL_RCC_ClockConfig+0x360>)
 80055d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055d4:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <HAL_RCC_ClockConfig+0x364>)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <HAL_RCC_ClockConfig+0x368>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fd f840 	bl	8002664 <HAL_InitTick>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	58024400 	.word	0x58024400
 80055f8:	08025740 	.word	0x08025740
 80055fc:	24000020 	.word	0x24000020
 8005600:	2400001c 	.word	0x2400001c
 8005604:	24000024 	.word	0x24000024

08005608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005608:	b480      	push	{r7}
 800560a:	b089      	sub	sp, #36	; 0x24
 800560c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800560e:	4bb3      	ldr	r3, [pc, #716]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005616:	2b18      	cmp	r3, #24
 8005618:	f200 8155 	bhi.w	80058c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <HAL_RCC_GetSysClockFreq+0x1c>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005689 	.word	0x08005689
 8005628:	080058c7 	.word	0x080058c7
 800562c:	080058c7 	.word	0x080058c7
 8005630:	080058c7 	.word	0x080058c7
 8005634:	080058c7 	.word	0x080058c7
 8005638:	080058c7 	.word	0x080058c7
 800563c:	080058c7 	.word	0x080058c7
 8005640:	080058c7 	.word	0x080058c7
 8005644:	080056af 	.word	0x080056af
 8005648:	080058c7 	.word	0x080058c7
 800564c:	080058c7 	.word	0x080058c7
 8005650:	080058c7 	.word	0x080058c7
 8005654:	080058c7 	.word	0x080058c7
 8005658:	080058c7 	.word	0x080058c7
 800565c:	080058c7 	.word	0x080058c7
 8005660:	080058c7 	.word	0x080058c7
 8005664:	080056b5 	.word	0x080056b5
 8005668:	080058c7 	.word	0x080058c7
 800566c:	080058c7 	.word	0x080058c7
 8005670:	080058c7 	.word	0x080058c7
 8005674:	080058c7 	.word	0x080058c7
 8005678:	080058c7 	.word	0x080058c7
 800567c:	080058c7 	.word	0x080058c7
 8005680:	080058c7 	.word	0x080058c7
 8005684:	080056bb 	.word	0x080056bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005688:	4b94      	ldr	r3, [pc, #592]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005694:	4b91      	ldr	r3, [pc, #580]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	08db      	lsrs	r3, r3, #3
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	4a90      	ldr	r2, [pc, #576]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80056a6:	e111      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80056a8:	4b8d      	ldr	r3, [pc, #564]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056aa:	61bb      	str	r3, [r7, #24]
    break;
 80056ac:	e10e      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80056ae:	4b8d      	ldr	r3, [pc, #564]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056b0:	61bb      	str	r3, [r7, #24]
    break;
 80056b2:	e10b      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80056b4:	4b8c      	ldr	r3, [pc, #560]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056b6:	61bb      	str	r3, [r7, #24]
    break;
 80056b8:	e108      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056ba:	4b88      	ldr	r3, [pc, #544]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80056c4:	4b85      	ldr	r3, [pc, #532]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056d0:	4b82      	ldr	r3, [pc, #520]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80056da:	4b80      	ldr	r3, [pc, #512]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056de:	08db      	lsrs	r3, r3, #3
 80056e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80e1 	beq.w	80058c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b02      	cmp	r3, #2
 8005702:	f000 8083 	beq.w	800580c <HAL_RCC_GetSysClockFreq+0x204>
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b02      	cmp	r3, #2
 800570a:	f200 80a1 	bhi.w	8005850 <HAL_RCC_GetSysClockFreq+0x248>
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_RCC_GetSysClockFreq+0x114>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d056      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800571a:	e099      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800571c:	4b6f      	ldr	r3, [pc, #444]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d02d      	beq.n	8005784 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005728:	4b6c      	ldr	r3, [pc, #432]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	08db      	lsrs	r3, r3, #3
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	4a6b      	ldr	r2, [pc, #428]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
 8005738:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	ee07 3a90 	vmov	s15, r3
 8005740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005752:	4b62      	ldr	r3, [pc, #392]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005762:	ed97 6a02 	vldr	s12, [r7, #8]
 8005766:	eddf 5a61 	vldr	s11, [pc, #388]	; 80058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005782:	e087      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80058f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	4b51      	ldr	r3, [pc, #324]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057c6:	e065      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80058f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057da:	4b40      	ldr	r3, [pc, #256]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800580a:	e043      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	eddf 6a38 	vldr	s13, [pc, #224]	; 80058f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b2f      	ldr	r3, [pc, #188]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005832:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800584e:	e021      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80058f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800585e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005872:	ed97 6a02 	vldr	s12, [r7, #8]
 8005876:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800587a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005892:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005894:	4b11      	ldr	r3, [pc, #68]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	0a5b      	lsrs	r3, r3, #9
 800589a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589e:	3301      	adds	r3, #1
 80058a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	ee07 3a90 	vmov	s15, r3
 80058a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058b8:	ee17 3a90 	vmov	r3, s15
 80058bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80058be:	e005      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
    break;
 80058c4:	e002      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80058c6:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058c8:	61bb      	str	r3, [r7, #24]
    break;
 80058ca:	bf00      	nop
  }

  return sysclockfreq;
 80058cc:	69bb      	ldr	r3, [r7, #24]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3724      	adds	r7, #36	; 0x24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	58024400 	.word	0x58024400
 80058e0:	03d09000 	.word	0x03d09000
 80058e4:	003d0900 	.word	0x003d0900
 80058e8:	017d7840 	.word	0x017d7840
 80058ec:	46000000 	.word	0x46000000
 80058f0:	4c742400 	.word	0x4c742400
 80058f4:	4a742400 	.word	0x4a742400
 80058f8:	4bbebc20 	.word	0x4bbebc20

080058fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005902:	f7ff fe81 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 8005906:	4602      	mov	r2, r0
 8005908:	4b10      	ldr	r3, [pc, #64]	; (800594c <HAL_RCC_GetHCLKFreq+0x50>)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	490f      	ldr	r1, [pc, #60]	; (8005950 <HAL_RCC_GetHCLKFreq+0x54>)
 8005914:	5ccb      	ldrb	r3, [r1, r3]
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	fa22 f303 	lsr.w	r3, r2, r3
 800591e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <HAL_RCC_GetHCLKFreq+0x50>)
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <HAL_RCC_GetHCLKFreq+0x54>)
 800592a:	5cd3      	ldrb	r3, [r2, r3]
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	fa22 f303 	lsr.w	r3, r2, r3
 8005936:	4a07      	ldr	r2, [pc, #28]	; (8005954 <HAL_RCC_GetHCLKFreq+0x58>)
 8005938:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800593a:	4a07      	ldr	r2, [pc, #28]	; (8005958 <HAL_RCC_GetHCLKFreq+0x5c>)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <HAL_RCC_GetHCLKFreq+0x58>)
 8005942:	681b      	ldr	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	58024400 	.word	0x58024400
 8005950:	08025740 	.word	0x08025740
 8005954:	24000020 	.word	0x24000020
 8005958:	2400001c 	.word	0x2400001c

0800595c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005964:	2300      	movs	r3, #0
 8005966:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005968:	2300      	movs	r3, #0
 800596a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d03f      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005980:	d02a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005986:	d824      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800598c:	d018      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800598e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005992:	d81e      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599c:	d007      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800599e:	e018      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a0:	4ba3      	ldr	r3, [pc, #652]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	4aa2      	ldr	r2, [pc, #648]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059ac:	e015      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	2102      	movs	r1, #2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 fff9 	bl	80079ac <RCCEx_PLL2_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059be:	e00c      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3324      	adds	r3, #36	; 0x24
 80059c4:	2102      	movs	r1, #2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f002 f8a2 	bl	8007b10 <RCCEx_PLL3_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059d0:	e003      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
      break;
 80059d6:	e000      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059e0:	4b93      	ldr	r3, [pc, #588]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ec:	4990      	ldr	r1, [pc, #576]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	650b      	str	r3, [r1, #80]	; 0x50
 80059f2:	e001      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d03d      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d826      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a0c:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a29 	.word	0x08005a29
 8005a18:	08005a37 	.word	0x08005a37
 8005a1c:	08005a49 	.word	0x08005a49
 8005a20:	08005a61 	.word	0x08005a61
 8005a24:	08005a61 	.word	0x08005a61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a28:	4b81      	ldr	r3, [pc, #516]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4a80      	ldr	r2, [pc, #512]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a34:	e015      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 ffb5 	bl	80079ac <RCCEx_PLL2_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a46:	e00c      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3324      	adds	r3, #36	; 0x24
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f002 f85e 	bl	8007b10 <RCCEx_PLL3_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a58:	e003      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5e:	e000      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a68:	4b71      	ldr	r3, [pc, #452]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	f023 0207 	bic.w	r2, r3, #7
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a74:	496e      	ldr	r1, [pc, #440]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	650b      	str	r3, [r1, #80]	; 0x50
 8005a7a:	e001      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d042      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a94:	d02b      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9a:	d825      	bhi.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a9c:	2bc0      	cmp	r3, #192	; 0xc0
 8005a9e:	d028      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005aa0:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa2:	d821      	bhi.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005aa4:	2b80      	cmp	r3, #128	; 0x80
 8005aa6:	d016      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d81d      	bhi.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d007      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005ab4:	e018      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab6:	4b5e      	ldr	r3, [pc, #376]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	4a5d      	ldr	r2, [pc, #372]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ac2:	e017      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 ff6e 	bl	80079ac <RCCEx_PLL2_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ad4:	e00e      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3324      	adds	r3, #36	; 0x24
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f002 f817 	bl	8007b10 <RCCEx_PLL3_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ae6:	e005      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	75fb      	strb	r3, [r7, #23]
      break;
 8005aec:	e002      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005aee:	bf00      	nop
 8005af0:	e000      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005afa:	4b4d      	ldr	r3, [pc, #308]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	494a      	ldr	r1, [pc, #296]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	650b      	str	r3, [r1, #80]	; 0x50
 8005b0c:	e001      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d049      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b28:	d030      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005b2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b2e:	d82a      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b34:	d02c      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005b36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b3a:	d824      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b40:	d018      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b46:	d81e      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b50:	d007      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005b52:	e018      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b54:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	4a35      	ldr	r2, [pc, #212]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b60:	e017      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3304      	adds	r3, #4
 8005b66:	2100      	movs	r1, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 ff1f 	bl	80079ac <RCCEx_PLL2_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b72:	e00e      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3324      	adds	r3, #36	; 0x24
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 ffc8 	bl	8007b10 <RCCEx_PLL3_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b84:	e005      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	75fb      	strb	r3, [r7, #23]
      break;
 8005b8a:	e002      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b8c:	bf00      	nop
 8005b8e:	e000      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ba6:	4922      	ldr	r1, [pc, #136]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	658b      	str	r3, [r1, #88]	; 0x58
 8005bac:	e001      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d04b      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bc8:	d030      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005bca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bce:	d82a      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005bd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bd4:	d02e      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005bd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bda:	d824      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be0:	d018      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be6:	d81e      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bf0:	d007      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005bf2:	e018      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	4a0d      	ldr	r2, [pc, #52]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c00:	e019      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	2100      	movs	r1, #0
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fecf 	bl	80079ac <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c12:	e010      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3324      	adds	r3, #36	; 0x24
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 ff78 	bl	8007b10 <RCCEx_PLL3_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c24:	e007      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
      break;
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005c2c:	bf00      	nop
 8005c2e:	e002      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005c30:	58024400 	.word	0x58024400
      break;
 8005c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c3c:	4b99      	ldr	r3, [pc, #612]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c4a:	4996      	ldr	r1, [pc, #600]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	658b      	str	r3, [r1, #88]	; 0x58
 8005c50:	e001      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d032      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c66:	2b30      	cmp	r3, #48	; 0x30
 8005c68:	d01c      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005c6a:	2b30      	cmp	r3, #48	; 0x30
 8005c6c:	d817      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d00c      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d813      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d10f      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7e:	4b89      	ldr	r3, [pc, #548]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	4a88      	ldr	r2, [pc, #544]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c8a:	e00e      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	2102      	movs	r1, #2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 fe8a 	bl	80079ac <RCCEx_PLL2_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c9c:	e005      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca2:	e002      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005ca4:	bf00      	nop
 8005ca6:	e000      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cb0:	4b7c      	ldr	r3, [pc, #496]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbc:	4979      	ldr	r1, [pc, #484]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005cc2:	e001      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d047      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cdc:	d030      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ce2:	d82a      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005ce4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ce8:	d02c      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005cea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cee:	d824      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf4:	d018      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfa:	d81e      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d007      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005d06:	e018      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d08:	4b66      	ldr	r3, [pc, #408]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	4a65      	ldr	r2, [pc, #404]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d14:	e017      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 fe45 	bl	80079ac <RCCEx_PLL2_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d26:	e00e      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3324      	adds	r3, #36	; 0x24
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 feee 	bl	8007b10 <RCCEx_PLL3_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d38:	e005      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d3e:	e002      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005d40:	bf00      	nop
 8005d42:	e000      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d109      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d4c:	4b55      	ldr	r3, [pc, #340]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d50:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d58:	4952      	ldr	r1, [pc, #328]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	650b      	str	r3, [r1, #80]	; 0x50
 8005d5e:	e001      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d049      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d78:	d02e      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d7e:	d828      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d84:	d02a      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005d86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d8a:	d822      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d90:	d026      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d96:	d81c      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d9c:	d010      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da2:	d816      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01d      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dac:	d111      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3304      	adds	r3, #4
 8005db2:	2101      	movs	r1, #1
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 fdf9 	bl	80079ac <RCCEx_PLL2_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005dbe:	e012      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3324      	adds	r3, #36	; 0x24
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fea2 	bl	8007b10 <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005dd0:	e009      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd6:	e006      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005dd8:	bf00      	nop
 8005dda:	e004      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ddc:	bf00      	nop
 8005dde:	e002      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005de0:	bf00      	nop
 8005de2:	e000      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005dec:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df8:	492a      	ldr	r1, [pc, #168]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	650b      	str	r3, [r1, #80]	; 0x50
 8005dfe:	e001      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d04d      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e1a:	d02e      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e20:	d828      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d02a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d822      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e32:	d026      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005e34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e38:	d81c      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e3e:	d010      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e44:	d816      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01d      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e4e:	d111      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3304      	adds	r3, #4
 8005e54:	2101      	movs	r1, #1
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 fda8 	bl	80079ac <RCCEx_PLL2_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e60:	e012      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3324      	adds	r3, #36	; 0x24
 8005e66:	2101      	movs	r1, #1
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 fe51 	bl	8007b10 <RCCEx_PLL3_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e72:	e009      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	75fb      	strb	r3, [r7, #23]
      break;
 8005e78:	e006      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e7a:	bf00      	nop
 8005e7c:	e004      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e7e:	bf00      	nop
 8005e80:	e002      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e82:	bf00      	nop
 8005e84:	e000      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e8e:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e9c:	4901      	ldr	r1, [pc, #4]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	658b      	str	r3, [r1, #88]	; 0x58
 8005ea2:	e003      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d02f      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec0:	d00e      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec6:	d814      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d015      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ed0:	d10f      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed2:	4baf      	ldr	r3, [pc, #700]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4aae      	ldr	r2, [pc, #696]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ede:	e00c      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fd60 	bl	80079ac <RCCEx_PLL2_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ef0:	e003      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef6:	e000      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d109      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f00:	4ba3      	ldr	r3, [pc, #652]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f0c:	49a0      	ldr	r1, [pc, #640]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	650b      	str	r3, [r1, #80]	; 0x50
 8005f12:	e001      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
 8005f16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d032      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d81b      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f6b 	.word	0x08005f6b
 8005f38:	08005f45 	.word	0x08005f45
 8005f3c:	08005f53 	.word	0x08005f53
 8005f40:	08005f6b 	.word	0x08005f6b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f44:	4b92      	ldr	r3, [pc, #584]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	4a91      	ldr	r2, [pc, #580]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f50:	e00c      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3304      	adds	r3, #4
 8005f56:	2102      	movs	r1, #2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 fd27 	bl	80079ac <RCCEx_PLL2_Config>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f62:	e003      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
      break;
 8005f68:	e000      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f72:	4b87      	ldr	r3, [pc, #540]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f76:	f023 0203 	bic.w	r2, r3, #3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	4984      	ldr	r1, [pc, #528]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f84:	e001      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8086 	beq.w	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f98:	4b7e      	ldr	r3, [pc, #504]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a7d      	ldr	r2, [pc, #500]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fa4:	f7fc fba8 	bl	80026f8 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005faa:	e009      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fac:	f7fc fba4 	bl	80026f8 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	; 0x64
 8005fb8:	d902      	bls.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	75fb      	strb	r3, [r7, #23]
        break;
 8005fbe:	e005      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fc0:	4b74      	ldr	r3, [pc, #464]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0ef      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d166      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fd2:	4b6f      	ldr	r3, [pc, #444]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fdc:	4053      	eors	r3, r2
 8005fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d013      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fe6:	4b6a      	ldr	r3, [pc, #424]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ff0:	4b67      	ldr	r3, [pc, #412]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff4:	4a66      	ldr	r2, [pc, #408]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ffc:	4b64      	ldr	r3, [pc, #400]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006000:	4a63      	ldr	r2, [pc, #396]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006006:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006008:	4a61      	ldr	r2, [pc, #388]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006018:	d115      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601a:	f7fc fb6d 	bl	80026f8 <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006020:	e00b      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006022:	f7fc fb69 	bl	80026f8 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006030:	4293      	cmp	r3, r2
 8006032:	d902      	bls.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	75fb      	strb	r3, [r7, #23]
            break;
 8006038:	e005      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800603a:	4b55      	ldr	r3, [pc, #340]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0ed      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d126      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605a:	d10d      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800605c:	4b4c      	ldr	r3, [pc, #304]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800606a:	0919      	lsrs	r1, r3, #4
 800606c:	4b4a      	ldr	r3, [pc, #296]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800606e:	400b      	ands	r3, r1
 8006070:	4947      	ldr	r1, [pc, #284]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006072:	4313      	orrs	r3, r2
 8006074:	610b      	str	r3, [r1, #16]
 8006076:	e005      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006078:	4b45      	ldr	r3, [pc, #276]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	4a44      	ldr	r2, [pc, #272]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800607e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006082:	6113      	str	r3, [r2, #16]
 8006084:	4b42      	ldr	r3, [pc, #264]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006086:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800608e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006092:	493f      	ldr	r1, [pc, #252]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006094:	4313      	orrs	r3, r2
 8006096:	670b      	str	r3, [r1, #112]	; 0x70
 8006098:	e004      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	75bb      	strb	r3, [r7, #22]
 800609e:	e001      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8085 	beq.w	80061bc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060b6:	2b28      	cmp	r3, #40	; 0x28
 80060b8:	d866      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	0800619d 	.word	0x0800619d
 80060c4:	08006189 	.word	0x08006189
 80060c8:	08006189 	.word	0x08006189
 80060cc:	08006189 	.word	0x08006189
 80060d0:	08006189 	.word	0x08006189
 80060d4:	08006189 	.word	0x08006189
 80060d8:	08006189 	.word	0x08006189
 80060dc:	08006189 	.word	0x08006189
 80060e0:	08006165 	.word	0x08006165
 80060e4:	08006189 	.word	0x08006189
 80060e8:	08006189 	.word	0x08006189
 80060ec:	08006189 	.word	0x08006189
 80060f0:	08006189 	.word	0x08006189
 80060f4:	08006189 	.word	0x08006189
 80060f8:	08006189 	.word	0x08006189
 80060fc:	08006189 	.word	0x08006189
 8006100:	08006177 	.word	0x08006177
 8006104:	08006189 	.word	0x08006189
 8006108:	08006189 	.word	0x08006189
 800610c:	08006189 	.word	0x08006189
 8006110:	08006189 	.word	0x08006189
 8006114:	08006189 	.word	0x08006189
 8006118:	08006189 	.word	0x08006189
 800611c:	08006189 	.word	0x08006189
 8006120:	0800619d 	.word	0x0800619d
 8006124:	08006189 	.word	0x08006189
 8006128:	08006189 	.word	0x08006189
 800612c:	08006189 	.word	0x08006189
 8006130:	08006189 	.word	0x08006189
 8006134:	08006189 	.word	0x08006189
 8006138:	08006189 	.word	0x08006189
 800613c:	08006189 	.word	0x08006189
 8006140:	0800619d 	.word	0x0800619d
 8006144:	08006189 	.word	0x08006189
 8006148:	08006189 	.word	0x08006189
 800614c:	08006189 	.word	0x08006189
 8006150:	08006189 	.word	0x08006189
 8006154:	08006189 	.word	0x08006189
 8006158:	08006189 	.word	0x08006189
 800615c:	08006189 	.word	0x08006189
 8006160:	0800619d 	.word	0x0800619d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	2101      	movs	r1, #1
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fc1e 	bl	80079ac <RCCEx_PLL2_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006174:	e013      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3324      	adds	r3, #36	; 0x24
 800617a:	2101      	movs	r1, #1
 800617c:	4618      	mov	r0, r3
 800617e:	f001 fcc7 	bl	8007b10 <RCCEx_PLL3_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006186:	e00a      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	75fb      	strb	r3, [r7, #23]
      break;
 800618c:	e007      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
 8006194:	58024800 	.word	0x58024800
 8006198:	00ffffcf 	.word	0x00ffffcf
      break;
 800619c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d109      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061a4:	4b96      	ldr	r3, [pc, #600]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061b0:	4993      	ldr	r1, [pc, #588]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	654b      	str	r3, [r1, #84]	; 0x54
 80061b6:	e001      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d038      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061cc:	2b05      	cmp	r3, #5
 80061ce:	d821      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	0800621b 	.word	0x0800621b
 80061dc:	080061f1 	.word	0x080061f1
 80061e0:	08006203 	.word	0x08006203
 80061e4:	0800621b 	.word	0x0800621b
 80061e8:	0800621b 	.word	0x0800621b
 80061ec:	0800621b 	.word	0x0800621b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	2101      	movs	r1, #1
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 fbd8 	bl	80079ac <RCCEx_PLL2_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006200:	e00c      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3324      	adds	r3, #36	; 0x24
 8006206:	2101      	movs	r1, #1
 8006208:	4618      	mov	r0, r3
 800620a:	f001 fc81 	bl	8007b10 <RCCEx_PLL3_Config>
 800620e:	4603      	mov	r3, r0
 8006210:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006212:	e003      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	75fb      	strb	r3, [r7, #23]
      break;
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800621a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d109      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006222:	4b77      	ldr	r3, [pc, #476]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	f023 0207 	bic.w	r2, r3, #7
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800622e:	4974      	ldr	r1, [pc, #464]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006230:	4313      	orrs	r3, r2
 8006232:	654b      	str	r3, [r1, #84]	; 0x54
 8006234:	e001      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d03a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624c:	2b05      	cmp	r3, #5
 800624e:	d821      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006250:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	0800629b 	.word	0x0800629b
 800625c:	08006271 	.word	0x08006271
 8006260:	08006283 	.word	0x08006283
 8006264:	0800629b 	.word	0x0800629b
 8006268:	0800629b 	.word	0x0800629b
 800626c:	0800629b 	.word	0x0800629b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3304      	adds	r3, #4
 8006274:	2101      	movs	r1, #1
 8006276:	4618      	mov	r0, r3
 8006278:	f001 fb98 	bl	80079ac <RCCEx_PLL2_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006280:	e00c      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3324      	adds	r3, #36	; 0x24
 8006286:	2101      	movs	r1, #1
 8006288:	4618      	mov	r0, r3
 800628a:	f001 fc41 	bl	8007b10 <RCCEx_PLL3_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006292:	e003      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
      break;
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800629a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062a2:	4b57      	ldr	r3, [pc, #348]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a6:	f023 0207 	bic.w	r2, r3, #7
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b0:	4953      	ldr	r1, [pc, #332]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	658b      	str	r3, [r1, #88]	; 0x58
 80062b6:	e001      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d04b      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062d2:	d02e      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80062d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062d8:	d828      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062de:	d02a      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e4:	d822      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062ea:	d026      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80062ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062f0:	d81c      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f6:	d010      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80062f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062fc:	d816      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d01d      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006306:	d111      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3304      	adds	r3, #4
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fb4c 	bl	80079ac <RCCEx_PLL2_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006318:	e012      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3324      	adds	r3, #36	; 0x24
 800631e:	2102      	movs	r1, #2
 8006320:	4618      	mov	r0, r3
 8006322:	f001 fbf5 	bl	8007b10 <RCCEx_PLL3_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800632a:	e009      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	75fb      	strb	r3, [r7, #23]
      break;
 8006330:	e006      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006332:	bf00      	nop
 8006334:	e004      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006336:	bf00      	nop
 8006338:	e002      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800633a:	bf00      	nop
 800633c:	e000      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800633e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006346:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006354:	492a      	ldr	r1, [pc, #168]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006356:	4313      	orrs	r3, r2
 8006358:	654b      	str	r3, [r1, #84]	; 0x54
 800635a:	e001      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635c:	7dfb      	ldrb	r3, [r7, #23]
 800635e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d04d      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006372:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006376:	d02e      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006378:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800637c:	d828      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006382:	d02a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006388:	d822      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800638a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800638e:	d026      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006390:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006394:	d81c      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800639a:	d010      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800639c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a0:	d816      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d01d      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063aa:	d111      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	2100      	movs	r1, #0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 fafa 	bl	80079ac <RCCEx_PLL2_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063bc:	e012      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3324      	adds	r3, #36	; 0x24
 80063c2:	2102      	movs	r1, #2
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 fba3 	bl	8007b10 <RCCEx_PLL3_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063ce:	e009      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
      break;
 80063d4:	e006      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063d6:	bf00      	nop
 80063d8:	e004      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063da:	bf00      	nop
 80063dc:	e002      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063de:	bf00      	nop
 80063e0:	e000      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10c      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063f8:	4901      	ldr	r1, [pc, #4]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	658b      	str	r3, [r1, #88]	; 0x58
 80063fe:	e003      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006410:	2b00      	cmp	r3, #0
 8006412:	d04b      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800641a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800641e:	d02e      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006420:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006424:	d828      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642a:	d02a      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800642c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006430:	d822      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006432:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006436:	d026      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006438:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800643c:	d81c      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800643e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006442:	d010      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006448:	d816      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d01d      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800644e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006452:	d111      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3304      	adds	r3, #4
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f001 faa6 	bl	80079ac <RCCEx_PLL2_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006464:	e012      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3324      	adds	r3, #36	; 0x24
 800646a:	2102      	movs	r1, #2
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fb4f 	bl	8007b10 <RCCEx_PLL3_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006476:	e009      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	75fb      	strb	r3, [r7, #23]
      break;
 800647c:	e006      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800647e:	bf00      	nop
 8006480:	e004      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006482:	bf00      	nop
 8006484:	e002      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006486:	bf00      	nop
 8006488:	e000      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800648a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006492:	4b9d      	ldr	r3, [pc, #628]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064a0:	4999      	ldr	r1, [pc, #612]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	658b      	str	r3, [r1, #88]	; 0x58
 80064a6:	e001      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01a      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c2:	d10a      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3324      	adds	r3, #36	; 0x24
 80064c8:	2102      	movs	r1, #2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 fb20 	bl	8007b10 <RCCEx_PLL3_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064da:	4b8b      	ldr	r3, [pc, #556]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e8:	4987      	ldr	r1, [pc, #540]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01a      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006504:	d10a      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3324      	adds	r3, #36	; 0x24
 800650a:	2102      	movs	r1, #2
 800650c:	4618      	mov	r0, r3
 800650e:	f001 faff 	bl	8007b10 <RCCEx_PLL3_Config>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800651c:	4b7a      	ldr	r3, [pc, #488]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800651e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800652a:	4977      	ldr	r1, [pc, #476]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800652c:	4313      	orrs	r3, r2
 800652e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d034      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006546:	d01d      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800654c:	d817      	bhi.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006556:	d009      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006558:	e011      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3304      	adds	r3, #4
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f001 fa23 	bl	80079ac <RCCEx_PLL2_Config>
 8006566:	4603      	mov	r3, r0
 8006568:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800656a:	e00c      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3324      	adds	r3, #36	; 0x24
 8006570:	2102      	movs	r1, #2
 8006572:	4618      	mov	r0, r3
 8006574:	f001 facc 	bl	8007b10 <RCCEx_PLL3_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800657c:	e003      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	75fb      	strb	r3, [r7, #23]
      break;
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800658c:	4b5e      	ldr	r3, [pc, #376]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800658e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800659a:	495b      	ldr	r1, [pc, #364]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800659c:	4313      	orrs	r3, r2
 800659e:	658b      	str	r3, [r1, #88]	; 0x58
 80065a0:	e001      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d033      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065bc:	d01c      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80065be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065c2:	d816      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80065c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c8:	d003      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80065ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ce:	d007      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80065d0:	e00f      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d2:	4b4d      	ldr	r3, [pc, #308]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	4a4c      	ldr	r2, [pc, #304]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80065de:	e00c      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3324      	adds	r3, #36	; 0x24
 80065e4:	2101      	movs	r1, #1
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fa92 	bl	8007b10 <RCCEx_PLL3_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80065f0:	e003      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
      break;
 80065f6:	e000      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80065f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006600:	4b41      	ldr	r3, [pc, #260]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660e:	493e      	ldr	r1, [pc, #248]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006610:	4313      	orrs	r3, r2
 8006612:	654b      	str	r3, [r1, #84]	; 0x54
 8006614:	e001      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d029      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800662e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006632:	d007      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006634:	e00f      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006636:	4b34      	ldr	r3, [pc, #208]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	4a33      	ldr	r2, [pc, #204]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800663c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006640:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006642:	e00b      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	2102      	movs	r1, #2
 800664a:	4618      	mov	r0, r3
 800664c:	f001 f9ae 	bl	80079ac <RCCEx_PLL2_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006654:	e002      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]
      break;
 800665a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006662:	4b29      	ldr	r3, [pc, #164]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666e:	4926      	ldr	r1, [pc, #152]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006670:	4313      	orrs	r3, r2
 8006672:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006674:	e001      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3324      	adds	r3, #36	; 0x24
 800668a:	2102      	movs	r1, #2
 800668c:	4618      	mov	r0, r3
 800668e:	f001 fa3f 	bl	8007b10 <RCCEx_PLL3_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d033      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b0:	d017      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80066b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b6:	d811      	bhi.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80066b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066bc:	d013      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80066be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c2:	d80b      	bhi.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d010      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80066c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066cc:	d106      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ce:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	4a0d      	ldr	r2, [pc, #52]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80066da:	e007      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	75fb      	strb	r3, [r7, #23]
      break;
 80066e0:	e004      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80066e2:	bf00      	nop
 80066e4:	e002      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80066e6:	bf00      	nop
 80066e8:	e000      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80066ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10c      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fe:	4902      	ldr	r1, [pc, #8]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006700:	4313      	orrs	r3, r2
 8006702:	654b      	str	r3, [r1, #84]	; 0x54
 8006704:	e004      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006706:	bf00      	nop
 8006708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d008      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800671c:	4b31      	ldr	r3, [pc, #196]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800671e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006720:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006728:	492e      	ldr	r1, [pc, #184]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800672a:	4313      	orrs	r3, r2
 800672c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800673a:	4b2a      	ldr	r3, [pc, #168]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006748:	4926      	ldr	r1, [pc, #152]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800674a:	4313      	orrs	r3, r2
 800674c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800675a:	4b22      	ldr	r3, [pc, #136]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800675c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006766:	491f      	ldr	r1, [pc, #124]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006768:	4313      	orrs	r3, r2
 800676a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00d      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006778:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800677e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006782:	6113      	str	r3, [r2, #16]
 8006784:	4b17      	ldr	r3, [pc, #92]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800678e:	4915      	ldr	r1, [pc, #84]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006790:	4313      	orrs	r3, r2
 8006792:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	da08      	bge.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800679e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a8:	490e      	ldr	r1, [pc, #56]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c8:	4906      	ldr	r1, [pc, #24]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80067ce:	7dbb      	ldrb	r3, [r7, #22]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e000      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	58024400 	.word	0x58024400

080067e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b090      	sub	sp, #64	; 0x40
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f6:	f040 8095 	bne.w	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80067fa:	4b97      	ldr	r3, [pc, #604]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80067fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	2b04      	cmp	r3, #4
 8006808:	f200 8088 	bhi.w	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006829 	.word	0x08006829
 8006818:	08006851 	.word	0x08006851
 800681c:	08006879 	.word	0x08006879
 8006820:	08006915 	.word	0x08006915
 8006824:	080068a1 	.word	0x080068a1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006828:	4b8b      	ldr	r3, [pc, #556]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006834:	d108      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800683a:	4618      	mov	r0, r3
 800683c:	f000 ff64 	bl	8007708 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006844:	f000 bc94 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800684c:	f000 bc90 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006850:	4b81      	ldr	r3, [pc, #516]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800685c:	d108      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800685e:	f107 0318 	add.w	r3, r7, #24
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fca8 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800686c:	f000 bc80 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006874:	f000 bc7c 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006878:	4b77      	ldr	r3, [pc, #476]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006884:	d108      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006886:	f107 030c 	add.w	r3, r7, #12
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fde8 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006894:	f000 bc6c 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800689c:	f000 bc68 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068a0:	4b6d      	ldr	r3, [pc, #436]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068aa:	4b6b      	ldr	r3, [pc, #428]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d10c      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068bc:	4b66      	ldr	r3, [pc, #408]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	08db      	lsrs	r3, r3, #3
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	4a65      	ldr	r2, [pc, #404]	; (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ce:	e01f      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068d0:	4b61      	ldr	r3, [pc, #388]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068dc:	d106      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068e4:	d102      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80068e6:	4b5e      	ldr	r3, [pc, #376]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ea:	e011      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ec:	4b5a      	ldr	r3, [pc, #360]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f8:	d106      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006900:	d102      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006902:	4b58      	ldr	r3, [pc, #352]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006906:	e003      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800690c:	f000 bc30 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006910:	f000 bc2e 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006914:	4b54      	ldr	r3, [pc, #336]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006918:	f000 bc2a 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006920:	f000 bc26 	b.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692a:	f040 809f 	bne.w	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800692e:	4b4a      	ldr	r3, [pc, #296]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006932:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006936:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693e:	d04d      	beq.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006946:	f200 8084 	bhi.w	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	2bc0      	cmp	r3, #192	; 0xc0
 800694e:	d07d      	beq.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	2bc0      	cmp	r3, #192	; 0xc0
 8006954:	d87d      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	2b80      	cmp	r3, #128	; 0x80
 800695a:	d02d      	beq.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	2b80      	cmp	r3, #128	; 0x80
 8006960:	d877      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d012      	beq.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800696e:	e070      	b.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006970:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800697c:	d107      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800697e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fec0 	bl	8007708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800698c:	e3f0      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006992:	e3ed      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006994:	4b30      	ldr	r3, [pc, #192]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800699c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069a0:	d107      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a2:	f107 0318 	add.w	r3, r7, #24
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fc06 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069b0:	e3de      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069b6:	e3db      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069b8:	4b27      	ldr	r3, [pc, #156]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c4:	d107      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069c6:	f107 030c 	add.w	r3, r7, #12
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fd48 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069d4:	e3cc      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069da:	e3c9      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80069dc:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069e6:	4b1c      	ldr	r3, [pc, #112]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d10c      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80069f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069f8:	4b17      	ldr	r3, [pc, #92]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	08db      	lsrs	r3, r3, #3
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a0a:	e01e      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a0c:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a18:	d106      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a20:	d102      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a22:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a26:	e010      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a34:	d106      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3c:	d102      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a42:	e002      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006a48:	e392      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006a4a:	e391      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a50:	e38e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a56:	e38b      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	03d09000 	.word	0x03d09000
 8006a60:	003d0900 	.word	0x003d0900
 8006a64:	017d7840 	.word	0x017d7840
 8006a68:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	f040 809c 	bne.w	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006a76:	4b9d      	ldr	r3, [pc, #628]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006a7e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a86:	d054      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a8e:	f200 808b 	bhi.w	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a98:	f000 8083 	beq.w	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006aa2:	f200 8081 	bhi.w	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aac:	d02f      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab4:	d878      	bhi.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ac2:	d012      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8006ac4:	e070      	b.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ac6:	4b89      	ldr	r3, [pc, #548]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fe15 	bl	8007708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ae2:	e345      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae8:	e342      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aea:	4b80      	ldr	r3, [pc, #512]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006af6:	d107      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af8:	f107 0318 	add.w	r3, r7, #24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fb5b 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b06:	e333      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b0c:	e330      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b0e:	4b77      	ldr	r3, [pc, #476]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b1a:	d107      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fc9d 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b2a:	e321      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b30:	e31e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b32:	4b6e      	ldr	r3, [pc, #440]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b3c:	4b6b      	ldr	r3, [pc, #428]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d10c      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b4e:	4b67      	ldr	r3, [pc, #412]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	08db      	lsrs	r3, r3, #3
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	4a65      	ldr	r2, [pc, #404]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b60:	e01e      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b62:	4b62      	ldr	r3, [pc, #392]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b76:	d102      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b78:	4b5e      	ldr	r3, [pc, #376]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b7c:	e010      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b7e:	4b5b      	ldr	r3, [pc, #364]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b8a:	d106      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b92:	d102      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b94:	4b58      	ldr	r3, [pc, #352]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b98:	e002      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b9e:	e2e7      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006ba0:	e2e6      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ba2:	4b56      	ldr	r3, [pc, #344]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ba6:	e2e3      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bac:	e2e0      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb4:	f040 80a7 	bne.w	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006bb8:	4b4c      	ldr	r3, [pc, #304]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006bc0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bc8:	d055      	beq.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bd0:	f200 8096 	bhi.w	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bda:	f000 8084 	beq.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006be4:	f200 808c 	bhi.w	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bee:	d030      	beq.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bf6:	f200 8083 	bhi.w	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c06:	d012      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006c08:	e07a      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c0a:	4b38      	ldr	r3, [pc, #224]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c16:	d107      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fd73 	bl	8007708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c26:	e2a3      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c2c:	e2a0      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c2e:	4b2f      	ldr	r3, [pc, #188]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c3a:	d107      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c3c:	f107 0318 	add.w	r3, r7, #24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fab9 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006c4a:	e291      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c50:	e28e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c52:	4b26      	ldr	r3, [pc, #152]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c60:	f107 030c 	add.w	r3, r7, #12
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fbfb 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c6e:	e27f      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c74:	e27c      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c76:	4b1d      	ldr	r3, [pc, #116]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c7e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d10c      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c92:	4b16      	ldr	r3, [pc, #88]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	08db      	lsrs	r3, r3, #3
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca4:	e01e      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ca6:	4b11      	ldr	r3, [pc, #68]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cba:	d102      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006cbc:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc0:	e010      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cce:	d106      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd6:	d102      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006cd8:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cdc:	e002      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ce2:	e245      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006ce4:	e244      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ce6:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cea:	e241      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006cec:	58024400 	.word	0x58024400
 8006cf0:	03d09000 	.word	0x03d09000
 8006cf4:	003d0900 	.word	0x003d0900
 8006cf8:	017d7840 	.word	0x017d7840
 8006cfc:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d04:	e234      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0c:	f040 809c 	bne.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006d10:	4b9b      	ldr	r3, [pc, #620]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d14:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d20:	d054      	beq.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d28:	f200 808b 	bhi.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d32:	f000 8083 	beq.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d3c:	f200 8081 	bhi.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d46:	d02f      	beq.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d4e:	d878      	bhi.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d004      	beq.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5c:	d012      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006d5e:	e070      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d60:	4b87      	ldr	r3, [pc, #540]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d6c:	d107      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fcc8 	bl	8007708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d7c:	e1f8      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d82:	e1f5      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d84:	4b7e      	ldr	r3, [pc, #504]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d90:	d107      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d92:	f107 0318 	add.w	r3, r7, #24
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fa0e 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006da0:	e1e6      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da6:	e1e3      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006da8:	4b75      	ldr	r3, [pc, #468]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006db4:	d107      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db6:	f107 030c 	add.w	r3, r7, #12
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fb50 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dc4:	e1d4      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dca:	e1d1      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006dcc:	4b6c      	ldr	r3, [pc, #432]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dd6:	4b6a      	ldr	r3, [pc, #424]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d10c      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006de8:	4b65      	ldr	r3, [pc, #404]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	08db      	lsrs	r3, r3, #3
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	4a64      	ldr	r2, [pc, #400]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006df4:	fa22 f303 	lsr.w	r3, r2, r3
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dfa:	e01e      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dfc:	4b60      	ldr	r3, [pc, #384]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e08:	d106      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e10:	d102      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e12:	4b5d      	ldr	r3, [pc, #372]	; (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e16:	e010      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e18:	4b59      	ldr	r3, [pc, #356]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e24:	d106      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e2c:	d102      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e2e:	4b57      	ldr	r3, [pc, #348]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e32:	e002      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e38:	e19a      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006e3a:	e199      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e3c:	4b54      	ldr	r3, [pc, #336]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e40:	e196      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e46:	e193      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e4e:	d173      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006e50:	4b4b      	ldr	r3, [pc, #300]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e60:	d02f      	beq.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e68:	d863      	bhi.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e76:	d012      	beq.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006e78:	e05b      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e7a:	4b41      	ldr	r3, [pc, #260]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e86:	d107      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e88:	f107 0318 	add.w	r3, r7, #24
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 f993 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e96:	e16b      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e9c:	e168      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e9e:	4b38      	ldr	r3, [pc, #224]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eaa:	d107      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eac:	f107 030c 	add.w	r3, r7, #12
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fad5 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006eba:	e159      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ec0:	e156      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ec2:	4b2f      	ldr	r3, [pc, #188]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ecc:	4b2c      	ldr	r3, [pc, #176]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d10c      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ede:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	08db      	lsrs	r3, r3, #3
 8006ee4:	f003 0303 	and.w	r3, r3, #3
 8006ee8:	4a26      	ldr	r2, [pc, #152]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006eea:	fa22 f303 	lsr.w	r3, r2, r3
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef0:	e01e      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ef2:	4b23      	ldr	r3, [pc, #140]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efe:	d106      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f06:	d102      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f08:	4b1f      	ldr	r3, [pc, #124]	; (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0c:	e010      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f0e:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f1a:	d106      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f22:	d102      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f24:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006f2e:	e11f      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006f30:	e11e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f36:	e11b      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3e:	d13e      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006f40:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f56:	d01d      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006f58:	e02e      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f5a:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f66:	d107      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fbcb 	bl	8007708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f76:	e0fb      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f7c:	e0f8      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006f7e:	bf00      	nop
 8006f80:	58024400 	.word	0x58024400
 8006f84:	03d09000 	.word	0x03d09000
 8006f88:	003d0900 	.word	0x003d0900
 8006f8c:	017d7840 	.word	0x017d7840
 8006f90:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f94:	4b79      	ldr	r3, [pc, #484]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fa0:	d107      	bne.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa2:	f107 0318 	add.w	r3, r7, #24
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f906 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fb0:	e0de      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb6:	e0db      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fbc:	e0d8      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fc4:	f040 8085 	bne.w	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006fc8:	4b6c      	ldr	r3, [pc, #432]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fcc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006fd0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fd8:	d06b      	beq.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fe0:	d874      	bhi.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe8:	d056      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff0:	d86c      	bhi.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ff8:	d03b      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007000:	d864      	bhi.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007008:	d021      	beq.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007010:	d85c      	bhi.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800701e:	d004      	beq.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007020:	e054      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007022:	f000 f8b3 	bl	800718c <HAL_RCCEx_GetD3PCLK1Freq>
 8007026:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007028:	e0a2      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800702a:	4b54      	ldr	r3, [pc, #336]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007036:	d107      	bne.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007038:	f107 0318 	add.w	r3, r7, #24
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f8bb 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007046:	e093      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800704c:	e090      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800704e:	4b4b      	ldr	r3, [pc, #300]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705a:	d107      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800705c:	f107 030c 	add.w	r3, r7, #12
 8007060:	4618      	mov	r0, r3
 8007062:	f000 f9fd 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800706a:	e081      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007070:	e07e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007072:	4b42      	ldr	r3, [pc, #264]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b04      	cmp	r3, #4
 800707c:	d109      	bne.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800707e:	4b3f      	ldr	r3, [pc, #252]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	08db      	lsrs	r3, r3, #3
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	4a3d      	ldr	r2, [pc, #244]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800708a:	fa22 f303 	lsr.w	r3, r2, r3
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007090:	e06e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007096:	e06b      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007098:	4b38      	ldr	r3, [pc, #224]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a4:	d102      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80070a6:	4b37      	ldr	r3, [pc, #220]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070aa:	e061      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b0:	e05e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070b2:	4b32      	ldr	r3, [pc, #200]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070be:	d102      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80070c0:	4b31      	ldr	r3, [pc, #196]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070c4:	e054      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ca:	e051      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070d0:	e04e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d8:	d148      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80070da:	4b28      	ldr	r3, [pc, #160]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ea:	d02a      	beq.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f2:	d838      	bhi.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d004      	beq.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007100:	d00d      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8007102:	e030      	b.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007104:	4b1d      	ldr	r3, [pc, #116]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007110:	d102      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8007112:	4b1d      	ldr	r3, [pc, #116]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007116:	e02b      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711c:	e028      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800711e:	4b17      	ldr	r3, [pc, #92]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800712a:	d107      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800712c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fae9 	bl	8007708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800713a:	e019      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007140:	e016      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800714a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800714e:	d107      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007150:	f107 0318 	add.w	r3, r7, #24
 8007154:	4618      	mov	r0, r3
 8007156:	f000 f82f 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800715e:	e007      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007164:	e004      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800716a:	e001      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007172:	4618      	mov	r0, r3
 8007174:	3740      	adds	r7, #64	; 0x40
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	58024400 	.word	0x58024400
 8007180:	03d09000 	.word	0x03d09000
 8007184:	003d0900 	.word	0x003d0900
 8007188:	017d7840 	.word	0x017d7840

0800718c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007190:	f7fe fbb4 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 8007194:	4602      	mov	r2, r0
 8007196:	4b06      	ldr	r3, [pc, #24]	; (80071b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	091b      	lsrs	r3, r3, #4
 800719c:	f003 0307 	and.w	r3, r3, #7
 80071a0:	4904      	ldr	r1, [pc, #16]	; (80071b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071a2:	5ccb      	ldrb	r3, [r1, r3]
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	58024400 	.word	0x58024400
 80071b4:	08025740 	.word	0x08025740

080071b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b089      	sub	sp, #36	; 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071c0:	4ba1      	ldr	r3, [pc, #644]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80071ca:	4b9f      	ldr	r3, [pc, #636]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	0b1b      	lsrs	r3, r3, #12
 80071d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071d6:	4b9c      	ldr	r3, [pc, #624]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	091b      	lsrs	r3, r3, #4
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071e2:	4b99      	ldr	r3, [pc, #612]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	08db      	lsrs	r3, r3, #3
 80071e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	fb02 f303 	mul.w	r3, r2, r3
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8111 	beq.w	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b02      	cmp	r3, #2
 800720a:	f000 8083 	beq.w	8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b02      	cmp	r3, #2
 8007212:	f200 80a1 	bhi.w	8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d056      	beq.n	80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007222:	e099      	b.n	8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007224:	4b88      	ldr	r3, [pc, #544]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d02d      	beq.n	800728c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007230:	4b85      	ldr	r3, [pc, #532]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	08db      	lsrs	r3, r3, #3
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	4a84      	ldr	r2, [pc, #528]	; (800744c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800723c:	fa22 f303 	lsr.w	r3, r2, r3
 8007240:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725a:	4b7b      	ldr	r3, [pc, #492]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	ed97 6a03 	vldr	s12, [r7, #12]
 800726e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800727e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007286:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800728a:	e087      	b.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800729a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729e:	4b6a      	ldr	r3, [pc, #424]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072ce:	e065      	b.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e2:	4b59      	ldr	r3, [pc, #356]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007312:	e043      	b.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800745c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b48      	ldr	r3, [pc, #288]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007336:	ed97 6a03 	vldr	s12, [r7, #12]
 800733a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007356:	e021      	b.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736a:	4b37      	ldr	r3, [pc, #220]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737a:	ed97 6a03 	vldr	s12, [r7, #12]
 800737e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800739a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800739c:	4b2a      	ldr	r3, [pc, #168]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a0:	0a5b      	lsrs	r3, r3, #9
 80073a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c2:	ee17 2a90 	vmov	r2, s15
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80073ca:	4b1f      	ldr	r3, [pc, #124]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	0c1b      	lsrs	r3, r3, #16
 80073d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d4:	ee07 3a90 	vmov	s15, r3
 80073d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073f0:	ee17 2a90 	vmov	r2, s15
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073f8:	4b13      	ldr	r3, [pc, #76]	; (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	0e1b      	lsrs	r3, r3, #24
 80073fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800740e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007412:	edd7 6a07 	vldr	s13, [r7, #28]
 8007416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800741a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800741e:	ee17 2a90 	vmov	r2, s15
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007426:	e008      	b.n	800743a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	609a      	str	r2, [r3, #8]
}
 800743a:	bf00      	nop
 800743c:	3724      	adds	r7, #36	; 0x24
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	58024400 	.word	0x58024400
 800744c:	03d09000 	.word	0x03d09000
 8007450:	46000000 	.word	0x46000000
 8007454:	4c742400 	.word	0x4c742400
 8007458:	4a742400 	.word	0x4a742400
 800745c:	4bbebc20 	.word	0x4bbebc20

08007460 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007460:	b480      	push	{r7}
 8007462:	b089      	sub	sp, #36	; 0x24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007468:	4ba1      	ldr	r3, [pc, #644]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007472:	4b9f      	ldr	r3, [pc, #636]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	0d1b      	lsrs	r3, r3, #20
 8007478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800747c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800747e:	4b9c      	ldr	r3, [pc, #624]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800748a:	4b99      	ldr	r3, [pc, #612]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748e:	08db      	lsrs	r3, r3, #3
 8007490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	fb02 f303 	mul.w	r3, r2, r3
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8111 	beq.w	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	f000 8083 	beq.w	80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	f200 80a1 	bhi.w	8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d056      	beq.n	8007578 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074ca:	e099      	b.n	8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074cc:	4b88      	ldr	r3, [pc, #544]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d02d      	beq.n	8007534 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074d8:	4b85      	ldr	r3, [pc, #532]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	08db      	lsrs	r3, r3, #3
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	4a84      	ldr	r2, [pc, #528]	; (80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
 80074e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007502:	4b7b      	ldr	r3, [pc, #492]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007512:	ed97 6a03 	vldr	s12, [r7, #12]
 8007516:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800751a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800752a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007532:	e087      	b.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007546:	4b6a      	ldr	r3, [pc, #424]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007556:	ed97 6a03 	vldr	s12, [r7, #12]
 800755a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800755e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800756a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007572:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007576:	e065      	b.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007582:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758a:	4b59      	ldr	r3, [pc, #356]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759a:	ed97 6a03 	vldr	s12, [r7, #12]
 800759e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075ba:	e043      	b.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ce:	4b48      	ldr	r3, [pc, #288]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075de:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075fe:	e021      	b.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800760e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007612:	4b37      	ldr	r3, [pc, #220]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007622:	ed97 6a03 	vldr	s12, [r7, #12]
 8007626:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800762a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007642:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007644:	4b2a      	ldr	r3, [pc, #168]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	0a5b      	lsrs	r3, r3, #9
 800764a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800765a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800765e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800766a:	ee17 2a90 	vmov	r2, s15
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007672:	4b1f      	ldr	r3, [pc, #124]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	0c1b      	lsrs	r3, r3, #16
 8007678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800768c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007698:	ee17 2a90 	vmov	r2, s15
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80076a0:	4b13      	ldr	r3, [pc, #76]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	0e1b      	lsrs	r3, r3, #24
 80076a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80076be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c6:	ee17 2a90 	vmov	r2, s15
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076ce:	e008      	b.n	80076e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	609a      	str	r2, [r3, #8]
}
 80076e2:	bf00      	nop
 80076e4:	3724      	adds	r7, #36	; 0x24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	58024400 	.word	0x58024400
 80076f4:	03d09000 	.word	0x03d09000
 80076f8:	46000000 	.word	0x46000000
 80076fc:	4c742400 	.word	0x4c742400
 8007700:	4a742400 	.word	0x4a742400
 8007704:	4bbebc20 	.word	0x4bbebc20

08007708 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007708:	b480      	push	{r7}
 800770a:	b089      	sub	sp, #36	; 0x24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007710:	4ba0      	ldr	r3, [pc, #640]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800771a:	4b9e      	ldr	r3, [pc, #632]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	091b      	lsrs	r3, r3, #4
 8007720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007724:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007726:	4b9b      	ldr	r3, [pc, #620]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007730:	4b98      	ldr	r3, [pc, #608]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007734:	08db      	lsrs	r3, r3, #3
 8007736:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	ee07 3a90 	vmov	s15, r3
 8007744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007748:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 8111 	beq.w	8007976 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	2b02      	cmp	r3, #2
 8007758:	f000 8083 	beq.w	8007862 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	2b02      	cmp	r3, #2
 8007760:	f200 80a1 	bhi.w	80078a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d056      	beq.n	800781e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007770:	e099      	b.n	80078a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007772:	4b88      	ldr	r3, [pc, #544]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b00      	cmp	r3, #0
 800777c:	d02d      	beq.n	80077da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800777e:	4b85      	ldr	r3, [pc, #532]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	08db      	lsrs	r3, r3, #3
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	4a83      	ldr	r2, [pc, #524]	; (8007998 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800778a:	fa22 f303 	lsr.w	r3, r2, r3
 800778e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a8:	4b7a      	ldr	r3, [pc, #488]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800799c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80077d8:	e087      	b.n	80078ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80079a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ec:	4b69      	ldr	r3, [pc, #420]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f4:	ee07 3a90 	vmov	s15, r3
 80077f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007800:	eddf 5a66 	vldr	s11, [pc, #408]	; 800799c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007818:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800781c:	e065      	b.n	80078ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	ee07 3a90 	vmov	s15, r3
 8007824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007828:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80079a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800782c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007830:	4b58      	ldr	r3, [pc, #352]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007840:	ed97 6a03 	vldr	s12, [r7, #12]
 8007844:	eddf 5a55 	vldr	s11, [pc, #340]	; 800799c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800784c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007860:	e043      	b.n	80078ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80079a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007874:	4b47      	ldr	r3, [pc, #284]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787c:	ee07 3a90 	vmov	s15, r3
 8007880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007884:	ed97 6a03 	vldr	s12, [r7, #12]
 8007888:	eddf 5a44 	vldr	s11, [pc, #272]	; 800799c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800788c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078a4:	e021      	b.n	80078ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80079a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80078b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b8:	4b36      	ldr	r3, [pc, #216]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800799c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80078ea:	4b2a      	ldr	r3, [pc, #168]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	0a5b      	lsrs	r3, r3, #9
 80078f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007904:	edd7 6a07 	vldr	s13, [r7, #28]
 8007908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800790c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007910:	ee17 2a90 	vmov	r2, s15
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007918:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	0c1b      	lsrs	r3, r3, #16
 800791e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800792e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007932:	edd7 6a07 	vldr	s13, [r7, #28]
 8007936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800793a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800793e:	ee17 2a90 	vmov	r2, s15
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007946:	4b13      	ldr	r3, [pc, #76]	; (8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	0e1b      	lsrs	r3, r3, #24
 800794c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007950:	ee07 3a90 	vmov	s15, r3
 8007954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800795c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007960:	edd7 6a07 	vldr	s13, [r7, #28]
 8007964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800796c:	ee17 2a90 	vmov	r2, s15
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007974:	e008      	b.n	8007988 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	609a      	str	r2, [r3, #8]
}
 8007988:	bf00      	nop
 800798a:	3724      	adds	r7, #36	; 0x24
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	58024400 	.word	0x58024400
 8007998:	03d09000 	.word	0x03d09000
 800799c:	46000000 	.word	0x46000000
 80079a0:	4c742400 	.word	0x4c742400
 80079a4:	4a742400 	.word	0x4a742400
 80079a8:	4bbebc20 	.word	0x4bbebc20

080079ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079ba:	4b53      	ldr	r3, [pc, #332]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d101      	bne.n	80079ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e099      	b.n	8007afe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079ca:	4b4f      	ldr	r3, [pc, #316]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a4e      	ldr	r2, [pc, #312]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 80079d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d6:	f7fa fe8f 	bl	80026f8 <HAL_GetTick>
 80079da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079dc:	e008      	b.n	80079f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079de:	f7fa fe8b 	bl	80026f8 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e086      	b.n	8007afe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079f0:	4b45      	ldr	r3, [pc, #276]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f0      	bne.n	80079de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079fc:	4b42      	ldr	r3, [pc, #264]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 80079fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	031b      	lsls	r3, r3, #12
 8007a0a:	493f      	ldr	r1, [pc, #252]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	628b      	str	r3, [r1, #40]	; 0x28
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	025b      	lsls	r3, r3, #9
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	041b      	lsls	r3, r3, #16
 8007a2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	061b      	lsls	r3, r3, #24
 8007a3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a40:	4931      	ldr	r1, [pc, #196]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a46:	4b30      	ldr	r3, [pc, #192]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	492d      	ldr	r1, [pc, #180]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a58:	4b2b      	ldr	r3, [pc, #172]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	f023 0220 	bic.w	r2, r3, #32
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	4928      	ldr	r1, [pc, #160]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a6a:	4b27      	ldr	r3, [pc, #156]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6e:	4a26      	ldr	r2, [pc, #152]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a70:	f023 0310 	bic.w	r3, r3, #16
 8007a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a76:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a7a:	4b24      	ldr	r3, [pc, #144]	; (8007b0c <RCCEx_PLL2_Config+0x160>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	69d2      	ldr	r2, [r2, #28]
 8007a82:	00d2      	lsls	r2, r2, #3
 8007a84:	4920      	ldr	r1, [pc, #128]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a8a:	4b1f      	ldr	r3, [pc, #124]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	4a1e      	ldr	r2, [pc, #120]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a90:	f043 0310 	orr.w	r3, r3, #16
 8007a94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a9c:	4b1a      	ldr	r3, [pc, #104]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007aa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007aa8:	e00f      	b.n	8007aca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d106      	bne.n	8007abe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ab0:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	4a14      	ldr	r2, [pc, #80]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007abc:	e005      	b.n	8007aca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007abe:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	4a11      	ldr	r2, [pc, #68]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ac8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007aca:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a0e      	ldr	r2, [pc, #56]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad6:	f7fa fe0f 	bl	80026f8 <HAL_GetTick>
 8007ada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007adc:	e008      	b.n	8007af0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ade:	f7fa fe0b 	bl	80026f8 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d901      	bls.n	8007af0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e006      	b.n	8007afe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <RCCEx_PLL2_Config+0x15c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0f0      	beq.n	8007ade <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	58024400 	.word	0x58024400
 8007b0c:	ffff0007 	.word	0xffff0007

08007b10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b1e:	4b53      	ldr	r3, [pc, #332]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d101      	bne.n	8007b2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e099      	b.n	8007c62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b2e:	4b4f      	ldr	r3, [pc, #316]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a4e      	ldr	r2, [pc, #312]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b3a:	f7fa fddd 	bl	80026f8 <HAL_GetTick>
 8007b3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b40:	e008      	b.n	8007b54 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b42:	f7fa fdd9 	bl	80026f8 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e086      	b.n	8007c62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b54:	4b45      	ldr	r3, [pc, #276]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f0      	bne.n	8007b42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b60:	4b42      	ldr	r3, [pc, #264]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	051b      	lsls	r3, r3, #20
 8007b6e:	493f      	ldr	r1, [pc, #252]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	628b      	str	r3, [r1, #40]	; 0x28
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	025b      	lsls	r3, r3, #9
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	041b      	lsls	r3, r3, #16
 8007b92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	061b      	lsls	r3, r3, #24
 8007ba0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ba4:	4931      	ldr	r1, [pc, #196]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007baa:	4b30      	ldr	r3, [pc, #192]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	492d      	ldr	r1, [pc, #180]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bbc:	4b2b      	ldr	r3, [pc, #172]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	4928      	ldr	r1, [pc, #160]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007bce:	4b27      	ldr	r3, [pc, #156]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd2:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bda:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bde:	4b24      	ldr	r3, [pc, #144]	; (8007c70 <RCCEx_PLL3_Config+0x160>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	69d2      	ldr	r2, [r2, #28]
 8007be6:	00d2      	lsls	r2, r2, #3
 8007be8:	4920      	ldr	r1, [pc, #128]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007bee:	4b1f      	ldr	r3, [pc, #124]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	4a1e      	ldr	r2, [pc, #120]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d106      	bne.n	8007c0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c00:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007c06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c0c:	e00f      	b.n	8007c2e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d106      	bne.n	8007c22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c14:	4b15      	ldr	r3, [pc, #84]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	4a14      	ldr	r2, [pc, #80]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007c1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c20:	e005      	b.n	8007c2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c22:	4b12      	ldr	r3, [pc, #72]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	4a11      	ldr	r2, [pc, #68]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a0e      	ldr	r2, [pc, #56]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3a:	f7fa fd5d 	bl	80026f8 <HAL_GetTick>
 8007c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c40:	e008      	b.n	8007c54 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c42:	f7fa fd59 	bl	80026f8 <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e006      	b.n	8007c62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c54:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <RCCEx_PLL3_Config+0x15c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0f0      	beq.n	8007c42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	58024400 	.word	0x58024400
 8007c70:	ffff0007 	.word	0xffff0007

08007c74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08a      	sub	sp, #40	; 0x28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e075      	b.n	8007d72 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d105      	bne.n	8007c9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7f8 ff43 	bl	8000b24 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f868 	bl	8007d7c <HAL_SD_InitCard>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e05d      	b.n	8007d72 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007cb6:	f107 0308 	add.w	r3, r7, #8
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fda9 	bl	8008814 <HAL_SD_GetCardStatus>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e052      	b.n	8007d72 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007ccc:	7e3b      	ldrb	r3, [r7, #24]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007cd2:	7e7b      	ldrb	r3, [r7, #25]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d10a      	bne.n	8007cf6 <HAL_SD_Init+0x82>
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <HAL_SD_Init+0x78>
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d004      	beq.n	8007cf6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf2:	659a      	str	r2, [r3, #88]	; 0x58
 8007cf4:	e00b      	b.n	8007d0e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d104      	bne.n	8007d08 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d04:	659a      	str	r2, [r3, #88]	; 0x58
 8007d06:	e002      	b.n	8007d0e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fe67 	bl	80089e8 <HAL_SD_ConfigWideBusOperation>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e026      	b.n	8007d72 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007d24:	f7fa fce8 	bl	80026f8 <HAL_GetTick>
 8007d28:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007d2a:	e011      	b.n	8007d50 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d2c:	f7fa fce4 	bl	80026f8 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d109      	bne.n	8007d50 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d42:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e010      	b.n	8007d72 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 ff5b 	bl	8008c0c <HAL_SD_GetCardState>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d1e7      	bne.n	8007d2c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3728      	adds	r7, #40	; 0x28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d7c:	b590      	push	{r4, r7, lr}
 8007d7e:	b08d      	sub	sp, #52	; 0x34
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007d98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007d9c:	f7fe fd24 	bl	80067e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007da0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d109      	bne.n	8007dbc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007db6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e06a      	b.n	8007e92 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	0a1b      	lsrs	r3, r3, #8
 8007dc0:	4a36      	ldr	r2, [pc, #216]	; (8007e9c <HAL_SD_InitCard+0x120>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	091b      	lsrs	r3, r3, #4
 8007dc8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681c      	ldr	r4, [r3, #0]
 8007dce:	466a      	mov	r2, sp
 8007dd0:	f107 0318 	add.w	r3, r7, #24
 8007dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007dd8:	e882 0003 	stmia.w	r2, {r0, r1}
 8007ddc:	f107 030c 	add.w	r3, r7, #12
 8007de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007de2:	4620      	mov	r0, r4
 8007de4:	f001 fd7e 	bl	80098e4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 fdc1 	bl	8009974 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007dfe:	4a28      	ldr	r2, [pc, #160]	; (8007ea0 <HAL_SD_InitCard+0x124>)
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e06:	3301      	adds	r3, #1
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fa fc81 	bl	8002710 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 ffea 	bl	8008de8 <SD_PowerON>
 8007e14:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e02e      	b.n	8007e92 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 ff09 	bl	8008c4c <SD_InitCard>
 8007e3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e01b      	b.n	8007e92 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 fe1c 	bl	8009aa0 <SDMMC_CmdBlockLength>
 8007e68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00f      	beq.n	8007e90 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a0b      	ldr	r2, [pc, #44]	; (8007ea4 <HAL_SD_InitCard+0x128>)
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	372c      	adds	r7, #44	; 0x2c
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd90      	pop	{r4, r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	014f8b59 	.word	0x014f8b59
 8007ea0:	00012110 	.word	0x00012110
 8007ea4:	1fe00fff 	.word	0x1fe00fff

08007ea8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08c      	sub	sp, #48	; 0x30
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d107      	bne.n	8007ed0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e08d      	b.n	8007fec <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	f040 8086 	bne.w	8007fea <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	441a      	add	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d907      	bls.n	8007f02 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e074      	b.n	8007fec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2203      	movs	r2, #3
 8007f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	025a      	lsls	r2, r3, #9
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d002      	beq.n	8007f2e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	025b      	lsls	r3, r3, #9
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f32:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	025b      	lsls	r3, r3, #9
 8007f38:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f3a:	2390      	movs	r3, #144	; 0x90
 8007f3c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f107 0210 	add.w	r2, r7, #16
 8007f52:	4611      	mov	r1, r2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 fd77 	bl	8009a48 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f68:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2201      	movs	r2, #1
 8007f78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d90a      	bls.n	8007f96 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2282      	movs	r2, #130	; 0x82
 8007f84:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 fdcd 	bl	8009b2c <SDMMC_CmdReadMultiBlock>
 8007f92:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f94:	e009      	b.n	8007faa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2281      	movs	r2, #129	; 0x81
 8007f9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 fd9f 	bl	8009ae6 <SDMMC_CmdReadSingleBlock>
 8007fa8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d012      	beq.n	8007fd6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a0f      	ldr	r2, [pc, #60]	; (8007ff4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e00a      	b.n	8007fec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007fe4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e000      	b.n	8007fec <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007fea:	2302      	movs	r3, #2
  }
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3730      	adds	r7, #48	; 0x30
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	1fe00fff 	.word	0x1fe00fff

08007ff8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08c      	sub	sp, #48	; 0x30
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d107      	bne.n	8008020 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008014:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e08d      	b.n	800813c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b01      	cmp	r3, #1
 800802a:	f040 8086 	bne.w	800813a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	441a      	add	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803e:	429a      	cmp	r2, r3
 8008040:	d907      	bls.n	8008052 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008046:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e074      	b.n	800813c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2203      	movs	r2, #3
 8008056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	025a      	lsls	r2, r3, #9
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	2b01      	cmp	r3, #1
 8008076:	d002      	beq.n	800807e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	025b      	lsls	r3, r3, #9
 800807c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800807e:	f04f 33ff 	mov.w	r3, #4294967295
 8008082:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	025b      	lsls	r3, r3, #9
 8008088:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800808a:	2390      	movs	r3, #144	; 0x90
 800808c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800808e:	2300      	movs	r3, #0
 8008090:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008092:	2300      	movs	r3, #0
 8008094:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008096:	2300      	movs	r3, #0
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f107 0210 	add.w	r2, r7, #16
 80080a2:	4611      	mov	r1, r2
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 fccf 	bl	8009a48 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68da      	ldr	r2, [r3, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080b8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2201      	movs	r2, #1
 80080c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d90a      	bls.n	80080e6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	22a0      	movs	r2, #160	; 0xa0
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080dc:	4618      	mov	r0, r3
 80080de:	f001 fd6b 	bl	8009bb8 <SDMMC_CmdWriteMultiBlock>
 80080e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80080e4:	e009      	b.n	80080fa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2290      	movs	r2, #144	; 0x90
 80080ea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 fd3d 	bl	8009b72 <SDMMC_CmdWriteSingleBlock>
 80080f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d012      	beq.n	8008126 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a0f      	ldr	r2, [pc, #60]	; (8008144 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	431a      	orrs	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e00a      	b.n	800813c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008134:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	e000      	b.n	800813c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800813a:	2302      	movs	r3, #2
  }
}
 800813c:	4618      	mov	r0, r3
 800813e:	3730      	adds	r7, #48	; 0x30
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	1fe00fff 	.word	0x1fe00fff

08008148 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008154:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <HAL_SD_IRQHandler+0x2e>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 0308 	and.w	r3, r3, #8
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 f926 	bl	80093c0 <SD_Read_IT>
 8008174:	e19a      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 80ac 	beq.w	80082de <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800818e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b59      	ldr	r3, [pc, #356]	; (8008300 <HAL_SD_IRQHandler+0x1b8>)
 800819c:	400b      	ands	r3, r1
 800819e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80081ae:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081be:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 0308 	and.w	r3, r3, #8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d038      	beq.n	800823c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d104      	bne.n	80081de <HAL_SD_IRQHandler+0x96>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d011      	beq.n	8008202 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 fd0c 	bl	8009c00 <SDMMC_CmdStopTransfer>
 80081e8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d008      	beq.n	8008202 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f95b 	bl	80084b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a3f      	ldr	r2, [pc, #252]	; (8008304 <HAL_SD_IRQHandler+0x1bc>)
 8008208:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d104      	bne.n	800822c <HAL_SD_IRQHandler+0xe4>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f003 0302 	and.w	r3, r3, #2
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7f8 fec1 	bl	8000fb4 <HAL_SD_RxCpltCallback>
 8008232:	e13b      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7f8 feb3 	bl	8000fa0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800823a:	e137      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8132 	beq.w	80084ac <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2200      	movs	r2, #0
 800824e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2200      	movs	r2, #0
 8008256:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2200      	movs	r2, #0
 800825e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <HAL_SD_IRQHandler+0x12c>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f003 0320 	and.w	r3, r3, #32
 8008270:	2b00      	cmp	r3, #0
 8008272:	d011      	beq.n	8008298 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f001 fcc1 	bl	8009c00 <SDMMC_CmdStopTransfer>
 800827e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d008      	beq.n	8008298 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	431a      	orrs	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f910 	bl	80084b8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <HAL_SD_IRQHandler+0x172>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7f8 fe70 	bl	8000fa0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d105      	bne.n	80082d6 <HAL_SD_IRQHandler+0x18e>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 80eb 	beq.w	80084ac <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7f8 fe6c 	bl	8000fb4 <HAL_SD_RxCpltCallback>
}
 80082dc:	e0e6      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00d      	beq.n	8008308 <HAL_SD_IRQHandler+0x1c0>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d008      	beq.n	8008308 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 f8a8 	bl	800944c <SD_Write_IT>
 80082fc:	e0d6      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
 80082fe:	bf00      	nop
 8008300:	ffff3ec5 	.word	0xffff3ec5
 8008304:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 809d 	beq.w	8008452 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832a:	f043 0202 	orr.w	r2, r3, #2
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008338:	f003 0308 	and.w	r3, r3, #8
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	f043 0208 	orr.w	r2, r3, #8
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835e:	f043 0220 	orr.w	r2, r3, #32
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836c:	f003 0310 	and.w	r3, r3, #16
 8008370:	2b00      	cmp	r3, #0
 8008372:	d005      	beq.n	8008380 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008378:	f043 0210 	orr.w	r2, r3, #16
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a4b      	ldr	r2, [pc, #300]	; (80084b4 <HAL_SD_IRQHandler+0x36c>)
 8008386:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008396:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083c6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 fc17 	bl	8009c00 <SDMMC_CmdStopTransfer>
 80083d2:	4602      	mov	r2, r0
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	431a      	orrs	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083ec:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f003 0308 	and.w	r3, r3, #8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f851 	bl	80084b8 <HAL_SD_ErrorCallback>
}
 8008416:	e049      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841e:	2b00      	cmp	r3, #0
 8008420:	d044      	beq.n	80084ac <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008426:	2b00      	cmp	r3, #0
 8008428:	d040      	beq.n	80084ac <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008438:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2200      	movs	r2, #0
 8008440:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f834 	bl	80084b8 <HAL_SD_ErrorCallback>
}
 8008450:	e02c      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d025      	beq.n	80084ac <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10c      	bne.n	8008492 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 f84a 	bl	800951c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008488:	e010      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 f832 	bl	80094f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008490:	e00c      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 f833 	bl	8009508 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80084a2:	e003      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 f81b 	bl	80094e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80084aa:	e7ff      	b.n	80084ac <HAL_SD_IRQHandler+0x364>
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	18000f3a 	.word	0x18000f3a

080084b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084da:	0f9b      	lsrs	r3, r3, #30
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e6:	0e9b      	lsrs	r3, r3, #26
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f8:	0e1b      	lsrs	r3, r3, #24
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	b2da      	uxtb	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	b2da      	uxtb	r2, r3
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	b2da      	uxtb	r2, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008522:	b2da      	uxtb	r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852c:	0d1b      	lsrs	r3, r3, #20
 800852e:	b29a      	uxth	r2, r3
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008538:	0c1b      	lsrs	r3, r3, #16
 800853a:	b2db      	uxtb	r3, r3
 800853c:	f003 030f 	and.w	r3, r3, #15
 8008540:	b2da      	uxtb	r2, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854a:	0bdb      	lsrs	r3, r3, #15
 800854c:	b2db      	uxtb	r3, r3
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	b2da      	uxtb	r2, r3
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855c:	0b9b      	lsrs	r3, r3, #14
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	b2da      	uxtb	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800856e:	0b5b      	lsrs	r3, r3, #13
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	b2da      	uxtb	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008580:	0b1b      	lsrs	r3, r3, #12
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	b2da      	uxtb	r2, r3
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2200      	movs	r2, #0
 8008592:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	2b00      	cmp	r3, #0
 800859a:	d163      	bne.n	8008664 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a0:	009a      	lsls	r2, r3, #2
 80085a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80085a6:	4013      	ands	r3, r2
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80085ac:	0f92      	lsrs	r2, r2, #30
 80085ae:	431a      	orrs	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085b8:	0edb      	lsrs	r3, r3, #27
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ca:	0e1b      	lsrs	r3, r3, #24
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085dc:	0d5b      	lsrs	r3, r3, #21
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ee:	0c9b      	lsrs	r3, r3, #18
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008600:	0bdb      	lsrs	r3, r3, #15
 8008602:	b2db      	uxtb	r3, r3
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	b2da      	uxtb	r2, r3
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	7e1b      	ldrb	r3, [r3, #24]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	3302      	adds	r3, #2
 8008624:	2201      	movs	r2, #1
 8008626:	fa02 f303 	lsl.w	r3, r2, r3
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800862e:	fb03 f202 	mul.w	r2, r3, r2
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	7a1b      	ldrb	r3, [r3, #8]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 030f 	and.w	r3, r3, #15
 8008640:	2201      	movs	r2, #1
 8008642:	409a      	lsls	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008650:	0a52      	lsrs	r2, r2, #9
 8008652:	fb03 f202 	mul.w	r2, r3, r2
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008660:	655a      	str	r2, [r3, #84]	; 0x54
 8008662:	e031      	b.n	80086c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	2b01      	cmp	r3, #1
 800866a:	d11d      	bne.n	80086a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008670:	041b      	lsls	r3, r3, #16
 8008672:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	431a      	orrs	r2, r3
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	3301      	adds	r3, #1
 8008688:	029a      	lsls	r2, r3, #10
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800869c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	655a      	str	r2, [r3, #84]	; 0x54
 80086a6:	e00f      	b.n	80086c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a58      	ldr	r2, [pc, #352]	; (8008810 <HAL_SD_GetCardCSD+0x344>)
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e09d      	b.n	8008804 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086cc:	0b9b      	lsrs	r3, r3, #14
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086de:	09db      	lsrs	r3, r3, #7
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008700:	0fdb      	lsrs	r3, r3, #31
 8008702:	b2da      	uxtb	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800870c:	0f5b      	lsrs	r3, r3, #29
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 0303 	and.w	r3, r3, #3
 8008714:	b2da      	uxtb	r2, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800871e:	0e9b      	lsrs	r3, r3, #26
 8008720:	b2db      	uxtb	r3, r3
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	b2da      	uxtb	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008730:	0d9b      	lsrs	r3, r3, #22
 8008732:	b2db      	uxtb	r3, r3
 8008734:	f003 030f 	and.w	r3, r3, #15
 8008738:	b2da      	uxtb	r2, r3
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008742:	0d5b      	lsrs	r3, r3, #21
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800875e:	0c1b      	lsrs	r3, r3, #16
 8008760:	b2db      	uxtb	r3, r3
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	b2da      	uxtb	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008772:	0bdb      	lsrs	r3, r3, #15
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	b2da      	uxtb	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008786:	0b9b      	lsrs	r3, r3, #14
 8008788:	b2db      	uxtb	r3, r3
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	b2da      	uxtb	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800879a:	0b5b      	lsrs	r3, r3, #13
 800879c:	b2db      	uxtb	r3, r3
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ae:	0b1b      	lsrs	r3, r3, #12
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087c2:	0a9b      	lsrs	r3, r3, #10
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d6:	0a1b      	lsrs	r3, r3, #8
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ea:	085b      	lsrs	r3, r3, #1
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	1fe00fff 	.word	0x1fe00fff

08008814 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b094      	sub	sp, #80	; 0x50
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b03      	cmp	r3, #3
 800882e:	d101      	bne.n	8008834 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e0a7      	b.n	8008984 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fb62 	bl	8008f04 <SD_SendSDStatus>
 8008840:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008844:	2b00      	cmp	r3, #0
 8008846:	d011      	beq.n	800886c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a4f      	ldr	r2, [pc, #316]	; (800898c <HAL_SD_GetCardStatus+0x178>)
 800884e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800886a:	e070      	b.n	800894e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	099b      	lsrs	r3, r3, #6
 8008870:	b2db      	uxtb	r3, r3
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	b2da      	uxtb	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	095b      	lsrs	r3, r3, #5
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	b2da      	uxtb	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	b29b      	uxth	r3, r3
 8008892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008896:	b29a      	uxth	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	0e1b      	lsrs	r3, r3, #24
 800889c:	b29b      	uxth	r3, r3
 800889e:	4313      	orrs	r3, r2
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	061a      	lsls	r2, r3, #24
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088b2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	0e1b      	lsrs	r3, r3, #24
 80088c2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	0d1b      	lsrs	r3, r3, #20
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	f003 030f 	and.w	r3, r3, #15
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	0c1b      	lsrs	r3, r3, #16
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	4313      	orrs	r3, r2
 8008900:	b29a      	uxth	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	0a9b      	lsrs	r3, r3, #10
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008910:	b2da      	uxtb	r2, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	0a1b      	lsrs	r3, r3, #8
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	b2da      	uxtb	r2, r3
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	091b      	lsrs	r3, r3, #4
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	b2da      	uxtb	r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	b2da      	uxtb	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	0e1b      	lsrs	r3, r3, #24
 8008948:	b2da      	uxtb	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008956:	4618      	mov	r0, r3
 8008958:	f001 f8a2 	bl	8009aa0 <SDMMC_CmdBlockLength>
 800895c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800895e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00d      	beq.n	8008980 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a08      	ldr	r2, [pc, #32]	; (800898c <HAL_SD_GetCardStatus+0x178>)
 800896a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008970:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008980:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008984:	4618      	mov	r0, r3
 8008986:	3750      	adds	r7, #80	; 0x50
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	1fe00fff 	.word	0x1fe00fff

08008990 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80089e8:	b590      	push	{r4, r7, lr}
 80089ea:	b08d      	sub	sp, #52	; 0x34
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2203      	movs	r2, #3
 8008a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d02e      	beq.n	8008a6a <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a12:	d106      	bne.n	8008a22 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	635a      	str	r2, [r3, #52]	; 0x34
 8008a20:	e029      	b.n	8008a76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a28:	d10a      	bne.n	8008a40 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fb62 	bl	80090f4 <SD_WideBus_Enable>
 8008a30:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8008a3e:	e01a      	b.n	8008a76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fb9f 	bl	800918a <SD_WideBus_Disable>
 8008a4c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	431a      	orrs	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	635a      	str	r2, [r3, #52]	; 0x34
 8008a5a:	e00c      	b.n	8008a76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	635a      	str	r2, [r3, #52]	; 0x34
 8008a68:	e005      	b.n	8008a76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d007      	beq.n	8008a8e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a5e      	ldr	r2, [pc, #376]	; (8008bfc <HAL_SD_ConfigWideBusOperation+0x214>)
 8008a84:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a8c:	e094      	b.n	8008bb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008a8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008a92:	f7fd fea9 	bl	80067e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a96:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8083 	beq.w	8008ba6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	695a      	ldr	r2, [r3, #20]
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	4950      	ldr	r1, [pc, #320]	; (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008abe:	fba1 1303 	umull	r1, r3, r1, r3
 8008ac2:	0e1b      	lsrs	r3, r3, #24
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d303      	bcc.n	8008ad0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	61bb      	str	r3, [r7, #24]
 8008ace:	e05a      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad8:	d103      	bne.n	8008ae2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	61bb      	str	r3, [r7, #24]
 8008ae0:	e051      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aea:	d126      	bne.n	8008b3a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10e      	bne.n	8008b12 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	4a43      	ldr	r2, [pc, #268]	; (8008c04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d906      	bls.n	8008b0a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	4a40      	ldr	r2, [pc, #256]	; (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b00:	fba2 2303 	umull	r2, r3, r2, r3
 8008b04:	0e5b      	lsrs	r3, r3, #25
 8008b06:	61bb      	str	r3, [r7, #24]
 8008b08:	e03d      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	e039      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	6a3a      	ldr	r2, [r7, #32]
 8008b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1e:	4a39      	ldr	r2, [pc, #228]	; (8008c04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d906      	bls.n	8008b32 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	4a36      	ldr	r2, [pc, #216]	; (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b28:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2c:	0e5b      	lsrs	r3, r3, #25
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	e029      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	61bb      	str	r3, [r7, #24]
 8008b38:	e025      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10e      	bne.n	8008b60 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	4a30      	ldr	r2, [pc, #192]	; (8008c08 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d906      	bls.n	8008b58 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	4a2c      	ldr	r2, [pc, #176]	; (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b52:	0e1b      	lsrs	r3, r3, #24
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	e016      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	e012      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	6a3a      	ldr	r2, [r7, #32]
 8008b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6c:	4a26      	ldr	r2, [pc, #152]	; (8008c08 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d906      	bls.n	8008b80 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	4a22      	ldr	r2, [pc, #136]	; (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	0e1b      	lsrs	r3, r3, #24
 8008b7c:	61bb      	str	r3, [r7, #24]
 8008b7e:	e002      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681c      	ldr	r4, [r3, #0]
 8008b8a:	466a      	mov	r2, sp
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b94:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b98:	f107 0308 	add.w	r3, r7, #8
 8008b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 fea0 	bl	80098e4 <SDMMC_Init>
 8008ba4:	e008      	b.n	8008bb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008baa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 ff6d 	bl	8009aa0 <SDMMC_CmdBlockLength>
 8008bc6:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00c      	beq.n	8008be8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a0a      	ldr	r2, [pc, #40]	; (8008bfc <HAL_SD_ConfigWideBusOperation+0x214>)
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	372c      	adds	r7, #44	; 0x2c
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd90      	pop	{r4, r7, pc}
 8008bfc:	1fe00fff 	.word	0x1fe00fff
 8008c00:	55e63b89 	.word	0x55e63b89
 8008c04:	02faf080 	.word	0x02faf080
 8008c08:	017d7840 	.word	0x017d7840

08008c0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c18:	f107 030c 	add.w	r3, r7, #12
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa40 	bl	80090a4 <SD_SendStatus>
 8008c24:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d005      	beq.n	8008c38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	431a      	orrs	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	0a5b      	lsrs	r3, r3, #9
 8008c3c:	f003 030f 	and.w	r3, r3, #15
 8008c40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c42:	693b      	ldr	r3, [r7, #16]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3718      	adds	r7, #24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b090      	sub	sp, #64	; 0x40
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008c58:	f7f9 fd4e 	bl	80026f8 <HAL_GetTick>
 8008c5c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fe97 	bl	8009996 <SDMMC_GetPowerState>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c72:	e0b5      	b.n	8008de0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d02e      	beq.n	8008cda <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f001 f8e2 	bl	8009e4a <SDMMC_CmdSendCID>
 8008c86:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <SD_InitCard+0x46>
    {
      return errorstate;
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	e0a6      	b.n	8008de0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fec2 	bl	8009a22 <SDMMC_GetResponse>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2104      	movs	r1, #4
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 feb9 	bl	8009a22 <SDMMC_GetResponse>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2108      	movs	r1, #8
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 feb0 	bl	8009a22 <SDMMC_GetResponse>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	210c      	movs	r1, #12
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fea7 	bl	8009a22 <SDMMC_GetResponse>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d01d      	beq.n	8008d1e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008ce2:	e019      	b.n	8008d18 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f107 020a 	add.w	r2, r7, #10
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f001 f8ea 	bl	8009ec8 <SDMMC_CmdSetRelAdd>
 8008cf4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	e06f      	b.n	8008de0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008d00:	f7f9 fcfa 	bl	80026f8 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	f241 3287 	movw	r2, #4999	; 0x1387
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d902      	bls.n	8008d18 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008d12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d16:	e063      	b.n	8008de0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008d18:	897b      	ldrh	r3, [r7, #10]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0e2      	beq.n	8008ce4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d036      	beq.n	8008d94 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d26:	897b      	ldrh	r3, [r7, #10]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d36:	041b      	lsls	r3, r3, #16
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f001 f8a4 	bl	8009e88 <SDMMC_CmdSendCSD>
 8008d40:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <SD_InitCard+0x100>
    {
      return errorstate;
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	e049      	b.n	8008de0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2100      	movs	r1, #0
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fe65 	bl	8009a22 <SDMMC_GetResponse>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2104      	movs	r1, #4
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fe5c 	bl	8009a22 <SDMMC_GetResponse>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2108      	movs	r1, #8
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fe53 	bl	8009a22 <SDMMC_GetResponse>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	210c      	movs	r1, #12
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fe4a 	bl	8009a22 <SDMMC_GetResponse>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2104      	movs	r1, #4
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fe41 	bl	8009a22 <SDMMC_GetResponse>
 8008da0:	4603      	mov	r3, r0
 8008da2:	0d1a      	lsrs	r2, r3, #20
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008da8:	f107 030c 	add.w	r3, r7, #12
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff fb8c 	bl	80084cc <HAL_SD_GetCardCSD>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dbe:	e00f      	b.n	8008de0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc8:	041b      	lsls	r3, r3, #16
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4610      	mov	r0, r2
 8008dce:	f000 ff53 	bl	8009c78 <SDMMC_CmdSelDesel>
 8008dd2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <SD_InitCard+0x192>
  {
    return errorstate;
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	e000      	b.n	8008de0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3740      	adds	r7, #64	; 0x40
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 ff5c 	bl	8009cbe <SDMMC_CmdGoIdleState>
 8008e06:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	e072      	b.n	8008ef8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 ff6f 	bl	8009cfa <SDMMC_CmdOperCond>
 8008e1c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e24:	d10d      	bne.n	8008e42 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 ff44 	bl	8009cbe <SDMMC_CmdGoIdleState>
 8008e36:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d004      	beq.n	8008e48 <SD_PowerON+0x60>
    {
      return errorstate;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	e05a      	b.n	8008ef8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d137      	bne.n	8008ec0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2100      	movs	r1, #0
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 ff6f 	bl	8009d3a <SDMMC_CmdAppCommand>
 8008e5c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d02d      	beq.n	8008ec0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e68:	e046      	b.n	8008ef8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2100      	movs	r1, #0
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 ff62 	bl	8009d3a <SDMMC_CmdAppCommand>
 8008e76:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <SD_PowerON+0x9a>
    {
      return errorstate;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	e03a      	b.n	8008ef8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	491e      	ldr	r1, [pc, #120]	; (8008f00 <SD_PowerON+0x118>)
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 ff79 	bl	8009d80 <SDMMC_CmdAppOperCommand>
 8008e8e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e9a:	e02d      	b.n	8008ef8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 fdbd 	bl	8009a22 <SDMMC_GetResponse>
 8008ea8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	0fdb      	lsrs	r3, r3, #31
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d101      	bne.n	8008eb6 <SD_PowerON+0xce>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e000      	b.n	8008eb8 <SD_PowerON+0xd0>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	613b      	str	r3, [r7, #16]

    count++;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d802      	bhi.n	8008ed0 <SD_PowerON+0xe8>
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0cc      	beq.n	8008e6a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d902      	bls.n	8008ee0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008eda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ede:	e00b      	b.n	8008ef8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	c1100000 	.word	0xc1100000

08008f04 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08c      	sub	sp, #48	; 0x30
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f0e:	f7f9 fbf3 	bl	80026f8 <HAL_GetTick>
 8008f12:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fd7f 	bl	8009a22 <SDMMC_GetResponse>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f2e:	d102      	bne.n	8008f36 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f34:	e0b0      	b.n	8009098 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2140      	movs	r1, #64	; 0x40
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fdaf 	bl	8009aa0 <SDMMC_CmdBlockLength>
 8008f42:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d005      	beq.n	8008f56 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	e0a0      	b.n	8009098 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	041b      	lsls	r3, r3, #16
 8008f60:	4619      	mov	r1, r3
 8008f62:	4610      	mov	r0, r2
 8008f64:	f000 fee9 	bl	8009d3a <SDMMC_CmdAppCommand>
 8008f68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	e08d      	b.n	8009098 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f80:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008f86:	2360      	movs	r3, #96	; 0x60
 8008f88:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f92:	2301      	movs	r3, #1
 8008f94:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f107 0208 	add.w	r2, r7, #8
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fd51 	bl	8009a48 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 ffd1 	bl	8009f52 <SDMMC_CmdStatusRegister>
 8008fb0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d02b      	beq.n	8009010 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	e069      	b.n	8009098 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d013      	beq.n	8008ffa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fd6:	e00d      	b.n	8008ff4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fcab 	bl	8009938 <SDMMC_ReadFIFO>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	601a      	str	r2, [r3, #0]
        pData++;
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	3304      	adds	r3, #4
 8008fec:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	2b07      	cmp	r3, #7
 8008ff8:	d9ee      	bls.n	8008fd8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ffa:	f7f9 fb7d 	bl	80026f8 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009008:	d102      	bne.n	8009010 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800900a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800900e:	e043      	b.n	8009098 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009016:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0d2      	beq.n	8008fc4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800902c:	2308      	movs	r3, #8
 800902e:	e033      	b.n	8009098 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800903e:	2302      	movs	r3, #2
 8009040:	e02a      	b.n	8009098 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d017      	beq.n	8009080 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009050:	2320      	movs	r3, #32
 8009052:	e021      	b.n	8009098 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fc6d 	bl	8009938 <SDMMC_ReadFIFO>
 800905e:	4602      	mov	r2, r0
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	601a      	str	r2, [r3, #0]
    pData++;
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	3304      	adds	r3, #4
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800906a:	f7f9 fb45 	bl	80026f8 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d102      	bne.n	8009080 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800907a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800907e:	e00b      	b.n	8009098 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e2      	bne.n	8009054 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a03      	ldr	r2, [pc, #12]	; (80090a0 <SD_SendSDStatus+0x19c>)
 8009094:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3730      	adds	r7, #48	; 0x30
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	18000f3a 	.word	0x18000f3a

080090a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80090b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090b8:	e018      	b.n	80090ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c2:	041b      	lsls	r3, r3, #16
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f000 ff20 	bl	8009f0c <SDMMC_CmdSendStatus>
 80090cc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	e009      	b.n	80090ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2100      	movs	r1, #0
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fc9f 	bl	8009a22 <SDMMC_GetResponse>
 80090e4:	4602      	mov	r2, r0
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	2300      	movs	r3, #0
 8009102:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2100      	movs	r1, #0
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fc89 	bl	8009a22 <SDMMC_GetResponse>
 8009110:	4603      	mov	r3, r0
 8009112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800911a:	d102      	bne.n	8009122 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800911c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009120:	e02f      	b.n	8009182 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009122:	f107 030c 	add.w	r3, r7, #12
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f879 	bl	8009220 <SD_FindSCR>
 800912e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	e023      	b.n	8009182 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01c      	beq.n	800917e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914c:	041b      	lsls	r3, r3, #16
 800914e:	4619      	mov	r1, r3
 8009150:	4610      	mov	r0, r2
 8009152:	f000 fdf2 	bl	8009d3a <SDMMC_CmdAppCommand>
 8009156:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	e00f      	b.n	8009182 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2102      	movs	r1, #2
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fe29 	bl	8009dc0 <SDMMC_CmdBusWidth>
 800916e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	e003      	b.n	8009182 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800917a:	2300      	movs	r3, #0
 800917c:	e001      	b.n	8009182 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800917e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b086      	sub	sp, #24
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	2300      	movs	r3, #0
 8009198:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2100      	movs	r1, #0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fc3e 	bl	8009a22 <SDMMC_GetResponse>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b0:	d102      	bne.n	80091b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091b6:	e02f      	b.n	8009218 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091b8:	f107 030c 	add.w	r3, r7, #12
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f82e 	bl	8009220 <SD_FindSCR>
 80091c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	e023      	b.n	8009218 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01c      	beq.n	8009214 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e2:	041b      	lsls	r3, r3, #16
 80091e4:	4619      	mov	r1, r3
 80091e6:	4610      	mov	r0, r2
 80091e8:	f000 fda7 	bl	8009d3a <SDMMC_CmdAppCommand>
 80091ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	e00f      	b.n	8009218 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fdde 	bl	8009dc0 <SDMMC_CmdBusWidth>
 8009204:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	e003      	b.n	8009218 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009210:	2300      	movs	r3, #0
 8009212:	e001      	b.n	8009218 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009214:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08e      	sub	sp, #56	; 0x38
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800922a:	f7f9 fa65 	bl	80026f8 <HAL_GetTick>
 800922e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009234:	2300      	movs	r3, #0
 8009236:	60bb      	str	r3, [r7, #8]
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2108      	movs	r1, #8
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fc2a 	bl	8009aa0 <SDMMC_CmdBlockLength>
 800924c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	e0ad      	b.n	80093b4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009260:	041b      	lsls	r3, r3, #16
 8009262:	4619      	mov	r1, r3
 8009264:	4610      	mov	r0, r2
 8009266:	f000 fd68 	bl	8009d3a <SDMMC_CmdAppCommand>
 800926a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	e09e      	b.n	80093b4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009276:	f04f 33ff 	mov.w	r3, #4294967295
 800927a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800927c:	2308      	movs	r3, #8
 800927e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009280:	2330      	movs	r3, #48	; 0x30
 8009282:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009284:	2302      	movs	r3, #2
 8009286:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009288:	2300      	movs	r3, #0
 800928a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800928c:	2301      	movs	r3, #1
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f107 0210 	add.w	r2, r7, #16
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fbd4 	bl	8009a48 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fdae 	bl	8009e06 <SDMMC_CmdSendSCR>
 80092aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d027      	beq.n	8009302 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	e07e      	b.n	80093b4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d113      	bne.n	80092ec <SD_FindSCR+0xcc>
 80092c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d110      	bne.n	80092ec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 fb32 	bl	8009938 <SDMMC_ReadFIFO>
 80092d4:	4603      	mov	r3, r0
 80092d6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 fb2b 	bl	8009938 <SDMMC_ReadFIFO>
 80092e2:	4603      	mov	r3, r0
 80092e4:	60fb      	str	r3, [r7, #12]
      index++;
 80092e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e8:	3301      	adds	r3, #1
 80092ea:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092ec:	f7f9 fa04 	bl	80026f8 <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fa:	d102      	bne.n	8009302 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009300:	e058      	b.n	80093b4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009308:	f240 532a 	movw	r3, #1322	; 0x52a
 800930c:	4013      	ands	r3, r2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0d1      	beq.n	80092b6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009318:	f003 0308 	and.w	r3, r3, #8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2208      	movs	r2, #8
 8009326:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009328:	2308      	movs	r3, #8
 800932a:	e043      	b.n	80093b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2202      	movs	r2, #2
 8009340:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009342:	2302      	movs	r3, #2
 8009344:	e036      	b.n	80093b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934c:	f003 0320 	and.w	r3, r3, #32
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2220      	movs	r2, #32
 800935a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800935c:	2320      	movs	r3, #32
 800935e:	e029      	b.n	80093b4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a15      	ldr	r2, [pc, #84]	; (80093bc <SD_FindSCR+0x19c>)
 8009366:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	061a      	lsls	r2, r3, #24
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	021b      	lsls	r3, r3, #8
 8009370:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009374:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	0a1b      	lsrs	r3, r3, #8
 800937a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800937e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	0e1b      	lsrs	r3, r3, #24
 8009384:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009388:	601a      	str	r2, [r3, #0]
    scr++;
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	3304      	adds	r3, #4
 800938e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	061a      	lsls	r2, r3, #24
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800939c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	0a1b      	lsrs	r3, r3, #8
 80093a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80093a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	0e1b      	lsrs	r3, r3, #24
 80093ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3738      	adds	r7, #56	; 0x38
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	18000f3a 	.word	0x18000f3a

080093c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d2:	2b1f      	cmp	r3, #31
 80093d4:	d936      	bls.n	8009444 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80093d6:	2300      	movs	r3, #0
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	e027      	b.n	800942c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 faa9 	bl	8009938 <SDMMC_ReadFIFO>
 80093e6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	3301      	adds	r3, #1
 80093f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	0a1b      	lsrs	r3, r3, #8
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	3301      	adds	r3, #1
 8009404:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	0c1b      	lsrs	r3, r3, #16
 800940a:	b2da      	uxtb	r2, r3
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	3301      	adds	r3, #1
 8009414:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	0e1b      	lsrs	r3, r3, #24
 800941a:	b2da      	uxtb	r2, r3
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	3301      	adds	r3, #1
 8009424:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	3301      	adds	r3, #1
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2b07      	cmp	r3, #7
 8009430:	d9d4      	bls.n	80093dc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943c:	f1a3 0220 	sub.w	r2, r3, #32
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8009444:	bf00      	nop
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	2b1f      	cmp	r3, #31
 8009460:	d93a      	bls.n	80094d8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009462:	2300      	movs	r3, #0
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	e02b      	b.n	80094c0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	3301      	adds	r3, #1
 8009472:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	021a      	lsls	r2, r3, #8
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	3301      	adds	r3, #1
 8009484:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	041a      	lsls	r2, r3, #16
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	3301      	adds	r3, #1
 8009496:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	061a      	lsls	r2, r3, #24
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
      tmp++;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	3301      	adds	r3, #1
 80094a8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f107 020c 	add.w	r2, r7, #12
 80094b2:	4611      	mov	r1, r2
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 fa4c 	bl	8009952 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	3301      	adds	r3, #1
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	2b07      	cmp	r3, #7
 80094c4:	d9d0      	bls.n	8009468 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	f1a3 0220 	sub.w	r2, r3, #32
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	621a      	str	r2, [r3, #32]
  }
}
 80094d8:	bf00      	nop
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e02b      	b.n	800959c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b00      	cmp	r3, #0
 800954e:	d106      	bne.n	800955e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7f7 f897 	bl	800068c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2202      	movs	r2, #2
 8009562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	3304      	adds	r3, #4
 800956e:	4619      	mov	r1, r3
 8009570:	4610      	mov	r0, r2
 8009572:	f000 f89f 	bl	80096b4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	461a      	mov	r2, r3
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	f000 f8f3 	bl	800976c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009586:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <HAL_SDRAM_Init+0x74>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a06      	ldr	r2, [pc, #24]	; (80095a4 <HAL_SDRAM_Init+0x74>)
 800958c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009590:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	52004000 	.word	0x52004000

080095a8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095ba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d101      	bne.n	80095c6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80095c2:	2302      	movs	r3, #2
 80095c4:	e021      	b.n	800960a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d002      	beq.n	80095d2 <HAL_SDRAM_SendCommand+0x2a>
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	2b05      	cmp	r3, #5
 80095d0:	d118      	bne.n	8009604 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2202      	movs	r2, #2
 80095d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f92c 	bl	8009840 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d104      	bne.n	80095fa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2205      	movs	r2, #5
 80095f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80095f8:	e006      	b.n	8009608 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009602:	e001      	b.n	8009608 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e000      	b.n	800960a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b02      	cmp	r3, #2
 8009626:	d101      	bne.n	800962c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009628:	2302      	movs	r3, #2
 800962a:	e016      	b.n	800965a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d10f      	bne.n	8009658 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 f91e 	bl	8009888 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	e000      	b.n	800965a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.
  * @param  AutoRefreshNumber The SDRAM auto Refresh number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b02      	cmp	r3, #2
 8009676:	d101      	bne.n	800967c <HAL_SDRAM_SetAutoRefreshNumber+0x1a>
  {
    return HAL_BUSY;
 8009678:	2302      	movs	r3, #2
 800967a:	e016      	b.n	80096aa <HAL_SDRAM_SetAutoRefreshNumber+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b01      	cmp	r3, #1
 8009686:	d10f      	bne.n	80096a8 <HAL_SDRAM_SetAutoRefreshNumber+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Set the Auto-Refresh number */
    (void)FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance, AutoRefreshNumber);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 f90e 	bl	80098b8 <FMC_SDRAM_SetAutoRefreshNumber>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	e000      	b.n	80096aa <HAL_SDRAM_SetAutoRefreshNumber+0x48>
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
	...

080096b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d121      	bne.n	800970a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	4b27      	ldr	r3, [pc, #156]	; (8009768 <FMC_SDRAM_Init+0xb4>)
 80096cc:	4013      	ands	r3, r2
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	6851      	ldr	r1, [r2, #4]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	6892      	ldr	r2, [r2, #8]
 80096d6:	4311      	orrs	r1, r2
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	68d2      	ldr	r2, [r2, #12]
 80096dc:	4311      	orrs	r1, r2
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	6912      	ldr	r2, [r2, #16]
 80096e2:	4311      	orrs	r1, r2
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	6952      	ldr	r2, [r2, #20]
 80096e8:	4311      	orrs	r1, r2
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	6992      	ldr	r2, [r2, #24]
 80096ee:	4311      	orrs	r1, r2
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	69d2      	ldr	r2, [r2, #28]
 80096f4:	4311      	orrs	r1, r2
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	6a12      	ldr	r2, [r2, #32]
 80096fa:	4311      	orrs	r1, r2
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009700:	430a      	orrs	r2, r1
 8009702:	431a      	orrs	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]
 8009708:	e026      	b.n	8009758 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	69d9      	ldr	r1, [r3, #28]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	4319      	orrs	r1, r3
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	430b      	orrs	r3, r1
 8009722:	431a      	orrs	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <FMC_SDRAM_Init+0xb4>)
 800972e:	4013      	ands	r3, r2
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	6851      	ldr	r1, [r2, #4]
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	6892      	ldr	r2, [r2, #8]
 8009738:	4311      	orrs	r1, r2
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	68d2      	ldr	r2, [r2, #12]
 800973e:	4311      	orrs	r1, r2
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	6912      	ldr	r2, [r2, #16]
 8009744:	4311      	orrs	r1, r2
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	6952      	ldr	r2, [r2, #20]
 800974a:	4311      	orrs	r1, r2
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	6992      	ldr	r2, [r2, #24]
 8009750:	430a      	orrs	r2, r1
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	ffff8000 	.word	0xffff8000

0800976c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d128      	bne.n	80097d0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	1e59      	subs	r1, r3, #1
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	3b01      	subs	r3, #1
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	4319      	orrs	r1, r3
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	3b01      	subs	r3, #1
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	4319      	orrs	r1, r3
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	031b      	lsls	r3, r3, #12
 80097a8:	4319      	orrs	r1, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	041b      	lsls	r3, r3, #16
 80097b2:	4319      	orrs	r1, r3
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	3b01      	subs	r3, #1
 80097ba:	051b      	lsls	r3, r3, #20
 80097bc:	4319      	orrs	r1, r3
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	061b      	lsls	r3, r3, #24
 80097c6:	430b      	orrs	r3, r1
 80097c8:	431a      	orrs	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	609a      	str	r2, [r3, #8]
 80097ce:	e02d      	b.n	800982c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	689a      	ldr	r2, [r3, #8]
 80097d4:	4b19      	ldr	r3, [pc, #100]	; (800983c <FMC_SDRAM_Timing_Init+0xd0>)
 80097d6:	4013      	ands	r3, r2
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	68d2      	ldr	r2, [r2, #12]
 80097dc:	3a01      	subs	r2, #1
 80097de:	0311      	lsls	r1, r2, #12
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	6952      	ldr	r2, [r2, #20]
 80097e4:	3a01      	subs	r2, #1
 80097e6:	0512      	lsls	r2, r2, #20
 80097e8:	430a      	orrs	r2, r1
 80097ea:	431a      	orrs	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	1e59      	subs	r1, r3, #1
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	3b01      	subs	r3, #1
 8009804:	011b      	lsls	r3, r3, #4
 8009806:	4319      	orrs	r1, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	3b01      	subs	r3, #1
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	4319      	orrs	r1, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	3b01      	subs	r3, #1
 8009818:	041b      	lsls	r3, r3, #16
 800981a:	4319      	orrs	r1, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	3b01      	subs	r3, #1
 8009822:	061b      	lsls	r3, r3, #24
 8009824:	430b      	orrs	r3, r1
 8009826:	431a      	orrs	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	ff0f0fff 	.word	0xff0f0fff

08009840 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	4b0c      	ldr	r3, [pc, #48]	; (8009884 <FMC_SDRAM_SendCommand+0x44>)
 8009852:	4013      	ands	r3, r2
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	6811      	ldr	r1, [r2, #0]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	6852      	ldr	r2, [r2, #4]
 800985c:	4311      	orrs	r1, r2
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	6892      	ldr	r2, [r2, #8]
 8009862:	3a01      	subs	r2, #1
 8009864:	0152      	lsls	r2, r2, #5
 8009866:	4311      	orrs	r1, r2
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	68d2      	ldr	r2, [r2, #12]
 800986c:	0252      	lsls	r2, r2, #9
 800986e:	430a      	orrs	r2, r1
 8009870:	431a      	orrs	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	ffc00000 	.word	0xffc00000

08009888 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695a      	ldr	r2, [r3, #20]
 8009896:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009898:	4013      	ands	r3, r2
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	0052      	lsls	r2, r2, #1
 800989e:	431a      	orrs	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	ffffc001 	.word	0xffffc001

080098b8 <FMC_SDRAM_SetAutoRefreshNumber>:
  * @param  AutoRefreshNumber Specifies the auto Refresh number.
  * @retval None
  */
HAL_StatusTypeDef FMC_SDRAM_SetAutoRefreshNumber(FMC_SDRAM_TypeDef *Device,
                                                 uint32_t AutoRefreshNumber)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));

  /* Set the Auto-refresh number in command register */
  MODIFY_REG(Device->SDCMR, FMC_SDCMR_NRFS, ((AutoRefreshNumber - 1U) << FMC_SDCMR_NRFS_Pos));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	f423 72f0 	bic.w	r2, r3, #480	; 0x1e0
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	015b      	lsls	r3, r3, #5
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80098e4:	b084      	sub	sp, #16
 80098e6:	b480      	push	{r7}
 80098e8:	b085      	sub	sp, #20
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	f107 001c 	add.w	r0, r7, #28
 80098f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80098fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80098fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80098fe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009902:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009904:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009906:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800990a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b07      	ldr	r3, [pc, #28]	; (8009934 <SDMMC_Init+0x50>)
 8009918:	4013      	ands	r3, r2
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	b004      	add	sp, #16
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	ffc02c00 	.word	0xffc02c00

08009938 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f043 0203 	orr.w	r2, r3, #3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 0303 	and.w	r3, r3, #3
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
	...

080099b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80099d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80099d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80099de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <SDMMC_SendCommand+0x50>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	431a      	orrs	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	fffee0c0 	.word	0xfffee0c0

08009a08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	b2db      	uxtb	r3, r3
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3314      	adds	r3, #20
 8009a30:	461a      	mov	r2, r3
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	4413      	add	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009a6e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009a74:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009a7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	431a      	orrs	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0

}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009aae:	2310      	movs	r3, #16
 8009ab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff ff73 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad2:	2110      	movs	r1, #16
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fa5f 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009adc:	69fb      	ldr	r3, [r7, #28]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3720      	adds	r7, #32
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b088      	sub	sp, #32
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009af4:	2311      	movs	r3, #17
 8009af6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009afc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b08:	f107 0308 	add.w	r3, r7, #8
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff ff50 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b18:	2111      	movs	r1, #17
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fa3c 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b22:	69fb      	ldr	r3, [r7, #28]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3720      	adds	r7, #32
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009b3a:	2312      	movs	r3, #18
 8009b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b44:	2300      	movs	r3, #0
 8009b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b4e:	f107 0308 	add.w	r3, r7, #8
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7ff ff2d 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b5e:	2112      	movs	r1, #18
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fa19 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009b66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b68:	69fb      	ldr	r3, [r7, #28]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3720      	adds	r7, #32
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b088      	sub	sp, #32
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009b80:	2318      	movs	r3, #24
 8009b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b94:	f107 0308 	add.w	r3, r7, #8
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff ff0a 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ba4:	2118      	movs	r1, #24
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f9f6 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009bac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bae:	69fb      	ldr	r3, [r7, #28]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009bc6:	2319      	movs	r3, #25
 8009bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bda:	f107 0308 	add.w	r3, r7, #8
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff fee7 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bea:	2119      	movs	r1, #25
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f9d3 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009bf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bf4:	69fb      	ldr	r3, [r7, #28]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3720      	adds	r7, #32
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009c0c:	230c      	movs	r3, #12
 8009c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c1e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff feb8 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009c44:	4a0b      	ldr	r2, [pc, #44]	; (8009c74 <SDMMC_CmdStopTransfer+0x74>)
 8009c46:	210c      	movs	r1, #12
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f9a5 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009c4e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c62:	d101      	bne.n	8009c68 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009c64:	2300      	movs	r3, #0
 8009c66:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009c68:	69fb      	ldr	r3, [r7, #28]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3720      	adds	r7, #32
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	05f5e100 	.word	0x05f5e100

08009c78 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b088      	sub	sp, #32
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009c86:	2307      	movs	r3, #7
 8009c88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c90:	2300      	movs	r3, #0
 8009c92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c9a:	f107 0308 	add.w	r3, r7, #8
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7ff fe87 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009caa:	2107      	movs	r1, #7
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f973 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009cb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3720      	adds	r7, #32
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b088      	sub	sp, #32
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cdc:	f107 0308 	add.w	r3, r7, #8
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff fe66 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fb97 	bl	800a41c <SDMMC_GetCmdError>
 8009cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cf0:	69fb      	ldr	r3, [r7, #28]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3720      	adds	r7, #32
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b088      	sub	sp, #32
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009d02:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009d06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d08:	2308      	movs	r3, #8
 8009d0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d12:	2300      	movs	r3, #0
 8009d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d1c:	f107 0308 	add.w	r3, r7, #8
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff fe46 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fb29 	bl	800a380 <SDMMC_GetCmdResp7>
 8009d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d30:	69fb      	ldr	r3, [r7, #28]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3720      	adds	r7, #32
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b088      	sub	sp, #32
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009d48:	2337      	movs	r3, #55	; 0x37
 8009d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d52:	2300      	movs	r3, #0
 8009d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d5c:	f107 0308 	add.w	r3, r7, #8
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff fe26 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d6c:	2137      	movs	r1, #55	; 0x37
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f912 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009d74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d76:	69fb      	ldr	r3, [r7, #28]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3720      	adds	r7, #32
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009d8e:	2329      	movs	r3, #41	; 0x29
 8009d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009da0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da2:	f107 0308 	add.w	r3, r7, #8
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff fe03 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fa2e 	bl	800a210 <SDMMC_GetCmdResp3>
 8009db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009db6:	69fb      	ldr	r3, [r7, #28]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3720      	adds	r7, #32
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009dce:	2306      	movs	r3, #6
 8009dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009de0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009de2:	f107 0308 	add.w	r3, r7, #8
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fde3 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df2:	2106      	movs	r1, #6
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f8cf 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3720      	adds	r7, #32
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b088      	sub	sp, #32
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e12:	2333      	movs	r3, #51	; 0x33
 8009e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e26:	f107 0308 	add.w	r3, r7, #8
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7ff fdc1 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e36:	2133      	movs	r1, #51	; 0x33
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f8ad 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e40:	69fb      	ldr	r3, [r7, #28]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b088      	sub	sp, #32
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009e56:	2302      	movs	r3, #2
 8009e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e6a:	f107 0308 	add.w	r3, r7, #8
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff fd9f 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f980 	bl	800a17c <SDMMC_GetCmdResp2>
 8009e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e7e:	69fb      	ldr	r3, [r7, #28]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3720      	adds	r7, #32
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009e96:	2309      	movs	r3, #9
 8009e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ea8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eaa:	f107 0308 	add.w	r3, r7, #8
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7ff fd7f 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f960 	bl	800a17c <SDMMC_GetCmdResp2>
 8009ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ebe:	69fb      	ldr	r3, [r7, #28]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3720      	adds	r7, #32
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ee8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eea:	f107 0308 	add.w	r3, r7, #8
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff fd5f 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	2103      	movs	r1, #3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f9c8 	bl	800a290 <SDMMC_GetCmdResp6>
 8009f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f02:	69fb      	ldr	r3, [r7, #28]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3720      	adds	r7, #32
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f1a:	230d      	movs	r3, #13
 8009f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f24:	2300      	movs	r3, #0
 8009f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff fd3d 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f3e:	210d      	movs	r1, #13
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f829 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f48:	69fb      	ldr	r3, [r7, #28]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3720      	adds	r7, #32
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b088      	sub	sp, #32
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009f5e:	230d      	movs	r3, #13
 8009f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f72:	f107 0308 	add.w	r3, r7, #8
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff fd1b 	bl	80099b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f82:	210d      	movs	r1, #13
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f807 	bl	8009f98 <SDMMC_GetCmdResp1>
 8009f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3720      	adds	r7, #32
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b088      	sub	sp, #32
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fa6:	4b70      	ldr	r3, [pc, #448]	; (800a168 <SDMMC_GetCmdResp1+0x1d0>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a70      	ldr	r2, [pc, #448]	; (800a16c <SDMMC_GetCmdResp1+0x1d4>)
 8009fac:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb0:	0a5a      	lsrs	r2, r3, #9
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	fb02 f303 	mul.w	r3, r2, r3
 8009fb8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	1e5a      	subs	r2, r3, #1
 8009fbe:	61fa      	str	r2, [r7, #28]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fc8:	e0c9      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fce:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009fd0:	69ba      	ldr	r2, [r7, #24]
 8009fd2:	4b67      	ldr	r3, [pc, #412]	; (800a170 <SDMMC_GetCmdResp1+0x1d8>)
 8009fd4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0ef      	beq.n	8009fba <SDMMC_GetCmdResp1+0x22>
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1ea      	bne.n	8009fba <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2204      	movs	r2, #4
 8009ff4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ff6:	2304      	movs	r3, #4
 8009ff8:	e0b1      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d004      	beq.n	800a010 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e0a6      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4a58      	ldr	r2, [pc, #352]	; (800a174 <SDMMC_GetCmdResp1+0x1dc>)
 800a014:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7ff fcf6 	bl	8009a08 <SDMMC_GetCommandResponse>
 800a01c:	4603      	mov	r3, r0
 800a01e:	461a      	mov	r2, r3
 800a020:	7afb      	ldrb	r3, [r7, #11]
 800a022:	4293      	cmp	r3, r2
 800a024:	d001      	beq.n	800a02a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a026:	2301      	movs	r3, #1
 800a028:	e099      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a02a:	2100      	movs	r1, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7ff fcf8 	bl	8009a22 <SDMMC_GetResponse>
 800a032:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	4b50      	ldr	r3, [pc, #320]	; (800a178 <SDMMC_GetCmdResp1+0x1e0>)
 800a038:	4013      	ands	r3, r2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a03e:	2300      	movs	r3, #0
 800a040:	e08d      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2b00      	cmp	r3, #0
 800a046:	da02      	bge.n	800a04e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a04c:	e087      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	e080      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a066:	2380      	movs	r3, #128	; 0x80
 800a068:	e079      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a074:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a078:	e071      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a084:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a088:	e069      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a098:	e061      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0a8:	e059      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0b8:	e051      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0c8:	e049      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a0d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0d8:	e041      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a0e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0e8:	e039      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a0f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a0f8:	e031      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a104:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a108:	e029      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a114:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a118:	e021      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a124:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a128:	e019      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a134:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a138:	e011      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a144:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a148:	e009      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f003 0308 	and.w	r3, r3, #8
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a154:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a158:	e001      	b.n	800a15e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a15a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3720      	adds	r7, #32
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	2400001c 	.word	0x2400001c
 800a16c:	10624dd3 	.word	0x10624dd3
 800a170:	00200045 	.word	0x00200045
 800a174:	002000c5 	.word	0x002000c5
 800a178:	fdffe008 	.word	0xfdffe008

0800a17c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a184:	4b1f      	ldr	r3, [pc, #124]	; (800a204 <SDMMC_GetCmdResp2+0x88>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a1f      	ldr	r2, [pc, #124]	; (800a208 <SDMMC_GetCmdResp2+0x8c>)
 800a18a:	fba2 2303 	umull	r2, r3, r2, r3
 800a18e:	0a5b      	lsrs	r3, r3, #9
 800a190:	f241 3288 	movw	r2, #5000	; 0x1388
 800a194:	fb02 f303 	mul.w	r3, r2, r3
 800a198:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1e5a      	subs	r2, r3, #1
 800a19e:	60fa      	str	r2, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1a8:	e026      	b.n	800a1f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0ef      	beq.n	800a19a <SDMMC_GetCmdResp2+0x1e>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1ea      	bne.n	800a19a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2204      	movs	r2, #4
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	e00e      	b.n	800a1f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d004      	beq.n	800a1f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e003      	b.n	800a1f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a06      	ldr	r2, [pc, #24]	; (800a20c <SDMMC_GetCmdResp2+0x90>)
 800a1f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	2400001c 	.word	0x2400001c
 800a208:	10624dd3 	.word	0x10624dd3
 800a20c:	002000c5 	.word	0x002000c5

0800a210 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a218:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <SDMMC_GetCmdResp3+0x74>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a1a      	ldr	r2, [pc, #104]	; (800a288 <SDMMC_GetCmdResp3+0x78>)
 800a21e:	fba2 2303 	umull	r2, r3, r2, r3
 800a222:	0a5b      	lsrs	r3, r3, #9
 800a224:	f241 3288 	movw	r2, #5000	; 0x1388
 800a228:	fb02 f303 	mul.w	r3, r2, r3
 800a22c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1e5a      	subs	r2, r3, #1
 800a232:	60fa      	str	r2, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a23c:	e01b      	b.n	800a276 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a242:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0ef      	beq.n	800a22e <SDMMC_GetCmdResp3+0x1e>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1ea      	bne.n	800a22e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d004      	beq.n	800a26e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2204      	movs	r2, #4
 800a268:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a26a:	2304      	movs	r3, #4
 800a26c:	e003      	b.n	800a276 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a06      	ldr	r2, [pc, #24]	; (800a28c <SDMMC_GetCmdResp3+0x7c>)
 800a272:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	2400001c 	.word	0x2400001c
 800a288:	10624dd3 	.word	0x10624dd3
 800a28c:	002000c5 	.word	0x002000c5

0800a290 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b088      	sub	sp, #32
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	460b      	mov	r3, r1
 800a29a:	607a      	str	r2, [r7, #4]
 800a29c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a29e:	4b35      	ldr	r3, [pc, #212]	; (800a374 <SDMMC_GetCmdResp6+0xe4>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a35      	ldr	r2, [pc, #212]	; (800a378 <SDMMC_GetCmdResp6+0xe8>)
 800a2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a8:	0a5b      	lsrs	r3, r3, #9
 800a2aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ae:	fb02 f303 	mul.w	r3, r2, r3
 800a2b2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	1e5a      	subs	r2, r3, #1
 800a2b8:	61fa      	str	r2, [r7, #28]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d102      	bne.n	800a2c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2c2:	e052      	b.n	800a36a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d0ef      	beq.n	800a2b4 <SDMMC_GetCmdResp6+0x24>
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1ea      	bne.n	800a2b4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e2:	f003 0304 	and.w	r3, r3, #4
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2204      	movs	r2, #4
 800a2ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2f0:	2304      	movs	r3, #4
 800a2f2:	e03a      	b.n	800a36a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d004      	beq.n	800a30a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a306:	2301      	movs	r3, #1
 800a308:	e02f      	b.n	800a36a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7ff fb7c 	bl	8009a08 <SDMMC_GetCommandResponse>
 800a310:	4603      	mov	r3, r0
 800a312:	461a      	mov	r2, r3
 800a314:	7afb      	ldrb	r3, [r7, #11]
 800a316:	4293      	cmp	r3, r2
 800a318:	d001      	beq.n	800a31e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e025      	b.n	800a36a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	4a16      	ldr	r2, [pc, #88]	; (800a37c <SDMMC_GetCmdResp6+0xec>)
 800a322:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a324:	2100      	movs	r1, #0
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f7ff fb7b 	bl	8009a22 <SDMMC_GetResponse>
 800a32c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d106      	bne.n	800a346 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	0c1b      	lsrs	r3, r3, #16
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a342:	2300      	movs	r3, #0
 800a344:	e011      	b.n	800a36a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a354:	e009      	b.n	800a36a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a364:	e001      	b.n	800a36a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3720      	adds	r7, #32
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	2400001c 	.word	0x2400001c
 800a378:	10624dd3 	.word	0x10624dd3
 800a37c:	002000c5 	.word	0x002000c5

0800a380 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a388:	4b22      	ldr	r3, [pc, #136]	; (800a414 <SDMMC_GetCmdResp7+0x94>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a22      	ldr	r2, [pc, #136]	; (800a418 <SDMMC_GetCmdResp7+0x98>)
 800a38e:	fba2 2303 	umull	r2, r3, r2, r3
 800a392:	0a5b      	lsrs	r3, r3, #9
 800a394:	f241 3288 	movw	r2, #5000	; 0x1388
 800a398:	fb02 f303 	mul.w	r3, r2, r3
 800a39c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	1e5a      	subs	r2, r3, #1
 800a3a2:	60fa      	str	r2, [r7, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3ac:	e02c      	b.n	800a408 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0ef      	beq.n	800a39e <SDMMC_GetCmdResp7+0x1e>
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1ea      	bne.n	800a39e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d004      	beq.n	800a3de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2204      	movs	r2, #4
 800a3d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3da:	2304      	movs	r3, #4
 800a3dc:	e014      	b.n	800a408 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d004      	beq.n	800a3f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e009      	b.n	800a408 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2240      	movs	r2, #64	; 0x40
 800a404:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a406:	2300      	movs	r3, #0

}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	2400001c 	.word	0x2400001c
 800a418:	10624dd3 	.word	0x10624dd3

0800a41c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a424:	4b11      	ldr	r3, [pc, #68]	; (800a46c <SDMMC_GetCmdError+0x50>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a11      	ldr	r2, [pc, #68]	; (800a470 <SDMMC_GetCmdError+0x54>)
 800a42a:	fba2 2303 	umull	r2, r3, r2, r3
 800a42e:	0a5b      	lsrs	r3, r3, #9
 800a430:	f241 3288 	movw	r2, #5000	; 0x1388
 800a434:	fb02 f303 	mul.w	r3, r2, r3
 800a438:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	1e5a      	subs	r2, r3, #1
 800a43e:	60fa      	str	r2, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a448:	e009      	b.n	800a45e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0f1      	beq.n	800a43a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a06      	ldr	r2, [pc, #24]	; (800a474 <SDMMC_GetCmdError+0x58>)
 800a45a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	2400001c 	.word	0x2400001c
 800a470:	10624dd3 	.word	0x10624dd3
 800a474:	002000c5 	.word	0x002000c5

0800a478 <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 800a480:	4b06      	ldr	r3, [pc, #24]	; (800a49c <lwiperf_list_add+0x24>)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 800a488:	4a04      	ldr	r2, [pc, #16]	; (800a49c <lwiperf_list_add+0x24>)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6013      	str	r3, [r2, #0]
}
 800a48e:	bf00      	nop
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	24004d94 	.word	0x24004d94

0800a4a0 <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800a4ac:	4b1a      	ldr	r3, [pc, #104]	; (800a518 <lwiperf_list_remove+0x78>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60bb      	str	r3, [r7, #8]
 800a4b2:	e029      	b.n	800a508 <lwiperf_list_remove+0x68>
    if (iter == item) {
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d120      	bne.n	800a4fe <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d104      	bne.n	800a4cc <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a14      	ldr	r2, [pc, #80]	; (800a518 <lwiperf_list_remove+0x78>)
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	e003      	b.n	800a4d4 <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60bb      	str	r3, [r7, #8]
 800a4da:	e00c      	b.n	800a4f6 <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d105      	bne.n	800a4f0 <lwiperf_list_remove+0x50>
 800a4e4:	4b0d      	ldr	r3, [pc, #52]	; (800a51c <lwiperf_list_remove+0x7c>)
 800a4e6:	22d0      	movs	r2, #208	; 0xd0
 800a4e8:	490d      	ldr	r1, [pc, #52]	; (800a520 <lwiperf_list_remove+0x80>)
 800a4ea:	480e      	ldr	r0, [pc, #56]	; (800a524 <lwiperf_list_remove+0x84>)
 800a4ec:	f016 f830 	bl	8020550 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60bb      	str	r3, [r7, #8]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1ef      	bne.n	800a4dc <lwiperf_list_remove+0x3c>
      }
      break;
 800a4fc:	e008      	b.n	800a510 <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60bb      	str	r3, [r7, #8]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1d2      	bne.n	800a4b4 <lwiperf_list_remove+0x14>
    }
  }
}
 800a50e:	bf00      	nop
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	24004d94 	.word	0x24004d94
 800a51c:	080214e8 	.word	0x080214e8
 800a520:	0802152c 	.word	0x0802152c
 800a524:	0802153c 	.word	0x0802153c

0800a528 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800a530:	4b0b      	ldr	r3, [pc, #44]	; (800a560 <lwiperf_list_find+0x38>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	e008      	b.n	800a54a <lwiperf_list_find+0x22>
    if (iter == item) {
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d101      	bne.n	800a544 <lwiperf_list_find+0x1c>
      return item;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	e006      	b.n	800a552 <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1f3      	bne.n	800a538 <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	24004d94 	.word	0x24004d94

0800a564 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 800a564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a566:	b08d      	sub	sp, #52	; 0x34
 800a568:	af06      	add	r7, sp, #24
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d038      	beq.n	800a5e8 <lwip_tcp_conn_report+0x84>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d034      	beq.n	800a5e8 <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 800a57e:	f7f7 f9cb 	bl	8001918 <sys_now>
 800a582:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	e006      	b.n	800a5a8 <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a4:	00db      	lsls	r3, r3, #3
 800a5a6:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	699c      	ldr	r4, [r3, #24]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	469e      	mov	lr, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 800a5ba:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 800a5c8:	8b12      	ldrh	r2, [r2, #24]
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a5ce:	78fe      	ldrb	r6, [r7, #3]
 800a5d0:	6978      	ldr	r0, [r7, #20]
 800a5d2:	9004      	str	r0, [sp, #16]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	9003      	str	r0, [sp, #12]
 800a5d8:	9102      	str	r1, [sp, #8]
 800a5da:	9201      	str	r2, [sp, #4]
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	4663      	mov	r3, ip
 800a5e0:	4672      	mov	r2, lr
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 800a5e8:	bf00      	nop
 800a5ea:	371c      	adds	r7, #28
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5f0 <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff ff4e 	bl	800a4a0 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ffab 	bl	800a564 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d02f      	beq.n	800a676 <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	2100      	movs	r1, #0
 800a61c:	4618      	mov	r0, r3
 800a61e:	f010 f911 	bl	801a844 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	2200      	movs	r2, #0
 800a628:	2100      	movs	r1, #0
 800a62a:	4618      	mov	r0, r3
 800a62c:	f010 f99a 	bl	801a964 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	2100      	movs	r1, #0
 800a636:	4618      	mov	r0, r3
 800a638:	f010 f938 	bl	801a8ac <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	2100      	movs	r1, #0
 800a642:	4618      	mov	r0, r3
 800a644:	f010 f910 	bl	801a868 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	2100      	movs	r1, #0
 800a64e:	4618      	mov	r0, r3
 800a650:	f010 f94e 	bl	801a8f0 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	4618      	mov	r0, r3
 800a65a:	f00e fdf5 	bl	8019248 <tcp_close>
 800a65e:	4603      	mov	r3, r0
 800a660:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d017      	beq.n	800a69a <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	4618      	mov	r0, r3
 800a670:	f00e ff30 	bl	80194d4 <tcp_abort>
 800a674:	e011      	b.n	800a69a <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f00e fde4 	bl	8019248 <tcp_close>
 800a680:	4603      	mov	r3, r0
 800a682:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 800a684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d006      	beq.n	800a69a <lwiperf_tcp_close+0xaa>
 800a68c:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <lwiperf_tcp_close+0xb8>)
 800a68e:	f240 120d 	movw	r2, #269	; 0x10d
 800a692:	4906      	ldr	r1, [pc, #24]	; (800a6ac <lwiperf_tcp_close+0xbc>)
 800a694:	4806      	ldr	r0, [pc, #24]	; (800a6b0 <lwiperf_tcp_close+0xc0>)
 800a696:	f015 ff5b 	bl	8020550 <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f00b fb46 	bl	8015d2c <mem_free>
}
 800a6a0:	bf00      	nop
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	080214e8 	.word	0x080214e8
 800a6ac:	08021564 	.word	0x08021564
 800a6b0:	0802153c 	.word	0x0802153c

0800a6b4 <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b08c      	sub	sp, #48	; 0x30
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d007      	beq.n	800a6d2 <lwiperf_tcp_client_send_more+0x1e>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	791b      	ldrb	r3, [r3, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <lwiperf_tcp_client_send_more+0x1e>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	795b      	ldrb	r3, [r3, #5]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d006      	beq.n	800a6e0 <lwiperf_tcp_client_send_more+0x2c>
 800a6d2:	4b61      	ldr	r3, [pc, #388]	; (800a858 <lwiperf_tcp_client_send_more+0x1a4>)
 800a6d4:	f240 121d 	movw	r2, #285	; 0x11d
 800a6d8:	4960      	ldr	r1, [pc, #384]	; (800a85c <lwiperf_tcp_client_send_more+0x1a8>)
 800a6da:	4861      	ldr	r0, [pc, #388]	; (800a860 <lwiperf_tcp_client_send_more+0x1ac>)
 800a6dc:	f015 ff38 	bl	8020550 <iprintf>

  do {
    send_more = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01f      	beq.n	800a730 <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 800a6f0:	f7f7 f912 	bl	8001918 <sys_now>
 800a6f4:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a704:	4618      	mov	r0, r3
 800a706:	f006 f9f8 	bl	8010afa <lwip_htonl>
 800a70a:	4603      	mov	r3, r0
 800a70c:	425b      	negs	r3, r3
 800a70e:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	429a      	cmp	r2, r3
 800a722:	d316      	bcc.n	800a752 <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 800a724:	2101      	movs	r1, #1
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff ff62 	bl	800a5f0 <lwiperf_tcp_close>
        return ERR_OK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	e08e      	b.n	800a84e <lwiperf_tcp_client_send_more+0x19a>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a734:	4618      	mov	r0, r3
 800a736:	f006 f9e0 	bl	8010afa <lwip_htonl>
 800a73a:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	429a      	cmp	r2, r3
 800a744:	d305      	bcc.n	800a752 <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 800a746:	2101      	movs	r1, #1
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff ff51 	bl	800a5f0 <lwiperf_tcp_close>
        return ERR_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	e07d      	b.n	800a84e <lwiperf_tcp_client_send_more+0x19a>
      }
    }

    if (conn->bytes_transferred < 24) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b17      	cmp	r3, #23
 800a758:	d810      	bhi.n	800a77c <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	4413      	add	r3, r2
 800a766:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	f1c3 0318 	rsb	r3, r3, #24
 800a772:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 800a774:	2301      	movs	r3, #1
 800a776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a77a:	e034      	b.n	800a7e6 <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	2b2f      	cmp	r3, #47	; 0x2f
 800a782:	d813      	bhi.n	800a7ac <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	3b18      	subs	r3, #24
 800a790:	4413      	add	r3, r2
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a798:	b29b      	uxth	r3, r3
 800a79a:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 800a79e:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7aa:	e01c      	b.n	800a7e6 <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a7b0:	4b2c      	ldr	r3, [pc, #176]	; (800a864 <lwiperf_tcp_client_send_more+0x1b0>)
 800a7b2:	fba3 2301 	umull	r2, r3, r3, r1
 800a7b6:	08da      	lsrs	r2, r3, #3
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	005b      	lsls	r3, r3, #1
 800a7c0:	1aca      	subs	r2, r1, r3
 800a7c2:	4b29      	ldr	r3, [pc, #164]	; (800a868 <lwiperf_tcp_client_send_more+0x1b4>)
 800a7c4:	4413      	add	r3, r2
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = TCP_MSS;
 800a7c8:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a7cc:	853b      	strh	r3, [r7, #40]	; 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	2b30      	cmp	r3, #48	; 0x30
 800a7d4:	d102      	bne.n	800a7dc <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 800a7d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7da:	853b      	strh	r3, [r7, #40]	; 0x28
      }
      apiflags = 0; /* no copying needed */
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    txlen = txlen_max;
 800a7e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a7e8:	857b      	strh	r3, [r7, #42]	; 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6918      	ldr	r0, [r3, #16]
 800a7ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7f2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a7f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7f6:	f012 ff67 	bl	801d6c8 <tcp_write>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 800a7fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a806:	d102      	bne.n	800a80e <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 800a808:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a80a:	085b      	lsrs	r3, r3, #1
 800a80c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800a80e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a816:	d103      	bne.n	800a820 <lwiperf_tcp_client_send_more+0x16c>
 800a818:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a81a:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800a81e:	d2e4      	bcs.n	800a7ea <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 800a820:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <lwiperf_tcp_client_send_more+0x182>
      conn->bytes_transferred += txlen;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a82c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a82e:	441a      	add	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	625a      	str	r2, [r3, #36]	; 0x24
 800a834:	e001      	b.n	800a83a <lwiperf_tcp_client_send_more+0x186>
    } else {
      send_more = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  } while (send_more);
 800a83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f47f af4f 	bne.w	800a6e0 <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	4618      	mov	r0, r3
 800a848:	f013 fd28 	bl	801e29c <tcp_output>
  return ERR_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3730      	adds	r7, #48	; 0x30
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	080214e8 	.word	0x080214e8
 800a85c:	0802156c 	.word	0x0802156c
 800a860:	0802153c 	.word	0x0802153c
 800a864:	cccccccd 	.word	0xcccccccd
 800a868:	08025750 	.word	0x08025750

0800a86c <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	4613      	mov	r3, r2
 800a878:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	429a      	cmp	r2, r3
 800a886:	d006      	beq.n	800a896 <lwiperf_tcp_client_sent+0x2a>
 800a888:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <lwiperf_tcp_client_sent+0x44>)
 800a88a:	f44f 72b3 	mov.w	r2, #358	; 0x166
 800a88e:	4909      	ldr	r1, [pc, #36]	; (800a8b4 <lwiperf_tcp_client_sent+0x48>)
 800a890:	4809      	ldr	r0, [pc, #36]	; (800a8b8 <lwiperf_tcp_client_sent+0x4c>)
 800a892:	f015 fe5d 	bl	8020550 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 800a89e:	6978      	ldr	r0, [r7, #20]
 800a8a0:	f7ff ff08 	bl	800a6b4 <lwiperf_tcp_client_send_more>
 800a8a4:	4603      	mov	r3, r0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3718      	adds	r7, #24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	080214e8 	.word	0x080214e8
 800a8b4:	0802157c 	.word	0x0802157c
 800a8b8:	0802153c 	.word	0x0802153c

0800a8bc <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d006      	beq.n	800a8e6 <lwiperf_tcp_client_connected+0x2a>
 800a8d8:	4b10      	ldr	r3, [pc, #64]	; (800a91c <lwiperf_tcp_client_connected+0x60>)
 800a8da:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a8de:	4910      	ldr	r1, [pc, #64]	; (800a920 <lwiperf_tcp_client_connected+0x64>)
 800a8e0:	4810      	ldr	r0, [pc, #64]	; (800a924 <lwiperf_tcp_client_connected+0x68>)
 800a8e2:	f015 fe35 	bl	8020550 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 800a8e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d005      	beq.n	800a8fa <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800a8ee:	2105      	movs	r1, #5
 800a8f0:	6978      	ldr	r0, [r7, #20]
 800a8f2:	f7ff fe7d 	bl	800a5f0 <lwiperf_tcp_close>
    return ERR_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e00c      	b.n	800a914 <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 800a902:	f7f7 f809 	bl	8001918 <sys_now>
 800a906:	4602      	mov	r2, r0
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 800a90c:	6978      	ldr	r0, [r7, #20]
 800a90e:	f7ff fed1 	bl	800a6b4 <lwiperf_tcp_client_send_more>
 800a912:	4603      	mov	r3, r0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	080214e8 	.word	0x080214e8
 800a920:	0802157c 	.word	0x0802157c
 800a924:	0802153c 	.word	0x0802153c

0800a928 <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	607a      	str	r2, [r7, #4]
 800a932:	603b      	str	r3, [r7, #0]
 800a934:	460b      	mov	r3, r1
 800a936:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d106      	bne.n	800a94c <lwiperf_tx_start_impl+0x24>
 800a93e:	4b4a      	ldr	r3, [pc, #296]	; (800aa68 <lwiperf_tx_start_impl+0x140>)
 800a940:	f240 128b 	movw	r2, #395	; 0x18b
 800a944:	4949      	ldr	r1, [pc, #292]	; (800aa6c <lwiperf_tx_start_impl+0x144>)
 800a946:	484a      	ldr	r0, [pc, #296]	; (800aa70 <lwiperf_tx_start_impl+0x148>)
 800a948:	f015 fe02 	bl	8020550 <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d106      	bne.n	800a960 <lwiperf_tx_start_impl+0x38>
 800a952:	4b45      	ldr	r3, [pc, #276]	; (800aa68 <lwiperf_tx_start_impl+0x140>)
 800a954:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800a958:	4944      	ldr	r1, [pc, #272]	; (800aa6c <lwiperf_tx_start_impl+0x144>)
 800a95a:	4845      	ldr	r0, [pc, #276]	; (800aa70 <lwiperf_tx_start_impl+0x148>)
 800a95c:	f015 fdf8 	bl	8020550 <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	2b00      	cmp	r3, #0
 800a964:	d106      	bne.n	800a974 <lwiperf_tx_start_impl+0x4c>
 800a966:	4b40      	ldr	r3, [pc, #256]	; (800aa68 <lwiperf_tx_start_impl+0x140>)
 800a968:	f240 128d 	movw	r2, #397	; 0x18d
 800a96c:	4941      	ldr	r1, [pc, #260]	; (800aa74 <lwiperf_tx_start_impl+0x14c>)
 800a96e:	4840      	ldr	r0, [pc, #256]	; (800aa70 <lwiperf_tx_start_impl+0x148>)
 800a970:	f015 fdee 	bl	8020550 <iprintf>
  *new_conn = NULL;
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800a97a:	2048      	movs	r0, #72	; 0x48
 800a97c:	f00b fb70 	bl	8016060 <mem_malloc>
 800a980:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d102      	bne.n	800a98e <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 800a988:	f04f 33ff 	mov.w	r3, #4294967295
 800a98c:	e067      	b.n	800aa5e <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 800a98e:	2000      	movs	r0, #0
 800a990:	f00f ff4a 	bl	801a828 <tcp_new_ip_type>
 800a994:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d105      	bne.n	800a9a8 <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 800a99c:	69f8      	ldr	r0, [r7, #28]
 800a99e:	f00b f9c5 	bl	8015d2c <mem_free>
    return ERR_MEM;
 800a9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a6:	e05a      	b.n	800aa5e <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 800a9a8:	2248      	movs	r2, #72	; 0x48
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	69f8      	ldr	r0, [r7, #28]
 800a9ae:	f015 fce7 	bl	8020380 <memset>
  client_conn->base.tcp = 1;
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9bc:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	69ba      	ldr	r2, [r7, #24]
 800a9c2:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 800a9c4:	f7f6 ffa8 	bl	8001918 <sys_now>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9d8:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	2204      	movs	r2, #4
 800a9de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  client_conn->bytes_transferred = 0;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	625a      	str	r2, [r3, #36]	; 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	3328      	adds	r3, #40	; 0x28
 800a9ec:	2218      	movs	r2, #24
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f015 fcb7 	bl	8020364 <memcpy>
  client_conn->have_settings_buf = 1;
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  tcp_arg(newpcb, client_conn);
 800a9fe:	69f9      	ldr	r1, [r7, #28]
 800aa00:	69b8      	ldr	r0, [r7, #24]
 800aa02:	f00f ff1f 	bl	801a844 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 800aa06:	491c      	ldr	r1, [pc, #112]	; (800aa78 <lwiperf_tx_start_impl+0x150>)
 800aa08:	69b8      	ldr	r0, [r7, #24]
 800aa0a:	f00f ff4f 	bl	801a8ac <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800aa0e:	2202      	movs	r2, #2
 800aa10:	491a      	ldr	r1, [pc, #104]	; (800aa7c <lwiperf_tx_start_impl+0x154>)
 800aa12:	69b8      	ldr	r0, [r7, #24]
 800aa14:	f00f ffa6 	bl	801a964 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 800aa18:	4919      	ldr	r1, [pc, #100]	; (800aa80 <lwiperf_tx_start_impl+0x158>)
 800aa1a:	69b8      	ldr	r0, [r7, #24]
 800aa1c:	f00f ff68 	bl	801a8f0 <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800aa26:	897a      	ldrh	r2, [r7, #10]
 800aa28:	f107 0110 	add.w	r1, r7, #16
 800aa2c:	4b15      	ldr	r3, [pc, #84]	; (800aa84 <lwiperf_tx_start_impl+0x15c>)
 800aa2e:	69b8      	ldr	r0, [r7, #24]
 800aa30:	f00e ffc0 	bl	80199b4 <tcp_connect>
 800aa34:	4603      	mov	r3, r0
 800aa36:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800aa38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d006      	beq.n	800aa4e <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 800aa40:	2102      	movs	r1, #2
 800aa42:	69f8      	ldr	r0, [r7, #28]
 800aa44:	f7ff fdd4 	bl	800a5f0 <lwiperf_tcp_close>
    return err;
 800aa48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa4c:	e007      	b.n	800aa5e <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff fd11 	bl	800a478 <lwiperf_list_add>
  *new_conn = client_conn;
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3720      	adds	r7, #32
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	080214e8 	.word	0x080214e8
 800aa6c:	0802158c 	.word	0x0802158c
 800aa70:	0802153c 	.word	0x0802153c
 800aa74:	080215a0 	.word	0x080215a0
 800aa78:	0800a86d 	.word	0x0800a86d
 800aa7c:	0800ad5d 	.word	0x0800ad5d
 800aa80:	0800ad3d 	.word	0x0800ad3d
 800aa84:	0800a8bd 	.word	0x0800a8bd

0800aa88 <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 800aa88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa8a:	b089      	sub	sp, #36	; 0x24
 800aa8c:	af04      	add	r7, sp, #16
 800aa8e:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 800aa90:	2300      	movs	r3, #0
 800aa92:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f006 f82e 	bl	8010afa <lwip_htonl>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	1d18      	adds	r0, r3, #4
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f103 0528 	add.w	r5, r3, #40	; 0x28
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	699e      	ldr	r6, [r3, #24]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6892      	ldr	r2, [r2, #8]
 800aaba:	89fc      	ldrh	r4, [r7, #14]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	9102      	str	r1, [sp, #8]
 800aac2:	9201      	str	r2, [sp, #4]
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	4633      	mov	r3, r6
 800aac8:	462a      	mov	r2, r5
 800aaca:	4621      	mov	r1, r4
 800aacc:	f7ff ff2c 	bl	800a928 <lwiperf_tx_start_impl>
 800aad0:	4603      	mov	r3, r0
 800aad2:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 800aad4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10c      	bne.n	800aaf6 <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d106      	bne.n	800aaf0 <lwiperf_tx_start_passive+0x68>
 800aae2:	4b08      	ldr	r3, [pc, #32]	; (800ab04 <lwiperf_tx_start_passive+0x7c>)
 800aae4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800aae8:	4907      	ldr	r1, [pc, #28]	; (800ab08 <lwiperf_tx_start_passive+0x80>)
 800aaea:	4808      	ldr	r0, [pc, #32]	; (800ab0c <lwiperf_tx_start_passive+0x84>)
 800aaec:	f015 fd30 	bl	8020550 <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return ret;
 800aaf6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab02:	bf00      	nop
 800ab04:	080214e8 	.word	0x080214e8
 800ab08:	080215a0 	.word	0x080215a0
 800ab0c:	0802153c 	.word	0x0802153c

0800ab10 <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d006      	beq.n	800ab3a <lwiperf_tcp_recv+0x2a>
 800ab2c:	4b7e      	ldr	r3, [pc, #504]	; (800ad28 <lwiperf_tcp_recv+0x218>)
 800ab2e:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 800ab32:	497e      	ldr	r1, [pc, #504]	; (800ad2c <lwiperf_tcp_recv+0x21c>)
 800ab34:	487e      	ldr	r0, [pc, #504]	; (800ad30 <lwiperf_tcp_recv+0x220>)
 800ab36:	f015 fd0b 	bl	8020550 <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 800ab3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800ab42:	2105      	movs	r1, #5
 800ab44:	6978      	ldr	r0, [r7, #20]
 800ab46:	f7ff fd53 	bl	800a5f0 <lwiperf_tcp_close>
    return ERR_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e0e8      	b.n	800ad20 <lwiperf_tcp_recv+0x210>
  }
  if (p == NULL) {
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d114      	bne.n	800ab7e <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d008      	beq.n	800ab72 <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d102      	bne.n	800ab72 <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 800ab6c:	6978      	ldr	r0, [r7, #20]
 800ab6e:	f7ff ff8b 	bl	800aa88 <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 800ab72:	2100      	movs	r1, #0
 800ab74:	6978      	ldr	r0, [r7, #20]
 800ab76:	f7ff fd3b 	bl	800a5f0 <lwiperf_tcp_close>
    return ERR_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e0d0      	b.n	800ad20 <lwiperf_tcp_recv+0x210>
  }
  tot_len = p->tot_len;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	891b      	ldrh	r3, [r3, #8]
 800ab82:	827b      	strh	r3, [r7, #18]

  conn->poll_count = 0;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d007      	beq.n	800aba6 <lwiperf_tcp_recv+0x96>
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	3b18      	subs	r3, #24
 800ab9c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f040 8090 	bne.w	800acc6 <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	891b      	ldrh	r3, [r3, #8]
 800abaa:	2b17      	cmp	r3, #23
 800abac:	d808      	bhi.n	800abc0 <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 800abae:	2103      	movs	r1, #3
 800abb0:	6978      	ldr	r0, [r7, #20]
 800abb2:	f7ff fd1d 	bl	800a5f0 <lwiperf_tcp_close>
      pbuf_free(p);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f00c fdd8 	bl	801776c <pbuf_free>
      return ERR_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	e0af      	b.n	800ad20 <lwiperf_tcp_recv+0x210>
    }
    if (!conn->have_settings_buf) {
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d135      	bne.n	800ac36 <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800abd0:	2300      	movs	r3, #0
 800abd2:	2218      	movs	r2, #24
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f00c ffcf 	bl	8017b78 <pbuf_copy_partial>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b18      	cmp	r3, #24
 800abde:	d008      	beq.n	800abf2 <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800abe0:	2102      	movs	r1, #2
 800abe2:	6978      	ldr	r0, [r7, #20]
 800abe4:	f7ff fd04 	bl	800a5f0 <lwiperf_tcp_close>
        pbuf_free(p);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f00c fdbf 	bl	801776c <pbuf_free>
        return ERR_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	e096      	b.n	800ad20 <lwiperf_tcp_recv+0x210>
      }
      conn->have_settings_buf = 1;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d031      	beq.n	800ac6a <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d02b      	beq.n	800ac6a <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 800ac12:	6978      	ldr	r0, [r7, #20]
 800ac14:	f7ff ff38 	bl	800aa88 <lwiperf_tx_start_passive>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	747b      	strb	r3, [r7, #17]
          if (err2 != ERR_OK) {
 800ac1c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d022      	beq.n	800ac6a <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 800ac24:	2104      	movs	r1, #4
 800ac26:	6978      	ldr	r0, [r7, #20]
 800ac28:	f7ff fce2 	bl	800a5f0 <lwiperf_tcp_close>
            pbuf_free(p);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f00c fd9d 	bl	801776c <pbuf_free>
            return ERR_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	e074      	b.n	800ad20 <lwiperf_tcp_recv+0x210>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d013      	beq.n	800ac6a <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ac48:	2318      	movs	r3, #24
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f00d f9ca 	bl	8017fe6 <pbuf_memcmp>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d008      	beq.n	800ac6a <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 800ac58:	2103      	movs	r1, #3
 800ac5a:	6978      	ldr	r0, [r7, #20]
 800ac5c:	f7ff fcc8 	bl	800a5f0 <lwiperf_tcp_close>
          pbuf_free(p);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f00c fd83 	bl	801776c <pbuf_free>
          return ERR_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e05a      	b.n	800ad20 <lwiperf_tcp_recv+0x210>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	f103 0218 	add.w	r2, r3, #24
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	625a      	str	r2, [r3, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	2b18      	cmp	r3, #24
 800ac7c:	d80f      	bhi.n	800ac9e <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 800ac7e:	f7f6 fe4b 	bl	8001918 <sys_now>
 800ac82:	4602      	mov	r2, r0
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	891b      	ldrh	r3, [r3, #8]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	68b8      	ldr	r0, [r7, #8]
 800ac90:	f00e fdfa 	bl	8019888 <tcp_recved>
      pbuf_free(p);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f00c fd69 	bl	801776c <pbuf_free>
      return ERR_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e040      	b.n	800ad20 <lwiperf_tcp_recv+0x210>
    }
    conn->next_num = 4; /* 24 bytes received... */
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2204      	movs	r2, #4
 800aca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 800aca6:	2118      	movs	r1, #24
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f00c fcd9 	bl	8017660 <pbuf_remove_header>
 800acae:	4603      	mov	r3, r0
 800acb0:	743b      	strb	r3, [r7, #16]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 800acb2:	7c3b      	ldrb	r3, [r7, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d006      	beq.n	800acc6 <lwiperf_tcp_recv+0x1b6>
 800acb8:	4b1b      	ldr	r3, [pc, #108]	; (800ad28 <lwiperf_tcp_recv+0x218>)
 800acba:	f240 2211 	movw	r2, #529	; 0x211
 800acbe:	491d      	ldr	r1, [pc, #116]	; (800ad34 <lwiperf_tcp_recv+0x224>)
 800acc0:	481b      	ldr	r0, [pc, #108]	; (800ad30 <lwiperf_tcp_recv+0x220>)
 800acc2:	f015 fc45 	bl	8020550 <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	61bb      	str	r3, [r7, #24]
 800acce:	e008      	b.n	800ace2 <lwiperf_tcp_recv+0x1d2>
        pbuf_free(p);
        return ERR_OK;
      }
    }
#endif
    packet_idx += q->len;
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	895b      	ldrh	r3, [r3, #10]
 800acd4:	461a      	mov	r2, r3
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	4413      	add	r3, r2
 800acda:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	61bb      	str	r3, [r7, #24]
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1f3      	bne.n	800acd0 <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	891b      	ldrh	r3, [r3, #8]
 800acec:	461a      	mov	r2, r3
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d006      	beq.n	800ad02 <lwiperf_tcp_recv+0x1f2>
 800acf4:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <lwiperf_tcp_recv+0x218>)
 800acf6:	f240 222b 	movw	r2, #555	; 0x22b
 800acfa:	490f      	ldr	r1, [pc, #60]	; (800ad38 <lwiperf_tcp_recv+0x228>)
 800acfc:	480c      	ldr	r0, [pc, #48]	; (800ad30 <lwiperf_tcp_recv+0x220>)
 800acfe:	f015 fc27 	bl	8020550 <iprintf>
  conn->bytes_transferred += packet_idx;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	441a      	add	r2, r3
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	625a      	str	r2, [r3, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 800ad0e:	8a7b      	ldrh	r3, [r7, #18]
 800ad10:	4619      	mov	r1, r3
 800ad12:	68b8      	ldr	r0, [r7, #8]
 800ad14:	f00e fdb8 	bl	8019888 <tcp_recved>
  pbuf_free(p);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f00c fd27 	bl	801776c <pbuf_free>
  return ERR_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	080214e8 	.word	0x080214e8
 800ad2c:	080215b4 	.word	0x080215b4
 800ad30:	0802153c 	.word	0x0802153c
 800ad34:	080215c4 	.word	0x080215c4
 800ad38:	080215e0 	.word	0x080215e0

0800ad3c <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800ad4c:	2105      	movs	r1, #5
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fc4e 	bl	800a5f0 <lwiperf_tcp_close>
}
 800ad54:	bf00      	nop
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d006      	beq.n	800ad82 <lwiperf_tcp_poll+0x26>
 800ad74:	4b12      	ldr	r3, [pc, #72]	; (800adc0 <lwiperf_tcp_poll+0x64>)
 800ad76:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ad7a:	4912      	ldr	r1, [pc, #72]	; (800adc4 <lwiperf_tcp_poll+0x68>)
 800ad7c:	4812      	ldr	r0, [pc, #72]	; (800adc8 <lwiperf_tcp_poll+0x6c>)
 800ad7e:	f015 fbe7 	bl	8020550 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f883 2020 	strb.w	r2, [r3, #32]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad98:	2b09      	cmp	r3, #9
 800ad9a:	d905      	bls.n	800ada8 <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800ad9c:	2102      	movs	r1, #2
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f7ff fc26 	bl	800a5f0 <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 800ada4:	2300      	movs	r3, #0
 800ada6:	e007      	b.n	800adb8 <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	795b      	ldrb	r3, [r3, #5]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7ff fc7f 	bl	800a6b4 <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	080214e8 	.word	0x080214e8
 800adc4:	080215b4 	.word	0x080215b4
 800adc8:	0802153c 	.word	0x0802153c

0800adcc <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	4613      	mov	r3, r2
 800add8:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 800adda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d105      	bne.n	800adee <lwiperf_tcp_accept+0x22>
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <lwiperf_tcp_accept+0x22>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d102      	bne.n	800adf4 <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 800adee:	f06f 0305 	mvn.w	r3, #5
 800adf2:	e0a3      	b.n	800af3c <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	795b      	ldrb	r3, [r3, #5]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d106      	bne.n	800ae0e <lwiperf_tcp_accept+0x42>
 800ae00:	4b50      	ldr	r3, [pc, #320]	; (800af44 <lwiperf_tcp_accept+0x178>)
 800ae02:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae06:	4950      	ldr	r1, [pc, #320]	; (800af48 <lwiperf_tcp_accept+0x17c>)
 800ae08:	4850      	ldr	r0, [pc, #320]	; (800af4c <lwiperf_tcp_accept+0x180>)
 800ae0a:	f015 fba1 	bl	8020550 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d106      	bne.n	800ae24 <lwiperf_tcp_accept+0x58>
 800ae16:	4b4b      	ldr	r3, [pc, #300]	; (800af44 <lwiperf_tcp_accept+0x178>)
 800ae18:	f240 2259 	movw	r2, #601	; 0x259
 800ae1c:	494c      	ldr	r1, [pc, #304]	; (800af50 <lwiperf_tcp_accept+0x184>)
 800ae1e:	484b      	ldr	r0, [pc, #300]	; (800af4c <lwiperf_tcp_accept+0x180>)
 800ae20:	f015 fb96 	bl	8020550 <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d006      	beq.n	800ae3a <lwiperf_tcp_accept+0x6e>
 800ae2c:	4b45      	ldr	r3, [pc, #276]	; (800af44 <lwiperf_tcp_accept+0x178>)
 800ae2e:	f240 225a 	movw	r2, #602	; 0x25a
 800ae32:	4948      	ldr	r1, [pc, #288]	; (800af54 <lwiperf_tcp_accept+0x188>)
 800ae34:	4845      	ldr	r0, [pc, #276]	; (800af4c <lwiperf_tcp_accept+0x180>)
 800ae36:	f015 fb8b 	bl	8020550 <iprintf>
  if (s->specific_remote) {
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d013      	beq.n	800ae6c <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d106      	bne.n	800ae5a <lwiperf_tcp_accept+0x8e>
 800ae4c:	4b3d      	ldr	r3, [pc, #244]	; (800af44 <lwiperf_tcp_accept+0x178>)
 800ae4e:	f44f 7217 	mov.w	r2, #604	; 0x25c
 800ae52:	4941      	ldr	r1, [pc, #260]	; (800af58 <lwiperf_tcp_accept+0x18c>)
 800ae54:	483d      	ldr	r0, [pc, #244]	; (800af4c <lwiperf_tcp_accept+0x180>)
 800ae56:	f015 fb7b 	bl	8020550 <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d00d      	beq.n	800ae82 <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 800ae66:	f06f 0305 	mvn.w	r3, #5
 800ae6a:	e067      	b.n	800af3c <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d006      	beq.n	800ae82 <lwiperf_tcp_accept+0xb6>
 800ae74:	4b33      	ldr	r3, [pc, #204]	; (800af44 <lwiperf_tcp_accept+0x178>)
 800ae76:	f240 2262 	movw	r2, #610	; 0x262
 800ae7a:	4938      	ldr	r1, [pc, #224]	; (800af5c <lwiperf_tcp_accept+0x190>)
 800ae7c:	4833      	ldr	r0, [pc, #204]	; (800af4c <lwiperf_tcp_accept+0x180>)
 800ae7e:	f015 fb67 	bl	8020550 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800ae82:	2048      	movs	r0, #72	; 0x48
 800ae84:	f00b f8ec 	bl	8016060 <mem_malloc>
 800ae88:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d102      	bne.n	800ae96 <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295
 800ae94:	e052      	b.n	800af3c <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 800ae96:	2248      	movs	r2, #72	; 0x48
 800ae98:	2100      	movs	r1, #0
 800ae9a:	6938      	ldr	r0, [r7, #16]
 800ae9c:	f015 fa70 	bl	8020380 <memset>
  conn->base.tcp = 1;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	2201      	movs	r2, #1
 800aea4:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 800aeac:	697a      	ldr	r2, [r7, #20]
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 800aeb8:	f7f6 fd2e 	bl	8001918 <sys_now>
 800aebc:	4602      	mov	r2, r0
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	699a      	ldr	r2, [r3, #24]
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	69da      	ldr	r2, [r3, #28]
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 800aed2:	6939      	ldr	r1, [r7, #16]
 800aed4:	68b8      	ldr	r0, [r7, #8]
 800aed6:	f00f fcb5 	bl	801a844 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 800aeda:	4921      	ldr	r1, [pc, #132]	; (800af60 <lwiperf_tcp_accept+0x194>)
 800aedc:	68b8      	ldr	r0, [r7, #8]
 800aede:	f00f fcc3 	bl	801a868 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800aee2:	2202      	movs	r2, #2
 800aee4:	491f      	ldr	r1, [pc, #124]	; (800af64 <lwiperf_tcp_accept+0x198>)
 800aee6:	68b8      	ldr	r0, [r7, #8]
 800aee8:	f00f fd3c 	bl	801a964 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	491d      	ldr	r1, [pc, #116]	; (800af68 <lwiperf_tcp_accept+0x19c>)
 800aef2:	4618      	mov	r0, r3
 800aef4:	f00f fcfc 	bl	801a8f0 <tcp_err>

  if (s->specific_remote) {
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d017      	beq.n	800af32 <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	689a      	ldr	r2, [r3, #8]
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800af10:	2b00      	cmp	r3, #0
 800af12:	d007      	beq.n	800af24 <lwiperf_tcp_accept+0x158>
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7ff fb05 	bl	800a528 <lwiperf_list_find>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d106      	bne.n	800af32 <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2200      	movs	r2, #0
 800af28:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800af2a:	2102      	movs	r1, #2
 800af2c:	6978      	ldr	r0, [r7, #20]
 800af2e:	f7ff fb5f 	bl	800a5f0 <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff fa9f 	bl	800a478 <lwiperf_list_add>
  return ERR_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	080214e8 	.word	0x080214e8
 800af48:	080215f0 	.word	0x080215f0
 800af4c:	0802153c 	.word	0x0802153c
 800af50:	08021600 	.word	0x08021600
 800af54:	08021614 	.word	0x08021614
 800af58:	08021628 	.word	0x08021628
 800af5c:	08021650 	.word	0x08021650
 800af60:	0800ab11 	.word	0x0800ab11
 800af64:	0800ad5d 	.word	0x0800ad5d
 800af68:	0800ad3d 	.word	0x0800ad3d

0800af6c <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	f241 3189 	movw	r1, #5001	; 0x1389
 800af7e:	4804      	ldr	r0, [pc, #16]	; (800af90 <lwiperf_start_tcp_server_default+0x24>)
 800af80:	f000 f808 	bl	800af94 <lwiperf_start_tcp_server>
 800af84:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 800af86:	4618      	mov	r0, r3
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	08025de8 	.word	0x08025de8

0800af94 <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af02      	add	r7, sp, #8
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	607a      	str	r2, [r7, #4]
 800af9e:	603b      	str	r3, [r7, #0]
 800afa0:	460b      	mov	r3, r1
 800afa2:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 800afa4:	2300      	movs	r3, #0
 800afa6:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 800afa8:	8979      	ldrh	r1, [r7, #10]
 800afaa:	f107 0310 	add.w	r3, r7, #16
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	2300      	movs	r3, #0
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f000 f80d 	bl	800afd8 <lwiperf_start_tcp_server_impl>
 800afbe:	4603      	mov	r3, r0
 800afc0:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 800afc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d101      	bne.n	800afce <lwiperf_start_tcp_server+0x3a>
    return state;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	e000      	b.n	800afd0 <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3718      	adds	r7, #24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b088      	sub	sp, #32
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	607a      	str	r2, [r7, #4]
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	460b      	mov	r3, r1
 800afe6:	817b      	strh	r3, [r7, #10]
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d106      	bne.n	800affc <lwiperf_start_tcp_server_impl+0x24>
 800afee:	4b3a      	ldr	r3, [pc, #232]	; (800b0d8 <lwiperf_start_tcp_server_impl+0x100>)
 800aff0:	f240 22b6 	movw	r2, #694	; 0x2b6
 800aff4:	4939      	ldr	r1, [pc, #228]	; (800b0dc <lwiperf_start_tcp_server_impl+0x104>)
 800aff6:	483a      	ldr	r0, [pc, #232]	; (800b0e0 <lwiperf_start_tcp_server_impl+0x108>)
 800aff8:	f015 faaa 	bl	8020550 <iprintf>

  if (local_addr == NULL) {
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d102      	bne.n	800b008 <lwiperf_start_tcp_server_impl+0x30>
    return ERR_ARG;
 800b002:	f06f 030f 	mvn.w	r3, #15
 800b006:	e063      	b.n	800b0d0 <lwiperf_start_tcp_server_impl+0xf8>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800b008:	2048      	movs	r0, #72	; 0x48
 800b00a:	f00b f829 	bl	8016060 <mem_malloc>
 800b00e:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d102      	bne.n	800b01c <lwiperf_start_tcp_server_impl+0x44>
    return ERR_MEM;
 800b016:	f04f 33ff 	mov.w	r3, #4294967295
 800b01a:	e059      	b.n	800b0d0 <lwiperf_start_tcp_server_impl+0xf8>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 800b01c:	2248      	movs	r2, #72	; 0x48
 800b01e:	2100      	movs	r1, #0
 800b020:	69f8      	ldr	r0, [r7, #28]
 800b022:	f015 f9ad 	bl	8020380 <memset>
  s->base.tcp = 1;
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	2201      	movs	r2, #1
 800b02a:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	2201      	movs	r2, #1
 800b030:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b036:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800b044:	202e      	movs	r0, #46	; 0x2e
 800b046:	f00f fbef 	bl	801a828 <tcp_new_ip_type>
 800b04a:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d102      	bne.n	800b058 <lwiperf_start_tcp_server_impl+0x80>
    return ERR_MEM;
 800b052:	f04f 33ff 	mov.w	r3, #4294967295
 800b056:	e03b      	b.n	800b0d0 <lwiperf_start_tcp_server_impl+0xf8>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 800b058:	897b      	ldrh	r3, [r7, #10]
 800b05a:	461a      	mov	r2, r3
 800b05c:	68f9      	ldr	r1, [r7, #12]
 800b05e:	69b8      	ldr	r0, [r7, #24]
 800b060:	f00e fa44 	bl	80194ec <tcp_bind>
 800b064:	4603      	mov	r3, r0
 800b066:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800b068:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <lwiperf_start_tcp_server_impl+0x9e>
    return err;
 800b070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b074:	e02c      	b.n	800b0d0 <lwiperf_start_tcp_server_impl+0xf8>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 800b076:	2101      	movs	r1, #1
 800b078:	69b8      	ldr	r0, [r7, #24]
 800b07a:	f00e faef 	bl	801965c <tcp_listen_with_backlog>
 800b07e:	4602      	mov	r2, r0
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10b      	bne.n	800b0a4 <lwiperf_start_tcp_server_impl+0xcc>
    if (pcb != NULL) {
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <lwiperf_start_tcp_server_impl+0xc0>
      tcp_close(pcb);
 800b092:	69b8      	ldr	r0, [r7, #24]
 800b094:	f00e f8d8 	bl	8019248 <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 800b098:	69f8      	ldr	r0, [r7, #28]
 800b09a:	f00a fe47 	bl	8015d2c <mem_free>
    return ERR_MEM;
 800b09e:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a2:	e015      	b.n	800b0d0 <lwiperf_start_tcp_server_impl+0xf8>
  }
  pcb = NULL;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	69f9      	ldr	r1, [r7, #28]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f00f fbc8 	bl	801a844 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	490a      	ldr	r1, [pc, #40]	; (800b0e4 <lwiperf_start_tcp_server_impl+0x10c>)
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f00f fc3a 	bl	801a934 <tcp_accept>

  lwiperf_list_add(&s->base);
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7ff f9d8 	bl	800a478 <lwiperf_list_add>
  *state = s;
 800b0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ca:	69fa      	ldr	r2, [r7, #28]
 800b0cc:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3720      	adds	r7, #32
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	080214e8 	.word	0x080214e8
 800b0dc:	08021678 	.word	0x08021678
 800b0e0:	0802153c 	.word	0x0802153c
 800b0e4:	0800adcd 	.word	0x0800adcd

0800b0e8 <lwiperf_report>:

static void
lwiperf_report(void *arg, enum lwiperf_report_type report_type,
  const ip_addr_t* local_addr, u16_t local_port, const ip_addr_t* remote_addr, u16_t remote_port,
  u32_t bytes_transferred, u32_t ms_duration, u32_t bandwidth_kbitpsec)
{
 800b0e8:	b590      	push	{r4, r7, lr}
 800b0ea:	b089      	sub	sp, #36	; 0x24
 800b0ec:	af04      	add	r7, sp, #16
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	607a      	str	r2, [r7, #4]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	72fb      	strb	r3, [r7, #11]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	813b      	strh	r3, [r7, #8]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(local_addr);
  LWIP_UNUSED_ARG(local_port);

  LWIP_PLATFORM_DIAG(("IPERF report: type=%d, remote: %s:%d, total bytes: %"U32_F", duration in ms: %"U32_F", kbits/s: %"U32_F"\n",
 800b0fc:	7afc      	ldrb	r4, [r7, #11]
 800b0fe:	6a38      	ldr	r0, [r7, #32]
 800b100:	f009 fdf6 	bl	8014cf0 <ip4addr_ntoa>
 800b104:	4601      	mov	r1, r0
 800b106:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10a:	9302      	str	r3, [sp, #8]
 800b10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	4613      	mov	r3, r2
 800b116:	460a      	mov	r2, r1
 800b118:	4621      	mov	r1, r4
 800b11a:	4803      	ldr	r0, [pc, #12]	; (800b128 <lwiperf_report+0x40>)
 800b11c:	f015 fa18 	bl	8020550 <iprintf>
    (int)report_type, ipaddr_ntoa(remote_addr), (int)remote_port, bytes_transferred, ms_duration, bandwidth_kbitpsec));
}
 800b120:	bf00      	nop
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	bd90      	pop	{r4, r7, pc}
 800b128:	08021688 	.word	0x08021688

0800b12c <lwiperf_example_init>:

void
lwiperf_example_init(void)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	af00      	add	r7, sp, #0
//    const ip_addr_t remote_ip = {
//      .addr = inet_addr("192.168.0.198")
//    };
  lwiperf_start_tcp_server_default(lwiperf_report, NULL);
 800b130:	2100      	movs	r1, #0
 800b132:	4802      	ldr	r0, [pc, #8]	; (800b13c <lwiperf_example_init+0x10>)
 800b134:	f7ff ff1a 	bl	800af6c <lwiperf_start_tcp_server_default>
//  lwiperf_start_tcp_client_default(&remote_ip, lwiperf_report, NULL);
}
 800b138:	bf00      	nop
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	0800b0e9 	.word	0x0800b0e9

0800b140 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b140:	b480      	push	{r7}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	4613      	mov	r3, r2
 800b14c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b14e:	2301      	movs	r3, #1
 800b150:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b156:	4b1f      	ldr	r3, [pc, #124]	; (800b1d4 <FATFS_LinkDriverEx+0x94>)
 800b158:	7a5b      	ldrb	r3, [r3, #9]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d131      	bne.n	800b1c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b160:	4b1c      	ldr	r3, [pc, #112]	; (800b1d4 <FATFS_LinkDriverEx+0x94>)
 800b162:	7a5b      	ldrb	r3, [r3, #9]
 800b164:	b2db      	uxtb	r3, r3
 800b166:	461a      	mov	r2, r3
 800b168:	4b1a      	ldr	r3, [pc, #104]	; (800b1d4 <FATFS_LinkDriverEx+0x94>)
 800b16a:	2100      	movs	r1, #0
 800b16c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b16e:	4b19      	ldr	r3, [pc, #100]	; (800b1d4 <FATFS_LinkDriverEx+0x94>)
 800b170:	7a5b      	ldrb	r3, [r3, #9]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	4a17      	ldr	r2, [pc, #92]	; (800b1d4 <FATFS_LinkDriverEx+0x94>)
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b17e:	4b15      	ldr	r3, [pc, #84]	; (800b1d4 <FATFS_LinkDriverEx+0x94>)
 800b180:	7a5b      	ldrb	r3, [r3, #9]
 800b182:	b2db      	uxtb	r3, r3
 800b184:	461a      	mov	r2, r3
 800b186:	4b13      	ldr	r3, [pc, #76]	; (800b1d4 <FATFS_LinkDriverEx+0x94>)
 800b188:	4413      	add	r3, r2
 800b18a:	79fa      	ldrb	r2, [r7, #7]
 800b18c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b18e:	4b11      	ldr	r3, [pc, #68]	; (800b1d4 <FATFS_LinkDriverEx+0x94>)
 800b190:	7a5b      	ldrb	r3, [r3, #9]
 800b192:	b2db      	uxtb	r3, r3
 800b194:	1c5a      	adds	r2, r3, #1
 800b196:	b2d1      	uxtb	r1, r2
 800b198:	4a0e      	ldr	r2, [pc, #56]	; (800b1d4 <FATFS_LinkDriverEx+0x94>)
 800b19a:	7251      	strb	r1, [r2, #9]
 800b19c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b19e:	7dbb      	ldrb	r3, [r7, #22]
 800b1a0:	3330      	adds	r3, #48	; 0x30
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	223a      	movs	r2, #58	; 0x3a
 800b1ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	3302      	adds	r3, #2
 800b1b4:	222f      	movs	r2, #47	; 0x2f
 800b1b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	3303      	adds	r3, #3
 800b1bc:	2200      	movs	r2, #0
 800b1be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	371c      	adds	r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	24004d98 	.word	0x24004d98

0800b1d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff ffaa 	bl	800b140 <FATFS_LinkDriverEx>
 800b1ec:	4603      	mov	r3, r0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <__NVIC_SetPriority>:
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	4603      	mov	r3, r0
 800b200:	6039      	str	r1, [r7, #0]
 800b202:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	db0a      	blt.n	800b222 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	490c      	ldr	r1, [pc, #48]	; (800b244 <__NVIC_SetPriority+0x4c>)
 800b212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b216:	0112      	lsls	r2, r2, #4
 800b218:	b2d2      	uxtb	r2, r2
 800b21a:	440b      	add	r3, r1
 800b21c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b220:	e00a      	b.n	800b238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	b2da      	uxtb	r2, r3
 800b226:	4908      	ldr	r1, [pc, #32]	; (800b248 <__NVIC_SetPriority+0x50>)
 800b228:	88fb      	ldrh	r3, [r7, #6]
 800b22a:	f003 030f 	and.w	r3, r3, #15
 800b22e:	3b04      	subs	r3, #4
 800b230:	0112      	lsls	r2, r2, #4
 800b232:	b2d2      	uxtb	r2, r2
 800b234:	440b      	add	r3, r1
 800b236:	761a      	strb	r2, [r3, #24]
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	e000e100 	.word	0xe000e100
 800b248:	e000ed00 	.word	0xe000ed00

0800b24c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b250:	2100      	movs	r1, #0
 800b252:	f06f 0004 	mvn.w	r0, #4
 800b256:	f7ff ffcf 	bl	800b1f8 <__NVIC_SetPriority>
#endif
}
 800b25a:	bf00      	nop
 800b25c:	bd80      	pop	{r7, pc}
	...

0800b260 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b266:	f3ef 8305 	mrs	r3, IPSR
 800b26a:	603b      	str	r3, [r7, #0]
  return(result);
 800b26c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b272:	f06f 0305 	mvn.w	r3, #5
 800b276:	607b      	str	r3, [r7, #4]
 800b278:	e00c      	b.n	800b294 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b27a:	4b0a      	ldr	r3, [pc, #40]	; (800b2a4 <osKernelInitialize+0x44>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d105      	bne.n	800b28e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b282:	4b08      	ldr	r3, [pc, #32]	; (800b2a4 <osKernelInitialize+0x44>)
 800b284:	2201      	movs	r2, #1
 800b286:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b288:	2300      	movs	r3, #0
 800b28a:	607b      	str	r3, [r7, #4]
 800b28c:	e002      	b.n	800b294 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295
 800b292:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b294:	687b      	ldr	r3, [r7, #4]
}
 800b296:	4618      	mov	r0, r3
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	24004da4 	.word	0x24004da4

0800b2a8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800b2ae:	f003 f94b 	bl	800e548 <xTaskGetSchedulerState>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d004      	beq.n	800b2c2 <osKernelGetState+0x1a>
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	d105      	bne.n	800b2c8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800b2bc:	2302      	movs	r3, #2
 800b2be:	607b      	str	r3, [r7, #4]
      break;
 800b2c0:	e00c      	b.n	800b2dc <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	607b      	str	r3, [r7, #4]
      break;
 800b2c6:	e009      	b.n	800b2dc <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800b2c8:	4b07      	ldr	r3, [pc, #28]	; (800b2e8 <osKernelGetState+0x40>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d102      	bne.n	800b2d6 <osKernelGetState+0x2e>
        state = osKernelReady;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800b2d4:	e001      	b.n	800b2da <osKernelGetState+0x32>
        state = osKernelInactive;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	607b      	str	r3, [r7, #4]
      break;
 800b2da:	bf00      	nop
  }

  return (state);
 800b2dc:	687b      	ldr	r3, [r7, #4]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	24004da4 	.word	0x24004da4

0800b2ec <osKernelStart>:

osStatus_t osKernelStart (void) {
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2f2:	f3ef 8305 	mrs	r3, IPSR
 800b2f6:	603b      	str	r3, [r7, #0]
  return(result);
 800b2f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b2fe:	f06f 0305 	mvn.w	r3, #5
 800b302:	607b      	str	r3, [r7, #4]
 800b304:	e010      	b.n	800b328 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b306:	4b0b      	ldr	r3, [pc, #44]	; (800b334 <osKernelStart+0x48>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d109      	bne.n	800b322 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b30e:	f7ff ff9d 	bl	800b24c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b312:	4b08      	ldr	r3, [pc, #32]	; (800b334 <osKernelStart+0x48>)
 800b314:	2202      	movs	r2, #2
 800b316:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b318:	f002 fc94 	bl	800dc44 <vTaskStartScheduler>
      stat = osOK;
 800b31c:	2300      	movs	r3, #0
 800b31e:	607b      	str	r3, [r7, #4]
 800b320:	e002      	b.n	800b328 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b322:	f04f 33ff 	mov.w	r3, #4294967295
 800b326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b328:	687b      	ldr	r3, [r7, #4]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	24004da4 	.word	0x24004da4

0800b338 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b33e:	f3ef 8305 	mrs	r3, IPSR
 800b342:	603b      	str	r3, [r7, #0]
  return(result);
 800b344:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b346:	2b00      	cmp	r3, #0
 800b348:	d003      	beq.n	800b352 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b34a:	f002 fd9d 	bl	800de88 <xTaskGetTickCountFromISR>
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	e002      	b.n	800b358 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b352:	f002 fd89 	bl	800de68 <xTaskGetTickCount>
 800b356:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b358:	687b      	ldr	r3, [r7, #4]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b362:	b580      	push	{r7, lr}
 800b364:	b08e      	sub	sp, #56	; 0x38
 800b366:	af04      	add	r7, sp, #16
 800b368:	60f8      	str	r0, [r7, #12]
 800b36a:	60b9      	str	r1, [r7, #8]
 800b36c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b372:	f3ef 8305 	mrs	r3, IPSR
 800b376:	617b      	str	r3, [r7, #20]
  return(result);
 800b378:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d17e      	bne.n	800b47c <osThreadNew+0x11a>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d07b      	beq.n	800b47c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b384:	2380      	movs	r3, #128	; 0x80
 800b386:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b388:	2318      	movs	r3, #24
 800b38a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b38c:	2300      	movs	r3, #0
 800b38e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b390:	f04f 33ff 	mov.w	r3, #4294967295
 800b394:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d045      	beq.n	800b428 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <osThreadNew+0x48>
        name = attr->name;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d008      	beq.n	800b3d0 <osThreadNew+0x6e>
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	2b38      	cmp	r3, #56	; 0x38
 800b3c2:	d805      	bhi.n	800b3d0 <osThreadNew+0x6e>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <osThreadNew+0x72>
        return (NULL);
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e054      	b.n	800b47e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d003      	beq.n	800b3e4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	695b      	ldr	r3, [r3, #20]
 800b3e0:	089b      	lsrs	r3, r3, #2
 800b3e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00e      	beq.n	800b40a <osThreadNew+0xa8>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	2b5b      	cmp	r3, #91	; 0x5b
 800b3f2:	d90a      	bls.n	800b40a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d006      	beq.n	800b40a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	695b      	ldr	r3, [r3, #20]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <osThreadNew+0xa8>
        mem = 1;
 800b404:	2301      	movs	r3, #1
 800b406:	61bb      	str	r3, [r7, #24]
 800b408:	e010      	b.n	800b42c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10c      	bne.n	800b42c <osThreadNew+0xca>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d108      	bne.n	800b42c <osThreadNew+0xca>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d104      	bne.n	800b42c <osThreadNew+0xca>
          mem = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	e001      	b.n	800b42c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d110      	bne.n	800b454 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b43a:	9202      	str	r2, [sp, #8]
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	6a3a      	ldr	r2, [r7, #32]
 800b446:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f002 fa25 	bl	800d898 <xTaskCreateStatic>
 800b44e:	4603      	mov	r3, r0
 800b450:	613b      	str	r3, [r7, #16]
 800b452:	e013      	b.n	800b47c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d110      	bne.n	800b47c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	f107 0310 	add.w	r3, r7, #16
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f002 fa70 	bl	800d952 <xTaskCreate>
 800b472:	4603      	mov	r3, r0
 800b474:	2b01      	cmp	r3, #1
 800b476:	d001      	beq.n	800b47c <osThreadNew+0x11a>
            hTask = NULL;
 800b478:	2300      	movs	r3, #0
 800b47a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b47c:	693b      	ldr	r3, [r7, #16]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3728      	adds	r7, #40	; 0x28
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b48e:	f3ef 8305 	mrs	r3, IPSR
 800b492:	60bb      	str	r3, [r7, #8]
  return(result);
 800b494:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <osDelay+0x1c>
    stat = osErrorISR;
 800b49a:	f06f 0305 	mvn.w	r3, #5
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	e007      	b.n	800b4b2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f002 fb95 	bl	800dbdc <vTaskDelay>
    }
  }

  return (stat);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b088      	sub	sp, #32
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4c8:	f3ef 8305 	mrs	r3, IPSR
 800b4cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4ce:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d174      	bne.n	800b5be <osMutexNew+0x102>
    if (attr != NULL) {
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	61bb      	str	r3, [r7, #24]
 800b4e0:	e001      	b.n	800b4e6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <osMutexNew+0x3a>
      rmtx = 1U;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	617b      	str	r3, [r7, #20]
 800b4f4:	e001      	b.n	800b4fa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	f003 0308 	and.w	r3, r3, #8
 800b500:	2b00      	cmp	r3, #0
 800b502:	d15c      	bne.n	800b5be <osMutexNew+0x102>
      mem = -1;
 800b504:	f04f 33ff 	mov.w	r3, #4294967295
 800b508:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d015      	beq.n	800b53c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d006      	beq.n	800b526 <osMutexNew+0x6a>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	2b4f      	cmp	r3, #79	; 0x4f
 800b51e:	d902      	bls.n	800b526 <osMutexNew+0x6a>
          mem = 1;
 800b520:	2301      	movs	r3, #1
 800b522:	613b      	str	r3, [r7, #16]
 800b524:	e00c      	b.n	800b540 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d108      	bne.n	800b540 <osMutexNew+0x84>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d104      	bne.n	800b540 <osMutexNew+0x84>
            mem = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	613b      	str	r3, [r7, #16]
 800b53a:	e001      	b.n	800b540 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d112      	bne.n	800b56c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d007      	beq.n	800b55c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	4619      	mov	r1, r3
 800b552:	2004      	movs	r0, #4
 800b554:	f001 fa0f 	bl	800c976 <xQueueCreateMutexStatic>
 800b558:	61f8      	str	r0, [r7, #28]
 800b55a:	e016      	b.n	800b58a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	4619      	mov	r1, r3
 800b562:	2001      	movs	r0, #1
 800b564:	f001 fa07 	bl	800c976 <xQueueCreateMutexStatic>
 800b568:	61f8      	str	r0, [r7, #28]
 800b56a:	e00e      	b.n	800b58a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10b      	bne.n	800b58a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d004      	beq.n	800b582 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b578:	2004      	movs	r0, #4
 800b57a:	f001 f9e4 	bl	800c946 <xQueueCreateMutex>
 800b57e:	61f8      	str	r0, [r7, #28]
 800b580:	e003      	b.n	800b58a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b582:	2001      	movs	r0, #1
 800b584:	f001 f9df 	bl	800c946 <xQueueCreateMutex>
 800b588:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00c      	beq.n	800b5aa <osMutexNew+0xee>
        if (attr != NULL) {
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <osMutexNew+0xe2>
          name = attr->name;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	e001      	b.n	800b5a2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b5a2:	68f9      	ldr	r1, [r7, #12]
 800b5a4:	69f8      	ldr	r0, [r7, #28]
 800b5a6:	f002 f8ef 	bl	800d788 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d006      	beq.n	800b5be <osMutexNew+0x102>
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	f043 0301 	orr.w	r3, r3, #1
 800b5bc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b5be:	69fb      	ldr	r3, [r7, #28]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3720      	adds	r7, #32
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f023 0301 	bic.w	r3, r3, #1
 800b5d8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5e6:	f3ef 8305 	mrs	r3, IPSR
 800b5ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5ec:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b5f2:	f06f 0305 	mvn.w	r3, #5
 800b5f6:	617b      	str	r3, [r7, #20]
 800b5f8:	e02c      	b.n	800b654 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d103      	bne.n	800b608 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b600:	f06f 0303 	mvn.w	r3, #3
 800b604:	617b      	str	r3, [r7, #20]
 800b606:	e025      	b.n	800b654 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d011      	beq.n	800b632 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b60e:	6839      	ldr	r1, [r7, #0]
 800b610:	6938      	ldr	r0, [r7, #16]
 800b612:	f001 f9ff 	bl	800ca14 <xQueueTakeMutexRecursive>
 800b616:	4603      	mov	r3, r0
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d01b      	beq.n	800b654 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d003      	beq.n	800b62a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b622:	f06f 0301 	mvn.w	r3, #1
 800b626:	617b      	str	r3, [r7, #20]
 800b628:	e014      	b.n	800b654 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b62a:	f06f 0302 	mvn.w	r3, #2
 800b62e:	617b      	str	r3, [r7, #20]
 800b630:	e010      	b.n	800b654 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6938      	ldr	r0, [r7, #16]
 800b636:	f001 fd93 	bl	800d160 <xQueueSemaphoreTake>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d009      	beq.n	800b654 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b646:	f06f 0301 	mvn.w	r3, #1
 800b64a:	617b      	str	r3, [r7, #20]
 800b64c:	e002      	b.n	800b654 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b64e:	f06f 0302 	mvn.w	r3, #2
 800b652:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b654:	697b      	ldr	r3, [r7, #20]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b65e:	b580      	push	{r7, lr}
 800b660:	b086      	sub	sp, #24
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f023 0301 	bic.w	r3, r3, #1
 800b66c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b676:	2300      	movs	r3, #0
 800b678:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b67a:	f3ef 8305 	mrs	r3, IPSR
 800b67e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b680:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b682:	2b00      	cmp	r3, #0
 800b684:	d003      	beq.n	800b68e <osMutexRelease+0x30>
    stat = osErrorISR;
 800b686:	f06f 0305 	mvn.w	r3, #5
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	e01f      	b.n	800b6ce <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d103      	bne.n	800b69c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b694:	f06f 0303 	mvn.w	r3, #3
 800b698:	617b      	str	r3, [r7, #20]
 800b69a:	e018      	b.n	800b6ce <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d009      	beq.n	800b6b6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b6a2:	6938      	ldr	r0, [r7, #16]
 800b6a4:	f001 f982 	bl	800c9ac <xQueueGiveMutexRecursive>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d00f      	beq.n	800b6ce <osMutexRelease+0x70>
        stat = osErrorResource;
 800b6ae:	f06f 0302 	mvn.w	r3, #2
 800b6b2:	617b      	str	r3, [r7, #20]
 800b6b4:	e00b      	b.n	800b6ce <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	6938      	ldr	r0, [r7, #16]
 800b6be:	f001 fa49 	bl	800cb54 <xQueueGenericSend>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d002      	beq.n	800b6ce <osMutexRelease+0x70>
        stat = osErrorResource;
 800b6c8:	f06f 0302 	mvn.w	r3, #2
 800b6cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b6ce:	697b      	ldr	r3, [r7, #20]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08a      	sub	sp, #40	; 0x28
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6e8:	f3ef 8305 	mrs	r3, IPSR
 800b6ec:	613b      	str	r3, [r7, #16]
  return(result);
 800b6ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d175      	bne.n	800b7e0 <osSemaphoreNew+0x108>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d072      	beq.n	800b7e0 <osSemaphoreNew+0x108>
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d86e      	bhi.n	800b7e0 <osSemaphoreNew+0x108>
    mem = -1;
 800b702:	f04f 33ff 	mov.w	r3, #4294967295
 800b706:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d015      	beq.n	800b73a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d006      	beq.n	800b724 <osSemaphoreNew+0x4c>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	2b4f      	cmp	r3, #79	; 0x4f
 800b71c:	d902      	bls.n	800b724 <osSemaphoreNew+0x4c>
        mem = 1;
 800b71e:	2301      	movs	r3, #1
 800b720:	61bb      	str	r3, [r7, #24]
 800b722:	e00c      	b.n	800b73e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d108      	bne.n	800b73e <osSemaphoreNew+0x66>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d104      	bne.n	800b73e <osSemaphoreNew+0x66>
          mem = 0;
 800b734:	2300      	movs	r3, #0
 800b736:	61bb      	str	r3, [r7, #24]
 800b738:	e001      	b.n	800b73e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b744:	d04c      	beq.n	800b7e0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d128      	bne.n	800b79e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d10a      	bne.n	800b768 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	2203      	movs	r2, #3
 800b758:	9200      	str	r2, [sp, #0]
 800b75a:	2200      	movs	r2, #0
 800b75c:	2100      	movs	r1, #0
 800b75e:	2001      	movs	r0, #1
 800b760:	f001 f802 	bl	800c768 <xQueueGenericCreateStatic>
 800b764:	61f8      	str	r0, [r7, #28]
 800b766:	e005      	b.n	800b774 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b768:	2203      	movs	r2, #3
 800b76a:	2100      	movs	r1, #0
 800b76c:	2001      	movs	r0, #1
 800b76e:	f001 f873 	bl	800c858 <xQueueGenericCreate>
 800b772:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d022      	beq.n	800b7c0 <osSemaphoreNew+0xe8>
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d01f      	beq.n	800b7c0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b780:	2300      	movs	r3, #0
 800b782:	2200      	movs	r2, #0
 800b784:	2100      	movs	r1, #0
 800b786:	69f8      	ldr	r0, [r7, #28]
 800b788:	f001 f9e4 	bl	800cb54 <xQueueGenericSend>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d016      	beq.n	800b7c0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b792:	69f8      	ldr	r0, [r7, #28]
 800b794:	f001 feac 	bl	800d4f0 <vQueueDelete>
            hSemaphore = NULL;
 800b798:	2300      	movs	r3, #0
 800b79a:	61fb      	str	r3, [r7, #28]
 800b79c:	e010      	b.n	800b7c0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d108      	bne.n	800b7b6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	68b9      	ldr	r1, [r7, #8]
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f001 f967 	bl	800ca80 <xQueueCreateCountingSemaphoreStatic>
 800b7b2:	61f8      	str	r0, [r7, #28]
 800b7b4:	e004      	b.n	800b7c0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b7b6:	68b9      	ldr	r1, [r7, #8]
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f001 f998 	bl	800caee <xQueueCreateCountingSemaphore>
 800b7be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00c      	beq.n	800b7e0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	e001      	b.n	800b7d8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b7d8:	6979      	ldr	r1, [r7, #20]
 800b7da:	69f8      	ldr	r0, [r7, #28]
 800b7dc:	f001 ffd4 	bl	800d788 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b7e0:	69fb      	ldr	r3, [r7, #28]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3720      	adds	r7, #32
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
	...

0800b7ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d103      	bne.n	800b80c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b804:	f06f 0303 	mvn.w	r3, #3
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	e039      	b.n	800b880 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b80c:	f3ef 8305 	mrs	r3, IPSR
 800b810:	60fb      	str	r3, [r7, #12]
  return(result);
 800b812:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b814:	2b00      	cmp	r3, #0
 800b816:	d022      	beq.n	800b85e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d003      	beq.n	800b826 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b81e:	f06f 0303 	mvn.w	r3, #3
 800b822:	617b      	str	r3, [r7, #20]
 800b824:	e02c      	b.n	800b880 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b826:	2300      	movs	r3, #0
 800b828:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b82a:	f107 0308 	add.w	r3, r7, #8
 800b82e:	461a      	mov	r2, r3
 800b830:	2100      	movs	r1, #0
 800b832:	6938      	ldr	r0, [r7, #16]
 800b834:	f001 fda0 	bl	800d378 <xQueueReceiveFromISR>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d003      	beq.n	800b846 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b83e:	f06f 0302 	mvn.w	r3, #2
 800b842:	617b      	str	r3, [r7, #20]
 800b844:	e01c      	b.n	800b880 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d019      	beq.n	800b880 <osSemaphoreAcquire+0x94>
 800b84c:	4b0f      	ldr	r3, [pc, #60]	; (800b88c <osSemaphoreAcquire+0xa0>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	e010      	b.n	800b880 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6938      	ldr	r0, [r7, #16]
 800b862:	f001 fc7d 	bl	800d160 <xQueueSemaphoreTake>
 800b866:	4603      	mov	r3, r0
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d009      	beq.n	800b880 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b872:	f06f 0301 	mvn.w	r3, #1
 800b876:	617b      	str	r3, [r7, #20]
 800b878:	e002      	b.n	800b880 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b87a:	f06f 0302 	mvn.w	r3, #2
 800b87e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b880:	697b      	ldr	r3, [r7, #20]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3718      	adds	r7, #24
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	e000ed04 	.word	0xe000ed04

0800b890 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d103      	bne.n	800b8ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b8a6:	f06f 0303 	mvn.w	r3, #3
 800b8aa:	617b      	str	r3, [r7, #20]
 800b8ac:	e02c      	b.n	800b908 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8ae:	f3ef 8305 	mrs	r3, IPSR
 800b8b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d01a      	beq.n	800b8f0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b8be:	f107 0308 	add.w	r3, r7, #8
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6938      	ldr	r0, [r7, #16]
 800b8c6:	f001 fade 	bl	800ce86 <xQueueGiveFromISR>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d003      	beq.n	800b8d8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b8d0:	f06f 0302 	mvn.w	r3, #2
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	e017      	b.n	800b908 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d014      	beq.n	800b908 <osSemaphoreRelease+0x78>
 800b8de:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <osSemaphoreRelease+0x84>)
 800b8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	e00b      	b.n	800b908 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	6938      	ldr	r0, [r7, #16]
 800b8f8:	f001 f92c 	bl	800cb54 <xQueueGenericSend>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d002      	beq.n	800b908 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b902:	f06f 0302 	mvn.w	r3, #2
 800b906:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b908:	697b      	ldr	r3, [r7, #20]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	e000ed04 	.word	0xe000ed04

0800b918 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b924:	f3ef 8305 	mrs	r3, IPSR
 800b928:	60fb      	str	r3, [r7, #12]
  return(result);
 800b92a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d003      	beq.n	800b938 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b930:	f06f 0305 	mvn.w	r3, #5
 800b934:	617b      	str	r3, [r7, #20]
 800b936:	e00e      	b.n	800b956 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d103      	bne.n	800b946 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b93e:	f06f 0303 	mvn.w	r3, #3
 800b942:	617b      	str	r3, [r7, #20]
 800b944:	e007      	b.n	800b956 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b946:	6938      	ldr	r0, [r7, #16]
 800b948:	f001 ff48 	bl	800d7dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b950:	6938      	ldr	r0, [r7, #16]
 800b952:	f001 fdcd 	bl	800d4f0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b956:	697b      	ldr	r3, [r7, #20]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	; 0x28
 800b964:	af02      	add	r7, sp, #8
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b96c:	2300      	movs	r3, #0
 800b96e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b970:	f3ef 8305 	mrs	r3, IPSR
 800b974:	613b      	str	r3, [r7, #16]
  return(result);
 800b976:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d15f      	bne.n	800ba3c <osMessageQueueNew+0xdc>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d05c      	beq.n	800ba3c <osMessageQueueNew+0xdc>
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d059      	beq.n	800ba3c <osMessageQueueNew+0xdc>
    mem = -1;
 800b988:	f04f 33ff 	mov.w	r3, #4294967295
 800b98c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d029      	beq.n	800b9e8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d012      	beq.n	800b9c2 <osMessageQueueNew+0x62>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	2b4f      	cmp	r3, #79	; 0x4f
 800b9a2:	d90e      	bls.n	800b9c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00a      	beq.n	800b9c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	695a      	ldr	r2, [r3, #20]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	68b9      	ldr	r1, [r7, #8]
 800b9b4:	fb01 f303 	mul.w	r3, r1, r3
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d302      	bcc.n	800b9c2 <osMessageQueueNew+0x62>
        mem = 1;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	61bb      	str	r3, [r7, #24]
 800b9c0:	e014      	b.n	800b9ec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d110      	bne.n	800b9ec <osMessageQueueNew+0x8c>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10c      	bne.n	800b9ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d108      	bne.n	800b9ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	695b      	ldr	r3, [r3, #20]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d104      	bne.n	800b9ec <osMessageQueueNew+0x8c>
          mem = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	61bb      	str	r3, [r7, #24]
 800b9e6:	e001      	b.n	800b9ec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d10b      	bne.n	800ba0a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	691a      	ldr	r2, [r3, #16]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	9100      	str	r1, [sp, #0]
 800b9fe:	68b9      	ldr	r1, [r7, #8]
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f000 feb1 	bl	800c768 <xQueueGenericCreateStatic>
 800ba06:	61f8      	str	r0, [r7, #28]
 800ba08:	e008      	b.n	800ba1c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d105      	bne.n	800ba1c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ba10:	2200      	movs	r2, #0
 800ba12:	68b9      	ldr	r1, [r7, #8]
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f000 ff1f 	bl	800c858 <xQueueGenericCreate>
 800ba1a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00c      	beq.n	800ba3c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d003      	beq.n	800ba30 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	e001      	b.n	800ba34 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ba34:	6979      	ldr	r1, [r7, #20]
 800ba36:	69f8      	ldr	r0, [r7, #28]
 800ba38:	f001 fea6 	bl	800d788 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ba3c:	69fb      	ldr	r3, [r7, #28]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3720      	adds	r7, #32
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
	...

0800ba48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b088      	sub	sp, #32
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	603b      	str	r3, [r7, #0]
 800ba54:	4613      	mov	r3, r2
 800ba56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba60:	f3ef 8305 	mrs	r3, IPSR
 800ba64:	617b      	str	r3, [r7, #20]
  return(result);
 800ba66:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d028      	beq.n	800babe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d005      	beq.n	800ba7e <osMessageQueuePut+0x36>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <osMessageQueuePut+0x36>
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ba7e:	f06f 0303 	mvn.w	r3, #3
 800ba82:	61fb      	str	r3, [r7, #28]
 800ba84:	e038      	b.n	800baf8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ba86:	2300      	movs	r3, #0
 800ba88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ba8a:	f107 0210 	add.w	r2, r7, #16
 800ba8e:	2300      	movs	r3, #0
 800ba90:	68b9      	ldr	r1, [r7, #8]
 800ba92:	69b8      	ldr	r0, [r7, #24]
 800ba94:	f001 f95c 	bl	800cd50 <xQueueGenericSendFromISR>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d003      	beq.n	800baa6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ba9e:	f06f 0302 	mvn.w	r3, #2
 800baa2:	61fb      	str	r3, [r7, #28]
 800baa4:	e028      	b.n	800baf8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d025      	beq.n	800baf8 <osMessageQueuePut+0xb0>
 800baac:	4b15      	ldr	r3, [pc, #84]	; (800bb04 <osMessageQueuePut+0xbc>)
 800baae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	e01c      	b.n	800baf8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <osMessageQueuePut+0x82>
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d103      	bne.n	800bad2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800baca:	f06f 0303 	mvn.w	r3, #3
 800bace:	61fb      	str	r3, [r7, #28]
 800bad0:	e012      	b.n	800baf8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bad2:	2300      	movs	r3, #0
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	68b9      	ldr	r1, [r7, #8]
 800bad8:	69b8      	ldr	r0, [r7, #24]
 800bada:	f001 f83b 	bl	800cb54 <xQueueGenericSend>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d009      	beq.n	800baf8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800baea:	f06f 0301 	mvn.w	r3, #1
 800baee:	61fb      	str	r3, [r7, #28]
 800baf0:	e002      	b.n	800baf8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800baf2:	f06f 0302 	mvn.w	r3, #2
 800baf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800baf8:	69fb      	ldr	r3, [r7, #28]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3720      	adds	r7, #32
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	e000ed04 	.word	0xe000ed04

0800bb08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
 800bb14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb1e:	f3ef 8305 	mrs	r3, IPSR
 800bb22:	617b      	str	r3, [r7, #20]
  return(result);
 800bb24:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d028      	beq.n	800bb7c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d005      	beq.n	800bb3c <osMessageQueueGet+0x34>
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d002      	beq.n	800bb3c <osMessageQueueGet+0x34>
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d003      	beq.n	800bb44 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bb3c:	f06f 0303 	mvn.w	r3, #3
 800bb40:	61fb      	str	r3, [r7, #28]
 800bb42:	e037      	b.n	800bbb4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bb44:	2300      	movs	r3, #0
 800bb46:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bb48:	f107 0310 	add.w	r3, r7, #16
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	69b8      	ldr	r0, [r7, #24]
 800bb52:	f001 fc11 	bl	800d378 <xQueueReceiveFromISR>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d003      	beq.n	800bb64 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bb5c:	f06f 0302 	mvn.w	r3, #2
 800bb60:	61fb      	str	r3, [r7, #28]
 800bb62:	e027      	b.n	800bbb4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d024      	beq.n	800bbb4 <osMessageQueueGet+0xac>
 800bb6a:	4b15      	ldr	r3, [pc, #84]	; (800bbc0 <osMessageQueueGet+0xb8>)
 800bb6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb70:	601a      	str	r2, [r3, #0]
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	e01b      	b.n	800bbb4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d002      	beq.n	800bb88 <osMessageQueueGet+0x80>
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d103      	bne.n	800bb90 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bb88:	f06f 0303 	mvn.w	r3, #3
 800bb8c:	61fb      	str	r3, [r7, #28]
 800bb8e:	e011      	b.n	800bbb4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb90:	683a      	ldr	r2, [r7, #0]
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	69b8      	ldr	r0, [r7, #24]
 800bb96:	f001 fa03 	bl	800cfa0 <xQueueReceive>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d009      	beq.n	800bbb4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d003      	beq.n	800bbae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bba6:	f06f 0301 	mvn.w	r3, #1
 800bbaa:	61fb      	str	r3, [r7, #28]
 800bbac:	e002      	b.n	800bbb4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bbae:	f06f 0302 	mvn.w	r3, #2
 800bbb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bbb4:	69fb      	ldr	r3, [r7, #28]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3720      	adds	r7, #32
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	e000ed04 	.word	0xe000ed04

0800bbc4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d102      	bne.n	800bbdc <osMessageQueueGetCount+0x18>
    count = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	617b      	str	r3, [r7, #20]
 800bbda:	e00e      	b.n	800bbfa <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbdc:	f3ef 8305 	mrs	r3, IPSR
 800bbe0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d004      	beq.n	800bbf2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800bbe8:	6938      	ldr	r0, [r7, #16]
 800bbea:	f001 fc63 	bl	800d4b4 <uxQueueMessagesWaitingFromISR>
 800bbee:	6178      	str	r0, [r7, #20]
 800bbf0:	e003      	b.n	800bbfa <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800bbf2:	6938      	ldr	r0, [r7, #16]
 800bbf4:	f001 fc40 	bl	800d478 <uxQueueMessagesWaiting>
 800bbf8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800bbfa:	697b      	ldr	r3, [r7, #20]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc10:	f3ef 8305 	mrs	r3, IPSR
 800bc14:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc16:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d003      	beq.n	800bc24 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800bc1c:	f06f 0305 	mvn.w	r3, #5
 800bc20:	617b      	str	r3, [r7, #20]
 800bc22:	e00e      	b.n	800bc42 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d103      	bne.n	800bc32 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800bc2a:	f06f 0303 	mvn.w	r3, #3
 800bc2e:	617b      	str	r3, [r7, #20]
 800bc30:	e007      	b.n	800bc42 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800bc32:	6938      	ldr	r0, [r7, #16]
 800bc34:	f001 fdd2 	bl	800d7dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800bc3c:	6938      	ldr	r0, [r7, #16]
 800bc3e:	f001 fc57 	bl	800d4f0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800bc42:	697b      	ldr	r3, [r7, #20]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4a07      	ldr	r2, [pc, #28]	; (800bc78 <vApplicationGetIdleTaskMemory+0x2c>)
 800bc5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	4a06      	ldr	r2, [pc, #24]	; (800bc7c <vApplicationGetIdleTaskMemory+0x30>)
 800bc62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2280      	movs	r2, #128	; 0x80
 800bc68:	601a      	str	r2, [r3, #0]
}
 800bc6a:	bf00      	nop
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	24004da8 	.word	0x24004da8
 800bc7c:	24004e04 	.word	0x24004e04

0800bc80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	4a07      	ldr	r2, [pc, #28]	; (800bcac <vApplicationGetTimerTaskMemory+0x2c>)
 800bc90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	4a06      	ldr	r2, [pc, #24]	; (800bcb0 <vApplicationGetTimerTaskMemory+0x30>)
 800bc96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc9e:	601a      	str	r2, [r3, #0]
}
 800bca0:	bf00      	nop
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	24005004 	.word	0x24005004
 800bcb0:	24005060 	.word	0x24005060

0800bcb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08a      	sub	sp, #40	; 0x28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bcc0:	f002 f826 	bl	800dd10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bcc4:	4b5d      	ldr	r3, [pc, #372]	; (800be3c <pvPortMalloc+0x188>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d101      	bne.n	800bcd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bccc:	f000 f924 	bl	800bf18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bcd0:	4b5b      	ldr	r3, [pc, #364]	; (800be40 <pvPortMalloc+0x18c>)
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f040 8093 	bne.w	800be04 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d01d      	beq.n	800bd20 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bce4:	2208      	movs	r2, #8
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4413      	add	r3, r2
 800bcea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f003 0307 	and.w	r3, r3, #7
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d014      	beq.n	800bd20 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f023 0307 	bic.w	r3, r3, #7
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00a      	beq.n	800bd20 <pvPortMalloc+0x6c>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	617b      	str	r3, [r7, #20]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d06e      	beq.n	800be04 <pvPortMalloc+0x150>
 800bd26:	4b47      	ldr	r3, [pc, #284]	; (800be44 <pvPortMalloc+0x190>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d869      	bhi.n	800be04 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd30:	4b45      	ldr	r3, [pc, #276]	; (800be48 <pvPortMalloc+0x194>)
 800bd32:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd34:	4b44      	ldr	r3, [pc, #272]	; (800be48 <pvPortMalloc+0x194>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd3a:	e004      	b.n	800bd46 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d903      	bls.n	800bd58 <pvPortMalloc+0xa4>
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1f1      	bne.n	800bd3c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd58:	4b38      	ldr	r3, [pc, #224]	; (800be3c <pvPortMalloc+0x188>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d050      	beq.n	800be04 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd62:	6a3b      	ldr	r3, [r7, #32]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2208      	movs	r2, #8
 800bd68:	4413      	add	r3, r2
 800bd6a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	1ad2      	subs	r2, r2, r3
 800bd7c:	2308      	movs	r3, #8
 800bd7e:	005b      	lsls	r3, r3, #1
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d91f      	bls.n	800bdc4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4413      	add	r3, r2
 800bd8a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	f003 0307 	and.w	r3, r3, #7
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00a      	beq.n	800bdac <pvPortMalloc+0xf8>
	__asm volatile
 800bd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9a:	f383 8811 	msr	BASEPRI, r3
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	613b      	str	r3, [r7, #16]
}
 800bda8:	bf00      	nop
 800bdaa:	e7fe      	b.n	800bdaa <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	1ad2      	subs	r2, r2, r3
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bdbe:	69b8      	ldr	r0, [r7, #24]
 800bdc0:	f000 f90c 	bl	800bfdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bdc4:	4b1f      	ldr	r3, [pc, #124]	; (800be44 <pvPortMalloc+0x190>)
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	4a1d      	ldr	r2, [pc, #116]	; (800be44 <pvPortMalloc+0x190>)
 800bdd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bdd2:	4b1c      	ldr	r3, [pc, #112]	; (800be44 <pvPortMalloc+0x190>)
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	4b1d      	ldr	r3, [pc, #116]	; (800be4c <pvPortMalloc+0x198>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d203      	bcs.n	800bde6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bdde:	4b19      	ldr	r3, [pc, #100]	; (800be44 <pvPortMalloc+0x190>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a1a      	ldr	r2, [pc, #104]	; (800be4c <pvPortMalloc+0x198>)
 800bde4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	4b15      	ldr	r3, [pc, #84]	; (800be40 <pvPortMalloc+0x18c>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	431a      	orrs	r2, r3
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bdfa:	4b15      	ldr	r3, [pc, #84]	; (800be50 <pvPortMalloc+0x19c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	3301      	adds	r3, #1
 800be00:	4a13      	ldr	r2, [pc, #76]	; (800be50 <pvPortMalloc+0x19c>)
 800be02:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be04:	f001 ff92 	bl	800dd2c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800be0e:	f7f4 fc60 	bl	80006d2 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	f003 0307 	and.w	r3, r3, #7
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00a      	beq.n	800be32 <pvPortMalloc+0x17e>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	60fb      	str	r3, [r7, #12]
}
 800be2e:	bf00      	nop
 800be30:	e7fe      	b.n	800be30 <pvPortMalloc+0x17c>
	return pvReturn;
 800be32:	69fb      	ldr	r3, [r7, #28]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3728      	adds	r7, #40	; 0x28
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	24009468 	.word	0x24009468
 800be40:	2400947c 	.word	0x2400947c
 800be44:	2400946c 	.word	0x2400946c
 800be48:	24009460 	.word	0x24009460
 800be4c:	24009470 	.word	0x24009470
 800be50:	24009474 	.word	0x24009474

0800be54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d04d      	beq.n	800bf02 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be66:	2308      	movs	r3, #8
 800be68:	425b      	negs	r3, r3
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	4413      	add	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	4b24      	ldr	r3, [pc, #144]	; (800bf0c <vPortFree+0xb8>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4013      	ands	r3, r2
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <vPortFree+0x44>
	__asm volatile
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	60fb      	str	r3, [r7, #12]
}
 800be94:	bf00      	nop
 800be96:	e7fe      	b.n	800be96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <vPortFree+0x62>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	60bb      	str	r3, [r7, #8]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	4b14      	ldr	r3, [pc, #80]	; (800bf0c <vPortFree+0xb8>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4013      	ands	r3, r2
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d01e      	beq.n	800bf02 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d11a      	bne.n	800bf02 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	685a      	ldr	r2, [r3, #4]
 800bed0:	4b0e      	ldr	r3, [pc, #56]	; (800bf0c <vPortFree+0xb8>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	43db      	mvns	r3, r3
 800bed6:	401a      	ands	r2, r3
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bedc:	f001 ff18 	bl	800dd10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <vPortFree+0xbc>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4413      	add	r3, r2
 800beea:	4a09      	ldr	r2, [pc, #36]	; (800bf10 <vPortFree+0xbc>)
 800beec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800beee:	6938      	ldr	r0, [r7, #16]
 800bef0:	f000 f874 	bl	800bfdc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bef4:	4b07      	ldr	r3, [pc, #28]	; (800bf14 <vPortFree+0xc0>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	4a06      	ldr	r2, [pc, #24]	; (800bf14 <vPortFree+0xc0>)
 800befc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800befe:	f001 ff15 	bl	800dd2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf02:	bf00      	nop
 800bf04:	3718      	adds	r7, #24
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	2400947c 	.word	0x2400947c
 800bf10:	2400946c 	.word	0x2400946c
 800bf14:	24009478 	.word	0x24009478

0800bf18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bf22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf24:	4b27      	ldr	r3, [pc, #156]	; (800bfc4 <prvHeapInit+0xac>)
 800bf26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f003 0307 	and.w	r3, r3, #7
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00c      	beq.n	800bf4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	3307      	adds	r3, #7
 800bf36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f023 0307 	bic.w	r3, r3, #7
 800bf3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	4a1f      	ldr	r2, [pc, #124]	; (800bfc4 <prvHeapInit+0xac>)
 800bf48:	4413      	add	r3, r2
 800bf4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf50:	4a1d      	ldr	r2, [pc, #116]	; (800bfc8 <prvHeapInit+0xb0>)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf56:	4b1c      	ldr	r3, [pc, #112]	; (800bfc8 <prvHeapInit+0xb0>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	4413      	add	r3, r2
 800bf62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf64:	2208      	movs	r2, #8
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	1a9b      	subs	r3, r3, r2
 800bf6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f023 0307 	bic.w	r3, r3, #7
 800bf72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4a15      	ldr	r2, [pc, #84]	; (800bfcc <prvHeapInit+0xb4>)
 800bf78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf7a:	4b14      	ldr	r3, [pc, #80]	; (800bfcc <prvHeapInit+0xb4>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf82:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <prvHeapInit+0xb4>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2200      	movs	r2, #0
 800bf88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	1ad2      	subs	r2, r2, r3
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf98:	4b0c      	ldr	r3, [pc, #48]	; (800bfcc <prvHeapInit+0xb4>)
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	4a0a      	ldr	r2, [pc, #40]	; (800bfd0 <prvHeapInit+0xb8>)
 800bfa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	4a09      	ldr	r2, [pc, #36]	; (800bfd4 <prvHeapInit+0xbc>)
 800bfae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bfb0:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <prvHeapInit+0xc0>)
 800bfb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bfb6:	601a      	str	r2, [r3, #0]
}
 800bfb8:	bf00      	nop
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr
 800bfc4:	24005860 	.word	0x24005860
 800bfc8:	24009460 	.word	0x24009460
 800bfcc:	24009468 	.word	0x24009468
 800bfd0:	24009470 	.word	0x24009470
 800bfd4:	2400946c 	.word	0x2400946c
 800bfd8:	2400947c 	.word	0x2400947c

0800bfdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bfe4:	4b28      	ldr	r3, [pc, #160]	; (800c088 <prvInsertBlockIntoFreeList+0xac>)
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	e002      	b.n	800bff0 <prvInsertBlockIntoFreeList+0x14>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d8f7      	bhi.n	800bfea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	4413      	add	r3, r2
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d108      	bne.n	800c01e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	441a      	add	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	441a      	add	r2, r3
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d118      	bne.n	800c064 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	4b15      	ldr	r3, [pc, #84]	; (800c08c <prvInsertBlockIntoFreeList+0xb0>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d00d      	beq.n	800c05a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	441a      	add	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	e008      	b.n	800c06c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c05a:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <prvInsertBlockIntoFreeList+0xb0>)
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	e003      	b.n	800c06c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	429a      	cmp	r2, r3
 800c072:	d002      	beq.n	800c07a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c07a:	bf00      	nop
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	24009460 	.word	0x24009460
 800c08c:	24009468 	.word	0x24009468

0800c090 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f103 0208 	add.w	r2, r3, #8
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f103 0208 	add.w	r2, r3, #8
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f103 0208 	add.w	r2, r3, #8
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c0c4:	bf00      	nop
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c0de:	bf00      	nop
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0ea:	b480      	push	{r7}
 800c0ec:	b085      	sub	sp, #20
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	689a      	ldr	r2, [r3, #8]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	683a      	ldr	r2, [r7, #0]
 800c114:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	601a      	str	r2, [r3, #0]
}
 800c126:	bf00      	nop
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c132:	b480      	push	{r7}
 800c134:	b085      	sub	sp, #20
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c148:	d103      	bne.n	800c152 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	e00c      	b.n	800c16c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	3308      	adds	r3, #8
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	e002      	b.n	800c160 <vListInsert+0x2e>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d2f6      	bcs.n	800c15a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	685a      	ldr	r2, [r3, #4]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	683a      	ldr	r2, [r7, #0]
 800c17a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	601a      	str	r2, [r3, #0]
}
 800c198:	bf00      	nop
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	6892      	ldr	r2, [r2, #8]
 800c1ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	6852      	ldr	r2, [r2, #4]
 800c1c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d103      	bne.n	800c1d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	1e5a      	subs	r2, r3, #1
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	3b04      	subs	r3, #4
 800c208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3b04      	subs	r3, #4
 800c216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	f023 0201 	bic.w	r2, r3, #1
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3b04      	subs	r3, #4
 800c226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c228:	4a0c      	ldr	r2, [pc, #48]	; (800c25c <pxPortInitialiseStack+0x64>)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3b14      	subs	r3, #20
 800c232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3b04      	subs	r3, #4
 800c23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f06f 0202 	mvn.w	r2, #2
 800c246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	3b20      	subs	r3, #32
 800c24c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c24e:	68fb      	ldr	r3, [r7, #12]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	0800c261 	.word	0x0800c261

0800c260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c26a:	4b12      	ldr	r3, [pc, #72]	; (800c2b4 <prvTaskExitError+0x54>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c272:	d00a      	beq.n	800c28a <prvTaskExitError+0x2a>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	60fb      	str	r3, [r7, #12]
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <prvTaskExitError+0x28>
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	60bb      	str	r3, [r7, #8]
}
 800c29c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c29e:	bf00      	nop
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d0fc      	beq.n	800c2a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2a6:	bf00      	nop
 800c2a8:	bf00      	nop
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr
 800c2b4:	2400002c 	.word	0x2400002c
	...

0800c2c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2c0:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <pxCurrentTCBConst2>)
 800c2c2:	6819      	ldr	r1, [r3, #0]
 800c2c4:	6808      	ldr	r0, [r1, #0]
 800c2c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ca:	f380 8809 	msr	PSP, r0
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f04f 0000 	mov.w	r0, #0
 800c2d6:	f380 8811 	msr	BASEPRI, r0
 800c2da:	4770      	bx	lr
 800c2dc:	f3af 8000 	nop.w

0800c2e0 <pxCurrentTCBConst2>:
 800c2e0:	240094c8 	.word	0x240094c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop

0800c2e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2e8:	4808      	ldr	r0, [pc, #32]	; (800c30c <prvPortStartFirstTask+0x24>)
 800c2ea:	6800      	ldr	r0, [r0, #0]
 800c2ec:	6800      	ldr	r0, [r0, #0]
 800c2ee:	f380 8808 	msr	MSP, r0
 800c2f2:	f04f 0000 	mov.w	r0, #0
 800c2f6:	f380 8814 	msr	CONTROL, r0
 800c2fa:	b662      	cpsie	i
 800c2fc:	b661      	cpsie	f
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	df00      	svc	0
 800c308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c30a:	bf00      	nop
 800c30c:	e000ed08 	.word	0xe000ed08

0800c310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c316:	4b46      	ldr	r3, [pc, #280]	; (800c430 <xPortStartScheduler+0x120>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a46      	ldr	r2, [pc, #280]	; (800c434 <xPortStartScheduler+0x124>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d10a      	bne.n	800c336 <xPortStartScheduler+0x26>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	613b      	str	r3, [r7, #16]
}
 800c332:	bf00      	nop
 800c334:	e7fe      	b.n	800c334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c336:	4b3e      	ldr	r3, [pc, #248]	; (800c430 <xPortStartScheduler+0x120>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a3f      	ldr	r2, [pc, #252]	; (800c438 <xPortStartScheduler+0x128>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d10a      	bne.n	800c356 <xPortStartScheduler+0x46>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	60fb      	str	r3, [r7, #12]
}
 800c352:	bf00      	nop
 800c354:	e7fe      	b.n	800c354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c356:	4b39      	ldr	r3, [pc, #228]	; (800c43c <xPortStartScheduler+0x12c>)
 800c358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	22ff      	movs	r2, #255	; 0xff
 800c366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	b2db      	uxtb	r3, r3
 800c374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c378:	b2da      	uxtb	r2, r3
 800c37a:	4b31      	ldr	r3, [pc, #196]	; (800c440 <xPortStartScheduler+0x130>)
 800c37c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c37e:	4b31      	ldr	r3, [pc, #196]	; (800c444 <xPortStartScheduler+0x134>)
 800c380:	2207      	movs	r2, #7
 800c382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c384:	e009      	b.n	800c39a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c386:	4b2f      	ldr	r3, [pc, #188]	; (800c444 <xPortStartScheduler+0x134>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	4a2d      	ldr	r2, [pc, #180]	; (800c444 <xPortStartScheduler+0x134>)
 800c38e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c390:	78fb      	ldrb	r3, [r7, #3]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	b2db      	uxtb	r3, r3
 800c398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c39a:	78fb      	ldrb	r3, [r7, #3]
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3a2:	2b80      	cmp	r3, #128	; 0x80
 800c3a4:	d0ef      	beq.n	800c386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c3a6:	4b27      	ldr	r3, [pc, #156]	; (800c444 <xPortStartScheduler+0x134>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f1c3 0307 	rsb	r3, r3, #7
 800c3ae:	2b04      	cmp	r3, #4
 800c3b0:	d00a      	beq.n	800c3c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b6:	f383 8811 	msr	BASEPRI, r3
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	60bb      	str	r3, [r7, #8]
}
 800c3c4:	bf00      	nop
 800c3c6:	e7fe      	b.n	800c3c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3c8:	4b1e      	ldr	r3, [pc, #120]	; (800c444 <xPortStartScheduler+0x134>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	021b      	lsls	r3, r3, #8
 800c3ce:	4a1d      	ldr	r2, [pc, #116]	; (800c444 <xPortStartScheduler+0x134>)
 800c3d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3d2:	4b1c      	ldr	r3, [pc, #112]	; (800c444 <xPortStartScheduler+0x134>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3da:	4a1a      	ldr	r2, [pc, #104]	; (800c444 <xPortStartScheduler+0x134>)
 800c3dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3e6:	4b18      	ldr	r3, [pc, #96]	; (800c448 <xPortStartScheduler+0x138>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a17      	ldr	r2, [pc, #92]	; (800c448 <xPortStartScheduler+0x138>)
 800c3ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3f2:	4b15      	ldr	r3, [pc, #84]	; (800c448 <xPortStartScheduler+0x138>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a14      	ldr	r2, [pc, #80]	; (800c448 <xPortStartScheduler+0x138>)
 800c3f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3fe:	f000 f8dd 	bl	800c5bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c402:	4b12      	ldr	r3, [pc, #72]	; (800c44c <xPortStartScheduler+0x13c>)
 800c404:	2200      	movs	r2, #0
 800c406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c408:	f000 f8fc 	bl	800c604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c40c:	4b10      	ldr	r3, [pc, #64]	; (800c450 <xPortStartScheduler+0x140>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a0f      	ldr	r2, [pc, #60]	; (800c450 <xPortStartScheduler+0x140>)
 800c412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c418:	f7ff ff66 	bl	800c2e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c41c:	f001 fe08 	bl	800e030 <vTaskSwitchContext>
	prvTaskExitError();
 800c420:	f7ff ff1e 	bl	800c260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	e000ed00 	.word	0xe000ed00
 800c434:	410fc271 	.word	0x410fc271
 800c438:	410fc270 	.word	0x410fc270
 800c43c:	e000e400 	.word	0xe000e400
 800c440:	24009480 	.word	0x24009480
 800c444:	24009484 	.word	0x24009484
 800c448:	e000ed20 	.word	0xe000ed20
 800c44c:	2400002c 	.word	0x2400002c
 800c450:	e000ef34 	.word	0xe000ef34

0800c454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	607b      	str	r3, [r7, #4]
}
 800c46c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c46e:	4b0f      	ldr	r3, [pc, #60]	; (800c4ac <vPortEnterCritical+0x58>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3301      	adds	r3, #1
 800c474:	4a0d      	ldr	r2, [pc, #52]	; (800c4ac <vPortEnterCritical+0x58>)
 800c476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c478:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <vPortEnterCritical+0x58>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d10f      	bne.n	800c4a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c480:	4b0b      	ldr	r3, [pc, #44]	; (800c4b0 <vPortEnterCritical+0x5c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00a      	beq.n	800c4a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	603b      	str	r3, [r7, #0]
}
 800c49c:	bf00      	nop
 800c49e:	e7fe      	b.n	800c49e <vPortEnterCritical+0x4a>
	}
}
 800c4a0:	bf00      	nop
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	2400002c 	.word	0x2400002c
 800c4b0:	e000ed04 	.word	0xe000ed04

0800c4b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4ba:	4b12      	ldr	r3, [pc, #72]	; (800c504 <vPortExitCritical+0x50>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d10a      	bne.n	800c4d8 <vPortExitCritical+0x24>
	__asm volatile
 800c4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	607b      	str	r3, [r7, #4]
}
 800c4d4:	bf00      	nop
 800c4d6:	e7fe      	b.n	800c4d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c4d8:	4b0a      	ldr	r3, [pc, #40]	; (800c504 <vPortExitCritical+0x50>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	4a09      	ldr	r2, [pc, #36]	; (800c504 <vPortExitCritical+0x50>)
 800c4e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4e2:	4b08      	ldr	r3, [pc, #32]	; (800c504 <vPortExitCritical+0x50>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d105      	bne.n	800c4f6 <vPortExitCritical+0x42>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	f383 8811 	msr	BASEPRI, r3
}
 800c4f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4f6:	bf00      	nop
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	2400002c 	.word	0x2400002c
	...

0800c510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c510:	f3ef 8009 	mrs	r0, PSP
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	4b15      	ldr	r3, [pc, #84]	; (800c570 <pxCurrentTCBConst>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	f01e 0f10 	tst.w	lr, #16
 800c520:	bf08      	it	eq
 800c522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52a:	6010      	str	r0, [r2, #0]
 800c52c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c530:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c534:	f380 8811 	msr	BASEPRI, r0
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f001 fd76 	bl	800e030 <vTaskSwitchContext>
 800c544:	f04f 0000 	mov.w	r0, #0
 800c548:	f380 8811 	msr	BASEPRI, r0
 800c54c:	bc09      	pop	{r0, r3}
 800c54e:	6819      	ldr	r1, [r3, #0]
 800c550:	6808      	ldr	r0, [r1, #0]
 800c552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c556:	f01e 0f10 	tst.w	lr, #16
 800c55a:	bf08      	it	eq
 800c55c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c560:	f380 8809 	msr	PSP, r0
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	f3af 8000 	nop.w

0800c570 <pxCurrentTCBConst>:
 800c570:	240094c8 	.word	0x240094c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop

0800c578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	607b      	str	r3, [r7, #4]
}
 800c590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c592:	f001 fc8b 	bl	800deac <xTaskIncrementTick>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c59c:	4b06      	ldr	r3, [pc, #24]	; (800c5b8 <xPortSysTickHandler+0x40>)
 800c59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5a2:	601a      	str	r2, [r3, #0]
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	f383 8811 	msr	BASEPRI, r3
}
 800c5ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5b0:	bf00      	nop
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	e000ed04 	.word	0xe000ed04

0800c5bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5bc:	b480      	push	{r7}
 800c5be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5c0:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <vPortSetupTimerInterrupt+0x34>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5c6:	4b0b      	ldr	r3, [pc, #44]	; (800c5f4 <vPortSetupTimerInterrupt+0x38>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5cc:	4b0a      	ldr	r3, [pc, #40]	; (800c5f8 <vPortSetupTimerInterrupt+0x3c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a0a      	ldr	r2, [pc, #40]	; (800c5fc <vPortSetupTimerInterrupt+0x40>)
 800c5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d6:	099b      	lsrs	r3, r3, #6
 800c5d8:	4a09      	ldr	r2, [pc, #36]	; (800c600 <vPortSetupTimerInterrupt+0x44>)
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5de:	4b04      	ldr	r3, [pc, #16]	; (800c5f0 <vPortSetupTimerInterrupt+0x34>)
 800c5e0:	2207      	movs	r2, #7
 800c5e2:	601a      	str	r2, [r3, #0]
}
 800c5e4:	bf00      	nop
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	e000e010 	.word	0xe000e010
 800c5f4:	e000e018 	.word	0xe000e018
 800c5f8:	2400001c 	.word	0x2400001c
 800c5fc:	10624dd3 	.word	0x10624dd3
 800c600:	e000e014 	.word	0xe000e014

0800c604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c614 <vPortEnableVFP+0x10>
 800c608:	6801      	ldr	r1, [r0, #0]
 800c60a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c60e:	6001      	str	r1, [r0, #0]
 800c610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c612:	bf00      	nop
 800c614:	e000ed88 	.word	0xe000ed88

0800c618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c61e:	f3ef 8305 	mrs	r3, IPSR
 800c622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2b0f      	cmp	r3, #15
 800c628:	d914      	bls.n	800c654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c62a:	4a17      	ldr	r2, [pc, #92]	; (800c688 <vPortValidateInterruptPriority+0x70>)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4413      	add	r3, r2
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c634:	4b15      	ldr	r3, [pc, #84]	; (800c68c <vPortValidateInterruptPriority+0x74>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	7afa      	ldrb	r2, [r7, #11]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d20a      	bcs.n	800c654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	607b      	str	r3, [r7, #4]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c654:	4b0e      	ldr	r3, [pc, #56]	; (800c690 <vPortValidateInterruptPriority+0x78>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c65c:	4b0d      	ldr	r3, [pc, #52]	; (800c694 <vPortValidateInterruptPriority+0x7c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	429a      	cmp	r2, r3
 800c662:	d90a      	bls.n	800c67a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	603b      	str	r3, [r7, #0]
}
 800c676:	bf00      	nop
 800c678:	e7fe      	b.n	800c678 <vPortValidateInterruptPriority+0x60>
	}
 800c67a:	bf00      	nop
 800c67c:	3714      	adds	r7, #20
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	e000e3f0 	.word	0xe000e3f0
 800c68c:	24009480 	.word	0x24009480
 800c690:	e000ed0c 	.word	0xe000ed0c
 800c694:	24009484 	.word	0x24009484

0800c698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10a      	bne.n	800c6c2 <xQueueGenericReset+0x2a>
	__asm volatile
 800c6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	60bb      	str	r3, [r7, #8]
}
 800c6be:	bf00      	nop
 800c6c0:	e7fe      	b.n	800c6c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c6c2:	f7ff fec7 	bl	800c454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ce:	68f9      	ldr	r1, [r7, #12]
 800c6d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6d2:	fb01 f303 	mul.w	r3, r1, r3
 800c6d6:	441a      	add	r2, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	68f9      	ldr	r1, [r7, #12]
 800c6f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6f8:	fb01 f303 	mul.w	r3, r1, r3
 800c6fc:	441a      	add	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	22ff      	movs	r2, #255	; 0xff
 800c706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	22ff      	movs	r2, #255	; 0xff
 800c70e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d114      	bne.n	800c742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d01a      	beq.n	800c756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	3310      	adds	r3, #16
 800c724:	4618      	mov	r0, r3
 800c726:	f001 fd3f 	bl	800e1a8 <xTaskRemoveFromEventList>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d012      	beq.n	800c756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c730:	4b0c      	ldr	r3, [pc, #48]	; (800c764 <xQueueGenericReset+0xcc>)
 800c732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	e009      	b.n	800c756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	3310      	adds	r3, #16
 800c746:	4618      	mov	r0, r3
 800c748:	f7ff fca2 	bl	800c090 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3324      	adds	r3, #36	; 0x24
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff fc9d 	bl	800c090 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c756:	f7ff fead 	bl	800c4b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c75a:	2301      	movs	r3, #1
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	e000ed04 	.word	0xe000ed04

0800c768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08e      	sub	sp, #56	; 0x38
 800c76c:	af02      	add	r7, sp, #8
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10a      	bne.n	800c792 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <xQueueGenericCreateStatic+0x52>
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <xQueueGenericCreateStatic+0x56>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e000      	b.n	800c7c0 <xQueueGenericCreateStatic+0x58>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10a      	bne.n	800c7da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	623b      	str	r3, [r7, #32]
}
 800c7d6:	bf00      	nop
 800c7d8:	e7fe      	b.n	800c7d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d102      	bne.n	800c7e6 <xQueueGenericCreateStatic+0x7e>
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d101      	bne.n	800c7ea <xQueueGenericCreateStatic+0x82>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e000      	b.n	800c7ec <xQueueGenericCreateStatic+0x84>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	61fb      	str	r3, [r7, #28]
}
 800c802:	bf00      	nop
 800c804:	e7fe      	b.n	800c804 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c806:	2350      	movs	r3, #80	; 0x50
 800c808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2b50      	cmp	r3, #80	; 0x50
 800c80e:	d00a      	beq.n	800c826 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	61bb      	str	r3, [r7, #24]
}
 800c822:	bf00      	nop
 800c824:	e7fe      	b.n	800c824 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c826:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00d      	beq.n	800c84e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	2201      	movs	r2, #1
 800c836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c83a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	4613      	mov	r3, r2
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	68b9      	ldr	r1, [r7, #8]
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f000 f83f 	bl	800c8cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c850:	4618      	mov	r0, r3
 800c852:	3730      	adds	r7, #48	; 0x30
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af02      	add	r7, sp, #8
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10a      	bne.n	800c882 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	613b      	str	r3, [r7, #16]
}
 800c87e:	bf00      	nop
 800c880:	e7fe      	b.n	800c880 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	fb02 f303 	mul.w	r3, r2, r3
 800c88a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	3350      	adds	r3, #80	; 0x50
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff fa0f 	bl	800bcb4 <pvPortMalloc>
 800c896:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d011      	beq.n	800c8c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	3350      	adds	r3, #80	; 0x50
 800c8a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8b0:	79fa      	ldrb	r2, [r7, #7]
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	68b9      	ldr	r1, [r7, #8]
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 f805 	bl	800c8cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8c2:	69bb      	ldr	r3, [r7, #24]
	}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3720      	adds	r7, #32
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d103      	bne.n	800c8e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	69ba      	ldr	r2, [r7, #24]
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	e002      	b.n	800c8ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	69b8      	ldr	r0, [r7, #24]
 800c8fe:	f7ff fecb 	bl	800c698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	78fa      	ldrb	r2, [r7, #3]
 800c906:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c90a:	bf00      	nop
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c912:	b580      	push	{r7, lr}
 800c914:	b082      	sub	sp, #8
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00e      	beq.n	800c93e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c932:	2300      	movs	r3, #0
 800c934:	2200      	movs	r2, #0
 800c936:	2100      	movs	r1, #0
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f90b 	bl	800cb54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c946:	b580      	push	{r7, lr}
 800c948:	b086      	sub	sp, #24
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	4603      	mov	r3, r0
 800c94e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c950:	2301      	movs	r3, #1
 800c952:	617b      	str	r3, [r7, #20]
 800c954:	2300      	movs	r3, #0
 800c956:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c958:	79fb      	ldrb	r3, [r7, #7]
 800c95a:	461a      	mov	r2, r3
 800c95c:	6939      	ldr	r1, [r7, #16]
 800c95e:	6978      	ldr	r0, [r7, #20]
 800c960:	f7ff ff7a 	bl	800c858 <xQueueGenericCreate>
 800c964:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f7ff ffd3 	bl	800c912 <prvInitialiseMutex>

		return xNewQueue;
 800c96c:	68fb      	ldr	r3, [r7, #12]
	}
 800c96e:	4618      	mov	r0, r3
 800c970:	3718      	adds	r7, #24
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c976:	b580      	push	{r7, lr}
 800c978:	b088      	sub	sp, #32
 800c97a:	af02      	add	r7, sp, #8
 800c97c:	4603      	mov	r3, r0
 800c97e:	6039      	str	r1, [r7, #0]
 800c980:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c982:	2301      	movs	r3, #1
 800c984:	617b      	str	r3, [r7, #20]
 800c986:	2300      	movs	r3, #0
 800c988:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c98a:	79fb      	ldrb	r3, [r7, #7]
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2200      	movs	r2, #0
 800c992:	6939      	ldr	r1, [r7, #16]
 800c994:	6978      	ldr	r0, [r7, #20]
 800c996:	f7ff fee7 	bl	800c768 <xQueueGenericCreateStatic>
 800c99a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f7ff ffb8 	bl	800c912 <prvInitialiseMutex>

		return xNewQueue;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
	}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3718      	adds	r7, #24
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c9ac:	b590      	push	{r4, r7, lr}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10a      	bne.n	800c9d4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	60fb      	str	r3, [r7, #12]
}
 800c9d0:	bf00      	nop
 800c9d2:	e7fe      	b.n	800c9d2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	689c      	ldr	r4, [r3, #8]
 800c9d8:	f001 fda6 	bl	800e528 <xTaskGetCurrentTaskHandle>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	429c      	cmp	r4, r3
 800c9e0:	d111      	bne.n	800ca06 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	1e5a      	subs	r2, r3, #1
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d105      	bne.n	800ca00 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	6938      	ldr	r0, [r7, #16]
 800c9fc:	f000 f8aa 	bl	800cb54 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ca00:	2301      	movs	r3, #1
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	e001      	b.n	800ca0a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ca0a:	697b      	ldr	r3, [r7, #20]
	}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	371c      	adds	r7, #28
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd90      	pop	{r4, r7, pc}

0800ca14 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ca14:	b590      	push	{r4, r7, lr}
 800ca16:	b087      	sub	sp, #28
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	60fb      	str	r3, [r7, #12]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	689c      	ldr	r4, [r3, #8]
 800ca42:	f001 fd71 	bl	800e528 <xTaskGetCurrentTaskHandle>
 800ca46:	4603      	mov	r3, r0
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	d107      	bne.n	800ca5c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	1c5a      	adds	r2, r3, #1
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ca56:	2301      	movs	r3, #1
 800ca58:	617b      	str	r3, [r7, #20]
 800ca5a:	e00c      	b.n	800ca76 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ca5c:	6839      	ldr	r1, [r7, #0]
 800ca5e:	6938      	ldr	r0, [r7, #16]
 800ca60:	f000 fb7e 	bl	800d160 <xQueueSemaphoreTake>
 800ca64:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d004      	beq.n	800ca76 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ca76:	697b      	ldr	r3, [r7, #20]
	}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	371c      	adds	r7, #28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd90      	pop	{r4, r7, pc}

0800ca80 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08a      	sub	sp, #40	; 0x28
 800ca84:	af02      	add	r7, sp, #8
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10a      	bne.n	800caa8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ca92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	61bb      	str	r3, [r7, #24]
}
 800caa4:	bf00      	nop
 800caa6:	e7fe      	b.n	800caa6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	429a      	cmp	r2, r3
 800caae:	d90a      	bls.n	800cac6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	617b      	str	r3, [r7, #20]
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cac6:	2302      	movs	r3, #2
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	2100      	movs	r1, #0
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f7ff fe49 	bl	800c768 <xQueueGenericCreateStatic>
 800cad6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cae4:	69fb      	ldr	r3, [r7, #28]
	}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3720      	adds	r7, #32
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b086      	sub	sp, #24
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10a      	bne.n	800cb14 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	613b      	str	r3, [r7, #16]
}
 800cb10:	bf00      	nop
 800cb12:	e7fe      	b.n	800cb12 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d90a      	bls.n	800cb32 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	60fb      	str	r3, [r7, #12]
}
 800cb2e:	bf00      	nop
 800cb30:	e7fe      	b.n	800cb30 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb32:	2202      	movs	r2, #2
 800cb34:	2100      	movs	r1, #0
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff fe8e 	bl	800c858 <xQueueGenericCreate>
 800cb3c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cb4a:	697b      	ldr	r3, [r7, #20]
	}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08e      	sub	sp, #56	; 0x38
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
 800cb60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb62:	2300      	movs	r3, #0
 800cb64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d10a      	bne.n	800cb86 <xQueueGenericSend+0x32>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb82:	bf00      	nop
 800cb84:	e7fe      	b.n	800cb84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <xQueueGenericSend+0x40>
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d101      	bne.n	800cb98 <xQueueGenericSend+0x44>
 800cb94:	2301      	movs	r3, #1
 800cb96:	e000      	b.n	800cb9a <xQueueGenericSend+0x46>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d10a      	bne.n	800cbb4 <xQueueGenericSend+0x60>
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbb0:	bf00      	nop
 800cbb2:	e7fe      	b.n	800cbb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d103      	bne.n	800cbc2 <xQueueGenericSend+0x6e>
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d101      	bne.n	800cbc6 <xQueueGenericSend+0x72>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e000      	b.n	800cbc8 <xQueueGenericSend+0x74>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10a      	bne.n	800cbe2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	623b      	str	r3, [r7, #32]
}
 800cbde:	bf00      	nop
 800cbe0:	e7fe      	b.n	800cbe0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbe2:	f001 fcb1 	bl	800e548 <xTaskGetSchedulerState>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d102      	bne.n	800cbf2 <xQueueGenericSend+0x9e>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <xQueueGenericSend+0xa2>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e000      	b.n	800cbf8 <xQueueGenericSend+0xa4>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10a      	bne.n	800cc12 <xQueueGenericSend+0xbe>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	61fb      	str	r3, [r7, #28]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc12:	f7ff fc1f 	bl	800c454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d302      	bcc.n	800cc28 <xQueueGenericSend+0xd4>
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d129      	bne.n	800cc7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc2e:	f000 fc9a 	bl	800d566 <prvCopyDataToQueue>
 800cc32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d010      	beq.n	800cc5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	3324      	adds	r3, #36	; 0x24
 800cc40:	4618      	mov	r0, r3
 800cc42:	f001 fab1 	bl	800e1a8 <xTaskRemoveFromEventList>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d013      	beq.n	800cc74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc4c:	4b3f      	ldr	r3, [pc, #252]	; (800cd4c <xQueueGenericSend+0x1f8>)
 800cc4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	e00a      	b.n	800cc74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d007      	beq.n	800cc74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc64:	4b39      	ldr	r3, [pc, #228]	; (800cd4c <xQueueGenericSend+0x1f8>)
 800cc66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc6a:	601a      	str	r2, [r3, #0]
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc74:	f7ff fc1e 	bl	800c4b4 <vPortExitCritical>
				return pdPASS;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e063      	b.n	800cd44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d103      	bne.n	800cc8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc82:	f7ff fc17 	bl	800c4b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e05c      	b.n	800cd44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d106      	bne.n	800cc9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc90:	f107 0314 	add.w	r3, r7, #20
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 faeb 	bl	800e270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc9e:	f7ff fc09 	bl	800c4b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cca2:	f001 f835 	bl	800dd10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cca6:	f7ff fbd5 	bl	800c454 <vPortEnterCritical>
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccb0:	b25b      	sxtb	r3, r3
 800ccb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb6:	d103      	bne.n	800ccc0 <xQueueGenericSend+0x16c>
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccc6:	b25b      	sxtb	r3, r3
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cccc:	d103      	bne.n	800ccd6 <xQueueGenericSend+0x182>
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccd6:	f7ff fbed 	bl	800c4b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccda:	1d3a      	adds	r2, r7, #4
 800ccdc:	f107 0314 	add.w	r3, r7, #20
 800cce0:	4611      	mov	r1, r2
 800cce2:	4618      	mov	r0, r3
 800cce4:	f001 fada 	bl	800e29c <xTaskCheckForTimeOut>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d124      	bne.n	800cd38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccf0:	f000 fd31 	bl	800d756 <prvIsQueueFull>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d018      	beq.n	800cd2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfc:	3310      	adds	r3, #16
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	4611      	mov	r1, r2
 800cd02:	4618      	mov	r0, r3
 800cd04:	f001 fa00 	bl	800e108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd0a:	f000 fcbc 	bl	800d686 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd0e:	f001 f80d 	bl	800dd2c <xTaskResumeAll>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f47f af7c 	bne.w	800cc12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cd1a:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <xQueueGenericSend+0x1f8>)
 800cd1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd20:	601a      	str	r2, [r3, #0]
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	e772      	b.n	800cc12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd2e:	f000 fcaa 	bl	800d686 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd32:	f000 fffb 	bl	800dd2c <xTaskResumeAll>
 800cd36:	e76c      	b.n	800cc12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd3a:	f000 fca4 	bl	800d686 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd3e:	f000 fff5 	bl	800dd2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3738      	adds	r7, #56	; 0x38
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	e000ed04 	.word	0xe000ed04

0800cd50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b090      	sub	sp, #64	; 0x40
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d103      	bne.n	800cd8c <xQueueGenericSendFromISR+0x3c>
 800cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d101      	bne.n	800cd90 <xQueueGenericSendFromISR+0x40>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e000      	b.n	800cd92 <xQueueGenericSendFromISR+0x42>
 800cd90:	2300      	movs	r3, #0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10a      	bne.n	800cdac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cda8:	bf00      	nop
 800cdaa:	e7fe      	b.n	800cdaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d103      	bne.n	800cdba <xQueueGenericSendFromISR+0x6a>
 800cdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d101      	bne.n	800cdbe <xQueueGenericSendFromISR+0x6e>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e000      	b.n	800cdc0 <xQueueGenericSendFromISR+0x70>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	623b      	str	r3, [r7, #32]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdda:	f7ff fc1d 	bl	800c618 <vPortValidateInterruptPriority>
	__asm volatile
 800cdde:	f3ef 8211 	mrs	r2, BASEPRI
 800cde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	61fa      	str	r2, [r7, #28]
 800cdf4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cdf6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdf8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d302      	bcc.n	800ce0c <xQueueGenericSendFromISR+0xbc>
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d12f      	bne.n	800ce6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	68b9      	ldr	r1, [r7, #8]
 800ce20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce22:	f000 fba0 	bl	800d566 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ce2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2e:	d112      	bne.n	800ce56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d016      	beq.n	800ce66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3a:	3324      	adds	r3, #36	; 0x24
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f001 f9b3 	bl	800e1a8 <xTaskRemoveFromEventList>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00e      	beq.n	800ce66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00b      	beq.n	800ce66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	e007      	b.n	800ce66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	b25a      	sxtb	r2, r3
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce66:	2301      	movs	r3, #1
 800ce68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ce6a:	e001      	b.n	800ce70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce72:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	f383 8811 	msr	BASEPRI, r3
}
 800ce7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3740      	adds	r7, #64	; 0x40
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b08e      	sub	sp, #56	; 0x38
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
 800ce8e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ce94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d10a      	bne.n	800ceb0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ce9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	623b      	str	r3, [r7, #32]
}
 800ceac:	bf00      	nop
 800ceae:	e7fe      	b.n	800ceae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00a      	beq.n	800cece <xQueueGiveFromISR+0x48>
	__asm volatile
 800ceb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	61fb      	str	r3, [r7, #28]
}
 800ceca:	bf00      	nop
 800cecc:	e7fe      	b.n	800cecc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d103      	bne.n	800cede <xQueueGiveFromISR+0x58>
 800ced6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <xQueueGiveFromISR+0x5c>
 800cede:	2301      	movs	r3, #1
 800cee0:	e000      	b.n	800cee4 <xQueueGiveFromISR+0x5e>
 800cee2:	2300      	movs	r3, #0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10a      	bne.n	800cefe <xQueueGiveFromISR+0x78>
	__asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	61bb      	str	r3, [r7, #24]
}
 800cefa:	bf00      	nop
 800cefc:	e7fe      	b.n	800cefc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cefe:	f7ff fb8b 	bl	800c618 <vPortValidateInterruptPriority>
	__asm volatile
 800cf02:	f3ef 8211 	mrs	r2, BASEPRI
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	617a      	str	r2, [r7, #20]
 800cf18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cf1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d22b      	bcs.n	800cf86 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf48:	d112      	bne.n	800cf70 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d016      	beq.n	800cf80 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	3324      	adds	r3, #36	; 0x24
 800cf56:	4618      	mov	r0, r3
 800cf58:	f001 f926 	bl	800e1a8 <xTaskRemoveFromEventList>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00e      	beq.n	800cf80 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00b      	beq.n	800cf80 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	e007      	b.n	800cf80 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf74:	3301      	adds	r3, #1
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	b25a      	sxtb	r2, r3
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf80:	2301      	movs	r3, #1
 800cf82:	637b      	str	r3, [r7, #52]	; 0x34
 800cf84:	e001      	b.n	800cf8a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf86:	2300      	movs	r3, #0
 800cf88:	637b      	str	r3, [r7, #52]	; 0x34
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f383 8811 	msr	BASEPRI, r3
}
 800cf94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3738      	adds	r7, #56	; 0x38
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b08c      	sub	sp, #48	; 0x30
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cfac:	2300      	movs	r3, #0
 800cfae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10a      	bne.n	800cfd0 <xQueueReceive+0x30>
	__asm volatile
 800cfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	623b      	str	r3, [r7, #32]
}
 800cfcc:	bf00      	nop
 800cfce:	e7fe      	b.n	800cfce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d103      	bne.n	800cfde <xQueueReceive+0x3e>
 800cfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d101      	bne.n	800cfe2 <xQueueReceive+0x42>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e000      	b.n	800cfe4 <xQueueReceive+0x44>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10a      	bne.n	800cffe <xQueueReceive+0x5e>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	61fb      	str	r3, [r7, #28]
}
 800cffa:	bf00      	nop
 800cffc:	e7fe      	b.n	800cffc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cffe:	f001 faa3 	bl	800e548 <xTaskGetSchedulerState>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d102      	bne.n	800d00e <xQueueReceive+0x6e>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d101      	bne.n	800d012 <xQueueReceive+0x72>
 800d00e:	2301      	movs	r3, #1
 800d010:	e000      	b.n	800d014 <xQueueReceive+0x74>
 800d012:	2300      	movs	r3, #0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10a      	bne.n	800d02e <xQueueReceive+0x8e>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	61bb      	str	r3, [r7, #24]
}
 800d02a:	bf00      	nop
 800d02c:	e7fe      	b.n	800d02c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d02e:	f7ff fa11 	bl	800c454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d01f      	beq.n	800d07e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d03e:	68b9      	ldr	r1, [r7, #8]
 800d040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d042:	f000 fafa 	bl	800d63a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	1e5a      	subs	r2, r3, #1
 800d04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00f      	beq.n	800d076 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d058:	3310      	adds	r3, #16
 800d05a:	4618      	mov	r0, r3
 800d05c:	f001 f8a4 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d007      	beq.n	800d076 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d066:	4b3d      	ldr	r3, [pc, #244]	; (800d15c <xQueueReceive+0x1bc>)
 800d068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d06c:	601a      	str	r2, [r3, #0]
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d076:	f7ff fa1d 	bl	800c4b4 <vPortExitCritical>
				return pdPASS;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e069      	b.n	800d152 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d103      	bne.n	800d08c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d084:	f7ff fa16 	bl	800c4b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d088:	2300      	movs	r3, #0
 800d08a:	e062      	b.n	800d152 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d106      	bne.n	800d0a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d092:	f107 0310 	add.w	r3, r7, #16
 800d096:	4618      	mov	r0, r3
 800d098:	f001 f8ea 	bl	800e270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d09c:	2301      	movs	r3, #1
 800d09e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0a0:	f7ff fa08 	bl	800c4b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0a4:	f000 fe34 	bl	800dd10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0a8:	f7ff f9d4 	bl	800c454 <vPortEnterCritical>
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0b2:	b25b      	sxtb	r3, r3
 800d0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b8:	d103      	bne.n	800d0c2 <xQueueReceive+0x122>
 800d0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0c8:	b25b      	sxtb	r3, r3
 800d0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ce:	d103      	bne.n	800d0d8 <xQueueReceive+0x138>
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0d8:	f7ff f9ec 	bl	800c4b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0dc:	1d3a      	adds	r2, r7, #4
 800d0de:	f107 0310 	add.w	r3, r7, #16
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f001 f8d9 	bl	800e29c <xTaskCheckForTimeOut>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d123      	bne.n	800d138 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0f2:	f000 fb1a 	bl	800d72a <prvIsQueueEmpty>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d017      	beq.n	800d12c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	3324      	adds	r3, #36	; 0x24
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	4611      	mov	r1, r2
 800d104:	4618      	mov	r0, r3
 800d106:	f000 ffff 	bl	800e108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d10c:	f000 fabb 	bl	800d686 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d110:	f000 fe0c 	bl	800dd2c <xTaskResumeAll>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d189      	bne.n	800d02e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d11a:	4b10      	ldr	r3, [pc, #64]	; (800d15c <xQueueReceive+0x1bc>)
 800d11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d120:	601a      	str	r2, [r3, #0]
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	e780      	b.n	800d02e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d12e:	f000 faaa 	bl	800d686 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d132:	f000 fdfb 	bl	800dd2c <xTaskResumeAll>
 800d136:	e77a      	b.n	800d02e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d13a:	f000 faa4 	bl	800d686 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d13e:	f000 fdf5 	bl	800dd2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d144:	f000 faf1 	bl	800d72a <prvIsQueueEmpty>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f43f af6f 	beq.w	800d02e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d152:	4618      	mov	r0, r3
 800d154:	3730      	adds	r7, #48	; 0x30
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	e000ed04 	.word	0xe000ed04

0800d160 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b08e      	sub	sp, #56	; 0x38
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d16a:	2300      	movs	r3, #0
 800d16c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d172:	2300      	movs	r3, #0
 800d174:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d10a      	bne.n	800d192 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	623b      	str	r3, [r7, #32]
}
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00a      	beq.n	800d1b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	61fb      	str	r3, [r7, #28]
}
 800d1ac:	bf00      	nop
 800d1ae:	e7fe      	b.n	800d1ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1b0:	f001 f9ca 	bl	800e548 <xTaskGetSchedulerState>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d102      	bne.n	800d1c0 <xQueueSemaphoreTake+0x60>
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d101      	bne.n	800d1c4 <xQueueSemaphoreTake+0x64>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e000      	b.n	800d1c6 <xQueueSemaphoreTake+0x66>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d10a      	bne.n	800d1e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	61bb      	str	r3, [r7, #24]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1e0:	f7ff f938 	bl	800c454 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d024      	beq.n	800d23a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f2:	1e5a      	subs	r2, r3, #1
 800d1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d104      	bne.n	800d20a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d200:	f001 fb18 	bl	800e834 <pvTaskIncrementMutexHeldCount>
 800d204:	4602      	mov	r2, r0
 800d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d208:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00f      	beq.n	800d232 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	3310      	adds	r3, #16
 800d216:	4618      	mov	r0, r3
 800d218:	f000 ffc6 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d007      	beq.n	800d232 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d222:	4b54      	ldr	r3, [pc, #336]	; (800d374 <xQueueSemaphoreTake+0x214>)
 800d224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d228:	601a      	str	r2, [r3, #0]
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d232:	f7ff f93f 	bl	800c4b4 <vPortExitCritical>
				return pdPASS;
 800d236:	2301      	movs	r3, #1
 800d238:	e097      	b.n	800d36a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d111      	bne.n	800d264 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00a      	beq.n	800d25c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	617b      	str	r3, [r7, #20]
}
 800d258:	bf00      	nop
 800d25a:	e7fe      	b.n	800d25a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d25c:	f7ff f92a 	bl	800c4b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d260:	2300      	movs	r3, #0
 800d262:	e082      	b.n	800d36a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d266:	2b00      	cmp	r3, #0
 800d268:	d106      	bne.n	800d278 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d26a:	f107 030c 	add.w	r3, r7, #12
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 fffe 	bl	800e270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d274:	2301      	movs	r3, #1
 800d276:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d278:	f7ff f91c 	bl	800c4b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d27c:	f000 fd48 	bl	800dd10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d280:	f7ff f8e8 	bl	800c454 <vPortEnterCritical>
 800d284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d28a:	b25b      	sxtb	r3, r3
 800d28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d290:	d103      	bne.n	800d29a <xQueueSemaphoreTake+0x13a>
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2a0:	b25b      	sxtb	r3, r3
 800d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a6:	d103      	bne.n	800d2b0 <xQueueSemaphoreTake+0x150>
 800d2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2b0:	f7ff f900 	bl	800c4b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2b4:	463a      	mov	r2, r7
 800d2b6:	f107 030c 	add.w	r3, r7, #12
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f000 ffed 	bl	800e29c <xTaskCheckForTimeOut>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d132      	bne.n	800d32e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2ca:	f000 fa2e 	bl	800d72a <prvIsQueueEmpty>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d026      	beq.n	800d322 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d109      	bne.n	800d2f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d2dc:	f7ff f8ba 	bl	800c454 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f001 f94d 	bl	800e584 <xTaskPriorityInherit>
 800d2ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d2ec:	f7ff f8e2 	bl	800c4b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f2:	3324      	adds	r3, #36	; 0x24
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	4611      	mov	r1, r2
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 ff05 	bl	800e108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d300:	f000 f9c1 	bl	800d686 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d304:	f000 fd12 	bl	800dd2c <xTaskResumeAll>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f47f af68 	bne.w	800d1e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d310:	4b18      	ldr	r3, [pc, #96]	; (800d374 <xQueueSemaphoreTake+0x214>)
 800d312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d316:	601a      	str	r2, [r3, #0]
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	f3bf 8f6f 	isb	sy
 800d320:	e75e      	b.n	800d1e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d324:	f000 f9af 	bl	800d686 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d328:	f000 fd00 	bl	800dd2c <xTaskResumeAll>
 800d32c:	e758      	b.n	800d1e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d32e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d330:	f000 f9a9 	bl	800d686 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d334:	f000 fcfa 	bl	800dd2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d33a:	f000 f9f6 	bl	800d72a <prvIsQueueEmpty>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	f43f af4d 	beq.w	800d1e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00d      	beq.n	800d368 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d34c:	f7ff f882 	bl	800c454 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d352:	f000 f8f0 	bl	800d536 <prvGetDisinheritPriorityAfterTimeout>
 800d356:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d35e:	4618      	mov	r0, r3
 800d360:	f001 f9e6 	bl	800e730 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d364:	f7ff f8a6 	bl	800c4b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3738      	adds	r7, #56	; 0x38
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	e000ed04 	.word	0xe000ed04

0800d378 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08e      	sub	sp, #56	; 0x38
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d10a      	bne.n	800d3a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	623b      	str	r3, [r7, #32]
}
 800d3a0:	bf00      	nop
 800d3a2:	e7fe      	b.n	800d3a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d103      	bne.n	800d3b2 <xQueueReceiveFromISR+0x3a>
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d101      	bne.n	800d3b6 <xQueueReceiveFromISR+0x3e>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e000      	b.n	800d3b8 <xQueueReceiveFromISR+0x40>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10a      	bne.n	800d3d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	61fb      	str	r3, [r7, #28]
}
 800d3ce:	bf00      	nop
 800d3d0:	e7fe      	b.n	800d3d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3d2:	f7ff f921 	bl	800c618 <vPortValidateInterruptPriority>
	__asm volatile
 800d3d6:	f3ef 8211 	mrs	r2, BASEPRI
 800d3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	61ba      	str	r2, [r7, #24]
 800d3ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d3ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d02f      	beq.n	800d45e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d408:	68b9      	ldr	r1, [r7, #8]
 800d40a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d40c:	f000 f915 	bl	800d63a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d412:	1e5a      	subs	r2, r3, #1
 800d414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d416:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d420:	d112      	bne.n	800d448 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	691b      	ldr	r3, [r3, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d016      	beq.n	800d458 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	3310      	adds	r3, #16
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 feba 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00e      	beq.n	800d458 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	e007      	b.n	800d458 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d44c:	3301      	adds	r3, #1
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	b25a      	sxtb	r2, r3
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d458:	2301      	movs	r3, #1
 800d45a:	637b      	str	r3, [r7, #52]	; 0x34
 800d45c:	e001      	b.n	800d462 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d45e:	2300      	movs	r3, #0
 800d460:	637b      	str	r3, [r7, #52]	; 0x34
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	f383 8811 	msr	BASEPRI, r3
}
 800d46c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d470:	4618      	mov	r0, r3
 800d472:	3738      	adds	r7, #56	; 0x38
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d10a      	bne.n	800d49c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800d486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48a:	f383 8811 	msr	BASEPRI, r3
 800d48e:	f3bf 8f6f 	isb	sy
 800d492:	f3bf 8f4f 	dsb	sy
 800d496:	60bb      	str	r3, [r7, #8]
}
 800d498:	bf00      	nop
 800d49a:	e7fe      	b.n	800d49a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d49c:	f7fe ffda 	bl	800c454 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d4a6:	f7ff f805 	bl	800c4b4 <vPortExitCritical>

	return uxReturn;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10a      	bne.n	800d4dc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800d4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	60fb      	str	r3, [r7, #12]
}
 800d4d8:	bf00      	nop
 800d4da:	e7fe      	b.n	800d4da <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d4e2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	371c      	adds	r7, #28
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <vQueueDelete+0x28>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	60bb      	str	r3, [r7, #8]
}
 800d514:	bf00      	nop
 800d516:	e7fe      	b.n	800d516 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 f95f 	bl	800d7dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d524:	2b00      	cmp	r3, #0
 800d526:	d102      	bne.n	800d52e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f7fe fc93 	bl	800be54 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d52e:	bf00      	nop
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d536:	b480      	push	{r7}
 800d538:	b085      	sub	sp, #20
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d542:	2b00      	cmp	r3, #0
 800d544:	d006      	beq.n	800d554 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d550:	60fb      	str	r3, [r7, #12]
 800d552:	e001      	b.n	800d558 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d554:	2300      	movs	r3, #0
 800d556:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d558:	68fb      	ldr	r3, [r7, #12]
	}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b086      	sub	sp, #24
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d572:	2300      	movs	r3, #0
 800d574:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10d      	bne.n	800d5a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d14d      	bne.n	800d628 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	4618      	mov	r0, r3
 800d592:	f001 f85f 	bl	800e654 <xTaskPriorityDisinherit>
 800d596:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	609a      	str	r2, [r3, #8]
 800d59e:	e043      	b.n	800d628 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d119      	bne.n	800d5da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6858      	ldr	r0, [r3, #4]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	f012 fed7 	bl	8020364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5be:	441a      	add	r2, r3
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d32b      	bcc.n	800d628 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	605a      	str	r2, [r3, #4]
 800d5d8:	e026      	b.n	800d628 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	68d8      	ldr	r0, [r3, #12]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	68b9      	ldr	r1, [r7, #8]
 800d5e6:	f012 febd 	bl	8020364 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f2:	425b      	negs	r3, r3
 800d5f4:	441a      	add	r2, r3
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	68da      	ldr	r2, [r3, #12]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	429a      	cmp	r2, r3
 800d604:	d207      	bcs.n	800d616 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	689a      	ldr	r2, [r3, #8]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60e:	425b      	negs	r3, r3
 800d610:	441a      	add	r2, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d105      	bne.n	800d628 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d002      	beq.n	800d628 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	3b01      	subs	r3, #1
 800d626:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	1c5a      	adds	r2, r3, #1
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d630:	697b      	ldr	r3, [r7, #20]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3718      	adds	r7, #24
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b082      	sub	sp, #8
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d018      	beq.n	800d67e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	68da      	ldr	r2, [r3, #12]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d654:	441a      	add	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68da      	ldr	r2, [r3, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	429a      	cmp	r2, r3
 800d664:	d303      	bcc.n	800d66e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	68d9      	ldr	r1, [r3, #12]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	461a      	mov	r2, r3
 800d678:	6838      	ldr	r0, [r7, #0]
 800d67a:	f012 fe73 	bl	8020364 <memcpy>
	}
}
 800d67e:	bf00      	nop
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b084      	sub	sp, #16
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d68e:	f7fe fee1 	bl	800c454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d698:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d69a:	e011      	b.n	800d6c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d012      	beq.n	800d6ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	3324      	adds	r3, #36	; 0x24
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 fd7d 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d001      	beq.n	800d6b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6b4:	f000 fe54 	bl	800e360 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	dce9      	bgt.n	800d69c <prvUnlockQueue+0x16>
 800d6c8:	e000      	b.n	800d6cc <prvUnlockQueue+0x46>
					break;
 800d6ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	22ff      	movs	r2, #255	; 0xff
 800d6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6d4:	f7fe feee 	bl	800c4b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6d8:	f7fe febc 	bl	800c454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6e4:	e011      	b.n	800d70a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d012      	beq.n	800d714 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	3310      	adds	r3, #16
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 fd58 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6fe:	f000 fe2f 	bl	800e360 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	3b01      	subs	r3, #1
 800d706:	b2db      	uxtb	r3, r3
 800d708:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d70a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	dce9      	bgt.n	800d6e6 <prvUnlockQueue+0x60>
 800d712:	e000      	b.n	800d716 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d714:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	22ff      	movs	r2, #255	; 0xff
 800d71a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d71e:	f7fe fec9 	bl	800c4b4 <vPortExitCritical>
}
 800d722:	bf00      	nop
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d732:	f7fe fe8f 	bl	800c454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d73e:	2301      	movs	r3, #1
 800d740:	60fb      	str	r3, [r7, #12]
 800d742:	e001      	b.n	800d748 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d744:	2300      	movs	r3, #0
 800d746:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d748:	f7fe feb4 	bl	800c4b4 <vPortExitCritical>

	return xReturn;
 800d74c:	68fb      	ldr	r3, [r7, #12]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b084      	sub	sp, #16
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d75e:	f7fe fe79 	bl	800c454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d102      	bne.n	800d774 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d76e:	2301      	movs	r3, #1
 800d770:	60fb      	str	r3, [r7, #12]
 800d772:	e001      	b.n	800d778 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d774:	2300      	movs	r3, #0
 800d776:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d778:	f7fe fe9c 	bl	800c4b4 <vPortExitCritical>

	return xReturn;
 800d77c:	68fb      	ldr	r3, [r7, #12]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
	...

0800d788 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d792:	2300      	movs	r3, #0
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	e014      	b.n	800d7c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d798:	4a0f      	ldr	r2, [pc, #60]	; (800d7d8 <vQueueAddToRegistry+0x50>)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10b      	bne.n	800d7bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d7a4:	490c      	ldr	r1, [pc, #48]	; (800d7d8 <vQueueAddToRegistry+0x50>)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d7ae:	4a0a      	ldr	r2, [pc, #40]	; (800d7d8 <vQueueAddToRegistry+0x50>)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d7ba:	e006      	b.n	800d7ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	60fb      	str	r3, [r7, #12]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b07      	cmp	r3, #7
 800d7c6:	d9e7      	bls.n	800d798 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7c8:	bf00      	nop
 800d7ca:	bf00      	nop
 800d7cc:	3714      	adds	r7, #20
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	24009488 	.word	0x24009488

0800d7dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	e016      	b.n	800d818 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d7ea:	4a10      	ldr	r2, [pc, #64]	; (800d82c <vQueueUnregisterQueue+0x50>)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	00db      	lsls	r3, r3, #3
 800d7f0:	4413      	add	r3, r2
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d10b      	bne.n	800d812 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d7fa:	4a0c      	ldr	r2, [pc, #48]	; (800d82c <vQueueUnregisterQueue+0x50>)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2100      	movs	r1, #0
 800d800:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d804:	4a09      	ldr	r2, [pc, #36]	; (800d82c <vQueueUnregisterQueue+0x50>)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	00db      	lsls	r3, r3, #3
 800d80a:	4413      	add	r3, r2
 800d80c:	2200      	movs	r2, #0
 800d80e:	605a      	str	r2, [r3, #4]
				break;
 800d810:	e006      	b.n	800d820 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	3301      	adds	r3, #1
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b07      	cmp	r3, #7
 800d81c:	d9e5      	bls.n	800d7ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d81e:	bf00      	nop
 800d820:	bf00      	nop
 800d822:	3714      	adds	r7, #20
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	24009488 	.word	0x24009488

0800d830 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d840:	f7fe fe08 	bl	800c454 <vPortEnterCritical>
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d84a:	b25b      	sxtb	r3, r3
 800d84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d850:	d103      	bne.n	800d85a <vQueueWaitForMessageRestricted+0x2a>
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	2200      	movs	r2, #0
 800d856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d860:	b25b      	sxtb	r3, r3
 800d862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d866:	d103      	bne.n	800d870 <vQueueWaitForMessageRestricted+0x40>
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d870:	f7fe fe20 	bl	800c4b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d106      	bne.n	800d88a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	3324      	adds	r3, #36	; 0x24
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	68b9      	ldr	r1, [r7, #8]
 800d884:	4618      	mov	r0, r3
 800d886:	f000 fc63 	bl	800e150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d88a:	6978      	ldr	r0, [r7, #20]
 800d88c:	f7ff fefb 	bl	800d686 <prvUnlockQueue>
	}
 800d890:	bf00      	nop
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08e      	sub	sp, #56	; 0x38
 800d89c:	af04      	add	r7, sp, #16
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	623b      	str	r3, [r7, #32]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <xTaskCreateStatic+0x46>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	61fb      	str	r3, [r7, #28]
}
 800d8da:	bf00      	nop
 800d8dc:	e7fe      	b.n	800d8dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d8de:	235c      	movs	r3, #92	; 0x5c
 800d8e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	2b5c      	cmp	r3, #92	; 0x5c
 800d8e6:	d00a      	beq.n	800d8fe <xTaskCreateStatic+0x66>
	__asm volatile
 800d8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	61bb      	str	r3, [r7, #24]
}
 800d8fa:	bf00      	nop
 800d8fc:	e7fe      	b.n	800d8fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	2b00      	cmp	r3, #0
 800d904:	d01e      	beq.n	800d944 <xTaskCreateStatic+0xac>
 800d906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d01b      	beq.n	800d944 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d914:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	2202      	movs	r2, #2
 800d91a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d91e:	2300      	movs	r3, #0
 800d920:	9303      	str	r3, [sp, #12]
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	9302      	str	r3, [sp, #8]
 800d926:	f107 0314 	add.w	r3, r7, #20
 800d92a:	9301      	str	r3, [sp, #4]
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	68b9      	ldr	r1, [r7, #8]
 800d936:	68f8      	ldr	r0, [r7, #12]
 800d938:	f000 f850 	bl	800d9dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d93c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d93e:	f000 f8dd 	bl	800dafc <prvAddNewTaskToReadyList>
 800d942:	e001      	b.n	800d948 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d944:	2300      	movs	r3, #0
 800d946:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d948:	697b      	ldr	r3, [r7, #20]
	}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3728      	adds	r7, #40	; 0x28
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d952:	b580      	push	{r7, lr}
 800d954:	b08c      	sub	sp, #48	; 0x30
 800d956:	af04      	add	r7, sp, #16
 800d958:	60f8      	str	r0, [r7, #12]
 800d95a:	60b9      	str	r1, [r7, #8]
 800d95c:	603b      	str	r3, [r7, #0]
 800d95e:	4613      	mov	r3, r2
 800d960:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d962:	88fb      	ldrh	r3, [r7, #6]
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4618      	mov	r0, r3
 800d968:	f7fe f9a4 	bl	800bcb4 <pvPortMalloc>
 800d96c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00e      	beq.n	800d992 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d974:	205c      	movs	r0, #92	; 0x5c
 800d976:	f7fe f99d 	bl	800bcb4 <pvPortMalloc>
 800d97a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d003      	beq.n	800d98a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	697a      	ldr	r2, [r7, #20]
 800d986:	631a      	str	r2, [r3, #48]	; 0x30
 800d988:	e005      	b.n	800d996 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d98a:	6978      	ldr	r0, [r7, #20]
 800d98c:	f7fe fa62 	bl	800be54 <vPortFree>
 800d990:	e001      	b.n	800d996 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d992:	2300      	movs	r3, #0
 800d994:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d017      	beq.n	800d9cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d9a4:	88fa      	ldrh	r2, [r7, #6]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	9303      	str	r3, [sp, #12]
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	9302      	str	r3, [sp, #8]
 800d9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f000 f80e 	bl	800d9dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9c0:	69f8      	ldr	r0, [r7, #28]
 800d9c2:	f000 f89b 	bl	800dafc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	61bb      	str	r3, [r7, #24]
 800d9ca:	e002      	b.n	800d9d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d9d2:	69bb      	ldr	r3, [r7, #24]
	}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3720      	adds	r7, #32
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b088      	sub	sp, #32
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	607a      	str	r2, [r7, #4]
 800d9e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	21a5      	movs	r1, #165	; 0xa5
 800d9f6:	f012 fcc3 	bl	8020380 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9fe:	6879      	ldr	r1, [r7, #4]
 800da00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800da04:	440b      	add	r3, r1
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	4413      	add	r3, r2
 800da0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	f023 0307 	bic.w	r3, r3, #7
 800da12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	f003 0307 	and.w	r3, r3, #7
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00a      	beq.n	800da34 <prvInitialiseNewTask+0x58>
	__asm volatile
 800da1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	617b      	str	r3, [r7, #20]
}
 800da30:	bf00      	nop
 800da32:	e7fe      	b.n	800da32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d01f      	beq.n	800da7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da3a:	2300      	movs	r3, #0
 800da3c:	61fb      	str	r3, [r7, #28]
 800da3e:	e012      	b.n	800da66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	4413      	add	r3, r2
 800da46:	7819      	ldrb	r1, [r3, #0]
 800da48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	4413      	add	r3, r2
 800da4e:	3334      	adds	r3, #52	; 0x34
 800da50:	460a      	mov	r2, r1
 800da52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	4413      	add	r3, r2
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d006      	beq.n	800da6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	3301      	adds	r3, #1
 800da64:	61fb      	str	r3, [r7, #28]
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	2b0f      	cmp	r3, #15
 800da6a:	d9e9      	bls.n	800da40 <prvInitialiseNewTask+0x64>
 800da6c:	e000      	b.n	800da70 <prvInitialiseNewTask+0x94>
			{
				break;
 800da6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da72:	2200      	movs	r2, #0
 800da74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da78:	e003      	b.n	800da82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da84:	2b37      	cmp	r3, #55	; 0x37
 800da86:	d901      	bls.n	800da8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da88:	2337      	movs	r3, #55	; 0x37
 800da8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9a:	2200      	movs	r2, #0
 800da9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa0:	3304      	adds	r3, #4
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fe fb14 	bl	800c0d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daaa:	3318      	adds	r3, #24
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fb0f 	bl	800c0d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dac6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	2200      	movs	r2, #0
 800dacc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad0:	2200      	movs	r2, #0
 800dad2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	68f9      	ldr	r1, [r7, #12]
 800dada:	69b8      	ldr	r0, [r7, #24]
 800dadc:	f7fe fb8c 	bl	800c1f8 <pxPortInitialiseStack>
 800dae0:	4602      	mov	r2, r0
 800dae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d002      	beq.n	800daf2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daf2:	bf00      	nop
 800daf4:	3720      	adds	r7, #32
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
	...

0800dafc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db04:	f7fe fca6 	bl	800c454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db08:	4b2d      	ldr	r3, [pc, #180]	; (800dbc0 <prvAddNewTaskToReadyList+0xc4>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	3301      	adds	r3, #1
 800db0e:	4a2c      	ldr	r2, [pc, #176]	; (800dbc0 <prvAddNewTaskToReadyList+0xc4>)
 800db10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db12:	4b2c      	ldr	r3, [pc, #176]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d109      	bne.n	800db2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db1a:	4a2a      	ldr	r2, [pc, #168]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db20:	4b27      	ldr	r3, [pc, #156]	; (800dbc0 <prvAddNewTaskToReadyList+0xc4>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d110      	bne.n	800db4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db28:	f000 fc40 	bl	800e3ac <prvInitialiseTaskLists>
 800db2c:	e00d      	b.n	800db4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db2e:	4b26      	ldr	r3, [pc, #152]	; (800dbc8 <prvAddNewTaskToReadyList+0xcc>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d109      	bne.n	800db4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db36:	4b23      	ldr	r3, [pc, #140]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db40:	429a      	cmp	r2, r3
 800db42:	d802      	bhi.n	800db4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db44:	4a1f      	ldr	r2, [pc, #124]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db4a:	4b20      	ldr	r3, [pc, #128]	; (800dbcc <prvAddNewTaskToReadyList+0xd0>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	3301      	adds	r3, #1
 800db50:	4a1e      	ldr	r2, [pc, #120]	; (800dbcc <prvAddNewTaskToReadyList+0xd0>)
 800db52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db54:	4b1d      	ldr	r3, [pc, #116]	; (800dbcc <prvAddNewTaskToReadyList+0xd0>)
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db60:	4b1b      	ldr	r3, [pc, #108]	; (800dbd0 <prvAddNewTaskToReadyList+0xd4>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	429a      	cmp	r2, r3
 800db66:	d903      	bls.n	800db70 <prvAddNewTaskToReadyList+0x74>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6c:	4a18      	ldr	r2, [pc, #96]	; (800dbd0 <prvAddNewTaskToReadyList+0xd4>)
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db74:	4613      	mov	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4413      	add	r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	4a15      	ldr	r2, [pc, #84]	; (800dbd4 <prvAddNewTaskToReadyList+0xd8>)
 800db7e:	441a      	add	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3304      	adds	r3, #4
 800db84:	4619      	mov	r1, r3
 800db86:	4610      	mov	r0, r2
 800db88:	f7fe faaf 	bl	800c0ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db8c:	f7fe fc92 	bl	800c4b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db90:	4b0d      	ldr	r3, [pc, #52]	; (800dbc8 <prvAddNewTaskToReadyList+0xcc>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00e      	beq.n	800dbb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db98:	4b0a      	ldr	r3, [pc, #40]	; (800dbc4 <prvAddNewTaskToReadyList+0xc8>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d207      	bcs.n	800dbb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dba6:	4b0c      	ldr	r3, [pc, #48]	; (800dbd8 <prvAddNewTaskToReadyList+0xdc>)
 800dba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbac:	601a      	str	r2, [r3, #0]
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbb6:	bf00      	nop
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	2400999c 	.word	0x2400999c
 800dbc4:	240094c8 	.word	0x240094c8
 800dbc8:	240099a8 	.word	0x240099a8
 800dbcc:	240099b8 	.word	0x240099b8
 800dbd0:	240099a4 	.word	0x240099a4
 800dbd4:	240094cc 	.word	0x240094cc
 800dbd8:	e000ed04 	.word	0xe000ed04

0800dbdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d017      	beq.n	800dc1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dbee:	4b13      	ldr	r3, [pc, #76]	; (800dc3c <vTaskDelay+0x60>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00a      	beq.n	800dc0c <vTaskDelay+0x30>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	60bb      	str	r3, [r7, #8]
}
 800dc08:	bf00      	nop
 800dc0a:	e7fe      	b.n	800dc0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc0c:	f000 f880 	bl	800dd10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc10:	2100      	movs	r1, #0
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 fe22 	bl	800e85c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc18:	f000 f888 	bl	800dd2c <xTaskResumeAll>
 800dc1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d107      	bne.n	800dc34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dc24:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <vTaskDelay+0x64>)
 800dc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc2a:	601a      	str	r2, [r3, #0]
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc34:	bf00      	nop
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	240099c4 	.word	0x240099c4
 800dc40:	e000ed04 	.word	0xe000ed04

0800dc44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b08a      	sub	sp, #40	; 0x28
 800dc48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc52:	463a      	mov	r2, r7
 800dc54:	1d39      	adds	r1, r7, #4
 800dc56:	f107 0308 	add.w	r3, r7, #8
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fd fff6 	bl	800bc4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc60:	6839      	ldr	r1, [r7, #0]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	9202      	str	r2, [sp, #8]
 800dc68:	9301      	str	r3, [sp, #4]
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	2300      	movs	r3, #0
 800dc70:	460a      	mov	r2, r1
 800dc72:	4921      	ldr	r1, [pc, #132]	; (800dcf8 <vTaskStartScheduler+0xb4>)
 800dc74:	4821      	ldr	r0, [pc, #132]	; (800dcfc <vTaskStartScheduler+0xb8>)
 800dc76:	f7ff fe0f 	bl	800d898 <xTaskCreateStatic>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	4a20      	ldr	r2, [pc, #128]	; (800dd00 <vTaskStartScheduler+0xbc>)
 800dc7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc80:	4b1f      	ldr	r3, [pc, #124]	; (800dd00 <vTaskStartScheduler+0xbc>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d002      	beq.n	800dc8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	617b      	str	r3, [r7, #20]
 800dc8c:	e001      	b.n	800dc92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d102      	bne.n	800dc9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dc98:	f000 fe34 	bl	800e904 <xTimerCreateTimerTask>
 800dc9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d116      	bne.n	800dcd2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800dca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	613b      	str	r3, [r7, #16]
}
 800dcb6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dcb8:	4b12      	ldr	r3, [pc, #72]	; (800dd04 <vTaskStartScheduler+0xc0>)
 800dcba:	f04f 32ff 	mov.w	r2, #4294967295
 800dcbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dcc0:	4b11      	ldr	r3, [pc, #68]	; (800dd08 <vTaskStartScheduler+0xc4>)
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcc6:	4b11      	ldr	r3, [pc, #68]	; (800dd0c <vTaskStartScheduler+0xc8>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dccc:	f7fe fb20 	bl	800c310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dcd0:	e00e      	b.n	800dcf0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd8:	d10a      	bne.n	800dcf0 <vTaskStartScheduler+0xac>
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	60fb      	str	r3, [r7, #12]
}
 800dcec:	bf00      	nop
 800dcee:	e7fe      	b.n	800dcee <vTaskStartScheduler+0xaa>
}
 800dcf0:	bf00      	nop
 800dcf2:	3718      	adds	r7, #24
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	080216e4 	.word	0x080216e4
 800dcfc:	0800e379 	.word	0x0800e379
 800dd00:	240099c0 	.word	0x240099c0
 800dd04:	240099bc 	.word	0x240099bc
 800dd08:	240099a8 	.word	0x240099a8
 800dd0c:	240099a0 	.word	0x240099a0

0800dd10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd10:	b480      	push	{r7}
 800dd12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd14:	4b04      	ldr	r3, [pc, #16]	; (800dd28 <vTaskSuspendAll+0x18>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	4a03      	ldr	r2, [pc, #12]	; (800dd28 <vTaskSuspendAll+0x18>)
 800dd1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd1e:	bf00      	nop
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr
 800dd28:	240099c4 	.word	0x240099c4

0800dd2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd32:	2300      	movs	r3, #0
 800dd34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd36:	2300      	movs	r3, #0
 800dd38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd3a:	4b42      	ldr	r3, [pc, #264]	; (800de44 <xTaskResumeAll+0x118>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d10a      	bne.n	800dd58 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	603b      	str	r3, [r7, #0]
}
 800dd54:	bf00      	nop
 800dd56:	e7fe      	b.n	800dd56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd58:	f7fe fb7c 	bl	800c454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd5c:	4b39      	ldr	r3, [pc, #228]	; (800de44 <xTaskResumeAll+0x118>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	3b01      	subs	r3, #1
 800dd62:	4a38      	ldr	r2, [pc, #224]	; (800de44 <xTaskResumeAll+0x118>)
 800dd64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd66:	4b37      	ldr	r3, [pc, #220]	; (800de44 <xTaskResumeAll+0x118>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d162      	bne.n	800de34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd6e:	4b36      	ldr	r3, [pc, #216]	; (800de48 <xTaskResumeAll+0x11c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d05e      	beq.n	800de34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd76:	e02f      	b.n	800ddd8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd78:	4b34      	ldr	r3, [pc, #208]	; (800de4c <xTaskResumeAll+0x120>)
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	3318      	adds	r3, #24
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fe fa0d 	bl	800c1a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	3304      	adds	r3, #4
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe fa08 	bl	800c1a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd98:	4b2d      	ldr	r3, [pc, #180]	; (800de50 <xTaskResumeAll+0x124>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d903      	bls.n	800dda8 <xTaskResumeAll+0x7c>
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda4:	4a2a      	ldr	r2, [pc, #168]	; (800de50 <xTaskResumeAll+0x124>)
 800dda6:	6013      	str	r3, [r2, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddac:	4613      	mov	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4413      	add	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4a27      	ldr	r2, [pc, #156]	; (800de54 <xTaskResumeAll+0x128>)
 800ddb6:	441a      	add	r2, r3
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	3304      	adds	r3, #4
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	f7fe f993 	bl	800c0ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc8:	4b23      	ldr	r3, [pc, #140]	; (800de58 <xTaskResumeAll+0x12c>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d302      	bcc.n	800ddd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ddd2:	4b22      	ldr	r3, [pc, #136]	; (800de5c <xTaskResumeAll+0x130>)
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddd8:	4b1c      	ldr	r3, [pc, #112]	; (800de4c <xTaskResumeAll+0x120>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1cb      	bne.n	800dd78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d001      	beq.n	800ddea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dde6:	f000 fb7f 	bl	800e4e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ddea:	4b1d      	ldr	r3, [pc, #116]	; (800de60 <xTaskResumeAll+0x134>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d010      	beq.n	800de18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ddf6:	f000 f859 	bl	800deac <xTaskIncrementTick>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de00:	4b16      	ldr	r3, [pc, #88]	; (800de5c <xTaskResumeAll+0x130>)
 800de02:	2201      	movs	r2, #1
 800de04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	3b01      	subs	r3, #1
 800de0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1f1      	bne.n	800ddf6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800de12:	4b13      	ldr	r3, [pc, #76]	; (800de60 <xTaskResumeAll+0x134>)
 800de14:	2200      	movs	r2, #0
 800de16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de18:	4b10      	ldr	r3, [pc, #64]	; (800de5c <xTaskResumeAll+0x130>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d009      	beq.n	800de34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de20:	2301      	movs	r3, #1
 800de22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de24:	4b0f      	ldr	r3, [pc, #60]	; (800de64 <xTaskResumeAll+0x138>)
 800de26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de2a:	601a      	str	r2, [r3, #0]
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de34:	f7fe fb3e 	bl	800c4b4 <vPortExitCritical>

	return xAlreadyYielded;
 800de38:	68bb      	ldr	r3, [r7, #8]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	240099c4 	.word	0x240099c4
 800de48:	2400999c 	.word	0x2400999c
 800de4c:	2400995c 	.word	0x2400995c
 800de50:	240099a4 	.word	0x240099a4
 800de54:	240094cc 	.word	0x240094cc
 800de58:	240094c8 	.word	0x240094c8
 800de5c:	240099b0 	.word	0x240099b0
 800de60:	240099ac 	.word	0x240099ac
 800de64:	e000ed04 	.word	0xe000ed04

0800de68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de6e:	4b05      	ldr	r3, [pc, #20]	; (800de84 <xTaskGetTickCount+0x1c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de74:	687b      	ldr	r3, [r7, #4]
}
 800de76:	4618      	mov	r0, r3
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	240099a0 	.word	0x240099a0

0800de88 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de8e:	f7fe fbc3 	bl	800c618 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800de92:	2300      	movs	r3, #0
 800de94:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800de96:	4b04      	ldr	r3, [pc, #16]	; (800dea8 <xTaskGetTickCountFromISR+0x20>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de9c:	683b      	ldr	r3, [r7, #0]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	240099a0 	.word	0x240099a0

0800deac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800deb2:	2300      	movs	r3, #0
 800deb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deb6:	4b53      	ldr	r3, [pc, #332]	; (800e004 <xTaskIncrementTick+0x158>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	f040 8095 	bne.w	800dfea <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dec0:	4b51      	ldr	r3, [pc, #324]	; (800e008 <xTaskIncrementTick+0x15c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	3301      	adds	r3, #1
 800dec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dec8:	4a4f      	ldr	r2, [pc, #316]	; (800e008 <xTaskIncrementTick+0x15c>)
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d120      	bne.n	800df16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ded4:	4b4d      	ldr	r3, [pc, #308]	; (800e00c <xTaskIncrementTick+0x160>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00a      	beq.n	800def4 <xTaskIncrementTick+0x48>
	__asm volatile
 800dede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	603b      	str	r3, [r7, #0]
}
 800def0:	bf00      	nop
 800def2:	e7fe      	b.n	800def2 <xTaskIncrementTick+0x46>
 800def4:	4b45      	ldr	r3, [pc, #276]	; (800e00c <xTaskIncrementTick+0x160>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	60fb      	str	r3, [r7, #12]
 800defa:	4b45      	ldr	r3, [pc, #276]	; (800e010 <xTaskIncrementTick+0x164>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a43      	ldr	r2, [pc, #268]	; (800e00c <xTaskIncrementTick+0x160>)
 800df00:	6013      	str	r3, [r2, #0]
 800df02:	4a43      	ldr	r2, [pc, #268]	; (800e010 <xTaskIncrementTick+0x164>)
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	4b42      	ldr	r3, [pc, #264]	; (800e014 <xTaskIncrementTick+0x168>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	3301      	adds	r3, #1
 800df0e:	4a41      	ldr	r2, [pc, #260]	; (800e014 <xTaskIncrementTick+0x168>)
 800df10:	6013      	str	r3, [r2, #0]
 800df12:	f000 fae9 	bl	800e4e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df16:	4b40      	ldr	r3, [pc, #256]	; (800e018 <xTaskIncrementTick+0x16c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	693a      	ldr	r2, [r7, #16]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d349      	bcc.n	800dfb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df20:	4b3a      	ldr	r3, [pc, #232]	; (800e00c <xTaskIncrementTick+0x160>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d104      	bne.n	800df34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df2a:	4b3b      	ldr	r3, [pc, #236]	; (800e018 <xTaskIncrementTick+0x16c>)
 800df2c:	f04f 32ff 	mov.w	r2, #4294967295
 800df30:	601a      	str	r2, [r3, #0]
					break;
 800df32:	e03f      	b.n	800dfb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df34:	4b35      	ldr	r3, [pc, #212]	; (800e00c <xTaskIncrementTick+0x160>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df44:	693a      	ldr	r2, [r7, #16]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d203      	bcs.n	800df54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df4c:	4a32      	ldr	r2, [pc, #200]	; (800e018 <xTaskIncrementTick+0x16c>)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df52:	e02f      	b.n	800dfb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	3304      	adds	r3, #4
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe f923 	bl	800c1a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df62:	2b00      	cmp	r3, #0
 800df64:	d004      	beq.n	800df70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	3318      	adds	r3, #24
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fe f91a 	bl	800c1a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df74:	4b29      	ldr	r3, [pc, #164]	; (800e01c <xTaskIncrementTick+0x170>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d903      	bls.n	800df84 <xTaskIncrementTick+0xd8>
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df80:	4a26      	ldr	r2, [pc, #152]	; (800e01c <xTaskIncrementTick+0x170>)
 800df82:	6013      	str	r3, [r2, #0]
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df88:	4613      	mov	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	4413      	add	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4a23      	ldr	r2, [pc, #140]	; (800e020 <xTaskIncrementTick+0x174>)
 800df92:	441a      	add	r2, r3
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	3304      	adds	r3, #4
 800df98:	4619      	mov	r1, r3
 800df9a:	4610      	mov	r0, r2
 800df9c:	f7fe f8a5 	bl	800c0ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa4:	4b1f      	ldr	r3, [pc, #124]	; (800e024 <xTaskIncrementTick+0x178>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d3b8      	bcc.n	800df20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfb2:	e7b5      	b.n	800df20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfb4:	4b1b      	ldr	r3, [pc, #108]	; (800e024 <xTaskIncrementTick+0x178>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfba:	4919      	ldr	r1, [pc, #100]	; (800e020 <xTaskIncrementTick+0x174>)
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4413      	add	r3, r2
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	440b      	add	r3, r1
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d901      	bls.n	800dfd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800dfd0:	4b15      	ldr	r3, [pc, #84]	; (800e028 <xTaskIncrementTick+0x17c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800dfd8:	f7f2 fb69 	bl	80006ae <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dfdc:	4b13      	ldr	r3, [pc, #76]	; (800e02c <xTaskIncrementTick+0x180>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d009      	beq.n	800dff8 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	617b      	str	r3, [r7, #20]
 800dfe8:	e006      	b.n	800dff8 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dfea:	4b0f      	ldr	r3, [pc, #60]	; (800e028 <xTaskIncrementTick+0x17c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	3301      	adds	r3, #1
 800dff0:	4a0d      	ldr	r2, [pc, #52]	; (800e028 <xTaskIncrementTick+0x17c>)
 800dff2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800dff4:	f7f2 fb5b 	bl	80006ae <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800dff8:	697b      	ldr	r3, [r7, #20]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3718      	adds	r7, #24
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	240099c4 	.word	0x240099c4
 800e008:	240099a0 	.word	0x240099a0
 800e00c:	24009954 	.word	0x24009954
 800e010:	24009958 	.word	0x24009958
 800e014:	240099b4 	.word	0x240099b4
 800e018:	240099bc 	.word	0x240099bc
 800e01c:	240099a4 	.word	0x240099a4
 800e020:	240094cc 	.word	0x240094cc
 800e024:	240094c8 	.word	0x240094c8
 800e028:	240099ac 	.word	0x240099ac
 800e02c:	240099b0 	.word	0x240099b0

0800e030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e036:	4b2f      	ldr	r3, [pc, #188]	; (800e0f4 <vTaskSwitchContext+0xc4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e03e:	4b2e      	ldr	r3, [pc, #184]	; (800e0f8 <vTaskSwitchContext+0xc8>)
 800e040:	2201      	movs	r2, #1
 800e042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e044:	e052      	b.n	800e0ec <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 800e046:	4b2c      	ldr	r3, [pc, #176]	; (800e0f8 <vTaskSwitchContext+0xc8>)
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e04c:	4b2b      	ldr	r3, [pc, #172]	; (800e0fc <vTaskSwitchContext+0xcc>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	4b2a      	ldr	r3, [pc, #168]	; (800e0fc <vTaskSwitchContext+0xcc>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e058:	429a      	cmp	r2, r3
 800e05a:	d808      	bhi.n	800e06e <vTaskSwitchContext+0x3e>
 800e05c:	4b27      	ldr	r3, [pc, #156]	; (800e0fc <vTaskSwitchContext+0xcc>)
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	4b26      	ldr	r3, [pc, #152]	; (800e0fc <vTaskSwitchContext+0xcc>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3334      	adds	r3, #52	; 0x34
 800e066:	4619      	mov	r1, r3
 800e068:	4610      	mov	r0, r2
 800e06a:	f7f2 fb27 	bl	80006bc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e06e:	4b24      	ldr	r3, [pc, #144]	; (800e100 <vTaskSwitchContext+0xd0>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	60fb      	str	r3, [r7, #12]
 800e074:	e010      	b.n	800e098 <vTaskSwitchContext+0x68>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10a      	bne.n	800e092 <vTaskSwitchContext+0x62>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	f383 8811 	msr	BASEPRI, r3
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	f3bf 8f4f 	dsb	sy
 800e08c:	607b      	str	r3, [r7, #4]
}
 800e08e:	bf00      	nop
 800e090:	e7fe      	b.n	800e090 <vTaskSwitchContext+0x60>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3b01      	subs	r3, #1
 800e096:	60fb      	str	r3, [r7, #12]
 800e098:	491a      	ldr	r1, [pc, #104]	; (800e104 <vTaskSwitchContext+0xd4>)
 800e09a:	68fa      	ldr	r2, [r7, #12]
 800e09c:	4613      	mov	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	4413      	add	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	440b      	add	r3, r1
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d0e4      	beq.n	800e076 <vTaskSwitchContext+0x46>
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	4a13      	ldr	r2, [pc, #76]	; (800e104 <vTaskSwitchContext+0xd4>)
 800e0b8:	4413      	add	r3, r2
 800e0ba:	60bb      	str	r3, [r7, #8]
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	685a      	ldr	r2, [r3, #4]
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	605a      	str	r2, [r3, #4]
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	685a      	ldr	r2, [r3, #4]
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d104      	bne.n	800e0dc <vTaskSwitchContext+0xac>
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	685a      	ldr	r2, [r3, #4]
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	605a      	str	r2, [r3, #4]
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	4a06      	ldr	r2, [pc, #24]	; (800e0fc <vTaskSwitchContext+0xcc>)
 800e0e4:	6013      	str	r3, [r2, #0]
 800e0e6:	4a06      	ldr	r2, [pc, #24]	; (800e100 <vTaskSwitchContext+0xd0>)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6013      	str	r3, [r2, #0]
}
 800e0ec:	bf00      	nop
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	240099c4 	.word	0x240099c4
 800e0f8:	240099b0 	.word	0x240099b0
 800e0fc:	240094c8 	.word	0x240094c8
 800e100:	240099a4 	.word	0x240099a4
 800e104:	240094cc 	.word	0x240094cc

0800e108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10a      	bne.n	800e12e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11c:	f383 8811 	msr	BASEPRI, r3
 800e120:	f3bf 8f6f 	isb	sy
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	60fb      	str	r3, [r7, #12]
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e12e:	4b07      	ldr	r3, [pc, #28]	; (800e14c <vTaskPlaceOnEventList+0x44>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	3318      	adds	r3, #24
 800e134:	4619      	mov	r1, r3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7fd fffb 	bl	800c132 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e13c:	2101      	movs	r1, #1
 800e13e:	6838      	ldr	r0, [r7, #0]
 800e140:	f000 fb8c 	bl	800e85c <prvAddCurrentTaskToDelayedList>
}
 800e144:	bf00      	nop
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	240094c8 	.word	0x240094c8

0800e150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10a      	bne.n	800e178 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	617b      	str	r3, [r7, #20]
}
 800e174:	bf00      	nop
 800e176:	e7fe      	b.n	800e176 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e178:	4b0a      	ldr	r3, [pc, #40]	; (800e1a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	3318      	adds	r3, #24
 800e17e:	4619      	mov	r1, r3
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f7fd ffb2 	bl	800c0ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e18c:	f04f 33ff 	mov.w	r3, #4294967295
 800e190:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e192:	6879      	ldr	r1, [r7, #4]
 800e194:	68b8      	ldr	r0, [r7, #8]
 800e196:	f000 fb61 	bl	800e85c <prvAddCurrentTaskToDelayedList>
	}
 800e19a:	bf00      	nop
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	240094c8 	.word	0x240094c8

0800e1a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10a      	bne.n	800e1d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	60fb      	str	r3, [r7, #12]
}
 800e1d0:	bf00      	nop
 800e1d2:	e7fe      	b.n	800e1d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	3318      	adds	r3, #24
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fd ffe3 	bl	800c1a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1de:	4b1e      	ldr	r3, [pc, #120]	; (800e258 <xTaskRemoveFromEventList+0xb0>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d11d      	bne.n	800e222 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	3304      	adds	r3, #4
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fd ffda 	bl	800c1a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f4:	4b19      	ldr	r3, [pc, #100]	; (800e25c <xTaskRemoveFromEventList+0xb4>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d903      	bls.n	800e204 <xTaskRemoveFromEventList+0x5c>
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e200:	4a16      	ldr	r2, [pc, #88]	; (800e25c <xTaskRemoveFromEventList+0xb4>)
 800e202:	6013      	str	r3, [r2, #0]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e208:	4613      	mov	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4a13      	ldr	r2, [pc, #76]	; (800e260 <xTaskRemoveFromEventList+0xb8>)
 800e212:	441a      	add	r2, r3
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	3304      	adds	r3, #4
 800e218:	4619      	mov	r1, r3
 800e21a:	4610      	mov	r0, r2
 800e21c:	f7fd ff65 	bl	800c0ea <vListInsertEnd>
 800e220:	e005      	b.n	800e22e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	3318      	adds	r3, #24
 800e226:	4619      	mov	r1, r3
 800e228:	480e      	ldr	r0, [pc, #56]	; (800e264 <xTaskRemoveFromEventList+0xbc>)
 800e22a:	f7fd ff5e 	bl	800c0ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e232:	4b0d      	ldr	r3, [pc, #52]	; (800e268 <xTaskRemoveFromEventList+0xc0>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e238:	429a      	cmp	r2, r3
 800e23a:	d905      	bls.n	800e248 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e23c:	2301      	movs	r3, #1
 800e23e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e240:	4b0a      	ldr	r3, [pc, #40]	; (800e26c <xTaskRemoveFromEventList+0xc4>)
 800e242:	2201      	movs	r2, #1
 800e244:	601a      	str	r2, [r3, #0]
 800e246:	e001      	b.n	800e24c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e248:	2300      	movs	r3, #0
 800e24a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e24c:	697b      	ldr	r3, [r7, #20]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	240099c4 	.word	0x240099c4
 800e25c:	240099a4 	.word	0x240099a4
 800e260:	240094cc 	.word	0x240094cc
 800e264:	2400995c 	.word	0x2400995c
 800e268:	240094c8 	.word	0x240094c8
 800e26c:	240099b0 	.word	0x240099b0

0800e270 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e278:	4b06      	ldr	r3, [pc, #24]	; (800e294 <vTaskInternalSetTimeOutState+0x24>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e280:	4b05      	ldr	r3, [pc, #20]	; (800e298 <vTaskInternalSetTimeOutState+0x28>)
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	605a      	str	r2, [r3, #4]
}
 800e288:	bf00      	nop
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr
 800e294:	240099b4 	.word	0x240099b4
 800e298:	240099a0 	.word	0x240099a0

0800e29c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b088      	sub	sp, #32
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10a      	bne.n	800e2c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	613b      	str	r3, [r7, #16]
}
 800e2be:	bf00      	nop
 800e2c0:	e7fe      	b.n	800e2c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10a      	bne.n	800e2de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	60fb      	str	r3, [r7, #12]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e2de:	f7fe f8b9 	bl	800c454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2e2:	4b1d      	ldr	r3, [pc, #116]	; (800e358 <xTaskCheckForTimeOut+0xbc>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	69ba      	ldr	r2, [r7, #24]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fa:	d102      	bne.n	800e302 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	61fb      	str	r3, [r7, #28]
 800e300:	e023      	b.n	800e34a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	4b15      	ldr	r3, [pc, #84]	; (800e35c <xTaskCheckForTimeOut+0xc0>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d007      	beq.n	800e31e <xTaskCheckForTimeOut+0x82>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	69ba      	ldr	r2, [r7, #24]
 800e314:	429a      	cmp	r2, r3
 800e316:	d302      	bcc.n	800e31e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e318:	2301      	movs	r3, #1
 800e31a:	61fb      	str	r3, [r7, #28]
 800e31c:	e015      	b.n	800e34a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	697a      	ldr	r2, [r7, #20]
 800e324:	429a      	cmp	r2, r3
 800e326:	d20b      	bcs.n	800e340 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	1ad2      	subs	r2, r2, r3
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7ff ff9b 	bl	800e270 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e33a:	2300      	movs	r3, #0
 800e33c:	61fb      	str	r3, [r7, #28]
 800e33e:	e004      	b.n	800e34a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	2200      	movs	r2, #0
 800e344:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e346:	2301      	movs	r3, #1
 800e348:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e34a:	f7fe f8b3 	bl	800c4b4 <vPortExitCritical>

	return xReturn;
 800e34e:	69fb      	ldr	r3, [r7, #28]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3720      	adds	r7, #32
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	240099a0 	.word	0x240099a0
 800e35c:	240099b4 	.word	0x240099b4

0800e360 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e360:	b480      	push	{r7}
 800e362:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e364:	4b03      	ldr	r3, [pc, #12]	; (800e374 <vTaskMissedYield+0x14>)
 800e366:	2201      	movs	r2, #1
 800e368:	601a      	str	r2, [r3, #0]
}
 800e36a:	bf00      	nop
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	240099b0 	.word	0x240099b0

0800e378 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e380:	f000 f854 	bl	800e42c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e384:	4b07      	ldr	r3, [pc, #28]	; (800e3a4 <prvIdleTask+0x2c>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d907      	bls.n	800e39c <prvIdleTask+0x24>
			{
				taskYIELD();
 800e38c:	4b06      	ldr	r3, [pc, #24]	; (800e3a8 <prvIdleTask+0x30>)
 800e38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e39c:	f7f2 f980 	bl	80006a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e3a0:	e7ee      	b.n	800e380 <prvIdleTask+0x8>
 800e3a2:	bf00      	nop
 800e3a4:	240094cc 	.word	0x240094cc
 800e3a8:	e000ed04 	.word	0xe000ed04

0800e3ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	607b      	str	r3, [r7, #4]
 800e3b6:	e00c      	b.n	800e3d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4413      	add	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4a12      	ldr	r2, [pc, #72]	; (800e40c <prvInitialiseTaskLists+0x60>)
 800e3c4:	4413      	add	r3, r2
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd fe62 	bl	800c090 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	607b      	str	r3, [r7, #4]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b37      	cmp	r3, #55	; 0x37
 800e3d6:	d9ef      	bls.n	800e3b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3d8:	480d      	ldr	r0, [pc, #52]	; (800e410 <prvInitialiseTaskLists+0x64>)
 800e3da:	f7fd fe59 	bl	800c090 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3de:	480d      	ldr	r0, [pc, #52]	; (800e414 <prvInitialiseTaskLists+0x68>)
 800e3e0:	f7fd fe56 	bl	800c090 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3e4:	480c      	ldr	r0, [pc, #48]	; (800e418 <prvInitialiseTaskLists+0x6c>)
 800e3e6:	f7fd fe53 	bl	800c090 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e3ea:	480c      	ldr	r0, [pc, #48]	; (800e41c <prvInitialiseTaskLists+0x70>)
 800e3ec:	f7fd fe50 	bl	800c090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3f0:	480b      	ldr	r0, [pc, #44]	; (800e420 <prvInitialiseTaskLists+0x74>)
 800e3f2:	f7fd fe4d 	bl	800c090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3f6:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <prvInitialiseTaskLists+0x78>)
 800e3f8:	4a05      	ldr	r2, [pc, #20]	; (800e410 <prvInitialiseTaskLists+0x64>)
 800e3fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e3fc:	4b0a      	ldr	r3, [pc, #40]	; (800e428 <prvInitialiseTaskLists+0x7c>)
 800e3fe:	4a05      	ldr	r2, [pc, #20]	; (800e414 <prvInitialiseTaskLists+0x68>)
 800e400:	601a      	str	r2, [r3, #0]
}
 800e402:	bf00      	nop
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	240094cc 	.word	0x240094cc
 800e410:	2400992c 	.word	0x2400992c
 800e414:	24009940 	.word	0x24009940
 800e418:	2400995c 	.word	0x2400995c
 800e41c:	24009970 	.word	0x24009970
 800e420:	24009988 	.word	0x24009988
 800e424:	24009954 	.word	0x24009954
 800e428:	24009958 	.word	0x24009958

0800e42c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e432:	e019      	b.n	800e468 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e434:	f7fe f80e 	bl	800c454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e438:	4b10      	ldr	r3, [pc, #64]	; (800e47c <prvCheckTasksWaitingTermination+0x50>)
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	3304      	adds	r3, #4
 800e444:	4618      	mov	r0, r3
 800e446:	f7fd fead 	bl	800c1a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e44a:	4b0d      	ldr	r3, [pc, #52]	; (800e480 <prvCheckTasksWaitingTermination+0x54>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	3b01      	subs	r3, #1
 800e450:	4a0b      	ldr	r2, [pc, #44]	; (800e480 <prvCheckTasksWaitingTermination+0x54>)
 800e452:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e454:	4b0b      	ldr	r3, [pc, #44]	; (800e484 <prvCheckTasksWaitingTermination+0x58>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	3b01      	subs	r3, #1
 800e45a:	4a0a      	ldr	r2, [pc, #40]	; (800e484 <prvCheckTasksWaitingTermination+0x58>)
 800e45c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e45e:	f7fe f829 	bl	800c4b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f810 	bl	800e488 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e468:	4b06      	ldr	r3, [pc, #24]	; (800e484 <prvCheckTasksWaitingTermination+0x58>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1e1      	bne.n	800e434 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e470:	bf00      	nop
 800e472:	bf00      	nop
 800e474:	3708      	adds	r7, #8
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	24009970 	.word	0x24009970
 800e480:	2400999c 	.word	0x2400999c
 800e484:	24009984 	.word	0x24009984

0800e488 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e496:	2b00      	cmp	r3, #0
 800e498:	d108      	bne.n	800e4ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fd fcd8 	bl	800be54 <vPortFree>
				vPortFree( pxTCB );
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f7fd fcd5 	bl	800be54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4aa:	e018      	b.n	800e4de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d103      	bne.n	800e4be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7fd fccc 	bl	800be54 <vPortFree>
	}
 800e4bc:	e00f      	b.n	800e4de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d00a      	beq.n	800e4de <prvDeleteTCB+0x56>
	__asm volatile
 800e4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4cc:	f383 8811 	msr	BASEPRI, r3
 800e4d0:	f3bf 8f6f 	isb	sy
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	60fb      	str	r3, [r7, #12]
}
 800e4da:	bf00      	nop
 800e4dc:	e7fe      	b.n	800e4dc <prvDeleteTCB+0x54>
	}
 800e4de:	bf00      	nop
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
	...

0800e4e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4ee:	4b0c      	ldr	r3, [pc, #48]	; (800e520 <prvResetNextTaskUnblockTime+0x38>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d104      	bne.n	800e502 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4f8:	4b0a      	ldr	r3, [pc, #40]	; (800e524 <prvResetNextTaskUnblockTime+0x3c>)
 800e4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e500:	e008      	b.n	800e514 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e502:	4b07      	ldr	r3, [pc, #28]	; (800e520 <prvResetNextTaskUnblockTime+0x38>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	4a04      	ldr	r2, [pc, #16]	; (800e524 <prvResetNextTaskUnblockTime+0x3c>)
 800e512:	6013      	str	r3, [r2, #0]
}
 800e514:	bf00      	nop
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr
 800e520:	24009954 	.word	0x24009954
 800e524:	240099bc 	.word	0x240099bc

0800e528 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e52e:	4b05      	ldr	r3, [pc, #20]	; (800e544 <xTaskGetCurrentTaskHandle+0x1c>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e534:	687b      	ldr	r3, [r7, #4]
	}
 800e536:	4618      	mov	r0, r3
 800e538:	370c      	adds	r7, #12
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	240094c8 	.word	0x240094c8

0800e548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e54e:	4b0b      	ldr	r3, [pc, #44]	; (800e57c <xTaskGetSchedulerState+0x34>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d102      	bne.n	800e55c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e556:	2301      	movs	r3, #1
 800e558:	607b      	str	r3, [r7, #4]
 800e55a:	e008      	b.n	800e56e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e55c:	4b08      	ldr	r3, [pc, #32]	; (800e580 <xTaskGetSchedulerState+0x38>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d102      	bne.n	800e56a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e564:	2302      	movs	r3, #2
 800e566:	607b      	str	r3, [r7, #4]
 800e568:	e001      	b.n	800e56e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e56a:	2300      	movs	r3, #0
 800e56c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e56e:	687b      	ldr	r3, [r7, #4]
	}
 800e570:	4618      	mov	r0, r3
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	240099a8 	.word	0x240099a8
 800e580:	240099c4 	.word	0x240099c4

0800e584 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e590:	2300      	movs	r3, #0
 800e592:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d051      	beq.n	800e63e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e59e:	4b2a      	ldr	r3, [pc, #168]	; (800e648 <xTaskPriorityInherit+0xc4>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d241      	bcs.n	800e62c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	699b      	ldr	r3, [r3, #24]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	db06      	blt.n	800e5be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5b0:	4b25      	ldr	r3, [pc, #148]	; (800e648 <xTaskPriorityInherit+0xc4>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	6959      	ldr	r1, [r3, #20]
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c6:	4613      	mov	r3, r2
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	4413      	add	r3, r2
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	4a1f      	ldr	r2, [pc, #124]	; (800e64c <xTaskPriorityInherit+0xc8>)
 800e5d0:	4413      	add	r3, r2
 800e5d2:	4299      	cmp	r1, r3
 800e5d4:	d122      	bne.n	800e61c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	3304      	adds	r3, #4
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fd fde2 	bl	800c1a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5e0:	4b19      	ldr	r3, [pc, #100]	; (800e648 <xTaskPriorityInherit+0xc4>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ee:	4b18      	ldr	r3, [pc, #96]	; (800e650 <xTaskPriorityInherit+0xcc>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d903      	bls.n	800e5fe <xTaskPriorityInherit+0x7a>
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fa:	4a15      	ldr	r2, [pc, #84]	; (800e650 <xTaskPriorityInherit+0xcc>)
 800e5fc:	6013      	str	r3, [r2, #0]
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e602:	4613      	mov	r3, r2
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	4413      	add	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	4a10      	ldr	r2, [pc, #64]	; (800e64c <xTaskPriorityInherit+0xc8>)
 800e60c:	441a      	add	r2, r3
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	3304      	adds	r3, #4
 800e612:	4619      	mov	r1, r3
 800e614:	4610      	mov	r0, r2
 800e616:	f7fd fd68 	bl	800c0ea <vListInsertEnd>
 800e61a:	e004      	b.n	800e626 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e61c:	4b0a      	ldr	r3, [pc, #40]	; (800e648 <xTaskPriorityInherit+0xc4>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e626:	2301      	movs	r3, #1
 800e628:	60fb      	str	r3, [r7, #12]
 800e62a:	e008      	b.n	800e63e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e630:	4b05      	ldr	r3, [pc, #20]	; (800e648 <xTaskPriorityInherit+0xc4>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e636:	429a      	cmp	r2, r3
 800e638:	d201      	bcs.n	800e63e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e63a:	2301      	movs	r3, #1
 800e63c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e63e:	68fb      	ldr	r3, [r7, #12]
	}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	240094c8 	.word	0x240094c8
 800e64c:	240094cc 	.word	0x240094cc
 800e650:	240099a4 	.word	0x240099a4

0800e654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e660:	2300      	movs	r3, #0
 800e662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d056      	beq.n	800e718 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e66a:	4b2e      	ldr	r3, [pc, #184]	; (800e724 <xTaskPriorityDisinherit+0xd0>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	693a      	ldr	r2, [r7, #16]
 800e670:	429a      	cmp	r2, r3
 800e672:	d00a      	beq.n	800e68a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f3bf 8f4f 	dsb	sy
 800e684:	60fb      	str	r3, [r7, #12]
}
 800e686:	bf00      	nop
 800e688:	e7fe      	b.n	800e688 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10a      	bne.n	800e6a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e696:	f383 8811 	msr	BASEPRI, r3
 800e69a:	f3bf 8f6f 	isb	sy
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	60bb      	str	r3, [r7, #8]
}
 800e6a4:	bf00      	nop
 800e6a6:	e7fe      	b.n	800e6a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6ac:	1e5a      	subs	r2, r3, #1
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d02c      	beq.n	800e718 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d128      	bne.n	800e718 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	3304      	adds	r3, #4
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fd fd6a 	bl	800c1a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e8:	4b0f      	ldr	r3, [pc, #60]	; (800e728 <xTaskPriorityDisinherit+0xd4>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d903      	bls.n	800e6f8 <xTaskPriorityDisinherit+0xa4>
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f4:	4a0c      	ldr	r2, [pc, #48]	; (800e728 <xTaskPriorityDisinherit+0xd4>)
 800e6f6:	6013      	str	r3, [r2, #0]
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4a09      	ldr	r2, [pc, #36]	; (800e72c <xTaskPriorityDisinherit+0xd8>)
 800e706:	441a      	add	r2, r3
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	3304      	adds	r3, #4
 800e70c:	4619      	mov	r1, r3
 800e70e:	4610      	mov	r0, r2
 800e710:	f7fd fceb 	bl	800c0ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e714:	2301      	movs	r3, #1
 800e716:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e718:	697b      	ldr	r3, [r7, #20]
	}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3718      	adds	r7, #24
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	240094c8 	.word	0x240094c8
 800e728:	240099a4 	.word	0x240099a4
 800e72c:	240094cc 	.word	0x240094cc

0800e730 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e730:	b580      	push	{r7, lr}
 800e732:	b088      	sub	sp, #32
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e73e:	2301      	movs	r3, #1
 800e740:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d06a      	beq.n	800e81e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d10a      	bne.n	800e766 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	60fb      	str	r3, [r7, #12]
}
 800e762:	bf00      	nop
 800e764:	e7fe      	b.n	800e764 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e76a:	683a      	ldr	r2, [r7, #0]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d902      	bls.n	800e776 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	61fb      	str	r3, [r7, #28]
 800e774:	e002      	b.n	800e77c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e77a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e780:	69fa      	ldr	r2, [r7, #28]
 800e782:	429a      	cmp	r2, r3
 800e784:	d04b      	beq.n	800e81e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e78a:	697a      	ldr	r2, [r7, #20]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d146      	bne.n	800e81e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e790:	4b25      	ldr	r3, [pc, #148]	; (800e828 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	69ba      	ldr	r2, [r7, #24]
 800e796:	429a      	cmp	r2, r3
 800e798:	d10a      	bne.n	800e7b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	60bb      	str	r3, [r7, #8]
}
 800e7ac:	bf00      	nop
 800e7ae:	e7fe      	b.n	800e7ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	69fa      	ldr	r2, [r7, #28]
 800e7ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	699b      	ldr	r3, [r3, #24]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	db04      	blt.n	800e7ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	6959      	ldr	r1, [r3, #20]
 800e7d2:	693a      	ldr	r2, [r7, #16]
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	4413      	add	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4a13      	ldr	r2, [pc, #76]	; (800e82c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e7de:	4413      	add	r3, r2
 800e7e0:	4299      	cmp	r1, r3
 800e7e2:	d11c      	bne.n	800e81e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fd fcdb 	bl	800c1a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f2:	4b0f      	ldr	r3, [pc, #60]	; (800e830 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d903      	bls.n	800e802 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7fe:	4a0c      	ldr	r2, [pc, #48]	; (800e830 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e806:	4613      	mov	r3, r2
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	4413      	add	r3, r2
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	4a07      	ldr	r2, [pc, #28]	; (800e82c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e810:	441a      	add	r2, r3
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	3304      	adds	r3, #4
 800e816:	4619      	mov	r1, r3
 800e818:	4610      	mov	r0, r2
 800e81a:	f7fd fc66 	bl	800c0ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e81e:	bf00      	nop
 800e820:	3720      	adds	r7, #32
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	240094c8 	.word	0x240094c8
 800e82c:	240094cc 	.word	0x240094cc
 800e830:	240099a4 	.word	0x240099a4

0800e834 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e834:	b480      	push	{r7}
 800e836:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e838:	4b07      	ldr	r3, [pc, #28]	; (800e858 <pvTaskIncrementMutexHeldCount+0x24>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d004      	beq.n	800e84a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e840:	4b05      	ldr	r3, [pc, #20]	; (800e858 <pvTaskIncrementMutexHeldCount+0x24>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e846:	3201      	adds	r2, #1
 800e848:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e84a:	4b03      	ldr	r3, [pc, #12]	; (800e858 <pvTaskIncrementMutexHeldCount+0x24>)
 800e84c:	681b      	ldr	r3, [r3, #0]
	}
 800e84e:	4618      	mov	r0, r3
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	240094c8 	.word	0x240094c8

0800e85c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e866:	4b21      	ldr	r3, [pc, #132]	; (800e8ec <prvAddCurrentTaskToDelayedList+0x90>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e86c:	4b20      	ldr	r3, [pc, #128]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	3304      	adds	r3, #4
 800e872:	4618      	mov	r0, r3
 800e874:	f7fd fc96 	bl	800c1a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e87e:	d10a      	bne.n	800e896 <prvAddCurrentTaskToDelayedList+0x3a>
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d007      	beq.n	800e896 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e886:	4b1a      	ldr	r3, [pc, #104]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3304      	adds	r3, #4
 800e88c:	4619      	mov	r1, r3
 800e88e:	4819      	ldr	r0, [pc, #100]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800e890:	f7fd fc2b 	bl	800c0ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e894:	e026      	b.n	800e8e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4413      	add	r3, r2
 800e89c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e89e:	4b14      	ldr	r3, [pc, #80]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d209      	bcs.n	800e8c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8ae:	4b12      	ldr	r3, [pc, #72]	; (800e8f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	4b0f      	ldr	r3, [pc, #60]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	3304      	adds	r3, #4
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	f7fd fc39 	bl	800c132 <vListInsert>
}
 800e8c0:	e010      	b.n	800e8e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8c2:	4b0e      	ldr	r3, [pc, #56]	; (800e8fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	4b0a      	ldr	r3, [pc, #40]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	4610      	mov	r0, r2
 800e8d0:	f7fd fc2f 	bl	800c132 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8d4:	4b0a      	ldr	r3, [pc, #40]	; (800e900 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d202      	bcs.n	800e8e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8de:	4a08      	ldr	r2, [pc, #32]	; (800e900 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	6013      	str	r3, [r2, #0]
}
 800e8e4:	bf00      	nop
 800e8e6:	3710      	adds	r7, #16
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	240099a0 	.word	0x240099a0
 800e8f0:	240094c8 	.word	0x240094c8
 800e8f4:	24009988 	.word	0x24009988
 800e8f8:	24009958 	.word	0x24009958
 800e8fc:	24009954 	.word	0x24009954
 800e900:	240099bc 	.word	0x240099bc

0800e904 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b08a      	sub	sp, #40	; 0x28
 800e908:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e90a:	2300      	movs	r3, #0
 800e90c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e90e:	f000 fb09 	bl	800ef24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e912:	4b1c      	ldr	r3, [pc, #112]	; (800e984 <xTimerCreateTimerTask+0x80>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d021      	beq.n	800e95e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e91e:	2300      	movs	r3, #0
 800e920:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e922:	1d3a      	adds	r2, r7, #4
 800e924:	f107 0108 	add.w	r1, r7, #8
 800e928:	f107 030c 	add.w	r3, r7, #12
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fd f9a7 	bl	800bc80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e932:	6879      	ldr	r1, [r7, #4]
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	9202      	str	r2, [sp, #8]
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	2302      	movs	r3, #2
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	2300      	movs	r3, #0
 800e942:	460a      	mov	r2, r1
 800e944:	4910      	ldr	r1, [pc, #64]	; (800e988 <xTimerCreateTimerTask+0x84>)
 800e946:	4811      	ldr	r0, [pc, #68]	; (800e98c <xTimerCreateTimerTask+0x88>)
 800e948:	f7fe ffa6 	bl	800d898 <xTaskCreateStatic>
 800e94c:	4603      	mov	r3, r0
 800e94e:	4a10      	ldr	r2, [pc, #64]	; (800e990 <xTimerCreateTimerTask+0x8c>)
 800e950:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e952:	4b0f      	ldr	r3, [pc, #60]	; (800e990 <xTimerCreateTimerTask+0x8c>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e95a:	2301      	movs	r3, #1
 800e95c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d10a      	bne.n	800e97a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	613b      	str	r3, [r7, #16]
}
 800e976:	bf00      	nop
 800e978:	e7fe      	b.n	800e978 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e97a:	697b      	ldr	r3, [r7, #20]
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3718      	adds	r7, #24
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	240099f8 	.word	0x240099f8
 800e988:	080216ec 	.word	0x080216ec
 800e98c:	0800eac9 	.word	0x0800eac9
 800e990:	240099fc 	.word	0x240099fc

0800e994 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b08a      	sub	sp, #40	; 0x28
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	607a      	str	r2, [r7, #4]
 800e9a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10a      	bne.n	800e9c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b0:	f383 8811 	msr	BASEPRI, r3
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	623b      	str	r3, [r7, #32]
}
 800e9be:	bf00      	nop
 800e9c0:	e7fe      	b.n	800e9c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e9c2:	4b1a      	ldr	r3, [pc, #104]	; (800ea2c <xTimerGenericCommand+0x98>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d02a      	beq.n	800ea20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	2b05      	cmp	r3, #5
 800e9da:	dc18      	bgt.n	800ea0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9dc:	f7ff fdb4 	bl	800e548 <xTaskGetSchedulerState>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d109      	bne.n	800e9fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e9e6:	4b11      	ldr	r3, [pc, #68]	; (800ea2c <xTimerGenericCommand+0x98>)
 800e9e8:	6818      	ldr	r0, [r3, #0]
 800e9ea:	f107 0110 	add.w	r1, r7, #16
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9f2:	f7fe f8af 	bl	800cb54 <xQueueGenericSend>
 800e9f6:	6278      	str	r0, [r7, #36]	; 0x24
 800e9f8:	e012      	b.n	800ea20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e9fa:	4b0c      	ldr	r3, [pc, #48]	; (800ea2c <xTimerGenericCommand+0x98>)
 800e9fc:	6818      	ldr	r0, [r3, #0]
 800e9fe:	f107 0110 	add.w	r1, r7, #16
 800ea02:	2300      	movs	r3, #0
 800ea04:	2200      	movs	r2, #0
 800ea06:	f7fe f8a5 	bl	800cb54 <xQueueGenericSend>
 800ea0a:	6278      	str	r0, [r7, #36]	; 0x24
 800ea0c:	e008      	b.n	800ea20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea0e:	4b07      	ldr	r3, [pc, #28]	; (800ea2c <xTimerGenericCommand+0x98>)
 800ea10:	6818      	ldr	r0, [r3, #0]
 800ea12:	f107 0110 	add.w	r1, r7, #16
 800ea16:	2300      	movs	r3, #0
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	f7fe f999 	bl	800cd50 <xQueueGenericSendFromISR>
 800ea1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3728      	adds	r7, #40	; 0x28
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	240099f8 	.word	0x240099f8

0800ea30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b088      	sub	sp, #32
 800ea34:	af02      	add	r7, sp, #8
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea3a:	4b22      	ldr	r3, [pc, #136]	; (800eac4 <prvProcessExpiredTimer+0x94>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	3304      	adds	r3, #4
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7fd fbab 	bl	800c1a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea54:	f003 0304 	and.w	r3, r3, #4
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d022      	beq.n	800eaa2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	699a      	ldr	r2, [r3, #24]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	18d1      	adds	r1, r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	683a      	ldr	r2, [r7, #0]
 800ea68:	6978      	ldr	r0, [r7, #20]
 800ea6a:	f000 f8d3 	bl	800ec14 <prvInsertTimerInActiveList>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d01f      	beq.n	800eab4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea74:	2300      	movs	r3, #0
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	2300      	movs	r3, #0
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	2100      	movs	r1, #0
 800ea7e:	6978      	ldr	r0, [r7, #20]
 800ea80:	f7ff ff88 	bl	800e994 <xTimerGenericCommand>
 800ea84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d113      	bne.n	800eab4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ea8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea90:	f383 8811 	msr	BASEPRI, r3
 800ea94:	f3bf 8f6f 	isb	sy
 800ea98:	f3bf 8f4f 	dsb	sy
 800ea9c:	60fb      	str	r3, [r7, #12]
}
 800ea9e:	bf00      	nop
 800eaa0:	e7fe      	b.n	800eaa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaa8:	f023 0301 	bic.w	r3, r3, #1
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	6a1b      	ldr	r3, [r3, #32]
 800eab8:	6978      	ldr	r0, [r7, #20]
 800eaba:	4798      	blx	r3
}
 800eabc:	bf00      	nop
 800eabe:	3718      	adds	r7, #24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	240099f0 	.word	0x240099f0

0800eac8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800ead0:	f7f1 fe06 	bl	80006e0 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ead4:	f107 0308 	add.w	r3, r7, #8
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 f857 	bl	800eb8c <prvGetNextExpireTime>
 800eade:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	4619      	mov	r1, r3
 800eae4:	68f8      	ldr	r0, [r7, #12]
 800eae6:	f000 f803 	bl	800eaf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eaea:	f000 f8d5 	bl	800ec98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eaee:	e7f1      	b.n	800ead4 <prvTimerTask+0xc>

0800eaf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eafa:	f7ff f909 	bl	800dd10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eafe:	f107 0308 	add.w	r3, r7, #8
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 f866 	bl	800ebd4 <prvSampleTimeNow>
 800eb08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d130      	bne.n	800eb72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d10a      	bne.n	800eb2c <prvProcessTimerOrBlockTask+0x3c>
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d806      	bhi.n	800eb2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb1e:	f7ff f905 	bl	800dd2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb22:	68f9      	ldr	r1, [r7, #12]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7ff ff83 	bl	800ea30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb2a:	e024      	b.n	800eb76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d008      	beq.n	800eb44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb32:	4b13      	ldr	r3, [pc, #76]	; (800eb80 <prvProcessTimerOrBlockTask+0x90>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d101      	bne.n	800eb40 <prvProcessTimerOrBlockTask+0x50>
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	e000      	b.n	800eb42 <prvProcessTimerOrBlockTask+0x52>
 800eb40:	2300      	movs	r3, #0
 800eb42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb44:	4b0f      	ldr	r3, [pc, #60]	; (800eb84 <prvProcessTimerOrBlockTask+0x94>)
 800eb46:	6818      	ldr	r0, [r3, #0]
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	4619      	mov	r1, r3
 800eb52:	f7fe fe6d 	bl	800d830 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb56:	f7ff f8e9 	bl	800dd2c <xTaskResumeAll>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d10a      	bne.n	800eb76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb60:	4b09      	ldr	r3, [pc, #36]	; (800eb88 <prvProcessTimerOrBlockTask+0x98>)
 800eb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb66:	601a      	str	r2, [r3, #0]
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	f3bf 8f6f 	isb	sy
}
 800eb70:	e001      	b.n	800eb76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb72:	f7ff f8db 	bl	800dd2c <xTaskResumeAll>
}
 800eb76:	bf00      	nop
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	240099f4 	.word	0x240099f4
 800eb84:	240099f8 	.word	0x240099f8
 800eb88:	e000ed04 	.word	0xe000ed04

0800eb8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb94:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <prvGetNextExpireTime+0x44>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d101      	bne.n	800eba2 <prvGetNextExpireTime+0x16>
 800eb9e:	2201      	movs	r2, #1
 800eba0:	e000      	b.n	800eba4 <prvGetNextExpireTime+0x18>
 800eba2:	2200      	movs	r2, #0
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d105      	bne.n	800ebbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebb0:	4b07      	ldr	r3, [pc, #28]	; (800ebd0 <prvGetNextExpireTime+0x44>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	60fb      	str	r3, [r7, #12]
 800ebba:	e001      	b.n	800ebc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3714      	adds	r7, #20
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	240099f0 	.word	0x240099f0

0800ebd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ebdc:	f7ff f944 	bl	800de68 <xTaskGetTickCount>
 800ebe0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ebe2:	4b0b      	ldr	r3, [pc, #44]	; (800ec10 <prvSampleTimeNow+0x3c>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d205      	bcs.n	800ebf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ebec:	f000 f936 	bl	800ee5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	601a      	str	r2, [r3, #0]
 800ebf6:	e002      	b.n	800ebfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ebfe:	4a04      	ldr	r2, [pc, #16]	; (800ec10 <prvSampleTimeNow+0x3c>)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec04:	68fb      	ldr	r3, [r7, #12]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	24009a00 	.word	0x24009a00

0800ec14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
 800ec20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec22:	2300      	movs	r3, #0
 800ec24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d812      	bhi.n	800ec60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	1ad2      	subs	r2, r2, r3
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	699b      	ldr	r3, [r3, #24]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d302      	bcc.n	800ec4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	617b      	str	r3, [r7, #20]
 800ec4c:	e01b      	b.n	800ec86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec4e:	4b10      	ldr	r3, [pc, #64]	; (800ec90 <prvInsertTimerInActiveList+0x7c>)
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	3304      	adds	r3, #4
 800ec56:	4619      	mov	r1, r3
 800ec58:	4610      	mov	r0, r2
 800ec5a:	f7fd fa6a 	bl	800c132 <vListInsert>
 800ec5e:	e012      	b.n	800ec86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d206      	bcs.n	800ec76 <prvInsertTimerInActiveList+0x62>
 800ec68:	68ba      	ldr	r2, [r7, #8]
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d302      	bcc.n	800ec76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec70:	2301      	movs	r3, #1
 800ec72:	617b      	str	r3, [r7, #20]
 800ec74:	e007      	b.n	800ec86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec76:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <prvInsertTimerInActiveList+0x80>)
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	4619      	mov	r1, r3
 800ec80:	4610      	mov	r0, r2
 800ec82:	f7fd fa56 	bl	800c132 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec86:	697b      	ldr	r3, [r7, #20]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3718      	adds	r7, #24
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	240099f4 	.word	0x240099f4
 800ec94:	240099f0 	.word	0x240099f0

0800ec98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b08e      	sub	sp, #56	; 0x38
 800ec9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec9e:	e0ca      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	da18      	bge.n	800ecd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eca6:	1d3b      	adds	r3, r7, #4
 800eca8:	3304      	adds	r3, #4
 800ecaa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10a      	bne.n	800ecc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	61fb      	str	r3, [r7, #28]
}
 800ecc4:	bf00      	nop
 800ecc6:	e7fe      	b.n	800ecc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ecc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecce:	6850      	ldr	r0, [r2, #4]
 800ecd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecd2:	6892      	ldr	r2, [r2, #8]
 800ecd4:	4611      	mov	r1, r2
 800ecd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f2c0 80aa 	blt.w	800ee34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ece4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece6:	695b      	ldr	r3, [r3, #20]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecee:	3304      	adds	r3, #4
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fd fa57 	bl	800c1a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ecf6:	463b      	mov	r3, r7
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7ff ff6b 	bl	800ebd4 <prvSampleTimeNow>
 800ecfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b09      	cmp	r3, #9
 800ed04:	f200 8097 	bhi.w	800ee36 <prvProcessReceivedCommands+0x19e>
 800ed08:	a201      	add	r2, pc, #4	; (adr r2, 800ed10 <prvProcessReceivedCommands+0x78>)
 800ed0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0e:	bf00      	nop
 800ed10:	0800ed39 	.word	0x0800ed39
 800ed14:	0800ed39 	.word	0x0800ed39
 800ed18:	0800ed39 	.word	0x0800ed39
 800ed1c:	0800edad 	.word	0x0800edad
 800ed20:	0800edc1 	.word	0x0800edc1
 800ed24:	0800ee0b 	.word	0x0800ee0b
 800ed28:	0800ed39 	.word	0x0800ed39
 800ed2c:	0800ed39 	.word	0x0800ed39
 800ed30:	0800edad 	.word	0x0800edad
 800ed34:	0800edc1 	.word	0x0800edc1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed3e:	f043 0301 	orr.w	r3, r3, #1
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	699b      	ldr	r3, [r3, #24]
 800ed50:	18d1      	adds	r1, r2, r3
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed58:	f7ff ff5c 	bl	800ec14 <prvInsertTimerInActiveList>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d069      	beq.n	800ee36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed70:	f003 0304 	and.w	r3, r3, #4
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d05e      	beq.n	800ee36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7c:	699b      	ldr	r3, [r3, #24]
 800ed7e:	441a      	add	r2, r3
 800ed80:	2300      	movs	r3, #0
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	2300      	movs	r3, #0
 800ed86:	2100      	movs	r1, #0
 800ed88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed8a:	f7ff fe03 	bl	800e994 <xTimerGenericCommand>
 800ed8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed90:	6a3b      	ldr	r3, [r7, #32]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d14f      	bne.n	800ee36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ed96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9a:	f383 8811 	msr	BASEPRI, r3
 800ed9e:	f3bf 8f6f 	isb	sy
 800eda2:	f3bf 8f4f 	dsb	sy
 800eda6:	61bb      	str	r3, [r7, #24]
}
 800eda8:	bf00      	nop
 800edaa:	e7fe      	b.n	800edaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edb2:	f023 0301 	bic.w	r3, r3, #1
 800edb6:	b2da      	uxtb	r2, r3
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800edbe:	e03a      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edc6:	f043 0301 	orr.w	r3, r3, #1
 800edca:	b2da      	uxtb	r2, r3
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edda:	699b      	ldr	r3, [r3, #24]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d10a      	bne.n	800edf6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ede0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede4:	f383 8811 	msr	BASEPRI, r3
 800ede8:	f3bf 8f6f 	isb	sy
 800edec:	f3bf 8f4f 	dsb	sy
 800edf0:	617b      	str	r3, [r7, #20]
}
 800edf2:	bf00      	nop
 800edf4:	e7fe      	b.n	800edf4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800edf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf8:	699a      	ldr	r2, [r3, #24]
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	18d1      	adds	r1, r2, r3
 800edfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee04:	f7ff ff06 	bl	800ec14 <prvInsertTimerInActiveList>
					break;
 800ee08:	e015      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee10:	f003 0302 	and.w	r3, r3, #2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d103      	bne.n	800ee20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ee18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee1a:	f7fd f81b 	bl	800be54 <vPortFree>
 800ee1e:	e00a      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee26:	f023 0301 	bic.w	r3, r3, #1
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee32:	e000      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ee34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee36:	4b08      	ldr	r3, [pc, #32]	; (800ee58 <prvProcessReceivedCommands+0x1c0>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	1d39      	adds	r1, r7, #4
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fe f8ae 	bl	800cfa0 <xQueueReceive>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f47f af2a 	bne.w	800eca0 <prvProcessReceivedCommands+0x8>
	}
}
 800ee4c:	bf00      	nop
 800ee4e:	bf00      	nop
 800ee50:	3730      	adds	r7, #48	; 0x30
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	240099f8 	.word	0x240099f8

0800ee5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b088      	sub	sp, #32
 800ee60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee62:	e048      	b.n	800eef6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee64:	4b2d      	ldr	r3, [pc, #180]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	68db      	ldr	r3, [r3, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee6e:	4b2b      	ldr	r3, [pc, #172]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fd f991 	bl	800c1a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6a1b      	ldr	r3, [r3, #32]
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee90:	f003 0304 	and.w	r3, r3, #4
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d02e      	beq.n	800eef6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	699b      	ldr	r3, [r3, #24]
 800ee9c:	693a      	ldr	r2, [r7, #16]
 800ee9e:	4413      	add	r3, r2
 800eea0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d90e      	bls.n	800eec8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eeb6:	4b19      	ldr	r3, [pc, #100]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	3304      	adds	r3, #4
 800eebe:	4619      	mov	r1, r3
 800eec0:	4610      	mov	r0, r2
 800eec2:	f7fd f936 	bl	800c132 <vListInsert>
 800eec6:	e016      	b.n	800eef6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eec8:	2300      	movs	r3, #0
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	2300      	movs	r3, #0
 800eece:	693a      	ldr	r2, [r7, #16]
 800eed0:	2100      	movs	r1, #0
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f7ff fd5e 	bl	800e994 <xTimerGenericCommand>
 800eed8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	603b      	str	r3, [r7, #0]
}
 800eef2:	bf00      	nop
 800eef4:	e7fe      	b.n	800eef4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eef6:	4b09      	ldr	r3, [pc, #36]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1b1      	bne.n	800ee64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef00:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef06:	4b06      	ldr	r3, [pc, #24]	; (800ef20 <prvSwitchTimerLists+0xc4>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a04      	ldr	r2, [pc, #16]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800ef0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef0e:	4a04      	ldr	r2, [pc, #16]	; (800ef20 <prvSwitchTimerLists+0xc4>)
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	6013      	str	r3, [r2, #0]
}
 800ef14:	bf00      	nop
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	240099f0 	.word	0x240099f0
 800ef20:	240099f4 	.word	0x240099f4

0800ef24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef2a:	f7fd fa93 	bl	800c454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef2e:	4b15      	ldr	r3, [pc, #84]	; (800ef84 <prvCheckForValidListAndQueue+0x60>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d120      	bne.n	800ef78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef36:	4814      	ldr	r0, [pc, #80]	; (800ef88 <prvCheckForValidListAndQueue+0x64>)
 800ef38:	f7fd f8aa 	bl	800c090 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef3c:	4813      	ldr	r0, [pc, #76]	; (800ef8c <prvCheckForValidListAndQueue+0x68>)
 800ef3e:	f7fd f8a7 	bl	800c090 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef42:	4b13      	ldr	r3, [pc, #76]	; (800ef90 <prvCheckForValidListAndQueue+0x6c>)
 800ef44:	4a10      	ldr	r2, [pc, #64]	; (800ef88 <prvCheckForValidListAndQueue+0x64>)
 800ef46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef48:	4b12      	ldr	r3, [pc, #72]	; (800ef94 <prvCheckForValidListAndQueue+0x70>)
 800ef4a:	4a10      	ldr	r2, [pc, #64]	; (800ef8c <prvCheckForValidListAndQueue+0x68>)
 800ef4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef4e:	2300      	movs	r3, #0
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	4b11      	ldr	r3, [pc, #68]	; (800ef98 <prvCheckForValidListAndQueue+0x74>)
 800ef54:	4a11      	ldr	r2, [pc, #68]	; (800ef9c <prvCheckForValidListAndQueue+0x78>)
 800ef56:	2110      	movs	r1, #16
 800ef58:	200a      	movs	r0, #10
 800ef5a:	f7fd fc05 	bl	800c768 <xQueueGenericCreateStatic>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	4a08      	ldr	r2, [pc, #32]	; (800ef84 <prvCheckForValidListAndQueue+0x60>)
 800ef62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef64:	4b07      	ldr	r3, [pc, #28]	; (800ef84 <prvCheckForValidListAndQueue+0x60>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d005      	beq.n	800ef78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef6c:	4b05      	ldr	r3, [pc, #20]	; (800ef84 <prvCheckForValidListAndQueue+0x60>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	490b      	ldr	r1, [pc, #44]	; (800efa0 <prvCheckForValidListAndQueue+0x7c>)
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7fe fc08 	bl	800d788 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef78:	f7fd fa9c 	bl	800c4b4 <vPortExitCritical>
}
 800ef7c:	bf00      	nop
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	240099f8 	.word	0x240099f8
 800ef88:	240099c8 	.word	0x240099c8
 800ef8c:	240099dc 	.word	0x240099dc
 800ef90:	240099f0 	.word	0x240099f0
 800ef94:	240099f4 	.word	0x240099f4
 800ef98:	24009aa4 	.word	0x24009aa4
 800ef9c:	24009a04 	.word	0x24009a04
 800efa0:	080216f4 	.word	0x080216f4

0800efa4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	330c      	adds	r3, #12
 800efb4:	461a      	mov	r2, r3
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f010 fa19 	bl	801f3f0 <tcpip_send_msg_wait_sem>
 800efbe:	4603      	mov	r3, r0
 800efc0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800efc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d103      	bne.n	800efd2 <netconn_apimsg+0x2e>
    return apimsg->err;
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800efd0:	e001      	b.n	800efd6 <netconn_apimsg+0x32>
  }
  return err;
 800efd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
	...

0800efe0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b08c      	sub	sp, #48	; 0x30
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	4603      	mov	r3, r0
 800efe8:	603a      	str	r2, [r7, #0]
 800efea:	71fb      	strb	r3, [r7, #7]
 800efec:	460b      	mov	r3, r1
 800efee:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800eff0:	79fb      	ldrb	r3, [r7, #7]
 800eff2:	6839      	ldr	r1, [r7, #0]
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 fdd5 	bl	800fba4 <netconn_alloc>
 800effa:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800effc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effe:	2b00      	cmp	r3, #0
 800f000:	d054      	beq.n	800f0ac <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800f002:	79bb      	ldrb	r3, [r7, #6]
 800f004:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800f006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f008:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800f00a:	f107 0308 	add.w	r3, r7, #8
 800f00e:	4619      	mov	r1, r3
 800f010:	4829      	ldr	r0, [pc, #164]	; (800f0b8 <netconn_new_with_proto_and_callback+0xd8>)
 800f012:	f7ff ffc7 	bl	800efa4 <netconn_apimsg>
 800f016:	4603      	mov	r3, r0
 800f018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800f01c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f020:	2b00      	cmp	r3, #0
 800f022:	d043      	beq.n	800f0ac <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d005      	beq.n	800f038 <netconn_new_with_proto_and_callback+0x58>
 800f02c:	4b23      	ldr	r3, [pc, #140]	; (800f0bc <netconn_new_with_proto_and_callback+0xdc>)
 800f02e:	22a3      	movs	r2, #163	; 0xa3
 800f030:	4923      	ldr	r1, [pc, #140]	; (800f0c0 <netconn_new_with_proto_and_callback+0xe0>)
 800f032:	4824      	ldr	r0, [pc, #144]	; (800f0c4 <netconn_new_with_proto_and_callback+0xe4>)
 800f034:	f011 fa8c 	bl	8020550 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	3310      	adds	r3, #16
 800f03c:	4618      	mov	r0, r3
 800f03e:	f009 fdcb 	bl	8018bd8 <sys_mbox_valid>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d105      	bne.n	800f054 <netconn_new_with_proto_and_callback+0x74>
 800f048:	4b1c      	ldr	r3, [pc, #112]	; (800f0bc <netconn_new_with_proto_and_callback+0xdc>)
 800f04a:	22a4      	movs	r2, #164	; 0xa4
 800f04c:	491e      	ldr	r1, [pc, #120]	; (800f0c8 <netconn_new_with_proto_and_callback+0xe8>)
 800f04e:	481d      	ldr	r0, [pc, #116]	; (800f0c4 <netconn_new_with_proto_and_callback+0xe4>)
 800f050:	f011 fa7e 	bl	8020550 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800f054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f056:	3314      	adds	r3, #20
 800f058:	4618      	mov	r0, r3
 800f05a:	f009 fdbd 	bl	8018bd8 <sys_mbox_valid>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	d005      	beq.n	800f070 <netconn_new_with_proto_and_callback+0x90>
 800f064:	4b15      	ldr	r3, [pc, #84]	; (800f0bc <netconn_new_with_proto_and_callback+0xdc>)
 800f066:	22a6      	movs	r2, #166	; 0xa6
 800f068:	4918      	ldr	r1, [pc, #96]	; (800f0cc <netconn_new_with_proto_and_callback+0xec>)
 800f06a:	4816      	ldr	r0, [pc, #88]	; (800f0c4 <netconn_new_with_proto_and_callback+0xe4>)
 800f06c:	f011 fa70 	bl	8020550 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	330c      	adds	r3, #12
 800f074:	4618      	mov	r0, r3
 800f076:	f009 fe3d 	bl	8018cf4 <sys_sem_valid>
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d105      	bne.n	800f08c <netconn_new_with_proto_and_callback+0xac>
 800f080:	4b0e      	ldr	r3, [pc, #56]	; (800f0bc <netconn_new_with_proto_and_callback+0xdc>)
 800f082:	22a9      	movs	r2, #169	; 0xa9
 800f084:	4912      	ldr	r1, [pc, #72]	; (800f0d0 <netconn_new_with_proto_and_callback+0xf0>)
 800f086:	480f      	ldr	r0, [pc, #60]	; (800f0c4 <netconn_new_with_proto_and_callback+0xe4>)
 800f088:	f011 fa62 	bl	8020550 <iprintf>
      sys_sem_free(&conn->op_completed);
 800f08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08e:	330c      	adds	r3, #12
 800f090:	4618      	mov	r0, r3
 800f092:	f009 fe22 	bl	8018cda <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800f096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f098:	3310      	adds	r3, #16
 800f09a:	4618      	mov	r0, r3
 800f09c:	f009 fd28 	bl	8018af0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800f0a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0a2:	2007      	movs	r0, #7
 800f0a4:	f007 f9f6 	bl	8016494 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	e000      	b.n	800f0ae <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3730      	adds	r7, #48	; 0x30
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	0800fb79 	.word	0x0800fb79
 800f0bc:	080216fc 	.word	0x080216fc
 800f0c0:	08021738 	.word	0x08021738
 800f0c4:	0802175c 	.word	0x0802175c
 800f0c8:	08021784 	.word	0x08021784
 800f0cc:	0802179c 	.word	0x0802179c
 800f0d0:	080217c0 	.word	0x080217c0

0800f0d4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b08c      	sub	sp, #48	; 0x30
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d101      	bne.n	800f0e6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	e014      	b.n	800f110 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f0ea:	2329      	movs	r3, #41	; 0x29
 800f0ec:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800f0ee:	f107 030c 	add.w	r3, r7, #12
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	4808      	ldr	r0, [pc, #32]	; (800f118 <netconn_prepare_delete+0x44>)
 800f0f6:	f7ff ff55 	bl	800efa4 <netconn_apimsg>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800f100:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f104:	2b00      	cmp	r3, #0
 800f106:	d002      	beq.n	800f10e <netconn_prepare_delete+0x3a>
    return err;
 800f108:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f10c:	e000      	b.n	800f110 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3730      	adds	r7, #48	; 0x30
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	080100e5 	.word	0x080100e5

0800f11c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d101      	bne.n	800f12e <netconn_delete+0x12>
    return ERR_OK;
 800f12a:	2300      	movs	r3, #0
 800f12c:	e00d      	b.n	800f14a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff ffd0 	bl	800f0d4 <netconn_prepare_delete>
 800f134:	4603      	mov	r3, r0
 800f136:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800f138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <netconn_delete+0x2a>
    netconn_free(conn);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 fd9d 	bl	800fc80 <netconn_free>
  }
  return err;
 800f146:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
	...

0800f154 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b08e      	sub	sp, #56	; 0x38
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	4613      	mov	r3, r2
 800f160:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d109      	bne.n	800f17c <netconn_connect+0x28>
 800f168:	4b11      	ldr	r3, [pc, #68]	; (800f1b0 <netconn_connect+0x5c>)
 800f16a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800f16e:	4911      	ldr	r1, [pc, #68]	; (800f1b4 <netconn_connect+0x60>)
 800f170:	4811      	ldr	r0, [pc, #68]	; (800f1b8 <netconn_connect+0x64>)
 800f172:	f011 f9ed 	bl	8020550 <iprintf>
 800f176:	f06f 030f 	mvn.w	r3, #15
 800f17a:	e015      	b.n	800f1a8 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d101      	bne.n	800f186 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800f182:	4b0e      	ldr	r3, [pc, #56]	; (800f1bc <netconn_connect+0x68>)
 800f184:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800f18e:	88fb      	ldrh	r3, [r7, #6]
 800f190:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800f192:	f107 0314 	add.w	r3, r7, #20
 800f196:	4619      	mov	r1, r3
 800f198:	4809      	ldr	r0, [pc, #36]	; (800f1c0 <netconn_connect+0x6c>)
 800f19a:	f7ff ff03 	bl	800efa4 <netconn_apimsg>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800f1a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3738      	adds	r7, #56	; 0x38
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	080216fc 	.word	0x080216fc
 800f1b4:	08021878 	.word	0x08021878
 800f1b8:	0802175c 	.word	0x0802175c
 800f1bc:	08025de8 	.word	0x08025de8
 800f1c0:	080103cd 	.word	0x080103cd

0800f1c4 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b08c      	sub	sp, #48	; 0x30
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d109      	bne.n	800f1e6 <netconn_disconnect+0x22>
 800f1d2:	4b0d      	ldr	r3, [pc, #52]	; (800f208 <netconn_disconnect+0x44>)
 800f1d4:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f1d8:	490c      	ldr	r1, [pc, #48]	; (800f20c <netconn_disconnect+0x48>)
 800f1da:	480d      	ldr	r0, [pc, #52]	; (800f210 <netconn_disconnect+0x4c>)
 800f1dc:	f011 f9b8 	bl	8020550 <iprintf>
 800f1e0:	f06f 030f 	mvn.w	r3, #15
 800f1e4:	e00c      	b.n	800f200 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800f1ea:	f107 030c 	add.w	r3, r7, #12
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	4808      	ldr	r0, [pc, #32]	; (800f214 <netconn_disconnect+0x50>)
 800f1f2:	f7ff fed7 	bl	800efa4 <netconn_apimsg>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f1fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f200:	4618      	mov	r0, r3
 800f202:	3730      	adds	r7, #48	; 0x30
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	080216fc 	.word	0x080216fc
 800f20c:	08021898 	.word	0x08021898
 800f210:	0802175c 	.word	0x0802175c
 800f214:	08010549 	.word	0x08010549

0800f218 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b08c      	sub	sp, #48	; 0x30
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d109      	bne.n	800f23c <netconn_send+0x24>
 800f228:	4b0e      	ldr	r3, [pc, #56]	; (800f264 <netconn_send+0x4c>)
 800f22a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800f22e:	490e      	ldr	r1, [pc, #56]	; (800f268 <netconn_send+0x50>)
 800f230:	480e      	ldr	r0, [pc, #56]	; (800f26c <netconn_send+0x54>)
 800f232:	f011 f98d 	bl	8020550 <iprintf>
 800f236:	f06f 030f 	mvn.w	r3, #15
 800f23a:	e00e      	b.n	800f25a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800f244:	f107 030c 	add.w	r3, r7, #12
 800f248:	4619      	mov	r1, r3
 800f24a:	4809      	ldr	r0, [pc, #36]	; (800f270 <netconn_send+0x58>)
 800f24c:	f7ff feaa 	bl	800efa4 <netconn_apimsg>
 800f250:	4603      	mov	r3, r0
 800f252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f256:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3730      	adds	r7, #48	; 0x30
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	080216fc 	.word	0x080216fc
 800f268:	080219c0 	.word	0x080219c0
 800f26c:	0802175c 	.word	0x0802175c
 800f270:	08010585 	.word	0x08010585

0800f274 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b088      	sub	sp, #32
 800f278:	af02      	add	r7, sp, #8
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800f28a:	78fa      	ldrb	r2, [r7, #3]
 800f28c:	f107 0110 	add.w	r1, r7, #16
 800f290:	6a3b      	ldr	r3, [r7, #32]
 800f292:	9300      	str	r3, [sp, #0]
 800f294:	4613      	mov	r3, r2
 800f296:	2201      	movs	r2, #1
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f000 f805 	bl	800f2a8 <netconn_write_vectors_partly>
 800f29e:	4603      	mov	r3, r0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3718      	adds	r7, #24
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b092      	sub	sp, #72	; 0x48
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	80fb      	strh	r3, [r7, #6]
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d109      	bne.n	800f2d8 <netconn_write_vectors_partly+0x30>
 800f2c4:	4b4e      	ldr	r3, [pc, #312]	; (800f400 <netconn_write_vectors_partly+0x158>)
 800f2c6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f2ca:	494e      	ldr	r1, [pc, #312]	; (800f404 <netconn_write_vectors_partly+0x15c>)
 800f2cc:	484e      	ldr	r0, [pc, #312]	; (800f408 <netconn_write_vectors_partly+0x160>)
 800f2ce:	f011 f93f 	bl	8020550 <iprintf>
 800f2d2:	f06f 030f 	mvn.w	r3, #15
 800f2d6:	e08e      	b.n	800f3f6 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2e0:	2b10      	cmp	r3, #16
 800f2e2:	d009      	beq.n	800f2f8 <netconn_write_vectors_partly+0x50>
 800f2e4:	4b46      	ldr	r3, [pc, #280]	; (800f400 <netconn_write_vectors_partly+0x158>)
 800f2e6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f2ea:	4948      	ldr	r1, [pc, #288]	; (800f40c <netconn_write_vectors_partly+0x164>)
 800f2ec:	4846      	ldr	r0, [pc, #280]	; (800f408 <netconn_write_vectors_partly+0x160>)
 800f2ee:	f011 f92f 	bl	8020550 <iprintf>
 800f2f2:	f06f 0305 	mvn.w	r3, #5
 800f2f6:	e07e      	b.n	800f3f6 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	7f1b      	ldrb	r3, [r3, #28]
 800f2fc:	f003 0302 	and.w	r3, r3, #2
 800f300:	2b00      	cmp	r3, #0
 800f302:	d104      	bne.n	800f30e <netconn_write_vectors_partly+0x66>
 800f304:	797b      	ldrb	r3, [r7, #5]
 800f306:	f003 0304 	and.w	r3, r3, #4
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d001      	beq.n	800f312 <netconn_write_vectors_partly+0x6a>
 800f30e:	2301      	movs	r3, #1
 800f310:	e000      	b.n	800f314 <netconn_write_vectors_partly+0x6c>
 800f312:	2300      	movs	r3, #0
 800f314:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800f318:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d005      	beq.n	800f32c <netconn_write_vectors_partly+0x84>
 800f320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f322:	2b00      	cmp	r3, #0
 800f324:	d102      	bne.n	800f32c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800f326:	f06f 0305 	mvn.w	r3, #5
 800f32a:	e064      	b.n	800f3f6 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800f32c:	2300      	movs	r3, #0
 800f32e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800f330:	2300      	movs	r3, #0
 800f332:	643b      	str	r3, [r7, #64]	; 0x40
 800f334:	e015      	b.n	800f362 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800f336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f338:	00db      	lsls	r3, r3, #3
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	4413      	add	r3, r2
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f342:	4413      	add	r3, r2
 800f344:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800f346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f348:	00db      	lsls	r3, r3, #3
 800f34a:	68ba      	ldr	r2, [r7, #8]
 800f34c:	4413      	add	r3, r2
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f352:	429a      	cmp	r2, r3
 800f354:	d202      	bcs.n	800f35c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f356:	f06f 0305 	mvn.w	r3, #5
 800f35a:	e04c      	b.n	800f3f6 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f35e:	3301      	adds	r3, #1
 800f360:	643b      	str	r3, [r7, #64]	; 0x40
 800f362:	88fb      	ldrh	r3, [r7, #6]
 800f364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f366:	429a      	cmp	r2, r3
 800f368:	dbe5      	blt.n	800f336 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f36a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d101      	bne.n	800f374 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f370:	2300      	movs	r3, #0
 800f372:	e040      	b.n	800f3f6 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f376:	2b00      	cmp	r3, #0
 800f378:	da0a      	bge.n	800f390 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d102      	bne.n	800f386 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f380:	f06f 0305 	mvn.w	r3, #5
 800f384:	e037      	b.n	800f3f6 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f386:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f38a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800f38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f398:	88fb      	ldrh	r3, [r7, #6]
 800f39a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f39c:	2300      	movs	r3, #0
 800f39e:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f3a0:	797b      	ldrb	r3, [r7, #5]
 800f3a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f3a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3a8:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f3ae:	f107 0314 	add.w	r3, r7, #20
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	4816      	ldr	r0, [pc, #88]	; (800f410 <netconn_write_vectors_partly+0x168>)
 800f3b6:	f7ff fdf5 	bl	800efa4 <netconn_apimsg>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800f3c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d114      	bne.n	800f3f2 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f3c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d002      	beq.n	800f3d4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f3ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3d2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f3d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d10a      	bne.n	800f3f2 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d006      	beq.n	800f3f2 <netconn_write_vectors_partly+0x14a>
 800f3e4:	4b06      	ldr	r3, [pc, #24]	; (800f400 <netconn_write_vectors_partly+0x158>)
 800f3e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f3ea:	490a      	ldr	r1, [pc, #40]	; (800f414 <netconn_write_vectors_partly+0x16c>)
 800f3ec:	4806      	ldr	r0, [pc, #24]	; (800f408 <netconn_write_vectors_partly+0x160>)
 800f3ee:	f011 f8af 	bl	8020550 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f3f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3748      	adds	r7, #72	; 0x48
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	080216fc 	.word	0x080216fc
 800f404:	080219dc 	.word	0x080219dc
 800f408:	0802175c 	.word	0x0802175c
 800f40c:	080219f8 	.word	0x080219f8
 800f410:	080109b9 	.word	0x080109b9
 800f414:	08021a1c 	.word	0x08021a1c

0800f418 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <netconn_err+0x12>
    return ERR_OK;
 800f426:	2300      	movs	r3, #0
 800f428:	e00d      	b.n	800f446 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f42a:	f009 fcdf 	bl	8018dec <sys_arch_protect>
 800f42e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	7a1b      	ldrb	r3, [r3, #8]
 800f434:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f009 fce3 	bl	8018e08 <sys_arch_unprotect>
  return err;
 800f442:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
	...

0800f450 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	4603      	mov	r3, r0
 800f458:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f45e:	f113 0f0d 	cmn.w	r3, #13
 800f462:	d009      	beq.n	800f478 <lwip_netconn_err_to_msg+0x28>
 800f464:	f113 0f0d 	cmn.w	r3, #13
 800f468:	dc0c      	bgt.n	800f484 <lwip_netconn_err_to_msg+0x34>
 800f46a:	f113 0f0f 	cmn.w	r3, #15
 800f46e:	d007      	beq.n	800f480 <lwip_netconn_err_to_msg+0x30>
 800f470:	f113 0f0e 	cmn.w	r3, #14
 800f474:	d002      	beq.n	800f47c <lwip_netconn_err_to_msg+0x2c>
 800f476:	e005      	b.n	800f484 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f478:	4b0a      	ldr	r3, [pc, #40]	; (800f4a4 <lwip_netconn_err_to_msg+0x54>)
 800f47a:	e00e      	b.n	800f49a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f47c:	4b0a      	ldr	r3, [pc, #40]	; (800f4a8 <lwip_netconn_err_to_msg+0x58>)
 800f47e:	e00c      	b.n	800f49a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f480:	4b0a      	ldr	r3, [pc, #40]	; (800f4ac <lwip_netconn_err_to_msg+0x5c>)
 800f482:	e00a      	b.n	800f49a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d005      	beq.n	800f498 <lwip_netconn_err_to_msg+0x48>
 800f48c:	4b08      	ldr	r3, [pc, #32]	; (800f4b0 <lwip_netconn_err_to_msg+0x60>)
 800f48e:	227d      	movs	r2, #125	; 0x7d
 800f490:	4908      	ldr	r1, [pc, #32]	; (800f4b4 <lwip_netconn_err_to_msg+0x64>)
 800f492:	4809      	ldr	r0, [pc, #36]	; (800f4b8 <lwip_netconn_err_to_msg+0x68>)
 800f494:	f011 f85c 	bl	8020550 <iprintf>
      return NULL;
 800f498:	2300      	movs	r3, #0
  }
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3708      	adds	r7, #8
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	08025d90 	.word	0x08025d90
 800f4a8:	08025d91 	.word	0x08025d91
 800f4ac:	08025d92 	.word	0x08025d92
 800f4b0:	08021aa4 	.word	0x08021aa4
 800f4b4:	08021ae0 	.word	0x08021ae0
 800f4b8:	08021af0 	.word	0x08021af0

0800f4bc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d105      	bne.n	800f4d8 <lwip_netconn_is_err_msg+0x1c>
 800f4cc:	4b12      	ldr	r3, [pc, #72]	; (800f518 <lwip_netconn_is_err_msg+0x5c>)
 800f4ce:	2285      	movs	r2, #133	; 0x85
 800f4d0:	4912      	ldr	r1, [pc, #72]	; (800f51c <lwip_netconn_is_err_msg+0x60>)
 800f4d2:	4813      	ldr	r0, [pc, #76]	; (800f520 <lwip_netconn_is_err_msg+0x64>)
 800f4d4:	f011 f83c 	bl	8020550 <iprintf>

  if (msg == &netconn_aborted) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a12      	ldr	r2, [pc, #72]	; (800f524 <lwip_netconn_is_err_msg+0x68>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d104      	bne.n	800f4ea <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	22f3      	movs	r2, #243	; 0xf3
 800f4e4:	701a      	strb	r2, [r3, #0]
    return 1;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e012      	b.n	800f510 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a0e      	ldr	r2, [pc, #56]	; (800f528 <lwip_netconn_is_err_msg+0x6c>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d104      	bne.n	800f4fc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	22f2      	movs	r2, #242	; 0xf2
 800f4f6:	701a      	strb	r2, [r3, #0]
    return 1;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e009      	b.n	800f510 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a0b      	ldr	r2, [pc, #44]	; (800f52c <lwip_netconn_is_err_msg+0x70>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d104      	bne.n	800f50e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	22f1      	movs	r2, #241	; 0xf1
 800f508:	701a      	strb	r2, [r3, #0]
    return 1;
 800f50a:	2301      	movs	r3, #1
 800f50c:	e000      	b.n	800f510 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	08021aa4 	.word	0x08021aa4
 800f51c:	08021b18 	.word	0x08021b18
 800f520:	08021af0 	.word	0x08021af0
 800f524:	08025d90 	.word	0x08025d90
 800f528:	08025d91 	.word	0x08025d91
 800f52c:	08025d92 	.word	0x08025d92

0800f530 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b088      	sub	sp, #32
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	607a      	str	r2, [r7, #4]
 800f53c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d105      	bne.n	800f550 <recv_udp+0x20>
 800f544:	4b34      	ldr	r3, [pc, #208]	; (800f618 <recv_udp+0xe8>)
 800f546:	22e5      	movs	r2, #229	; 0xe5
 800f548:	4934      	ldr	r1, [pc, #208]	; (800f61c <recv_udp+0xec>)
 800f54a:	4835      	ldr	r0, [pc, #212]	; (800f620 <recv_udp+0xf0>)
 800f54c:	f011 f800 	bl	8020550 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d105      	bne.n	800f562 <recv_udp+0x32>
 800f556:	4b30      	ldr	r3, [pc, #192]	; (800f618 <recv_udp+0xe8>)
 800f558:	22e6      	movs	r2, #230	; 0xe6
 800f55a:	4932      	ldr	r1, [pc, #200]	; (800f624 <recv_udp+0xf4>)
 800f55c:	4830      	ldr	r0, [pc, #192]	; (800f620 <recv_udp+0xf0>)
 800f55e:	f010 fff7 	bl	8020550 <iprintf>
  conn = (struct netconn *)arg;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d103      	bne.n	800f574 <recv_udp+0x44>
    pbuf_free(p);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f008 f8fd 	bl	801776c <pbuf_free>
    return;
 800f572:	e04d      	b.n	800f610 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	68ba      	ldr	r2, [r7, #8]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d005      	beq.n	800f58a <recv_udp+0x5a>
 800f57e:	4b26      	ldr	r3, [pc, #152]	; (800f618 <recv_udp+0xe8>)
 800f580:	22ee      	movs	r2, #238	; 0xee
 800f582:	4929      	ldr	r1, [pc, #164]	; (800f628 <recv_udp+0xf8>)
 800f584:	4826      	ldr	r0, [pc, #152]	; (800f620 <recv_udp+0xf0>)
 800f586:	f010 ffe3 	bl	8020550 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	3310      	adds	r3, #16
 800f58e:	4618      	mov	r0, r3
 800f590:	f009 fb22 	bl	8018bd8 <sys_mbox_valid>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d103      	bne.n	800f5a2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f008 f8e6 	bl	801776c <pbuf_free>
    return;
 800f5a0:	e036      	b.n	800f610 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f5a2:	2006      	movs	r0, #6
 800f5a4:	f006 ff00 	bl	80163a8 <memp_malloc>
 800f5a8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d103      	bne.n	800f5b8 <recv_udp+0x88>
    pbuf_free(p);
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f008 f8db 	bl	801776c <pbuf_free>
    return;
 800f5b6:	e02b      	b.n	800f610 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d002      	beq.n	800f5d0 <recv_udp+0xa0>
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	e000      	b.n	800f5d2 <recv_udp+0xa2>
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	69ba      	ldr	r2, [r7, #24]
 800f5d4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f5da:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	891b      	ldrh	r3, [r3, #8]
 800f5e0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	3310      	adds	r3, #16
 800f5e6:	69b9      	ldr	r1, [r7, #24]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f009 fa93 	bl	8018b14 <sys_mbox_trypost>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d003      	beq.n	800f5fc <recv_udp+0xcc>
    netbuf_delete(buf);
 800f5f4:	69b8      	ldr	r0, [r7, #24]
 800f5f6:	f006 ff77 	bl	80164e8 <netbuf_delete>
    return;
 800f5fa:	e009      	b.n	800f610 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f600:	2b00      	cmp	r3, #0
 800f602:	d005      	beq.n	800f610 <recv_udp+0xe0>
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f608:	8afa      	ldrh	r2, [r7, #22]
 800f60a:	2100      	movs	r1, #0
 800f60c:	69f8      	ldr	r0, [r7, #28]
 800f60e:	4798      	blx	r3
  }
}
 800f610:	3720      	adds	r7, #32
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	08021aa4 	.word	0x08021aa4
 800f61c:	08021b24 	.word	0x08021b24
 800f620:	08021af0 	.word	0x08021af0
 800f624:	08021b48 	.word	0x08021b48
 800f628:	08021b68 	.word	0x08021b68

0800f62c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b088      	sub	sp, #32
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
 800f638:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d106      	bne.n	800f64e <recv_tcp+0x22>
 800f640:	4b36      	ldr	r3, [pc, #216]	; (800f71c <recv_tcp+0xf0>)
 800f642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f646:	4936      	ldr	r1, [pc, #216]	; (800f720 <recv_tcp+0xf4>)
 800f648:	4836      	ldr	r0, [pc, #216]	; (800f724 <recv_tcp+0xf8>)
 800f64a:	f010 ff81 	bl	8020550 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d106      	bne.n	800f662 <recv_tcp+0x36>
 800f654:	4b31      	ldr	r3, [pc, #196]	; (800f71c <recv_tcp+0xf0>)
 800f656:	f240 122d 	movw	r2, #301	; 0x12d
 800f65a:	4933      	ldr	r1, [pc, #204]	; (800f728 <recv_tcp+0xfc>)
 800f65c:	4831      	ldr	r0, [pc, #196]	; (800f724 <recv_tcp+0xf8>)
 800f65e:	f010 ff77 	bl	8020550 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d006      	beq.n	800f678 <recv_tcp+0x4c>
 800f66a:	4b2c      	ldr	r3, [pc, #176]	; (800f71c <recv_tcp+0xf0>)
 800f66c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f670:	492e      	ldr	r1, [pc, #184]	; (800f72c <recv_tcp+0x100>)
 800f672:	482c      	ldr	r0, [pc, #176]	; (800f724 <recv_tcp+0xf8>)
 800f674:	f010 ff6c 	bl	8020550 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d102      	bne.n	800f688 <recv_tcp+0x5c>
    return ERR_VAL;
 800f682:	f06f 0305 	mvn.w	r3, #5
 800f686:	e045      	b.n	800f714 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d006      	beq.n	800f6a0 <recv_tcp+0x74>
 800f692:	4b22      	ldr	r3, [pc, #136]	; (800f71c <recv_tcp+0xf0>)
 800f694:	f240 1235 	movw	r2, #309	; 0x135
 800f698:	4925      	ldr	r1, [pc, #148]	; (800f730 <recv_tcp+0x104>)
 800f69a:	4822      	ldr	r0, [pc, #136]	; (800f724 <recv_tcp+0xf8>)
 800f69c:	f010 ff58 	bl	8020550 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	3310      	adds	r3, #16
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f009 fa97 	bl	8018bd8 <sys_mbox_valid>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d10d      	bne.n	800f6cc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d008      	beq.n	800f6c8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	891b      	ldrh	r3, [r3, #8]
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	68b8      	ldr	r0, [r7, #8]
 800f6be:	f00a f8e3 	bl	8019888 <tcp_recved>
      pbuf_free(p);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f008 f852 	bl	801776c <pbuf_free>
    }
    return ERR_OK;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	e023      	b.n	800f714 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d005      	beq.n	800f6de <recv_tcp+0xb2>
    msg = p;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	891b      	ldrh	r3, [r3, #8]
 800f6da:	83fb      	strh	r3, [r7, #30]
 800f6dc:	e003      	b.n	800f6e6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f6de:	4b15      	ldr	r3, [pc, #84]	; (800f734 <recv_tcp+0x108>)
 800f6e0:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	3310      	adds	r3, #16
 800f6ea:	69b9      	ldr	r1, [r7, #24]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f009 fa11 	bl	8018b14 <sys_mbox_trypost>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d002      	beq.n	800f6fe <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6fc:	e00a      	b.n	800f714 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f702:	2b00      	cmp	r3, #0
 800f704:	d005      	beq.n	800f712 <recv_tcp+0xe6>
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70a:	8bfa      	ldrh	r2, [r7, #30]
 800f70c:	2100      	movs	r1, #0
 800f70e:	6978      	ldr	r0, [r7, #20]
 800f710:	4798      	blx	r3
  }

  return ERR_OK;
 800f712:	2300      	movs	r3, #0
}
 800f714:	4618      	mov	r0, r3
 800f716:	3720      	adds	r7, #32
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	08021aa4 	.word	0x08021aa4
 800f720:	08021b88 	.word	0x08021b88
 800f724:	08021af0 	.word	0x08021af0
 800f728:	08021bac 	.word	0x08021bac
 800f72c:	08021bcc 	.word	0x08021bcc
 800f730:	08021be4 	.word	0x08021be4
 800f734:	08025d92 	.word	0x08025d92

0800f738 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d106      	bne.n	800f75a <poll_tcp+0x22>
 800f74c:	4b29      	ldr	r3, [pc, #164]	; (800f7f4 <poll_tcp+0xbc>)
 800f74e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f752:	4929      	ldr	r1, [pc, #164]	; (800f7f8 <poll_tcp+0xc0>)
 800f754:	4829      	ldr	r0, [pc, #164]	; (800f7fc <poll_tcp+0xc4>)
 800f756:	f010 fefb 	bl	8020550 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	785b      	ldrb	r3, [r3, #1]
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d104      	bne.n	800f76c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f762:	2101      	movs	r1, #1
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 ff5b 	bl	8010620 <lwip_netconn_do_writemore>
 800f76a:	e016      	b.n	800f79a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	785b      	ldrb	r3, [r3, #1]
 800f770:	2b04      	cmp	r3, #4
 800f772:	d112      	bne.n	800f79a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	6a1b      	ldr	r3, [r3, #32]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d00a      	beq.n	800f792 <poll_tcp+0x5a>
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	6a1b      	ldr	r3, [r3, #32]
 800f780:	7a5b      	ldrb	r3, [r3, #9]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d005      	beq.n	800f792 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	6a1b      	ldr	r3, [r3, #32]
 800f78a:	7a5a      	ldrb	r2, [r3, #9]
 800f78c:	3a01      	subs	r2, #1
 800f78e:	b2d2      	uxtb	r2, r2
 800f790:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f792:	2101      	movs	r1, #1
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f000 fb3b 	bl	800fe10 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	7f1b      	ldrb	r3, [r3, #28]
 800f79e:	f003 0310 	and.w	r3, r3, #16
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d021      	beq.n	800f7ea <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d01d      	beq.n	800f7ea <poll_tcp+0xb2>
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f7b6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f7ba:	d316      	bcc.n	800f7ea <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f7c4:	2b04      	cmp	r3, #4
 800f7c6:	d810      	bhi.n	800f7ea <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	7f1b      	ldrb	r3, [r3, #28]
 800f7cc:	f023 0310 	bic.w	r3, r3, #16
 800f7d0:	b2da      	uxtb	r2, r3
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d005      	beq.n	800f7ea <poll_tcp+0xb2>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	2102      	movs	r1, #2
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f7ea:	2300      	movs	r3, #0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	08021aa4 	.word	0x08021aa4
 800f7f8:	08021c04 	.word	0x08021c04
 800f7fc:	08021af0 	.word	0x08021af0

0800f800 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b086      	sub	sp, #24
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	4613      	mov	r3, r2
 800f80c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d106      	bne.n	800f826 <sent_tcp+0x26>
 800f818:	4b20      	ldr	r3, [pc, #128]	; (800f89c <sent_tcp+0x9c>)
 800f81a:	f240 1293 	movw	r2, #403	; 0x193
 800f81e:	4920      	ldr	r1, [pc, #128]	; (800f8a0 <sent_tcp+0xa0>)
 800f820:	4820      	ldr	r0, [pc, #128]	; (800f8a4 <sent_tcp+0xa4>)
 800f822:	f010 fe95 	bl	8020550 <iprintf>

  if (conn) {
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d032      	beq.n	800f892 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	785b      	ldrb	r3, [r3, #1]
 800f830:	2b01      	cmp	r3, #1
 800f832:	d104      	bne.n	800f83e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f834:	2101      	movs	r1, #1
 800f836:	6978      	ldr	r0, [r7, #20]
 800f838:	f000 fef2 	bl	8010620 <lwip_netconn_do_writemore>
 800f83c:	e007      	b.n	800f84e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	785b      	ldrb	r3, [r3, #1]
 800f842:	2b04      	cmp	r3, #4
 800f844:	d103      	bne.n	800f84e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f846:	2101      	movs	r1, #1
 800f848:	6978      	ldr	r0, [r7, #20]
 800f84a:	f000 fae1 	bl	800fe10 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d01d      	beq.n	800f892 <sent_tcp+0x92>
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f85e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f862:	d316      	bcc.n	800f892 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f86c:	2b04      	cmp	r3, #4
 800f86e:	d810      	bhi.n	800f892 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	7f1b      	ldrb	r3, [r3, #28]
 800f874:	f023 0310 	bic.w	r3, r3, #16
 800f878:	b2da      	uxtb	r2, r3
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f882:	2b00      	cmp	r3, #0
 800f884:	d005      	beq.n	800f892 <sent_tcp+0x92>
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88a:	88fa      	ldrh	r2, [r7, #6]
 800f88c:	2102      	movs	r1, #2
 800f88e:	6978      	ldr	r0, [r7, #20]
 800f890:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f892:	2300      	movs	r3, #0
}
 800f894:	4618      	mov	r0, r3
 800f896:	3718      	adds	r7, #24
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	08021aa4 	.word	0x08021aa4
 800f8a0:	08021c04 	.word	0x08021c04
 800f8a4:	08021af0 	.word	0x08021af0

0800f8a8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b088      	sub	sp, #32
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	460b      	mov	r3, r1
 800f8b2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d106      	bne.n	800f8cc <err_tcp+0x24>
 800f8be:	4b5f      	ldr	r3, [pc, #380]	; (800fa3c <err_tcp+0x194>)
 800f8c0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f8c4:	495e      	ldr	r1, [pc, #376]	; (800fa40 <err_tcp+0x198>)
 800f8c6:	485f      	ldr	r0, [pc, #380]	; (800fa44 <err_tcp+0x19c>)
 800f8c8:	f010 fe42 	bl	8020550 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f8cc:	f009 fa8e 	bl	8018dec <sys_arch_protect>
 800f8d0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	78fa      	ldrb	r2, [r7, #3]
 800f8dc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	7f1b      	ldrb	r3, [r3, #28]
 800f8e2:	f043 0301 	orr.w	r3, r3, #1
 800f8e6:	b2da      	uxtb	r2, r3
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	785b      	ldrb	r3, [r3, #1]
 800f8f0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f8f8:	69b8      	ldr	r0, [r7, #24]
 800f8fa:	f009 fa85 	bl	8018e08 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f902:	2b00      	cmp	r3, #0
 800f904:	d005      	beq.n	800f912 <err_tcp+0x6a>
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90a:	2200      	movs	r2, #0
 800f90c:	2104      	movs	r1, #4
 800f90e:	69f8      	ldr	r0, [r7, #28]
 800f910:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f916:	2b00      	cmp	r3, #0
 800f918:	d005      	beq.n	800f926 <err_tcp+0x7e>
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91e:	2200      	movs	r2, #0
 800f920:	2100      	movs	r1, #0
 800f922:	69f8      	ldr	r0, [r7, #28]
 800f924:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d005      	beq.n	800f93a <err_tcp+0x92>
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f932:	2200      	movs	r2, #0
 800f934:	2102      	movs	r1, #2
 800f936:	69f8      	ldr	r0, [r7, #28]
 800f938:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f93a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f93e:	4618      	mov	r0, r3
 800f940:	f7ff fd86 	bl	800f450 <lwip_netconn_err_to_msg>
 800f944:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	3310      	adds	r3, #16
 800f94a:	4618      	mov	r0, r3
 800f94c:	f009 f944 	bl	8018bd8 <sys_mbox_valid>
 800f950:	4603      	mov	r3, r0
 800f952:	2b00      	cmp	r3, #0
 800f954:	d005      	beq.n	800f962 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	3310      	adds	r3, #16
 800f95a:	6939      	ldr	r1, [r7, #16]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f009 f8d9 	bl	8018b14 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	3314      	adds	r3, #20
 800f966:	4618      	mov	r0, r3
 800f968:	f009 f936 	bl	8018bd8 <sys_mbox_valid>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d005      	beq.n	800f97e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	3314      	adds	r3, #20
 800f976:	6939      	ldr	r1, [r7, #16]
 800f978:	4618      	mov	r0, r3
 800f97a:	f009 f8cb 	bl	8018b14 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f97e:	7dfb      	ldrb	r3, [r7, #23]
 800f980:	2b01      	cmp	r3, #1
 800f982:	d005      	beq.n	800f990 <err_tcp+0xe8>
 800f984:	7dfb      	ldrb	r3, [r7, #23]
 800f986:	2b04      	cmp	r3, #4
 800f988:	d002      	beq.n	800f990 <err_tcp+0xe8>
 800f98a:	7dfb      	ldrb	r3, [r7, #23]
 800f98c:	2b03      	cmp	r3, #3
 800f98e:	d143      	bne.n	800fa18 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	7f1b      	ldrb	r3, [r3, #28]
 800f994:	f003 0304 	and.w	r3, r3, #4
 800f998:	2b00      	cmp	r3, #0
 800f99a:	bf14      	ite	ne
 800f99c:	2301      	movne	r3, #1
 800f99e:	2300      	moveq	r3, #0
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	7f1b      	ldrb	r3, [r3, #28]
 800f9a8:	f023 0304 	bic.w	r3, r3, #4
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d13b      	bne.n	800fa30 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f9b8:	69fb      	ldr	r3, [r7, #28]
 800f9ba:	6a1b      	ldr	r3, [r3, #32]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d106      	bne.n	800f9ce <err_tcp+0x126>
 800f9c0:	4b1e      	ldr	r3, [pc, #120]	; (800fa3c <err_tcp+0x194>)
 800f9c2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f9c6:	4920      	ldr	r1, [pc, #128]	; (800fa48 <err_tcp+0x1a0>)
 800f9c8:	481e      	ldr	r0, [pc, #120]	; (800fa44 <err_tcp+0x19c>)
 800f9ca:	f010 fdc1 	bl	8020550 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f9ce:	7dfb      	ldrb	r3, [r7, #23]
 800f9d0:	2b04      	cmp	r3, #4
 800f9d2:	d104      	bne.n	800f9de <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	6a1b      	ldr	r3, [r3, #32]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	711a      	strb	r2, [r3, #4]
 800f9dc:	e003      	b.n	800f9e6 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f9de:	69fb      	ldr	r3, [r7, #28]
 800f9e0:	6a1b      	ldr	r3, [r3, #32]
 800f9e2:	78fa      	ldrb	r2, [r7, #3]
 800f9e4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	6a1b      	ldr	r3, [r3, #32]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	330c      	adds	r3, #12
 800f9ee:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f9f0:	68b8      	ldr	r0, [r7, #8]
 800f9f2:	f009 f97f 	bl	8018cf4 <sys_sem_valid>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d106      	bne.n	800fa0a <err_tcp+0x162>
 800f9fc:	4b0f      	ldr	r3, [pc, #60]	; (800fa3c <err_tcp+0x194>)
 800f9fe:	f240 12ef 	movw	r2, #495	; 0x1ef
 800fa02:	4912      	ldr	r1, [pc, #72]	; (800fa4c <err_tcp+0x1a4>)
 800fa04:	480f      	ldr	r0, [pc, #60]	; (800fa44 <err_tcp+0x19c>)
 800fa06:	f010 fda3 	bl	8020550 <iprintf>
      conn->current_msg = NULL;
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800fa10:	68b8      	ldr	r0, [r7, #8]
 800fa12:	f009 f955 	bl	8018cc0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800fa16:	e00b      	b.n	800fa30 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	6a1b      	ldr	r3, [r3, #32]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d008      	beq.n	800fa32 <err_tcp+0x18a>
 800fa20:	4b06      	ldr	r3, [pc, #24]	; (800fa3c <err_tcp+0x194>)
 800fa22:	f240 12f7 	movw	r2, #503	; 0x1f7
 800fa26:	490a      	ldr	r1, [pc, #40]	; (800fa50 <err_tcp+0x1a8>)
 800fa28:	4806      	ldr	r0, [pc, #24]	; (800fa44 <err_tcp+0x19c>)
 800fa2a:	f010 fd91 	bl	8020550 <iprintf>
  }
}
 800fa2e:	e000      	b.n	800fa32 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800fa30:	bf00      	nop
}
 800fa32:	bf00      	nop
 800fa34:	3720      	adds	r7, #32
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	08021aa4 	.word	0x08021aa4
 800fa40:	08021c04 	.word	0x08021c04
 800fa44:	08021af0 	.word	0x08021af0
 800fa48:	08021c14 	.word	0x08021c14
 800fa4c:	08021c30 	.word	0x08021c30
 800fa50:	08021c4c 	.word	0x08021c4c

0800fa54 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800fa62:	6879      	ldr	r1, [r7, #4]
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f00a feed 	bl	801a844 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800fa6a:	490a      	ldr	r1, [pc, #40]	; (800fa94 <setup_tcp+0x40>)
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f00a fefb 	bl	801a868 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800fa72:	4909      	ldr	r1, [pc, #36]	; (800fa98 <setup_tcp+0x44>)
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f00a ff19 	bl	801a8ac <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800fa7a:	2202      	movs	r2, #2
 800fa7c:	4907      	ldr	r1, [pc, #28]	; (800fa9c <setup_tcp+0x48>)
 800fa7e:	68f8      	ldr	r0, [r7, #12]
 800fa80:	f00a ff70 	bl	801a964 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800fa84:	4906      	ldr	r1, [pc, #24]	; (800faa0 <setup_tcp+0x4c>)
 800fa86:	68f8      	ldr	r0, [r7, #12]
 800fa88:	f00a ff32 	bl	801a8f0 <tcp_err>
}
 800fa8c:	bf00      	nop
 800fa8e:	3710      	adds	r7, #16
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	0800f62d 	.word	0x0800f62d
 800fa98:	0800f801 	.word	0x0800f801
 800fa9c:	0800f739 	.word	0x0800f739
 800faa0:	0800f8a9 	.word	0x0800f8a9

0800faa4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800faa4:	b590      	push	{r4, r7, lr}
 800faa6:	b085      	sub	sp, #20
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800faac:	2300      	movs	r3, #0
 800faae:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d006      	beq.n	800fac8 <pcb_new+0x24>
 800faba:	4b2b      	ldr	r3, [pc, #172]	; (800fb68 <pcb_new+0xc4>)
 800fabc:	f240 2265 	movw	r2, #613	; 0x265
 800fac0:	492a      	ldr	r1, [pc, #168]	; (800fb6c <pcb_new+0xc8>)
 800fac2:	482b      	ldr	r0, [pc, #172]	; (800fb70 <pcb_new+0xcc>)
 800fac4:	f010 fd44 	bl	8020550 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fad2:	2b10      	cmp	r3, #16
 800fad4:	d022      	beq.n	800fb1c <pcb_new+0x78>
 800fad6:	2b20      	cmp	r3, #32
 800fad8:	d133      	bne.n	800fb42 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681c      	ldr	r4, [r3, #0]
 800fade:	7bfb      	ldrb	r3, [r7, #15]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f010 fbc6 	bl	8020272 <udp_new_ip_type>
 800fae6:	4603      	mov	r3, r0
 800fae8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d02a      	beq.n	800fb4a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	2b22      	cmp	r3, #34	; 0x22
 800fafc:	d104      	bne.n	800fb08 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	2201      	movs	r2, #1
 800fb06:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	6858      	ldr	r0, [r3, #4]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	461a      	mov	r2, r3
 800fb14:	4917      	ldr	r1, [pc, #92]	; (800fb74 <pcb_new+0xd0>)
 800fb16:	f010 fb33 	bl	8020180 <udp_recv>
      }
      break;
 800fb1a:	e016      	b.n	800fb4a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681c      	ldr	r4, [r3, #0]
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f00a fe80 	bl	801a828 <tcp_new_ip_type>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00b      	beq.n	800fb4e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7ff ff8a 	bl	800fa54 <setup_tcp>
      }
      break;
 800fb40:	e005      	b.n	800fb4e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	22fa      	movs	r2, #250	; 0xfa
 800fb46:	711a      	strb	r2, [r3, #4]
      return;
 800fb48:	e00a      	b.n	800fb60 <pcb_new+0xbc>
      break;
 800fb4a:	bf00      	nop
 800fb4c:	e000      	b.n	800fb50 <pcb_new+0xac>
      break;
 800fb4e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d102      	bne.n	800fb60 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	22ff      	movs	r2, #255	; 0xff
 800fb5e:	711a      	strb	r2, [r3, #4]
  }
}
 800fb60:	3714      	adds	r7, #20
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd90      	pop	{r4, r7, pc}
 800fb66:	bf00      	nop
 800fb68:	08021aa4 	.word	0x08021aa4
 800fb6c:	08021c90 	.word	0x08021c90
 800fb70:	08021af0 	.word	0x08021af0
 800fb74:	0800f531 	.word	0x0800f531

0800fb78 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2200      	movs	r2, #0
 800fb88:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d102      	bne.n	800fb9a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f7ff ff85 	bl	800faa4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800fb9a:	bf00      	nop
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
	...

0800fba4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	4603      	mov	r3, r0
 800fbac:	6039      	str	r1, [r7, #0]
 800fbae:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800fbb4:	2007      	movs	r0, #7
 800fbb6:	f006 fbf7 	bl	80163a8 <memp_malloc>
 800fbba:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d101      	bne.n	800fbc6 <netconn_alloc+0x22>
    return NULL;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	e052      	b.n	800fc6c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	79fa      	ldrb	r2, [r7, #7]
 800fbd0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800fbd8:	79fb      	ldrb	r3, [r7, #7]
 800fbda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbde:	2b10      	cmp	r3, #16
 800fbe0:	d004      	beq.n	800fbec <netconn_alloc+0x48>
 800fbe2:	2b20      	cmp	r3, #32
 800fbe4:	d105      	bne.n	800fbf2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800fbe6:	2306      	movs	r3, #6
 800fbe8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800fbea:	e00a      	b.n	800fc02 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800fbec:	2306      	movs	r3, #6
 800fbee:	617b      	str	r3, [r7, #20]
      break;
 800fbf0:	e007      	b.n	800fc02 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800fbf2:	4b20      	ldr	r3, [pc, #128]	; (800fc74 <netconn_alloc+0xd0>)
 800fbf4:	f240 22e5 	movw	r2, #741	; 0x2e5
 800fbf8:	491f      	ldr	r1, [pc, #124]	; (800fc78 <netconn_alloc+0xd4>)
 800fbfa:	4820      	ldr	r0, [pc, #128]	; (800fc7c <netconn_alloc+0xd8>)
 800fbfc:	f010 fca8 	bl	8020550 <iprintf>
      goto free_and_return;
 800fc00:	e02f      	b.n	800fc62 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3310      	adds	r3, #16
 800fc06:	6979      	ldr	r1, [r7, #20]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f008 ff57 	bl	8018abc <sys_mbox_new>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d125      	bne.n	800fc60 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	330c      	adds	r3, #12
 800fc18:	2100      	movs	r1, #0
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f008 fffa 	bl	8018c14 <sys_sem_new>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d005      	beq.n	800fc32 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	3310      	adds	r3, #16
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f008 ff60 	bl	8018af0 <sys_mbox_free>
    goto free_and_return;
 800fc30:	e017      	b.n	800fc62 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	3314      	adds	r3, #20
 800fc36:	4618      	mov	r0, r3
 800fc38:	f008 ffdf 	bl	8018bfa <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f04f 32ff 	mov.w	r2, #4294967295
 800fc48:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	683a      	ldr	r2, [r7, #0]
 800fc4e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2200      	movs	r2, #0
 800fc54:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	7cfa      	ldrb	r2, [r7, #19]
 800fc5a:	771a      	strb	r2, [r3, #28]
  return conn;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	e005      	b.n	800fc6c <netconn_alloc+0xc8>
    goto free_and_return;
 800fc60:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800fc62:	68f9      	ldr	r1, [r7, #12]
 800fc64:	2007      	movs	r0, #7
 800fc66:	f006 fc15 	bl	8016494 <memp_free>
  return NULL;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3718      	adds	r7, #24
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	08021aa4 	.word	0x08021aa4
 800fc78:	08021cb0 	.word	0x08021cb0
 800fc7c:	08021af0 	.word	0x08021af0

0800fc80 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d006      	beq.n	800fc9e <netconn_free+0x1e>
 800fc90:	4b1b      	ldr	r3, [pc, #108]	; (800fd00 <netconn_free+0x80>)
 800fc92:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fc96:	491b      	ldr	r1, [pc, #108]	; (800fd04 <netconn_free+0x84>)
 800fc98:	481b      	ldr	r0, [pc, #108]	; (800fd08 <netconn_free+0x88>)
 800fc9a:	f010 fc59 	bl	8020550 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	3310      	adds	r3, #16
 800fca2:	4618      	mov	r0, r3
 800fca4:	f008 ff98 	bl	8018bd8 <sys_mbox_valid>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d006      	beq.n	800fcbc <netconn_free+0x3c>
 800fcae:	4b14      	ldr	r3, [pc, #80]	; (800fd00 <netconn_free+0x80>)
 800fcb0:	f240 3223 	movw	r2, #803	; 0x323
 800fcb4:	4915      	ldr	r1, [pc, #84]	; (800fd0c <netconn_free+0x8c>)
 800fcb6:	4814      	ldr	r0, [pc, #80]	; (800fd08 <netconn_free+0x88>)
 800fcb8:	f010 fc4a 	bl	8020550 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	3314      	adds	r3, #20
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f008 ff89 	bl	8018bd8 <sys_mbox_valid>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d006      	beq.n	800fcda <netconn_free+0x5a>
 800fccc:	4b0c      	ldr	r3, [pc, #48]	; (800fd00 <netconn_free+0x80>)
 800fcce:	f240 3226 	movw	r2, #806	; 0x326
 800fcd2:	490f      	ldr	r1, [pc, #60]	; (800fd10 <netconn_free+0x90>)
 800fcd4:	480c      	ldr	r0, [pc, #48]	; (800fd08 <netconn_free+0x88>)
 800fcd6:	f010 fc3b 	bl	8020550 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	330c      	adds	r3, #12
 800fcde:	4618      	mov	r0, r3
 800fce0:	f008 fffb 	bl	8018cda <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	330c      	adds	r3, #12
 800fce8:	4618      	mov	r0, r3
 800fcea:	f009 f814 	bl	8018d16 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800fcee:	6879      	ldr	r1, [r7, #4]
 800fcf0:	2007      	movs	r0, #7
 800fcf2:	f006 fbcf 	bl	8016494 <memp_free>
}
 800fcf6:	bf00      	nop
 800fcf8:	3708      	adds	r7, #8
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	08021aa4 	.word	0x08021aa4
 800fd04:	08021cd8 	.word	0x08021cd8
 800fd08:	08021af0 	.word	0x08021af0
 800fd0c:	08021d08 	.word	0x08021d08
 800fd10:	08021d44 	.word	0x08021d44

0800fd14 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b086      	sub	sp, #24
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	3310      	adds	r3, #16
 800fd20:	4618      	mov	r0, r3
 800fd22:	f008 ff59 	bl	8018bd8 <sys_mbox_valid>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d02f      	beq.n	800fd8c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fd2c:	e018      	b.n	800fd60 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd36:	2b10      	cmp	r3, #16
 800fd38:	d10e      	bne.n	800fd58 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	f107 020f 	add.w	r2, r7, #15
 800fd40:	4611      	mov	r1, r2
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7ff fbba 	bl	800f4bc <lwip_netconn_is_err_msg>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d108      	bne.n	800fd60 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	4618      	mov	r0, r3
 800fd52:	f007 fd0b 	bl	801776c <pbuf_free>
 800fd56:	e003      	b.n	800fd60 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f006 fbc4 	bl	80164e8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	3310      	adds	r3, #16
 800fd64:	f107 0210 	add.w	r2, r7, #16
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f008 ff1d 	bl	8018baa <sys_arch_mbox_tryfetch>
 800fd70:	4603      	mov	r3, r0
 800fd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd76:	d1da      	bne.n	800fd2e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	3310      	adds	r3, #16
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f008 feb7 	bl	8018af0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	3310      	adds	r3, #16
 800fd86:	4618      	mov	r0, r3
 800fd88:	f008 ff37 	bl	8018bfa <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3314      	adds	r3, #20
 800fd90:	4618      	mov	r0, r3
 800fd92:	f008 ff21 	bl	8018bd8 <sys_mbox_valid>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d034      	beq.n	800fe06 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fd9c:	e01d      	b.n	800fdda <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	f107 020e 	add.w	r2, r7, #14
 800fda4:	4611      	mov	r1, r2
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7ff fb88 	bl	800f4bc <lwip_netconn_is_err_msg>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d113      	bne.n	800fdda <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800fdb6:	6978      	ldr	r0, [r7, #20]
 800fdb8:	f7ff ffac 	bl	800fd14 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d007      	beq.n	800fdd4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f009 fb83 	bl	80194d4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800fdd4:	6978      	ldr	r0, [r7, #20]
 800fdd6:	f7ff ff53 	bl	800fc80 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	3314      	adds	r3, #20
 800fdde:	f107 0210 	add.w	r2, r7, #16
 800fde2:	4611      	mov	r1, r2
 800fde4:	4618      	mov	r0, r3
 800fde6:	f008 fee0 	bl	8018baa <sys_arch_mbox_tryfetch>
 800fdea:	4603      	mov	r3, r0
 800fdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf0:	d1d5      	bne.n	800fd9e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	3314      	adds	r3, #20
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f008 fe7a 	bl	8018af0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	3314      	adds	r3, #20
 800fe00:	4618      	mov	r0, r3
 800fe02:	f008 fefa 	bl	8018bfa <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800fe06:	bf00      	nop
 800fe08:	3718      	adds	r7, #24
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
	...

0800fe10 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b086      	sub	sp, #24
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	460b      	mov	r3, r1
 800fe1a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <lwip_netconn_do_close_internal+0x24>
 800fe26:	4b87      	ldr	r3, [pc, #540]	; (8010044 <lwip_netconn_do_close_internal+0x234>)
 800fe28:	f240 32a2 	movw	r2, #930	; 0x3a2
 800fe2c:	4986      	ldr	r1, [pc, #536]	; (8010048 <lwip_netconn_do_close_internal+0x238>)
 800fe2e:	4887      	ldr	r0, [pc, #540]	; (801004c <lwip_netconn_do_close_internal+0x23c>)
 800fe30:	f010 fb8e 	bl	8020550 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe3c:	2b10      	cmp	r3, #16
 800fe3e:	d006      	beq.n	800fe4e <lwip_netconn_do_close_internal+0x3e>
 800fe40:	4b80      	ldr	r3, [pc, #512]	; (8010044 <lwip_netconn_do_close_internal+0x234>)
 800fe42:	f240 32a3 	movw	r2, #931	; 0x3a3
 800fe46:	4982      	ldr	r1, [pc, #520]	; (8010050 <lwip_netconn_do_close_internal+0x240>)
 800fe48:	4880      	ldr	r0, [pc, #512]	; (801004c <lwip_netconn_do_close_internal+0x23c>)
 800fe4a:	f010 fb81 	bl	8020550 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	785b      	ldrb	r3, [r3, #1]
 800fe52:	2b04      	cmp	r3, #4
 800fe54:	d006      	beq.n	800fe64 <lwip_netconn_do_close_internal+0x54>
 800fe56:	4b7b      	ldr	r3, [pc, #492]	; (8010044 <lwip_netconn_do_close_internal+0x234>)
 800fe58:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800fe5c:	497d      	ldr	r1, [pc, #500]	; (8010054 <lwip_netconn_do_close_internal+0x244>)
 800fe5e:	487b      	ldr	r0, [pc, #492]	; (801004c <lwip_netconn_do_close_internal+0x23c>)
 800fe60:	f010 fb76 	bl	8020550 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d106      	bne.n	800fe7a <lwip_netconn_do_close_internal+0x6a>
 800fe6c:	4b75      	ldr	r3, [pc, #468]	; (8010044 <lwip_netconn_do_close_internal+0x234>)
 800fe6e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800fe72:	4979      	ldr	r1, [pc, #484]	; (8010058 <lwip_netconn_do_close_internal+0x248>)
 800fe74:	4875      	ldr	r0, [pc, #468]	; (801004c <lwip_netconn_do_close_internal+0x23c>)
 800fe76:	f010 fb6b 	bl	8020550 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6a1b      	ldr	r3, [r3, #32]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d106      	bne.n	800fe90 <lwip_netconn_do_close_internal+0x80>
 800fe82:	4b70      	ldr	r3, [pc, #448]	; (8010044 <lwip_netconn_do_close_internal+0x234>)
 800fe84:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fe88:	4974      	ldr	r1, [pc, #464]	; (801005c <lwip_netconn_do_close_internal+0x24c>)
 800fe8a:	4870      	ldr	r0, [pc, #448]	; (801004c <lwip_netconn_do_close_internal+0x23c>)
 800fe8c:	f010 fb60 	bl	8020550 <iprintf>

  tpcb = conn->pcb.tcp;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6a1b      	ldr	r3, [r3, #32]
 800fe9a:	7a1b      	ldrb	r3, [r3, #8]
 800fe9c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800fe9e:	7bfb      	ldrb	r3, [r7, #15]
 800fea0:	f003 0301 	and.w	r3, r3, #1
 800fea4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800fea6:	7bfb      	ldrb	r3, [r7, #15]
 800fea8:	f003 0302 	and.w	r3, r3, #2
 800feac:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800feae:	7bfb      	ldrb	r3, [r7, #15]
 800feb0:	2b03      	cmp	r3, #3
 800feb2:	d102      	bne.n	800feba <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800feb4:	2301      	movs	r3, #1
 800feb6:	75bb      	strb	r3, [r7, #22]
 800feb8:	e01f      	b.n	800fefa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800feba:	7bbb      	ldrb	r3, [r7, #14]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00e      	beq.n	800fede <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800fec4:	2b05      	cmp	r3, #5
 800fec6:	d007      	beq.n	800fed8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800fecc:	2b06      	cmp	r3, #6
 800fece:	d003      	beq.n	800fed8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800fed4:	2b08      	cmp	r3, #8
 800fed6:	d102      	bne.n	800fede <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800fed8:	2301      	movs	r3, #1
 800feda:	75bb      	strb	r3, [r7, #22]
 800fedc:	e00d      	b.n	800fefa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800fede:	7b7b      	ldrb	r3, [r7, #13]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d008      	beq.n	800fef6 <lwip_netconn_do_close_internal+0xe6>
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	8b5b      	ldrh	r3, [r3, #26]
 800fee8:	f003 0310 	and.w	r3, r3, #16
 800feec:	2b00      	cmp	r3, #0
 800feee:	d002      	beq.n	800fef6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800fef0:	2301      	movs	r3, #1
 800fef2:	75bb      	strb	r3, [r7, #22]
 800fef4:	e001      	b.n	800fefa <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800fefa:	7dbb      	ldrb	r3, [r7, #22]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d003      	beq.n	800ff08 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ff00:	2100      	movs	r1, #0
 800ff02:	6938      	ldr	r0, [r7, #16]
 800ff04:	f00a fc9e 	bl	801a844 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	7d1b      	ldrb	r3, [r3, #20]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d104      	bne.n	800ff1a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ff10:	2100      	movs	r1, #0
 800ff12:	6938      	ldr	r0, [r7, #16]
 800ff14:	f00a fd0e 	bl	801a934 <tcp_accept>
 800ff18:	e01d      	b.n	800ff56 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ff1a:	7bbb      	ldrb	r3, [r7, #14]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d007      	beq.n	800ff30 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ff20:	2100      	movs	r1, #0
 800ff22:	6938      	ldr	r0, [r7, #16]
 800ff24:	f00a fca0 	bl	801a868 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ff28:	2100      	movs	r1, #0
 800ff2a:	6938      	ldr	r0, [r7, #16]
 800ff2c:	f00a fd02 	bl	801a934 <tcp_accept>
    }
    if (shut_tx) {
 800ff30:	7b7b      	ldrb	r3, [r7, #13]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d003      	beq.n	800ff3e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ff36:	2100      	movs	r1, #0
 800ff38:	6938      	ldr	r0, [r7, #16]
 800ff3a:	f00a fcb7 	bl	801a8ac <tcp_sent>
    }
    if (shut_close) {
 800ff3e:	7dbb      	ldrb	r3, [r7, #22]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d008      	beq.n	800ff56 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ff44:	2200      	movs	r2, #0
 800ff46:	2100      	movs	r1, #0
 800ff48:	6938      	ldr	r0, [r7, #16]
 800ff4a:	f00a fd0b 	bl	801a964 <tcp_poll>
      tcp_err(tpcb, NULL);
 800ff4e:	2100      	movs	r1, #0
 800ff50:	6938      	ldr	r0, [r7, #16]
 800ff52:	f00a fccd 	bl	801a8f0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ff56:	7dbb      	ldrb	r3, [r7, #22]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d005      	beq.n	800ff68 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ff5c:	6938      	ldr	r0, [r7, #16]
 800ff5e:	f009 f973 	bl	8019248 <tcp_close>
 800ff62:	4603      	mov	r3, r0
 800ff64:	75fb      	strb	r3, [r7, #23]
 800ff66:	e007      	b.n	800ff78 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ff68:	7bbb      	ldrb	r3, [r7, #14]
 800ff6a:	7b7a      	ldrb	r2, [r7, #13]
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	6938      	ldr	r0, [r7, #16]
 800ff70:	f009 f996 	bl	80192a0 <tcp_shutdown>
 800ff74:	4603      	mov	r3, r0
 800ff76:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ff78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d102      	bne.n	800ff86 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ff80:	2301      	movs	r3, #1
 800ff82:	757b      	strb	r3, [r7, #21]
 800ff84:	e016      	b.n	800ffb4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ff86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff8e:	d10f      	bne.n	800ffb0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6a1b      	ldr	r3, [r3, #32]
 800ff94:	7a5b      	ldrb	r3, [r3, #9]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d10c      	bne.n	800ffb4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ff9e:	7dbb      	ldrb	r3, [r7, #22]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d007      	beq.n	800ffb4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800ffa4:	6938      	ldr	r0, [r7, #16]
 800ffa6:	f009 fa95 	bl	80194d4 <tcp_abort>
          err = ERR_OK;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	75fb      	strb	r3, [r7, #23]
 800ffae:	e001      	b.n	800ffb4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ffb4:	7d7b      	ldrb	r3, [r7, #21]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d052      	beq.n	8010060 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6a1b      	ldr	r3, [r3, #32]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	330c      	adds	r3, #12
 800ffc2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6a1b      	ldr	r3, [r3, #32]
 800ffc8:	7dfa      	ldrb	r2, [r7, #23]
 800ffca:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ffd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d129      	bne.n	8010034 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ffe0:	7dbb      	ldrb	r3, [r7, #22]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d00c      	beq.n	8010000 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d005      	beq.n	8010000 <lwip_netconn_do_close_internal+0x1f0>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff8:	2200      	movs	r2, #0
 800fffa:	2104      	movs	r1, #4
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	4798      	blx	r3
      }
      if (shut_rx) {
 8010000:	7bbb      	ldrb	r3, [r7, #14]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d009      	beq.n	801001a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000a:	2b00      	cmp	r3, #0
 801000c:	d005      	beq.n	801001a <lwip_netconn_do_close_internal+0x20a>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010012:	2200      	movs	r2, #0
 8010014:	2100      	movs	r1, #0
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	4798      	blx	r3
      }
      if (shut_tx) {
 801001a:	7b7b      	ldrb	r3, [r7, #13]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d009      	beq.n	8010034 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010024:	2b00      	cmp	r3, #0
 8010026:	d005      	beq.n	8010034 <lwip_netconn_do_close_internal+0x224>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801002c:	2200      	movs	r2, #0
 801002e:	2102      	movs	r1, #2
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010034:	78fb      	ldrb	r3, [r7, #3]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801003a:	68b8      	ldr	r0, [r7, #8]
 801003c:	f008 fe40 	bl	8018cc0 <sys_sem_signal>
    }
    return ERR_OK;
 8010040:	2300      	movs	r3, #0
 8010042:	e03c      	b.n	80100be <lwip_netconn_do_close_internal+0x2ae>
 8010044:	08021aa4 	.word	0x08021aa4
 8010048:	08021d80 	.word	0x08021d80
 801004c:	08021af0 	.word	0x08021af0
 8010050:	08021d90 	.word	0x08021d90
 8010054:	08021db0 	.word	0x08021db0
 8010058:	08021dd4 	.word	0x08021dd4
 801005c:	08021c14 	.word	0x08021c14
  }
  if (!close_finished) {
 8010060:	7d7b      	ldrb	r3, [r7, #21]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d11e      	bne.n	80100a4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	7d1b      	ldrb	r3, [r3, #20]
 801006a:	2b01      	cmp	r3, #1
 801006c:	d106      	bne.n	801007c <lwip_netconn_do_close_internal+0x26c>
 801006e:	4b16      	ldr	r3, [pc, #88]	; (80100c8 <lwip_netconn_do_close_internal+0x2b8>)
 8010070:	f240 4241 	movw	r2, #1089	; 0x441
 8010074:	4915      	ldr	r1, [pc, #84]	; (80100cc <lwip_netconn_do_close_internal+0x2bc>)
 8010076:	4816      	ldr	r0, [pc, #88]	; (80100d0 <lwip_netconn_do_close_internal+0x2c0>)
 8010078:	f010 fa6a 	bl	8020550 <iprintf>
    if (shut_tx) {
 801007c:	7b7b      	ldrb	r3, [r7, #13]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d003      	beq.n	801008a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8010082:	4914      	ldr	r1, [pc, #80]	; (80100d4 <lwip_netconn_do_close_internal+0x2c4>)
 8010084:	6938      	ldr	r0, [r7, #16]
 8010086:	f00a fc11 	bl	801a8ac <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801008a:	2201      	movs	r2, #1
 801008c:	4912      	ldr	r1, [pc, #72]	; (80100d8 <lwip_netconn_do_close_internal+0x2c8>)
 801008e:	6938      	ldr	r0, [r7, #16]
 8010090:	f00a fc68 	bl	801a964 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8010094:	4911      	ldr	r1, [pc, #68]	; (80100dc <lwip_netconn_do_close_internal+0x2cc>)
 8010096:	6938      	ldr	r0, [r7, #16]
 8010098:	f00a fc2a 	bl	801a8f0 <tcp_err>
    tcp_arg(tpcb, conn);
 801009c:	6879      	ldr	r1, [r7, #4]
 801009e:	6938      	ldr	r0, [r7, #16]
 80100a0:	f00a fbd0 	bl	801a844 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80100a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d106      	bne.n	80100ba <lwip_netconn_do_close_internal+0x2aa>
 80100ac:	4b06      	ldr	r3, [pc, #24]	; (80100c8 <lwip_netconn_do_close_internal+0x2b8>)
 80100ae:	f240 424d 	movw	r2, #1101	; 0x44d
 80100b2:	490b      	ldr	r1, [pc, #44]	; (80100e0 <lwip_netconn_do_close_internal+0x2d0>)
 80100b4:	4806      	ldr	r0, [pc, #24]	; (80100d0 <lwip_netconn_do_close_internal+0x2c0>)
 80100b6:	f010 fa4b 	bl	8020550 <iprintf>
  return err;
 80100ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3718      	adds	r7, #24
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	08021aa4 	.word	0x08021aa4
 80100cc:	08021de8 	.word	0x08021de8
 80100d0:	08021af0 	.word	0x08021af0
 80100d4:	0800f801 	.word	0x0800f801
 80100d8:	0800f739 	.word	0x0800f739
 80100dc:	0800f8a9 	.word	0x0800f8a9
 80100e0:	08021e0c 	.word	0x08021e0c

080100e4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	785b      	ldrb	r3, [r3, #1]
 80100f6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80100f8:	7afb      	ldrb	r3, [r7, #11]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00d      	beq.n	801011a <lwip_netconn_do_delconn+0x36>
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010108:	2b10      	cmp	r3, #16
 801010a:	d006      	beq.n	801011a <lwip_netconn_do_delconn+0x36>
 801010c:	4b60      	ldr	r3, [pc, #384]	; (8010290 <lwip_netconn_do_delconn+0x1ac>)
 801010e:	f240 425e 	movw	r2, #1118	; 0x45e
 8010112:	4960      	ldr	r1, [pc, #384]	; (8010294 <lwip_netconn_do_delconn+0x1b0>)
 8010114:	4860      	ldr	r0, [pc, #384]	; (8010298 <lwip_netconn_do_delconn+0x1b4>)
 8010116:	f010 fa1b 	bl	8020550 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801011a:	7afb      	ldrb	r3, [r7, #11]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d005      	beq.n	801012c <lwip_netconn_do_delconn+0x48>
 8010120:	7afb      	ldrb	r3, [r7, #11]
 8010122:	2b02      	cmp	r3, #2
 8010124:	d002      	beq.n	801012c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8010126:	7afb      	ldrb	r3, [r7, #11]
 8010128:	2b03      	cmp	r3, #3
 801012a:	d109      	bne.n	8010140 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 801012c:	7afb      	ldrb	r3, [r7, #11]
 801012e:	2b03      	cmp	r3, #3
 8010130:	d10a      	bne.n	8010148 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	7f1b      	ldrb	r3, [r3, #28]
 8010138:	f003 0304 	and.w	r3, r3, #4
 801013c:	2b00      	cmp	r3, #0
 801013e:	d103      	bne.n	8010148 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	22fb      	movs	r2, #251	; 0xfb
 8010144:	711a      	strb	r2, [r3, #4]
 8010146:	e097      	b.n	8010278 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8010148:	7afb      	ldrb	r3, [r7, #11]
 801014a:	2b03      	cmp	r3, #3
 801014c:	d10d      	bne.n	801016a <lwip_netconn_do_delconn+0x86>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	7f1b      	ldrb	r3, [r3, #28]
 8010154:	f003 0304 	and.w	r3, r3, #4
 8010158:	2b00      	cmp	r3, #0
 801015a:	d106      	bne.n	801016a <lwip_netconn_do_delconn+0x86>
 801015c:	4b4c      	ldr	r3, [pc, #304]	; (8010290 <lwip_netconn_do_delconn+0x1ac>)
 801015e:	f240 427a 	movw	r2, #1146	; 0x47a
 8010162:	494e      	ldr	r1, [pc, #312]	; (801029c <lwip_netconn_do_delconn+0x1b8>)
 8010164:	484c      	ldr	r0, [pc, #304]	; (8010298 <lwip_netconn_do_delconn+0x1b4>)
 8010166:	f010 f9f3 	bl	8020550 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2200      	movs	r2, #0
 801016e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4618      	mov	r0, r3
 8010176:	f7ff fdcd 	bl	800fd14 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d05f      	beq.n	8010244 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801018e:	2b10      	cmp	r3, #16
 8010190:	d00d      	beq.n	80101ae <lwip_netconn_do_delconn+0xca>
 8010192:	2b20      	cmp	r3, #32
 8010194:	d151      	bne.n	801023a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	4618      	mov	r0, r3
 80101a8:	f010 f80a 	bl	80201c0 <udp_remove>
          break;
 80101ac:	e046      	b.n	801023c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	6a1b      	ldr	r3, [r3, #32]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d006      	beq.n	80101c6 <lwip_netconn_do_delconn+0xe2>
 80101b8:	4b35      	ldr	r3, [pc, #212]	; (8010290 <lwip_netconn_do_delconn+0x1ac>)
 80101ba:	f240 4294 	movw	r2, #1172	; 0x494
 80101be:	4938      	ldr	r1, [pc, #224]	; (80102a0 <lwip_netconn_do_delconn+0x1bc>)
 80101c0:	4835      	ldr	r0, [pc, #212]	; (8010298 <lwip_netconn_do_delconn+0x1b4>)
 80101c2:	f010 f9c5 	bl	8020550 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2204      	movs	r2, #4
 80101cc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2203      	movs	r2, #3
 80101d2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2100      	movs	r1, #0
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7ff fe14 	bl	800fe10 <lwip_netconn_do_close_internal>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d04b      	beq.n	8010286 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	785b      	ldrb	r3, [r3, #1]
 80101f4:	2b04      	cmp	r3, #4
 80101f6:	d006      	beq.n	8010206 <lwip_netconn_do_delconn+0x122>
 80101f8:	4b25      	ldr	r3, [pc, #148]	; (8010290 <lwip_netconn_do_delconn+0x1ac>)
 80101fa:	f240 429a 	movw	r2, #1178	; 0x49a
 80101fe:	4929      	ldr	r1, [pc, #164]	; (80102a4 <lwip_netconn_do_delconn+0x1c0>)
 8010200:	4825      	ldr	r0, [pc, #148]	; (8010298 <lwip_netconn_do_delconn+0x1b4>)
 8010202:	f010 f9a5 	bl	8020550 <iprintf>
            UNLOCK_TCPIP_CORE();
 8010206:	4828      	ldr	r0, [pc, #160]	; (80102a8 <lwip_netconn_do_delconn+0x1c4>)
 8010208:	f008 fdc3 	bl	8018d92 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	330c      	adds	r3, #12
 8010212:	2100      	movs	r1, #0
 8010214:	4618      	mov	r0, r3
 8010216:	f008 fd22 	bl	8018c5e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801021a:	4823      	ldr	r0, [pc, #140]	; (80102a8 <lwip_netconn_do_delconn+0x1c4>)
 801021c:	f008 fdaa 	bl	8018d74 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	785b      	ldrb	r3, [r3, #1]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d02d      	beq.n	8010286 <lwip_netconn_do_delconn+0x1a2>
 801022a:	4b19      	ldr	r3, [pc, #100]	; (8010290 <lwip_netconn_do_delconn+0x1ac>)
 801022c:	f240 429e 	movw	r2, #1182	; 0x49e
 8010230:	491c      	ldr	r1, [pc, #112]	; (80102a4 <lwip_netconn_do_delconn+0x1c0>)
 8010232:	4819      	ldr	r0, [pc, #100]	; (8010298 <lwip_netconn_do_delconn+0x1b4>)
 8010234:	f010 f98c 	bl	8020550 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8010238:	e025      	b.n	8010286 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 801023a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2200      	movs	r2, #0
 8010242:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024a:	2b00      	cmp	r3, #0
 801024c:	d007      	beq.n	801025e <lwip_netconn_do_delconn+0x17a>
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010254:	68fa      	ldr	r2, [r7, #12]
 8010256:	6810      	ldr	r0, [r2, #0]
 8010258:	2200      	movs	r2, #0
 801025a:	2100      	movs	r1, #0
 801025c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010264:	2b00      	cmp	r3, #0
 8010266:	d007      	beq.n	8010278 <lwip_netconn_do_delconn+0x194>
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	6810      	ldr	r0, [r2, #0]
 8010272:	2200      	movs	r2, #0
 8010274:	2102      	movs	r1, #2
 8010276:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	330c      	adds	r3, #12
 801027e:	4618      	mov	r0, r3
 8010280:	f008 fd38 	bl	8018cf4 <sys_sem_valid>
 8010284:	e000      	b.n	8010288 <lwip_netconn_do_delconn+0x1a4>
          return;
 8010286:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	08021aa4 	.word	0x08021aa4
 8010294:	08021e1c 	.word	0x08021e1c
 8010298:	08021af0 	.word	0x08021af0
 801029c:	08021e30 	.word	0x08021e30
 80102a0:	08021e50 	.word	0x08021e50
 80102a4:	08021e6c 	.word	0x08021e6c
 80102a8:	2400d42c 	.word	0x2400d42c

080102ac <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b088      	sub	sp, #32
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	4613      	mov	r3, r2
 80102b8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80102ba:	2300      	movs	r3, #0
 80102bc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80102c2:	69bb      	ldr	r3, [r7, #24]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d102      	bne.n	80102ce <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80102c8:	f06f 0305 	mvn.w	r3, #5
 80102cc:	e070      	b.n	80103b0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	785b      	ldrb	r3, [r3, #1]
 80102d2:	2b03      	cmp	r3, #3
 80102d4:	d006      	beq.n	80102e4 <lwip_netconn_do_connected+0x38>
 80102d6:	4b38      	ldr	r3, [pc, #224]	; (80103b8 <lwip_netconn_do_connected+0x10c>)
 80102d8:	f240 5223 	movw	r2, #1315	; 0x523
 80102dc:	4937      	ldr	r1, [pc, #220]	; (80103bc <lwip_netconn_do_connected+0x110>)
 80102de:	4838      	ldr	r0, [pc, #224]	; (80103c0 <lwip_netconn_do_connected+0x114>)
 80102e0:	f010 f936 	bl	8020550 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80102e4:	69bb      	ldr	r3, [r7, #24]
 80102e6:	6a1b      	ldr	r3, [r3, #32]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d10c      	bne.n	8010306 <lwip_netconn_do_connected+0x5a>
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	7f1b      	ldrb	r3, [r3, #28]
 80102f0:	f003 0304 	and.w	r3, r3, #4
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d106      	bne.n	8010306 <lwip_netconn_do_connected+0x5a>
 80102f8:	4b2f      	ldr	r3, [pc, #188]	; (80103b8 <lwip_netconn_do_connected+0x10c>)
 80102fa:	f240 5224 	movw	r2, #1316	; 0x524
 80102fe:	4931      	ldr	r1, [pc, #196]	; (80103c4 <lwip_netconn_do_connected+0x118>)
 8010300:	482f      	ldr	r0, [pc, #188]	; (80103c0 <lwip_netconn_do_connected+0x114>)
 8010302:	f010 f925 	bl	8020550 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	6a1b      	ldr	r3, [r3, #32]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d008      	beq.n	8010320 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801030e:	69bb      	ldr	r3, [r7, #24]
 8010310:	6a1b      	ldr	r3, [r3, #32]
 8010312:	79fa      	ldrb	r2, [r7, #7]
 8010314:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	6a1b      	ldr	r3, [r3, #32]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	330c      	adds	r3, #12
 801031e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8010320:	69bb      	ldr	r3, [r7, #24]
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010328:	2b10      	cmp	r3, #16
 801032a:	d106      	bne.n	801033a <lwip_netconn_do_connected+0x8e>
 801032c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d102      	bne.n	801033a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8010334:	69b8      	ldr	r0, [r7, #24]
 8010336:	f7ff fb8d 	bl	800fa54 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 801033a:	69bb      	ldr	r3, [r7, #24]
 801033c:	7f1b      	ldrb	r3, [r3, #28]
 801033e:	f003 0304 	and.w	r3, r3, #4
 8010342:	2b00      	cmp	r3, #0
 8010344:	bf0c      	ite	eq
 8010346:	2301      	moveq	r3, #1
 8010348:	2300      	movne	r3, #0
 801034a:	b2db      	uxtb	r3, r3
 801034c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	7f1b      	ldrb	r3, [r3, #28]
 8010352:	f023 0304 	bic.w	r3, r3, #4
 8010356:	b2da      	uxtb	r2, r3
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d002      	beq.n	8010368 <lwip_netconn_do_connected+0xbc>
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d10c      	bne.n	8010382 <lwip_netconn_do_connected+0xd6>
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d102      	bne.n	8010374 <lwip_netconn_do_connected+0xc8>
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d006      	beq.n	8010382 <lwip_netconn_do_connected+0xd6>
 8010374:	4b10      	ldr	r3, [pc, #64]	; (80103b8 <lwip_netconn_do_connected+0x10c>)
 8010376:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 801037a:	4913      	ldr	r1, [pc, #76]	; (80103c8 <lwip_netconn_do_connected+0x11c>)
 801037c:	4810      	ldr	r0, [pc, #64]	; (80103c0 <lwip_netconn_do_connected+0x114>)
 801037e:	f010 f8e7 	bl	8020550 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	2200      	movs	r2, #0
 8010386:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	2200      	movs	r2, #0
 801038c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801038e:	69bb      	ldr	r3, [r7, #24]
 8010390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010392:	2b00      	cmp	r3, #0
 8010394:	d005      	beq.n	80103a2 <lwip_netconn_do_connected+0xf6>
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039a:	2200      	movs	r2, #0
 801039c:	2102      	movs	r1, #2
 801039e:	69b8      	ldr	r0, [r7, #24]
 80103a0:	4798      	blx	r3

  if (was_blocking) {
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d002      	beq.n	80103ae <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80103a8:	69f8      	ldr	r0, [r7, #28]
 80103aa:	f008 fc89 	bl	8018cc0 <sys_sem_signal>
  }
  return ERR_OK;
 80103ae:	2300      	movs	r3, #0
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3720      	adds	r7, #32
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	08021aa4 	.word	0x08021aa4
 80103bc:	08021e74 	.word	0x08021e74
 80103c0:	08021af0 	.word	0x08021af0
 80103c4:	08021e94 	.word	0x08021e94
 80103c8:	08021ed4 	.word	0x08021ed4

080103cc <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b086      	sub	sp, #24
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d102      	bne.n	80103e8 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 80103e2:	23f1      	movs	r3, #241	; 0xf1
 80103e4:	75fb      	strb	r3, [r7, #23]
 80103e6:	e09b      	b.n	8010520 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103f2:	2b10      	cmp	r3, #16
 80103f4:	d00f      	beq.n	8010416 <lwip_netconn_do_connect+0x4a>
 80103f6:	2b20      	cmp	r3, #32
 80103f8:	f040 8087 	bne.w	801050a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	6858      	ldr	r0, [r3, #4]
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	6899      	ldr	r1, [r3, #8]
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	899b      	ldrh	r3, [r3, #12]
 801040a:	461a      	mov	r2, r3
 801040c:	f00f fe22 	bl	8020054 <udp_connect>
 8010410:	4603      	mov	r3, r0
 8010412:	75fb      	strb	r3, [r7, #23]
        break;
 8010414:	e084      	b.n	8010520 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	785b      	ldrb	r3, [r3, #1]
 801041c:	2b03      	cmp	r3, #3
 801041e:	d102      	bne.n	8010426 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8010420:	23f7      	movs	r3, #247	; 0xf7
 8010422:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8010424:	e07b      	b.n	801051e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	785b      	ldrb	r3, [r3, #1]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d002      	beq.n	8010436 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8010430:	23f6      	movs	r3, #246	; 0xf6
 8010432:	75fb      	strb	r3, [r7, #23]
        break;
 8010434:	e073      	b.n	801051e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4618      	mov	r0, r3
 801043c:	f7ff fb0a 	bl	800fa54 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	6858      	ldr	r0, [r3, #4]
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	6899      	ldr	r1, [r3, #8]
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	899a      	ldrh	r2, [r3, #12]
 801044e:	4b38      	ldr	r3, [pc, #224]	; (8010530 <lwip_netconn_do_connect+0x164>)
 8010450:	f009 fab0 	bl	80199b4 <tcp_connect>
 8010454:	4603      	mov	r3, r0
 8010456:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8010458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d15e      	bne.n	801051e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	7f1b      	ldrb	r3, [r3, #28]
 8010466:	f003 0302 	and.w	r3, r3, #2
 801046a:	2b00      	cmp	r3, #0
 801046c:	bf14      	ite	ne
 801046e:	2301      	movne	r3, #1
 8010470:	2300      	moveq	r3, #0
 8010472:	b2db      	uxtb	r3, r3
 8010474:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2203      	movs	r2, #3
 801047c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 801047e:	7bfb      	ldrb	r3, [r7, #15]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d009      	beq.n	8010498 <lwip_netconn_do_connect+0xcc>
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	7f1a      	ldrb	r2, [r3, #28]
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f042 0204 	orr.w	r2, r2, #4
 8010492:	b2d2      	uxtb	r2, r2
 8010494:	771a      	strb	r2, [r3, #28]
 8010496:	e008      	b.n	80104aa <lwip_netconn_do_connect+0xde>
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	7f1a      	ldrb	r2, [r3, #28]
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f022 0204 	bic.w	r2, r2, #4
 80104a6:	b2d2      	uxtb	r2, r2
 80104a8:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80104aa:	7bfb      	ldrb	r3, [r7, #15]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80104b0:	23fb      	movs	r3, #251	; 0xfb
 80104b2:	75fb      	strb	r3, [r7, #23]
        break;
 80104b4:	e033      	b.n	801051e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	693a      	ldr	r2, [r7, #16]
 80104bc:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	785b      	ldrb	r3, [r3, #1]
 80104c4:	2b03      	cmp	r3, #3
 80104c6:	d006      	beq.n	80104d6 <lwip_netconn_do_connect+0x10a>
 80104c8:	4b1a      	ldr	r3, [pc, #104]	; (8010534 <lwip_netconn_do_connect+0x168>)
 80104ca:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80104ce:	491a      	ldr	r1, [pc, #104]	; (8010538 <lwip_netconn_do_connect+0x16c>)
 80104d0:	481a      	ldr	r0, [pc, #104]	; (801053c <lwip_netconn_do_connect+0x170>)
 80104d2:	f010 f83d 	bl	8020550 <iprintf>
              UNLOCK_TCPIP_CORE();
 80104d6:	481a      	ldr	r0, [pc, #104]	; (8010540 <lwip_netconn_do_connect+0x174>)
 80104d8:	f008 fc5b 	bl	8018d92 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	330c      	adds	r3, #12
 80104e2:	2100      	movs	r1, #0
 80104e4:	4618      	mov	r0, r3
 80104e6:	f008 fbba 	bl	8018c5e <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 80104ea:	4815      	ldr	r0, [pc, #84]	; (8010540 <lwip_netconn_do_connect+0x174>)
 80104ec:	f008 fc42 	bl	8018d74 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	785b      	ldrb	r3, [r3, #1]
 80104f6:	2b03      	cmp	r3, #3
 80104f8:	d116      	bne.n	8010528 <lwip_netconn_do_connect+0x15c>
 80104fa:	4b0e      	ldr	r3, [pc, #56]	; (8010534 <lwip_netconn_do_connect+0x168>)
 80104fc:	f240 5274 	movw	r2, #1396	; 0x574
 8010500:	490d      	ldr	r1, [pc, #52]	; (8010538 <lwip_netconn_do_connect+0x16c>)
 8010502:	480e      	ldr	r0, [pc, #56]	; (801053c <lwip_netconn_do_connect+0x170>)
 8010504:	f010 f824 	bl	8020550 <iprintf>
              return;
 8010508:	e00e      	b.n	8010528 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 801050a:	4b0a      	ldr	r3, [pc, #40]	; (8010534 <lwip_netconn_do_connect+0x168>)
 801050c:	f240 527d 	movw	r2, #1405	; 0x57d
 8010510:	490c      	ldr	r1, [pc, #48]	; (8010544 <lwip_netconn_do_connect+0x178>)
 8010512:	480a      	ldr	r0, [pc, #40]	; (801053c <lwip_netconn_do_connect+0x170>)
 8010514:	f010 f81c 	bl	8020550 <iprintf>
 8010518:	23fa      	movs	r3, #250	; 0xfa
 801051a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 801051c:	e000      	b.n	8010520 <lwip_netconn_do_connect+0x154>
        break;
 801051e:	bf00      	nop
    }
  }
  msg->err = err;
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	7dfa      	ldrb	r2, [r7, #23]
 8010524:	711a      	strb	r2, [r3, #4]
 8010526:	e000      	b.n	801052a <lwip_netconn_do_connect+0x15e>
              return;
 8010528:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 801052a:	3718      	adds	r7, #24
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	080102ad 	.word	0x080102ad
 8010534:	08021aa4 	.word	0x08021aa4
 8010538:	08021e6c 	.word	0x08021e6c
 801053c:	08021af0 	.word	0x08021af0
 8010540:	2400d42c 	.word	0x2400d42c
 8010544:	08021ef4 	.word	0x08021ef4

08010548 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801055e:	2b20      	cmp	r3, #32
 8010560:	d109      	bne.n	8010576 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	4618      	mov	r0, r3
 801056a:	f00f fde1 	bl	8020130 <udp_disconnect>
    msg->err = ERR_OK;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2200      	movs	r2, #0
 8010572:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010574:	e002      	b.n	801057c <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	22fa      	movs	r2, #250	; 0xfa
 801057a:	711a      	strb	r2, [r3, #4]
}
 801057c:	bf00      	nop
 801057e:	3710      	adds	r7, #16
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4618      	mov	r0, r3
 8010596:	f7fe ff3f 	bl	800f418 <netconn_err>
 801059a:	4603      	mov	r3, r0
 801059c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801059e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d134      	bne.n	8010610 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d02d      	beq.n	801060c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105ba:	2b20      	cmp	r3, #32
 80105bc:	d123      	bne.n	8010606 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	689b      	ldr	r3, [r3, #8]
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d10c      	bne.n	80105e2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	685a      	ldr	r2, [r3, #4]
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	689b      	ldr	r3, [r3, #8]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4619      	mov	r1, r3
 80105d6:	4610      	mov	r0, r2
 80105d8:	f00f faca 	bl	801fb70 <udp_send>
 80105dc:	4603      	mov	r3, r0
 80105de:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80105e0:	e016      	b.n	8010610 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	6858      	ldr	r0, [r3, #4]
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	689b      	ldr	r3, [r3, #8]
 80105ec:	6819      	ldr	r1, [r3, #0]
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	f103 0208 	add.w	r2, r3, #8
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	689b      	ldr	r3, [r3, #8]
 80105fa:	899b      	ldrh	r3, [r3, #12]
 80105fc:	f00f faec 	bl	801fbd8 <udp_sendto>
 8010600:	4603      	mov	r3, r0
 8010602:	73fb      	strb	r3, [r7, #15]
          break;
 8010604:	e004      	b.n	8010610 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8010606:	23f5      	movs	r3, #245	; 0xf5
 8010608:	73fb      	strb	r3, [r7, #15]
          break;
 801060a:	e001      	b.n	8010610 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 801060c:	23f5      	movs	r3, #245	; 0xf5
 801060e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	7bfa      	ldrb	r2, [r7, #15]
 8010614:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010616:	bf00      	nop
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
	...

08010620 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b088      	sub	sp, #32
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	460b      	mov	r3, r1
 801062a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801062c:	2300      	movs	r3, #0
 801062e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d106      	bne.n	8010644 <lwip_netconn_do_writemore+0x24>
 8010636:	4b96      	ldr	r3, [pc, #600]	; (8010890 <lwip_netconn_do_writemore+0x270>)
 8010638:	f240 6273 	movw	r2, #1651	; 0x673
 801063c:	4995      	ldr	r1, [pc, #596]	; (8010894 <lwip_netconn_do_writemore+0x274>)
 801063e:	4896      	ldr	r0, [pc, #600]	; (8010898 <lwip_netconn_do_writemore+0x278>)
 8010640:	f00f ff86 	bl	8020550 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	785b      	ldrb	r3, [r3, #1]
 8010648:	2b01      	cmp	r3, #1
 801064a:	d006      	beq.n	801065a <lwip_netconn_do_writemore+0x3a>
 801064c:	4b90      	ldr	r3, [pc, #576]	; (8010890 <lwip_netconn_do_writemore+0x270>)
 801064e:	f240 6274 	movw	r2, #1652	; 0x674
 8010652:	4992      	ldr	r1, [pc, #584]	; (801089c <lwip_netconn_do_writemore+0x27c>)
 8010654:	4890      	ldr	r0, [pc, #576]	; (8010898 <lwip_netconn_do_writemore+0x278>)
 8010656:	f00f ff7b 	bl	8020550 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6a1b      	ldr	r3, [r3, #32]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d106      	bne.n	8010670 <lwip_netconn_do_writemore+0x50>
 8010662:	4b8b      	ldr	r3, [pc, #556]	; (8010890 <lwip_netconn_do_writemore+0x270>)
 8010664:	f240 6275 	movw	r2, #1653	; 0x675
 8010668:	498d      	ldr	r1, [pc, #564]	; (80108a0 <lwip_netconn_do_writemore+0x280>)
 801066a:	488b      	ldr	r0, [pc, #556]	; (8010898 <lwip_netconn_do_writemore+0x278>)
 801066c:	f00f ff70 	bl	8020550 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d106      	bne.n	8010686 <lwip_netconn_do_writemore+0x66>
 8010678:	4b85      	ldr	r3, [pc, #532]	; (8010890 <lwip_netconn_do_writemore+0x270>)
 801067a:	f240 6276 	movw	r2, #1654	; 0x676
 801067e:	4989      	ldr	r1, [pc, #548]	; (80108a4 <lwip_netconn_do_writemore+0x284>)
 8010680:	4885      	ldr	r0, [pc, #532]	; (8010898 <lwip_netconn_do_writemore+0x278>)
 8010682:	f00f ff65 	bl	8020550 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a1b      	ldr	r3, [r3, #32]
 801068a:	699a      	ldr	r2, [r3, #24]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6a1b      	ldr	r3, [r3, #32]
 8010690:	695b      	ldr	r3, [r3, #20]
 8010692:	429a      	cmp	r2, r3
 8010694:	d306      	bcc.n	80106a4 <lwip_netconn_do_writemore+0x84>
 8010696:	4b7e      	ldr	r3, [pc, #504]	; (8010890 <lwip_netconn_do_writemore+0x270>)
 8010698:	f240 6277 	movw	r2, #1655	; 0x677
 801069c:	4982      	ldr	r1, [pc, #520]	; (80108a8 <lwip_netconn_do_writemore+0x288>)
 801069e:	487e      	ldr	r0, [pc, #504]	; (8010898 <lwip_netconn_do_writemore+0x278>)
 80106a0:	f00f ff56 	bl	8020550 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6a1b      	ldr	r3, [r3, #32]
 80106a8:	899b      	ldrh	r3, [r3, #12]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d106      	bne.n	80106bc <lwip_netconn_do_writemore+0x9c>
 80106ae:	4b78      	ldr	r3, [pc, #480]	; (8010890 <lwip_netconn_do_writemore+0x270>)
 80106b0:	f240 6279 	movw	r2, #1657	; 0x679
 80106b4:	497d      	ldr	r1, [pc, #500]	; (80108ac <lwip_netconn_do_writemore+0x28c>)
 80106b6:	4878      	ldr	r0, [pc, #480]	; (8010898 <lwip_netconn_do_writemore+0x278>)
 80106b8:	f00f ff4a 	bl	8020550 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6a1b      	ldr	r3, [r3, #32]
 80106c0:	7f1b      	ldrb	r3, [r3, #28]
 80106c2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	7f1b      	ldrb	r3, [r3, #28]
 80106c8:	f003 0302 	and.w	r3, r3, #2
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d104      	bne.n	80106da <lwip_netconn_do_writemore+0xba>
 80106d0:	7ebb      	ldrb	r3, [r7, #26]
 80106d2:	f003 0304 	and.w	r3, r3, #4
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d001      	beq.n	80106de <lwip_netconn_do_writemore+0xbe>
 80106da:	2301      	movs	r3, #1
 80106dc:	e000      	b.n	80106e0 <lwip_netconn_do_writemore+0xc0>
 80106de:	2300      	movs	r3, #0
 80106e0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6a1b      	ldr	r3, [r3, #32]
 80106e6:	689b      	ldr	r3, [r3, #8]
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6a1b      	ldr	r3, [r3, #32]
 80106ee:	691b      	ldr	r3, [r3, #16]
 80106f0:	4413      	add	r3, r2
 80106f2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a1b      	ldr	r3, [r3, #32]
 80106f8:	689b      	ldr	r3, [r3, #8]
 80106fa:	685a      	ldr	r2, [r3, #4]
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6a1b      	ldr	r3, [r3, #32]
 8010700:	691b      	ldr	r3, [r3, #16]
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801070c:	d307      	bcc.n	801071e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010712:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010714:	7ebb      	ldrb	r3, [r7, #26]
 8010716:	f043 0302 	orr.w	r3, r3, #2
 801071a:	76bb      	strb	r3, [r7, #26]
 801071c:	e001      	b.n	8010722 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801072a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801072c:	89fa      	ldrh	r2, [r7, #14]
 801072e:	8bbb      	ldrh	r3, [r7, #28]
 8010730:	429a      	cmp	r2, r3
 8010732:	d216      	bcs.n	8010762 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010734:	89fb      	ldrh	r3, [r7, #14]
 8010736:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010738:	7e3b      	ldrb	r3, [r7, #24]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00d      	beq.n	801075a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801073e:	8bbb      	ldrh	r3, [r7, #28]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d10e      	bne.n	8010762 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6a1b      	ldr	r3, [r3, #32]
 8010748:	699b      	ldr	r3, [r3, #24]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d102      	bne.n	8010754 <lwip_netconn_do_writemore+0x134>
 801074e:	f06f 0306 	mvn.w	r3, #6
 8010752:	e000      	b.n	8010756 <lwip_netconn_do_writemore+0x136>
 8010754:	2300      	movs	r3, #0
 8010756:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010758:	e07d      	b.n	8010856 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801075a:	7ebb      	ldrb	r3, [r7, #26]
 801075c:	f043 0302 	orr.w	r3, r3, #2
 8010760:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a1b      	ldr	r3, [r3, #32]
 8010766:	691a      	ldr	r2, [r3, #16]
 8010768:	8bbb      	ldrh	r3, [r7, #28]
 801076a:	441a      	add	r2, r3
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6a1b      	ldr	r3, [r3, #32]
 8010770:	689b      	ldr	r3, [r3, #8]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	429a      	cmp	r2, r3
 8010776:	d906      	bls.n	8010786 <lwip_netconn_do_writemore+0x166>
 8010778:	4b45      	ldr	r3, [pc, #276]	; (8010890 <lwip_netconn_do_writemore+0x270>)
 801077a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801077e:	494c      	ldr	r1, [pc, #304]	; (80108b0 <lwip_netconn_do_writemore+0x290>)
 8010780:	4845      	ldr	r0, [pc, #276]	; (8010898 <lwip_netconn_do_writemore+0x278>)
 8010782:	f00f fee5 	bl	8020550 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010786:	8bbb      	ldrh	r3, [r7, #28]
 8010788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801078c:	4293      	cmp	r3, r2
 801078e:	d103      	bne.n	8010798 <lwip_netconn_do_writemore+0x178>
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010796:	d209      	bcs.n	80107ac <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801079c:	8bba      	ldrh	r2, [r7, #28]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d10b      	bne.n	80107ba <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6a1b      	ldr	r3, [r3, #32]
 80107a6:	899b      	ldrh	r3, [r3, #12]
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d906      	bls.n	80107ba <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80107ac:	2301      	movs	r3, #1
 80107ae:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80107b0:	7ebb      	ldrb	r3, [r7, #26]
 80107b2:	f043 0302 	orr.w	r3, r3, #2
 80107b6:	76bb      	strb	r3, [r7, #26]
 80107b8:	e001      	b.n	80107be <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6858      	ldr	r0, [r3, #4]
 80107c2:	7ebb      	ldrb	r3, [r7, #26]
 80107c4:	8bba      	ldrh	r2, [r7, #28]
 80107c6:	6979      	ldr	r1, [r7, #20]
 80107c8:	f00c ff7e 	bl	801d6c8 <tcp_write>
 80107cc:	4603      	mov	r3, r0
 80107ce:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80107d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d12c      	bne.n	8010832 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6a1b      	ldr	r3, [r3, #32]
 80107dc:	6999      	ldr	r1, [r3, #24]
 80107de:	8bba      	ldrh	r2, [r7, #28]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6a1b      	ldr	r3, [r3, #32]
 80107e4:	440a      	add	r2, r1
 80107e6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a1b      	ldr	r3, [r3, #32]
 80107ec:	6919      	ldr	r1, [r3, #16]
 80107ee:	8bba      	ldrh	r2, [r7, #28]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6a1b      	ldr	r3, [r3, #32]
 80107f4:	440a      	add	r2, r1
 80107f6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6a1b      	ldr	r3, [r3, #32]
 80107fc:	691a      	ldr	r2, [r3, #16]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6a1b      	ldr	r3, [r3, #32]
 8010802:	689b      	ldr	r3, [r3, #8]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	429a      	cmp	r2, r3
 8010808:	d113      	bne.n	8010832 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6a1b      	ldr	r3, [r3, #32]
 801080e:	899a      	ldrh	r2, [r3, #12]
 8010810:	3a01      	subs	r2, #1
 8010812:	b292      	uxth	r2, r2
 8010814:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6a1b      	ldr	r3, [r3, #32]
 801081a:	899b      	ldrh	r3, [r3, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d008      	beq.n	8010832 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6a1b      	ldr	r3, [r3, #32]
 8010824:	689a      	ldr	r2, [r3, #8]
 8010826:	3208      	adds	r2, #8
 8010828:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6a1b      	ldr	r3, [r3, #32]
 801082e:	2200      	movs	r2, #0
 8010830:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010832:	7e7b      	ldrb	r3, [r7, #25]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d004      	beq.n	8010842 <lwip_netconn_do_writemore+0x222>
 8010838:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801083c:	2b00      	cmp	r3, #0
 801083e:	f43f af50 	beq.w	80106e2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010842:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d004      	beq.n	8010854 <lwip_netconn_do_writemore+0x234>
 801084a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801084e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010852:	d146      	bne.n	80108e2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010854:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010856:	7e3b      	ldrb	r3, [r7, #24]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d02b      	beq.n	80108b4 <lwip_netconn_do_writemore+0x294>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6a1b      	ldr	r3, [r3, #32]
 8010860:	699a      	ldr	r2, [r3, #24]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6a1b      	ldr	r3, [r3, #32]
 8010866:	695b      	ldr	r3, [r3, #20]
 8010868:	429a      	cmp	r2, r3
 801086a:	d223      	bcs.n	80108b4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010870:	2b00      	cmp	r3, #0
 8010872:	d005      	beq.n	8010880 <lwip_netconn_do_writemore+0x260>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010878:	2200      	movs	r2, #0
 801087a:	2103      	movs	r1, #3
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	7f1b      	ldrb	r3, [r3, #28]
 8010884:	f043 0310 	orr.w	r3, r3, #16
 8010888:	b2da      	uxtb	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	771a      	strb	r2, [r3, #28]
 801088e:	e028      	b.n	80108e2 <lwip_netconn_do_writemore+0x2c2>
 8010890:	08021aa4 	.word	0x08021aa4
 8010894:	08021c04 	.word	0x08021c04
 8010898:	08021af0 	.word	0x08021af0
 801089c:	08021f0c 	.word	0x08021f0c
 80108a0:	08021c14 	.word	0x08021c14
 80108a4:	08021f2c 	.word	0x08021f2c
 80108a8:	08021f44 	.word	0x08021f44
 80108ac:	08021f84 	.word	0x08021f84
 80108b0:	08021fac 	.word	0x08021fac
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80108bc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80108c0:	d305      	bcc.n	80108ce <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80108ca:	2b04      	cmp	r3, #4
 80108cc:	d909      	bls.n	80108e2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d005      	beq.n	80108e2 <lwip_netconn_do_writemore+0x2c2>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108da:	2200      	movs	r2, #0
 80108dc:	2103      	movs	r1, #3
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80108e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d11d      	bne.n	8010926 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6a1b      	ldr	r3, [r3, #32]
 80108ee:	699a      	ldr	r2, [r3, #24]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6a1b      	ldr	r3, [r3, #32]
 80108f4:	695b      	ldr	r3, [r3, #20]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d002      	beq.n	8010900 <lwip_netconn_do_writemore+0x2e0>
 80108fa:	7e3b      	ldrb	r3, [r7, #24]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d001      	beq.n	8010904 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010900:	2301      	movs	r3, #1
 8010902:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	4618      	mov	r0, r3
 801090a:	f00d fcc7 	bl	801e29c <tcp_output>
 801090e:	4603      	mov	r3, r0
 8010910:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010912:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010916:	f113 0f04 	cmn.w	r3, #4
 801091a:	d12c      	bne.n	8010976 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801091c:	7b3b      	ldrb	r3, [r7, #12]
 801091e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010920:	2301      	movs	r3, #1
 8010922:	76fb      	strb	r3, [r7, #27]
 8010924:	e027      	b.n	8010976 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010926:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801092a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801092e:	d120      	bne.n	8010972 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	4618      	mov	r0, r3
 8010936:	f00d fcb1 	bl	801e29c <tcp_output>
 801093a:	4603      	mov	r3, r0
 801093c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801093e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010942:	f113 0f04 	cmn.w	r3, #4
 8010946:	d104      	bne.n	8010952 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010948:	7b7b      	ldrb	r3, [r7, #13]
 801094a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801094c:	2301      	movs	r3, #1
 801094e:	76fb      	strb	r3, [r7, #27]
 8010950:	e011      	b.n	8010976 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010952:	7e3b      	ldrb	r3, [r7, #24]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00e      	beq.n	8010976 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a1b      	ldr	r3, [r3, #32]
 801095c:	699b      	ldr	r3, [r3, #24]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d102      	bne.n	8010968 <lwip_netconn_do_writemore+0x348>
 8010962:	f06f 0306 	mvn.w	r3, #6
 8010966:	e000      	b.n	801096a <lwip_netconn_do_writemore+0x34a>
 8010968:	2300      	movs	r3, #0
 801096a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801096c:	2301      	movs	r3, #1
 801096e:	76fb      	strb	r3, [r7, #27]
 8010970:	e001      	b.n	8010976 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010972:	2301      	movs	r3, #1
 8010974:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010976:	7efb      	ldrb	r3, [r7, #27]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d015      	beq.n	80109a8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6a1b      	ldr	r3, [r3, #32]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	330c      	adds	r3, #12
 8010984:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a1b      	ldr	r3, [r3, #32]
 801098a:	7ffa      	ldrb	r2, [r7, #31]
 801098c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2200      	movs	r2, #0
 8010992:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2200      	movs	r2, #0
 8010998:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801099a:	78fb      	ldrb	r3, [r7, #3]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d006      	beq.n	80109ae <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80109a0:	68b8      	ldr	r0, [r7, #8]
 80109a2:	f008 f98d 	bl	8018cc0 <sys_sem_signal>
 80109a6:	e002      	b.n	80109ae <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80109a8:	f04f 33ff 	mov.w	r3, #4294967295
 80109ac:	e000      	b.n	80109b0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80109ae:	2300      	movs	r3, #0
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3720      	adds	r7, #32
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7fe fd25 	bl	800f418 <netconn_err>
 80109ce:	4603      	mov	r3, r0
 80109d0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80109d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d166      	bne.n	8010aa8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109e4:	2b10      	cmp	r3, #16
 80109e6:	d15d      	bne.n	8010aa4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	785b      	ldrb	r3, [r3, #1]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d002      	beq.n	80109f8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80109f2:	23fb      	movs	r3, #251	; 0xfb
 80109f4:	73fb      	strb	r3, [r7, #15]
 80109f6:	e057      	b.n	8010aa8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d04d      	beq.n	8010a9e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2201      	movs	r2, #1
 8010a08:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	6a1b      	ldr	r3, [r3, #32]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d006      	beq.n	8010a22 <lwip_netconn_do_write+0x6a>
 8010a14:	4b28      	ldr	r3, [pc, #160]	; (8010ab8 <lwip_netconn_do_write+0x100>)
 8010a16:	f240 7223 	movw	r2, #1827	; 0x723
 8010a1a:	4928      	ldr	r1, [pc, #160]	; (8010abc <lwip_netconn_do_write+0x104>)
 8010a1c:	4828      	ldr	r0, [pc, #160]	; (8010ac0 <lwip_netconn_do_write+0x108>)
 8010a1e:	f00f fd97 	bl	8020550 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	695b      	ldr	r3, [r3, #20]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d106      	bne.n	8010a38 <lwip_netconn_do_write+0x80>
 8010a2a:	4b23      	ldr	r3, [pc, #140]	; (8010ab8 <lwip_netconn_do_write+0x100>)
 8010a2c:	f240 7224 	movw	r2, #1828	; 0x724
 8010a30:	4924      	ldr	r1, [pc, #144]	; (8010ac4 <lwip_netconn_do_write+0x10c>)
 8010a32:	4823      	ldr	r0, [pc, #140]	; (8010ac0 <lwip_netconn_do_write+0x108>)
 8010a34:	f00f fd8c 	bl	8020550 <iprintf>
        msg->conn->current_msg = msg;
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	68ba      	ldr	r2, [r7, #8]
 8010a3e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2100      	movs	r1, #0
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ff fdea 	bl	8010620 <lwip_netconn_do_writemore>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d02e      	beq.n	8010ab0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	785b      	ldrb	r3, [r3, #1]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d006      	beq.n	8010a6a <lwip_netconn_do_write+0xb2>
 8010a5c:	4b16      	ldr	r3, [pc, #88]	; (8010ab8 <lwip_netconn_do_write+0x100>)
 8010a5e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010a62:	4919      	ldr	r1, [pc, #100]	; (8010ac8 <lwip_netconn_do_write+0x110>)
 8010a64:	4816      	ldr	r0, [pc, #88]	; (8010ac0 <lwip_netconn_do_write+0x108>)
 8010a66:	f00f fd73 	bl	8020550 <iprintf>
          UNLOCK_TCPIP_CORE();
 8010a6a:	4818      	ldr	r0, [pc, #96]	; (8010acc <lwip_netconn_do_write+0x114>)
 8010a6c:	f008 f991 	bl	8018d92 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	330c      	adds	r3, #12
 8010a76:	2100      	movs	r1, #0
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f008 f8f0 	bl	8018c5e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8010a7e:	4813      	ldr	r0, [pc, #76]	; (8010acc <lwip_netconn_do_write+0x114>)
 8010a80:	f008 f978 	bl	8018d74 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	785b      	ldrb	r3, [r3, #1]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d110      	bne.n	8010ab0 <lwip_netconn_do_write+0xf8>
 8010a8e:	4b0a      	ldr	r3, [pc, #40]	; (8010ab8 <lwip_netconn_do_write+0x100>)
 8010a90:	f240 722c 	movw	r2, #1836	; 0x72c
 8010a94:	490c      	ldr	r1, [pc, #48]	; (8010ac8 <lwip_netconn_do_write+0x110>)
 8010a96:	480a      	ldr	r0, [pc, #40]	; (8010ac0 <lwip_netconn_do_write+0x108>)
 8010a98:	f00f fd5a 	bl	8020550 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010a9c:	e008      	b.n	8010ab0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8010a9e:	23f5      	movs	r3, #245	; 0xf5
 8010aa0:	73fb      	strb	r3, [r7, #15]
 8010aa2:	e001      	b.n	8010aa8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010aa4:	23fa      	movs	r3, #250	; 0xfa
 8010aa6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	7bfa      	ldrb	r2, [r7, #15]
 8010aac:	711a      	strb	r2, [r3, #4]
 8010aae:	e000      	b.n	8010ab2 <lwip_netconn_do_write+0xfa>
        return;
 8010ab0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	08021aa4 	.word	0x08021aa4
 8010abc:	08021e50 	.word	0x08021e50
 8010ac0:	08021af0 	.word	0x08021af0
 8010ac4:	08021fd8 	.word	0x08021fd8
 8010ac8:	08021e6c 	.word	0x08021e6c
 8010acc:	2400d42c 	.word	0x2400d42c

08010ad0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010ada:	88fb      	ldrh	r3, [r7, #6]
 8010adc:	021b      	lsls	r3, r3, #8
 8010ade:	b21a      	sxth	r2, r3
 8010ae0:	88fb      	ldrh	r3, [r7, #6]
 8010ae2:	0a1b      	lsrs	r3, r3, #8
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	b21b      	sxth	r3, r3
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	b21b      	sxth	r3, r3
 8010aec:	b29b      	uxth	r3, r3
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	370c      	adds	r7, #12
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr

08010afa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010afa:	b480      	push	{r7}
 8010afc:	b083      	sub	sp, #12
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	061a      	lsls	r2, r3, #24
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	021b      	lsls	r3, r3, #8
 8010b0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010b0e:	431a      	orrs	r2, r3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	0a1b      	lsrs	r3, r3, #8
 8010b14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010b18:	431a      	orrs	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	0e1b      	lsrs	r3, r3, #24
 8010b1e:	4313      	orrs	r3, r2
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	370c      	adds	r7, #12
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010b30:	4b20      	ldr	r3, [pc, #128]	; (8010bb4 <dhcp_inc_pcb_refcount+0x88>)
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d133      	bne.n	8010ba0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010b38:	4b1f      	ldr	r3, [pc, #124]	; (8010bb8 <dhcp_inc_pcb_refcount+0x8c>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d005      	beq.n	8010b4c <dhcp_inc_pcb_refcount+0x20>
 8010b40:	4b1e      	ldr	r3, [pc, #120]	; (8010bbc <dhcp_inc_pcb_refcount+0x90>)
 8010b42:	22e5      	movs	r2, #229	; 0xe5
 8010b44:	491e      	ldr	r1, [pc, #120]	; (8010bc0 <dhcp_inc_pcb_refcount+0x94>)
 8010b46:	481f      	ldr	r0, [pc, #124]	; (8010bc4 <dhcp_inc_pcb_refcount+0x98>)
 8010b48:	f00f fd02 	bl	8020550 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010b4c:	f00f fb7a 	bl	8020244 <udp_new>
 8010b50:	4603      	mov	r3, r0
 8010b52:	4a19      	ldr	r2, [pc, #100]	; (8010bb8 <dhcp_inc_pcb_refcount+0x8c>)
 8010b54:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8010b56:	4b18      	ldr	r3, [pc, #96]	; (8010bb8 <dhcp_inc_pcb_refcount+0x8c>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d102      	bne.n	8010b64 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b62:	e024      	b.n	8010bae <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8010b64:	4b14      	ldr	r3, [pc, #80]	; (8010bb8 <dhcp_inc_pcb_refcount+0x8c>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	7a5a      	ldrb	r2, [r3, #9]
 8010b6a:	4b13      	ldr	r3, [pc, #76]	; (8010bb8 <dhcp_inc_pcb_refcount+0x8c>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	f042 0220 	orr.w	r2, r2, #32
 8010b72:	b2d2      	uxtb	r2, r2
 8010b74:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8010b76:	4b10      	ldr	r3, [pc, #64]	; (8010bb8 <dhcp_inc_pcb_refcount+0x8c>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2244      	movs	r2, #68	; 0x44
 8010b7c:	4912      	ldr	r1, [pc, #72]	; (8010bc8 <dhcp_inc_pcb_refcount+0x9c>)
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f00f f9e0 	bl	801ff44 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8010b84:	4b0c      	ldr	r3, [pc, #48]	; (8010bb8 <dhcp_inc_pcb_refcount+0x8c>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2243      	movs	r2, #67	; 0x43
 8010b8a:	490f      	ldr	r1, [pc, #60]	; (8010bc8 <dhcp_inc_pcb_refcount+0x9c>)
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f00f fa61 	bl	8020054 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8010b92:	4b09      	ldr	r3, [pc, #36]	; (8010bb8 <dhcp_inc_pcb_refcount+0x8c>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2200      	movs	r2, #0
 8010b98:	490c      	ldr	r1, [pc, #48]	; (8010bcc <dhcp_inc_pcb_refcount+0xa0>)
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f00f faf0 	bl	8020180 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010ba0:	4b04      	ldr	r3, [pc, #16]	; (8010bb4 <dhcp_inc_pcb_refcount+0x88>)
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	3301      	adds	r3, #1
 8010ba6:	b2da      	uxtb	r2, r3
 8010ba8:	4b02      	ldr	r3, [pc, #8]	; (8010bb4 <dhcp_inc_pcb_refcount+0x88>)
 8010baa:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8010bac:	2300      	movs	r3, #0
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	24009b2c 	.word	0x24009b2c
 8010bb8:	24009b28 	.word	0x24009b28
 8010bbc:	0802202c 	.word	0x0802202c
 8010bc0:	08022068 	.word	0x08022068
 8010bc4:	08022090 	.word	0x08022090
 8010bc8:	08025de8 	.word	0x08025de8
 8010bcc:	08012505 	.word	0x08012505

08010bd0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8010bd4:	4b0e      	ldr	r3, [pc, #56]	; (8010c10 <dhcp_dec_pcb_refcount+0x40>)
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d105      	bne.n	8010be8 <dhcp_dec_pcb_refcount+0x18>
 8010bdc:	4b0d      	ldr	r3, [pc, #52]	; (8010c14 <dhcp_dec_pcb_refcount+0x44>)
 8010bde:	22ff      	movs	r2, #255	; 0xff
 8010be0:	490d      	ldr	r1, [pc, #52]	; (8010c18 <dhcp_dec_pcb_refcount+0x48>)
 8010be2:	480e      	ldr	r0, [pc, #56]	; (8010c1c <dhcp_dec_pcb_refcount+0x4c>)
 8010be4:	f00f fcb4 	bl	8020550 <iprintf>
  dhcp_pcb_refcount--;
 8010be8:	4b09      	ldr	r3, [pc, #36]	; (8010c10 <dhcp_dec_pcb_refcount+0x40>)
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	3b01      	subs	r3, #1
 8010bee:	b2da      	uxtb	r2, r3
 8010bf0:	4b07      	ldr	r3, [pc, #28]	; (8010c10 <dhcp_dec_pcb_refcount+0x40>)
 8010bf2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8010bf4:	4b06      	ldr	r3, [pc, #24]	; (8010c10 <dhcp_dec_pcb_refcount+0x40>)
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d107      	bne.n	8010c0c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8010bfc:	4b08      	ldr	r3, [pc, #32]	; (8010c20 <dhcp_dec_pcb_refcount+0x50>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f00f fadd 	bl	80201c0 <udp_remove>
    dhcp_pcb = NULL;
 8010c06:	4b06      	ldr	r3, [pc, #24]	; (8010c20 <dhcp_dec_pcb_refcount+0x50>)
 8010c08:	2200      	movs	r2, #0
 8010c0a:	601a      	str	r2, [r3, #0]
  }
}
 8010c0c:	bf00      	nop
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	24009b2c 	.word	0x24009b2c
 8010c14:	0802202c 	.word	0x0802202c
 8010c18:	080220b8 	.word	0x080220b8
 8010c1c:	08022090 	.word	0x08022090
 8010c20:	24009b28 	.word	0x24009b28

08010c24 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010c32:	210c      	movs	r1, #12
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f001 f877 	bl	8011d28 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010c3a:	4b06      	ldr	r3, [pc, #24]	; (8010c54 <dhcp_handle_nak+0x30>)
 8010c3c:	4a05      	ldr	r2, [pc, #20]	; (8010c54 <dhcp_handle_nak+0x30>)
 8010c3e:	4905      	ldr	r1, [pc, #20]	; (8010c54 <dhcp_handle_nak+0x30>)
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f005 fedf 	bl	8016a04 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 fc6a 	bl	8011520 <dhcp_discover>
}
 8010c4c:	bf00      	nop
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	08025de8 	.word	0x08025de8

08010c58 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c64:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8010c66:	2108      	movs	r1, #8
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	f001 f85d 	bl	8011d28 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	331c      	adds	r3, #28
 8010c72:	2200      	movs	r2, #0
 8010c74:	4619      	mov	r1, r3
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f002 fe9a 	bl	80139b0 <etharp_query>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	799b      	ldrb	r3, [r3, #6]
 8010c84:	2bff      	cmp	r3, #255	; 0xff
 8010c86:	d005      	beq.n	8010c94 <dhcp_check+0x3c>
    dhcp->tries++;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	799b      	ldrb	r3, [r3, #6]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8010c94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010c98:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010c9a:	893b      	ldrh	r3, [r7, #8]
 8010c9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010ca0:	4a06      	ldr	r2, [pc, #24]	; (8010cbc <dhcp_check+0x64>)
 8010ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8010ca6:	1152      	asrs	r2, r2, #5
 8010ca8:	17db      	asrs	r3, r3, #31
 8010caa:	1ad3      	subs	r3, r2, r3
 8010cac:	b29a      	uxth	r2, r3
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8010cb2:	bf00      	nop
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	10624dd3 	.word	0x10624dd3

08010cc0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8010cd0:	4b0c      	ldr	r3, [pc, #48]	; (8010d04 <dhcp_handle_offer+0x44>)
 8010cd2:	789b      	ldrb	r3, [r3, #2]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d011      	beq.n	8010cfc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8010cde:	4b0a      	ldr	r3, [pc, #40]	; (8010d08 <dhcp_handle_offer+0x48>)
 8010ce0:	689b      	ldr	r3, [r3, #8]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7ff ff09 	bl	8010afa <lwip_htonl>
 8010ce8:	4602      	mov	r2, r0
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	691a      	ldr	r2, [r3, #16]
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f000 f808 	bl	8010d0c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8010cfc:	bf00      	nop
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	24009b1c 	.word	0x24009b1c
 8010d08:	24009af4 	.word	0x24009af4

08010d0c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8010d0c:	b5b0      	push	{r4, r5, r7, lr}
 8010d0e:	b08a      	sub	sp, #40	; 0x28
 8010d10:	af02      	add	r7, sp, #8
 8010d12:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d109      	bne.n	8010d2e <dhcp_select+0x22>
 8010d1a:	4b71      	ldr	r3, [pc, #452]	; (8010ee0 <dhcp_select+0x1d4>)
 8010d1c:	f240 1277 	movw	r2, #375	; 0x177
 8010d20:	4970      	ldr	r1, [pc, #448]	; (8010ee4 <dhcp_select+0x1d8>)
 8010d22:	4871      	ldr	r0, [pc, #452]	; (8010ee8 <dhcp_select+0x1dc>)
 8010d24:	f00f fc14 	bl	8020550 <iprintf>
 8010d28:	f06f 030f 	mvn.w	r3, #15
 8010d2c:	e0d3      	b.n	8010ed6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d32:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8010d34:	69bb      	ldr	r3, [r7, #24]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d109      	bne.n	8010d4e <dhcp_select+0x42>
 8010d3a:	4b69      	ldr	r3, [pc, #420]	; (8010ee0 <dhcp_select+0x1d4>)
 8010d3c:	f240 1279 	movw	r2, #377	; 0x179
 8010d40:	496a      	ldr	r1, [pc, #424]	; (8010eec <dhcp_select+0x1e0>)
 8010d42:	4869      	ldr	r0, [pc, #420]	; (8010ee8 <dhcp_select+0x1dc>)
 8010d44:	f00f fc04 	bl	8020550 <iprintf>
 8010d48:	f06f 0305 	mvn.w	r3, #5
 8010d4c:	e0c3      	b.n	8010ed6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8010d4e:	2101      	movs	r1, #1
 8010d50:	69b8      	ldr	r0, [r7, #24]
 8010d52:	f000 ffe9 	bl	8011d28 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010d56:	f107 030c 	add.w	r3, r7, #12
 8010d5a:	2203      	movs	r2, #3
 8010d5c:	69b9      	ldr	r1, [r7, #24]
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f001 fc9e 	bl	80126a0 <dhcp_create_msg>
 8010d64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 8085 	beq.w	8010e78 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010d74:	89b8      	ldrh	r0, [r7, #12]
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d7c:	2302      	movs	r3, #2
 8010d7e:	2239      	movs	r2, #57	; 0x39
 8010d80:	f000 ffec 	bl	8011d5c <dhcp_option>
 8010d84:	4603      	mov	r3, r0
 8010d86:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010d88:	89b8      	ldrh	r0, [r7, #12]
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010d94:	461a      	mov	r2, r3
 8010d96:	f001 f83b 	bl	8011e10 <dhcp_option_short>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010d9e:	89b8      	ldrh	r0, [r7, #12]
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010da6:	2304      	movs	r3, #4
 8010da8:	2232      	movs	r2, #50	; 0x32
 8010daa:	f000 ffd7 	bl	8011d5c <dhcp_option>
 8010dae:	4603      	mov	r3, r0
 8010db0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010db2:	89bc      	ldrh	r4, [r7, #12]
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	69db      	ldr	r3, [r3, #28]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7ff fe9b 	bl	8010afa <lwip_htonl>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	4629      	mov	r1, r5
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f001 f852 	bl	8011e74 <dhcp_option_long>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010dd4:	89b8      	ldrh	r0, [r7, #12]
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010ddc:	2304      	movs	r3, #4
 8010dde:	2236      	movs	r2, #54	; 0x36
 8010de0:	f000 ffbc 	bl	8011d5c <dhcp_option>
 8010de4:	4603      	mov	r3, r0
 8010de6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8010de8:	89bc      	ldrh	r4, [r7, #12]
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010df0:	69bb      	ldr	r3, [r7, #24]
 8010df2:	699b      	ldr	r3, [r3, #24]
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7ff fe80 	bl	8010afa <lwip_htonl>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	4629      	mov	r1, r5
 8010e00:	4620      	mov	r0, r4
 8010e02:	f001 f837 	bl	8011e74 <dhcp_option_long>
 8010e06:	4603      	mov	r3, r0
 8010e08:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010e0a:	89b8      	ldrh	r0, [r7, #12]
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010e12:	2304      	movs	r3, #4
 8010e14:	2237      	movs	r2, #55	; 0x37
 8010e16:	f000 ffa1 	bl	8011d5c <dhcp_option>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010e1e:	2300      	movs	r3, #0
 8010e20:	77bb      	strb	r3, [r7, #30]
 8010e22:	e00e      	b.n	8010e42 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010e24:	89b8      	ldrh	r0, [r7, #12]
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010e2c:	7fbb      	ldrb	r3, [r7, #30]
 8010e2e:	4a30      	ldr	r2, [pc, #192]	; (8010ef0 <dhcp_select+0x1e4>)
 8010e30:	5cd3      	ldrb	r3, [r2, r3]
 8010e32:	461a      	mov	r2, r3
 8010e34:	f000 ffc6 	bl	8011dc4 <dhcp_option_byte>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010e3c:	7fbb      	ldrb	r3, [r7, #30]
 8010e3e:	3301      	adds	r3, #1
 8010e40:	77bb      	strb	r3, [r7, #30]
 8010e42:	7fbb      	ldrb	r3, [r7, #30]
 8010e44:	2b03      	cmp	r3, #3
 8010e46:	d9ed      	bls.n	8010e24 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010e48:	89b8      	ldrh	r0, [r7, #12]
 8010e4a:	693b      	ldr	r3, [r7, #16]
 8010e4c:	33f0      	adds	r3, #240	; 0xf0
 8010e4e:	697a      	ldr	r2, [r7, #20]
 8010e50:	4619      	mov	r1, r3
 8010e52:	f001 fcfb 	bl	801284c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010e56:	4b27      	ldr	r3, [pc, #156]	; (8010ef4 <dhcp_select+0x1e8>)
 8010e58:	6818      	ldr	r0, [r3, #0]
 8010e5a:	4b27      	ldr	r3, [pc, #156]	; (8010ef8 <dhcp_select+0x1ec>)
 8010e5c:	9301      	str	r3, [sp, #4]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	9300      	str	r3, [sp, #0]
 8010e62:	2343      	movs	r3, #67	; 0x43
 8010e64:	4a25      	ldr	r2, [pc, #148]	; (8010efc <dhcp_select+0x1f0>)
 8010e66:	6979      	ldr	r1, [r7, #20]
 8010e68:	f00e ff86 	bl	801fd78 <udp_sendto_if_src>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010e70:	6978      	ldr	r0, [r7, #20]
 8010e72:	f006 fc7b 	bl	801776c <pbuf_free>
 8010e76:	e001      	b.n	8010e7c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010e78:	23ff      	movs	r3, #255	; 0xff
 8010e7a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	799b      	ldrb	r3, [r3, #6]
 8010e80:	2bff      	cmp	r3, #255	; 0xff
 8010e82:	d005      	beq.n	8010e90 <dhcp_select+0x184>
    dhcp->tries++;
 8010e84:	69bb      	ldr	r3, [r7, #24]
 8010e86:	799b      	ldrb	r3, [r3, #6]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	b2da      	uxtb	r2, r3
 8010e8c:	69bb      	ldr	r3, [r7, #24]
 8010e8e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010e90:	69bb      	ldr	r3, [r7, #24]
 8010e92:	799b      	ldrb	r3, [r3, #6]
 8010e94:	2b05      	cmp	r3, #5
 8010e96:	d80d      	bhi.n	8010eb4 <dhcp_select+0x1a8>
 8010e98:	69bb      	ldr	r3, [r7, #24]
 8010e9a:	799b      	ldrb	r3, [r3, #6]
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	4093      	lsls	r3, r2
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	0152      	lsls	r2, r2, #5
 8010ea8:	1ad2      	subs	r2, r2, r3
 8010eaa:	0092      	lsls	r2, r2, #2
 8010eac:	4413      	add	r3, r2
 8010eae:	00db      	lsls	r3, r3, #3
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	e001      	b.n	8010eb8 <dhcp_select+0x1ac>
 8010eb4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010eb8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010eba:	89fb      	ldrh	r3, [r7, #14]
 8010ebc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010ec0:	4a0f      	ldr	r2, [pc, #60]	; (8010f00 <dhcp_select+0x1f4>)
 8010ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8010ec6:	1152      	asrs	r2, r2, #5
 8010ec8:	17db      	asrs	r3, r3, #31
 8010eca:	1ad3      	subs	r3, r2, r3
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010ed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3720      	adds	r7, #32
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bdb0      	pop	{r4, r5, r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	0802202c 	.word	0x0802202c
 8010ee4:	080220dc 	.word	0x080220dc
 8010ee8:	08022090 	.word	0x08022090
 8010eec:	080220f8 	.word	0x080220f8
 8010ef0:	24000030 	.word	0x24000030
 8010ef4:	24009b28 	.word	0x24009b28
 8010ef8:	08025de8 	.word	0x08025de8
 8010efc:	08025dec 	.word	0x08025dec
 8010f00:	10624dd3 	.word	0x10624dd3

08010f04 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8010f0a:	4b27      	ldr	r3, [pc, #156]	; (8010fa8 <dhcp_coarse_tmr+0xa4>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	607b      	str	r3, [r7, #4]
 8010f10:	e042      	b.n	8010f98 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f16:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d039      	beq.n	8010f92 <dhcp_coarse_tmr+0x8e>
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	795b      	ldrb	r3, [r3, #5]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d035      	beq.n	8010f92 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	8a9b      	ldrh	r3, [r3, #20]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d012      	beq.n	8010f54 <dhcp_coarse_tmr+0x50>
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	8a5b      	ldrh	r3, [r3, #18]
 8010f32:	3301      	adds	r3, #1
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	825a      	strh	r2, [r3, #18]
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	8a5a      	ldrh	r2, [r3, #18]
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	8a9b      	ldrh	r3, [r3, #20]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d106      	bne.n	8010f54 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 fe54 	bl	8011bf4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f000 f98b 	bl	8011268 <dhcp_start>
 8010f52:	e01e      	b.n	8010f92 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	8a1b      	ldrh	r3, [r3, #16]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d00b      	beq.n	8010f74 <dhcp_coarse_tmr+0x70>
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	8a1b      	ldrh	r3, [r3, #16]
 8010f60:	1e5a      	subs	r2, r3, #1
 8010f62:	b291      	uxth	r1, r2
 8010f64:	683a      	ldr	r2, [r7, #0]
 8010f66:	8211      	strh	r1, [r2, #16]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d103      	bne.n	8010f74 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f000 f8c7 	bl	8011100 <dhcp_t2_timeout>
 8010f72:	e00e      	b.n	8010f92 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	89db      	ldrh	r3, [r3, #14]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00a      	beq.n	8010f92 <dhcp_coarse_tmr+0x8e>
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	89db      	ldrh	r3, [r3, #14]
 8010f80:	1e5a      	subs	r2, r3, #1
 8010f82:	b291      	uxth	r1, r2
 8010f84:	683a      	ldr	r2, [r7, #0]
 8010f86:	81d1      	strh	r1, [r2, #14]
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	d102      	bne.n	8010f92 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 f888 	bl	80110a2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	607b      	str	r3, [r7, #4]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d1b9      	bne.n	8010f12 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8010f9e:	bf00      	nop
 8010fa0:	bf00      	nop
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	2400d330 	.word	0x2400d330

08010fac <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8010fb2:	4b16      	ldr	r3, [pc, #88]	; (801100c <dhcp_fine_tmr+0x60>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	607b      	str	r3, [r7, #4]
 8010fb8:	e020      	b.n	8010ffc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fbe:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d017      	beq.n	8010ff6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	891b      	ldrh	r3, [r3, #8]
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d906      	bls.n	8010fdc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	891b      	ldrh	r3, [r3, #8]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	b29a      	uxth	r2, r3
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	811a      	strh	r2, [r3, #8]
 8010fda:	e00c      	b.n	8010ff6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	891b      	ldrh	r3, [r3, #8]
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d108      	bne.n	8010ff6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	891b      	ldrh	r3, [r3, #8]
 8010fe8:	3b01      	subs	r3, #1
 8010fea:	b29a      	uxth	r2, r3
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 f80d 	bl	8011010 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	607b      	str	r3, [r7, #4]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1db      	bne.n	8010fba <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8011002:	bf00      	nop
 8011004:	bf00      	nop
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	2400d330 	.word	0x2400d330

08011010 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801101c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	795b      	ldrb	r3, [r3, #5]
 8011022:	2b0c      	cmp	r3, #12
 8011024:	d003      	beq.n	801102e <dhcp_timeout+0x1e>
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	795b      	ldrb	r3, [r3, #5]
 801102a:	2b06      	cmp	r3, #6
 801102c:	d103      	bne.n	8011036 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 fa76 	bl	8011520 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011034:	e031      	b.n	801109a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	795b      	ldrb	r3, [r3, #5]
 801103a:	2b01      	cmp	r3, #1
 801103c:	d10e      	bne.n	801105c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	799b      	ldrb	r3, [r3, #6]
 8011042:	2b05      	cmp	r3, #5
 8011044:	d803      	bhi.n	801104e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f7ff fe60 	bl	8010d0c <dhcp_select>
}
 801104c:	e025      	b.n	801109a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 fdd0 	bl	8011bf4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 f907 	bl	8011268 <dhcp_start>
}
 801105a:	e01e      	b.n	801109a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	795b      	ldrb	r3, [r3, #5]
 8011060:	2b08      	cmp	r3, #8
 8011062:	d10b      	bne.n	801107c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	799b      	ldrb	r3, [r3, #6]
 8011068:	2b01      	cmp	r3, #1
 801106a:	d803      	bhi.n	8011074 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f7ff fdf3 	bl	8010c58 <dhcp_check>
}
 8011072:	e012      	b.n	801109a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 faf5 	bl	8011664 <dhcp_bind>
}
 801107a:	e00e      	b.n	801109a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	795b      	ldrb	r3, [r3, #5]
 8011080:	2b03      	cmp	r3, #3
 8011082:	d10a      	bne.n	801109a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	799b      	ldrb	r3, [r3, #6]
 8011088:	2b01      	cmp	r3, #1
 801108a:	d803      	bhi.n	8011094 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f000 fcfb 	bl	8011a88 <dhcp_reboot>
}
 8011092:	e002      	b.n	801109a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 fa43 	bl	8011520 <dhcp_discover>
}
 801109a:	bf00      	nop
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}

080110a2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b084      	sub	sp, #16
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	795b      	ldrb	r3, [r3, #5]
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d007      	beq.n	80110c8 <dhcp_t1_timeout+0x26>
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	795b      	ldrb	r3, [r3, #5]
 80110bc:	2b0a      	cmp	r3, #10
 80110be:	d003      	beq.n	80110c8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80110c4:	2b05      	cmp	r3, #5
 80110c6:	d117      	bne.n	80110f8 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f000 fba5 	bl	8011818 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	899b      	ldrh	r3, [r3, #12]
 80110d2:	461a      	mov	r2, r3
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	8a5b      	ldrh	r3, [r3, #18]
 80110d8:	1ad3      	subs	r3, r2, r3
 80110da:	2b01      	cmp	r3, #1
 80110dc:	dd0c      	ble.n	80110f8 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	899b      	ldrh	r3, [r3, #12]
 80110e2:	461a      	mov	r2, r3
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	8a5b      	ldrh	r3, [r3, #18]
 80110e8:	1ad3      	subs	r3, r2, r3
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	da00      	bge.n	80110f0 <dhcp_t1_timeout+0x4e>
 80110ee:	3301      	adds	r3, #1
 80110f0:	105b      	asrs	r3, r3, #1
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80110f8:	bf00      	nop
 80110fa:	3710      	adds	r7, #16
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801110c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	795b      	ldrb	r3, [r3, #5]
 8011112:	2b01      	cmp	r3, #1
 8011114:	d00b      	beq.n	801112e <dhcp_t2_timeout+0x2e>
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	795b      	ldrb	r3, [r3, #5]
 801111a:	2b0a      	cmp	r3, #10
 801111c:	d007      	beq.n	801112e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011122:	2b05      	cmp	r3, #5
 8011124:	d003      	beq.n	801112e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	795b      	ldrb	r3, [r3, #5]
 801112a:	2b04      	cmp	r3, #4
 801112c:	d117      	bne.n	801115e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 fc0e 	bl	8011950 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	8a9b      	ldrh	r3, [r3, #20]
 8011138:	461a      	mov	r2, r3
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	8a5b      	ldrh	r3, [r3, #18]
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	2b01      	cmp	r3, #1
 8011142:	dd0c      	ble.n	801115e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	8a9b      	ldrh	r3, [r3, #20]
 8011148:	461a      	mov	r2, r3
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	8a5b      	ldrh	r3, [r3, #18]
 801114e:	1ad3      	subs	r3, r2, r3
 8011150:	2b00      	cmp	r3, #0
 8011152:	da00      	bge.n	8011156 <dhcp_t2_timeout+0x56>
 8011154:	3301      	adds	r3, #1
 8011156:	105b      	asrs	r3, r3, #1
 8011158:	b29a      	uxth	r2, r3
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801115e:	bf00      	nop
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
	...

08011168 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b086      	sub	sp, #24
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011176:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	2200      	movs	r2, #0
 801117c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	2200      	movs	r2, #0
 8011182:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011184:	4b36      	ldr	r3, [pc, #216]	; (8011260 <dhcp_handle_ack+0xf8>)
 8011186:	78db      	ldrb	r3, [r3, #3]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d003      	beq.n	8011194 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801118c:	4b35      	ldr	r3, [pc, #212]	; (8011264 <dhcp_handle_ack+0xfc>)
 801118e:	68da      	ldr	r2, [r3, #12]
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011194:	4b32      	ldr	r3, [pc, #200]	; (8011260 <dhcp_handle_ack+0xf8>)
 8011196:	791b      	ldrb	r3, [r3, #4]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d004      	beq.n	80111a6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801119c:	4b31      	ldr	r3, [pc, #196]	; (8011264 <dhcp_handle_ack+0xfc>)
 801119e:	691a      	ldr	r2, [r3, #16]
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80111a4:	e004      	b.n	80111b0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111aa:	085a      	lsrs	r2, r3, #1
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80111b0:	4b2b      	ldr	r3, [pc, #172]	; (8011260 <dhcp_handle_ack+0xf8>)
 80111b2:	795b      	ldrb	r3, [r3, #5]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d004      	beq.n	80111c2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80111b8:	4b2a      	ldr	r3, [pc, #168]	; (8011264 <dhcp_handle_ack+0xfc>)
 80111ba:	695a      	ldr	r2, [r3, #20]
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	631a      	str	r2, [r3, #48]	; 0x30
 80111c0:	e007      	b.n	80111d2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111c6:	4613      	mov	r3, r2
 80111c8:	00db      	lsls	r3, r3, #3
 80111ca:	1a9b      	subs	r3, r3, r2
 80111cc:	08da      	lsrs	r2, r3, #3
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	691a      	ldr	r2, [r3, #16]
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80111da:	4b21      	ldr	r3, [pc, #132]	; (8011260 <dhcp_handle_ack+0xf8>)
 80111dc:	799b      	ldrb	r3, [r3, #6]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d00b      	beq.n	80111fa <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80111e2:	4b20      	ldr	r3, [pc, #128]	; (8011264 <dhcp_handle_ack+0xfc>)
 80111e4:	699b      	ldr	r3, [r3, #24]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7ff fc87 	bl	8010afa <lwip_htonl>
 80111ec:	4602      	mov	r2, r0
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	2201      	movs	r2, #1
 80111f6:	71da      	strb	r2, [r3, #7]
 80111f8:	e002      	b.n	8011200 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	2200      	movs	r2, #0
 80111fe:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8011200:	4b17      	ldr	r3, [pc, #92]	; (8011260 <dhcp_handle_ack+0xf8>)
 8011202:	79db      	ldrb	r3, [r3, #7]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d007      	beq.n	8011218 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8011208:	4b16      	ldr	r3, [pc, #88]	; (8011264 <dhcp_handle_ack+0xfc>)
 801120a:	69db      	ldr	r3, [r3, #28]
 801120c:	4618      	mov	r0, r3
 801120e:	f7ff fc74 	bl	8010afa <lwip_htonl>
 8011212:	4602      	mov	r2, r0
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8011218:	2300      	movs	r3, #0
 801121a:	75fb      	strb	r3, [r7, #23]
 801121c:	e013      	b.n	8011246 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801121e:	7dfb      	ldrb	r3, [r7, #23]
 8011220:	3308      	adds	r3, #8
 8011222:	4a10      	ldr	r2, [pc, #64]	; (8011264 <dhcp_handle_ack+0xfc>)
 8011224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011228:	4618      	mov	r0, r3
 801122a:	f7ff fc66 	bl	8010afa <lwip_htonl>
 801122e:	4603      	mov	r3, r0
 8011230:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8011232:	f107 020c 	add.w	r2, r7, #12
 8011236:	7dfb      	ldrb	r3, [r7, #23]
 8011238:	4611      	mov	r1, r2
 801123a:	4618      	mov	r0, r3
 801123c:	f001 fb62 	bl	8012904 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8011240:	7dfb      	ldrb	r3, [r7, #23]
 8011242:	3301      	adds	r3, #1
 8011244:	75fb      	strb	r3, [r7, #23]
 8011246:	7dfb      	ldrb	r3, [r7, #23]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d805      	bhi.n	8011258 <dhcp_handle_ack+0xf0>
 801124c:	7dfb      	ldrb	r3, [r7, #23]
 801124e:	3308      	adds	r3, #8
 8011250:	4a03      	ldr	r2, [pc, #12]	; (8011260 <dhcp_handle_ack+0xf8>)
 8011252:	5cd3      	ldrb	r3, [r2, r3]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d1e2      	bne.n	801121e <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8011258:	bf00      	nop
 801125a:	3718      	adds	r7, #24
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	24009b1c 	.word	0x24009b1c
 8011264:	24009af4 	.word	0x24009af4

08011268 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d109      	bne.n	801128a <dhcp_start+0x22>
 8011276:	4b37      	ldr	r3, [pc, #220]	; (8011354 <dhcp_start+0xec>)
 8011278:	f240 22e7 	movw	r2, #743	; 0x2e7
 801127c:	4936      	ldr	r1, [pc, #216]	; (8011358 <dhcp_start+0xf0>)
 801127e:	4837      	ldr	r0, [pc, #220]	; (801135c <dhcp_start+0xf4>)
 8011280:	f00f f966 	bl	8020550 <iprintf>
 8011284:	f06f 030f 	mvn.w	r3, #15
 8011288:	e060      	b.n	801134c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011290:	f003 0301 	and.w	r3, r3, #1
 8011294:	2b00      	cmp	r3, #0
 8011296:	d109      	bne.n	80112ac <dhcp_start+0x44>
 8011298:	4b2e      	ldr	r3, [pc, #184]	; (8011354 <dhcp_start+0xec>)
 801129a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801129e:	4930      	ldr	r1, [pc, #192]	; (8011360 <dhcp_start+0xf8>)
 80112a0:	482e      	ldr	r0, [pc, #184]	; (801135c <dhcp_start+0xf4>)
 80112a2:	f00f f955 	bl	8020550 <iprintf>
 80112a6:	f06f 030f 	mvn.w	r3, #15
 80112aa:	e04f      	b.n	801134c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80112b6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80112ba:	d202      	bcs.n	80112c2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80112bc:	f04f 33ff 	mov.w	r3, #4294967295
 80112c0:	e044      	b.n	801134c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d10d      	bne.n	80112e4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80112c8:	2034      	movs	r0, #52	; 0x34
 80112ca:	f004 fec9 	bl	8016060 <mem_malloc>
 80112ce:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d102      	bne.n	80112dc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80112d6:	f04f 33ff 	mov.w	r3, #4294967295
 80112da:	e037      	b.n	801134c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	68fa      	ldr	r2, [r7, #12]
 80112e0:	629a      	str	r2, [r3, #40]	; 0x28
 80112e2:	e005      	b.n	80112f0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	791b      	ldrb	r3, [r3, #4]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d001      	beq.n	80112f0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80112ec:	f7ff fc70 	bl	8010bd0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80112f0:	2234      	movs	r2, #52	; 0x34
 80112f2:	2100      	movs	r1, #0
 80112f4:	68f8      	ldr	r0, [r7, #12]
 80112f6:	f00f f843 	bl	8020380 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80112fa:	f7ff fc17 	bl	8010b2c <dhcp_inc_pcb_refcount>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d002      	beq.n	801130a <dhcp_start+0xa2>
    return ERR_MEM;
 8011304:	f04f 33ff 	mov.w	r3, #4294967295
 8011308:	e020      	b.n	801134c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2201      	movs	r2, #1
 801130e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011316:	f003 0304 	and.w	r3, r3, #4
 801131a:	2b00      	cmp	r3, #0
 801131c:	d105      	bne.n	801132a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801131e:	2102      	movs	r1, #2
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f000 fd01 	bl	8011d28 <dhcp_set_state>
    return ERR_OK;
 8011326:	2300      	movs	r3, #0
 8011328:	e010      	b.n	801134c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 f8f8 	bl	8011520 <dhcp_discover>
 8011330:	4603      	mov	r3, r0
 8011332:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8011334:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d005      	beq.n	8011348 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f000 fc59 	bl	8011bf4 <dhcp_release_and_stop>
    return ERR_MEM;
 8011342:	f04f 33ff 	mov.w	r3, #4294967295
 8011346:	e001      	b.n	801134c <dhcp_start+0xe4>
  }
  return result;
 8011348:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	0802202c 	.word	0x0802202c
 8011358:	08022114 	.word	0x08022114
 801135c:	08022090 	.word	0x08022090
 8011360:	08022158 	.word	0x08022158

08011364 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011370:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d025      	beq.n	80113c4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	795b      	ldrb	r3, [r3, #5]
 801137c:	2b0a      	cmp	r3, #10
 801137e:	d008      	beq.n	8011392 <dhcp_network_changed+0x2e>
 8011380:	2b0a      	cmp	r3, #10
 8011382:	dc0d      	bgt.n	80113a0 <dhcp_network_changed+0x3c>
 8011384:	2b00      	cmp	r3, #0
 8011386:	d01f      	beq.n	80113c8 <dhcp_network_changed+0x64>
 8011388:	2b00      	cmp	r3, #0
 801138a:	db09      	blt.n	80113a0 <dhcp_network_changed+0x3c>
 801138c:	3b03      	subs	r3, #3
 801138e:	2b02      	cmp	r3, #2
 8011390:	d806      	bhi.n	80113a0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	2200      	movs	r2, #0
 8011396:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f000 fb75 	bl	8011a88 <dhcp_reboot>
      break;
 801139e:	e014      	b.n	80113ca <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	795b      	ldrb	r3, [r3, #5]
 80113a4:	2b0c      	cmp	r3, #12
 80113a6:	d906      	bls.n	80113b6 <dhcp_network_changed+0x52>
 80113a8:	4b09      	ldr	r3, [pc, #36]	; (80113d0 <dhcp_network_changed+0x6c>)
 80113aa:	f240 326d 	movw	r2, #877	; 0x36d
 80113ae:	4909      	ldr	r1, [pc, #36]	; (80113d4 <dhcp_network_changed+0x70>)
 80113b0:	4809      	ldr	r0, [pc, #36]	; (80113d8 <dhcp_network_changed+0x74>)
 80113b2:	f00f f8cd 	bl	8020550 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2200      	movs	r2, #0
 80113ba:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f000 f8af 	bl	8011520 <dhcp_discover>
      break;
 80113c2:	e002      	b.n	80113ca <dhcp_network_changed+0x66>
    return;
 80113c4:	bf00      	nop
 80113c6:	e000      	b.n	80113ca <dhcp_network_changed+0x66>
      break;
 80113c8:	bf00      	nop
  }
}
 80113ca:	3710      	adds	r7, #16
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	0802202c 	.word	0x0802202c
 80113d4:	0802217c 	.word	0x0802217c
 80113d8:	08022090 	.word	0x08022090

080113dc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d107      	bne.n	80113fc <dhcp_arp_reply+0x20>
 80113ec:	4b0e      	ldr	r3, [pc, #56]	; (8011428 <dhcp_arp_reply+0x4c>)
 80113ee:	f240 328b 	movw	r2, #907	; 0x38b
 80113f2:	490e      	ldr	r1, [pc, #56]	; (801142c <dhcp_arp_reply+0x50>)
 80113f4:	480e      	ldr	r0, [pc, #56]	; (8011430 <dhcp_arp_reply+0x54>)
 80113f6:	f00f f8ab 	bl	8020550 <iprintf>
 80113fa:	e012      	b.n	8011422 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011400:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d00c      	beq.n	8011422 <dhcp_arp_reply+0x46>
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	795b      	ldrb	r3, [r3, #5]
 801140c:	2b08      	cmp	r3, #8
 801140e:	d108      	bne.n	8011422 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	69db      	ldr	r3, [r3, #28]
 8011418:	429a      	cmp	r2, r3
 801141a:	d102      	bne.n	8011422 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 f809 	bl	8011434 <dhcp_decline>
    }
  }
}
 8011422:	3710      	adds	r7, #16
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}
 8011428:	0802202c 	.word	0x0802202c
 801142c:	08022114 	.word	0x08022114
 8011430:	08022090 	.word	0x08022090

08011434 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011434:	b5b0      	push	{r4, r5, r7, lr}
 8011436:	b08a      	sub	sp, #40	; 0x28
 8011438:	af02      	add	r7, sp, #8
 801143a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011440:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011442:	210c      	movs	r1, #12
 8011444:	69b8      	ldr	r0, [r7, #24]
 8011446:	f000 fc6f 	bl	8011d28 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801144a:	f107 030c 	add.w	r3, r7, #12
 801144e:	2204      	movs	r2, #4
 8011450:	69b9      	ldr	r1, [r7, #24]
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f001 f924 	bl	80126a0 <dhcp_create_msg>
 8011458:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d035      	beq.n	80114cc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011466:	89b8      	ldrh	r0, [r7, #12]
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801146e:	2304      	movs	r3, #4
 8011470:	2232      	movs	r2, #50	; 0x32
 8011472:	f000 fc73 	bl	8011d5c <dhcp_option>
 8011476:	4603      	mov	r3, r0
 8011478:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801147a:	89bc      	ldrh	r4, [r7, #12]
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	69db      	ldr	r3, [r3, #28]
 8011486:	4618      	mov	r0, r3
 8011488:	f7ff fb37 	bl	8010afa <lwip_htonl>
 801148c:	4603      	mov	r3, r0
 801148e:	461a      	mov	r2, r3
 8011490:	4629      	mov	r1, r5
 8011492:	4620      	mov	r0, r4
 8011494:	f000 fcee 	bl	8011e74 <dhcp_option_long>
 8011498:	4603      	mov	r3, r0
 801149a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801149c:	89b8      	ldrh	r0, [r7, #12]
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	33f0      	adds	r3, #240	; 0xf0
 80114a2:	697a      	ldr	r2, [r7, #20]
 80114a4:	4619      	mov	r1, r3
 80114a6:	f001 f9d1 	bl	801284c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80114aa:	4b19      	ldr	r3, [pc, #100]	; (8011510 <dhcp_decline+0xdc>)
 80114ac:	6818      	ldr	r0, [r3, #0]
 80114ae:	4b19      	ldr	r3, [pc, #100]	; (8011514 <dhcp_decline+0xe0>)
 80114b0:	9301      	str	r3, [sp, #4]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	9300      	str	r3, [sp, #0]
 80114b6:	2343      	movs	r3, #67	; 0x43
 80114b8:	4a17      	ldr	r2, [pc, #92]	; (8011518 <dhcp_decline+0xe4>)
 80114ba:	6979      	ldr	r1, [r7, #20]
 80114bc:	f00e fc5c 	bl	801fd78 <udp_sendto_if_src>
 80114c0:	4603      	mov	r3, r0
 80114c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80114c4:	6978      	ldr	r0, [r7, #20]
 80114c6:	f006 f951 	bl	801776c <pbuf_free>
 80114ca:	e001      	b.n	80114d0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80114cc:	23ff      	movs	r3, #255	; 0xff
 80114ce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	799b      	ldrb	r3, [r3, #6]
 80114d4:	2bff      	cmp	r3, #255	; 0xff
 80114d6:	d005      	beq.n	80114e4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80114d8:	69bb      	ldr	r3, [r7, #24]
 80114da:	799b      	ldrb	r3, [r3, #6]
 80114dc:	3301      	adds	r3, #1
 80114de:	b2da      	uxtb	r2, r3
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80114e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80114e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80114ea:	89fb      	ldrh	r3, [r7, #14]
 80114ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80114f0:	4a0a      	ldr	r2, [pc, #40]	; (801151c <dhcp_decline+0xe8>)
 80114f2:	fb82 1203 	smull	r1, r2, r2, r3
 80114f6:	1152      	asrs	r2, r2, #5
 80114f8:	17db      	asrs	r3, r3, #31
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	b29a      	uxth	r2, r3
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011502:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3720      	adds	r7, #32
 801150a:	46bd      	mov	sp, r7
 801150c:	bdb0      	pop	{r4, r5, r7, pc}
 801150e:	bf00      	nop
 8011510:	24009b28 	.word	0x24009b28
 8011514:	08025de8 	.word	0x08025de8
 8011518:	08025dec 	.word	0x08025dec
 801151c:	10624dd3 	.word	0x10624dd3

08011520 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b08a      	sub	sp, #40	; 0x28
 8011524:	af02      	add	r7, sp, #8
 8011526:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801152c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801152e:	2300      	movs	r3, #0
 8011530:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011532:	69bb      	ldr	r3, [r7, #24]
 8011534:	2200      	movs	r2, #0
 8011536:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011538:	2106      	movs	r1, #6
 801153a:	69b8      	ldr	r0, [r7, #24]
 801153c:	f000 fbf4 	bl	8011d28 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011540:	f107 0308 	add.w	r3, r7, #8
 8011544:	2201      	movs	r2, #1
 8011546:	69b9      	ldr	r1, [r7, #24]
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f001 f8a9 	bl	80126a0 <dhcp_create_msg>
 801154e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d04b      	beq.n	80115ee <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801155c:	8938      	ldrh	r0, [r7, #8]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011564:	2302      	movs	r3, #2
 8011566:	2239      	movs	r2, #57	; 0x39
 8011568:	f000 fbf8 	bl	8011d5c <dhcp_option>
 801156c:	4603      	mov	r3, r0
 801156e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011570:	8938      	ldrh	r0, [r7, #8]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801157c:	461a      	mov	r2, r3
 801157e:	f000 fc47 	bl	8011e10 <dhcp_option_short>
 8011582:	4603      	mov	r3, r0
 8011584:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011586:	8938      	ldrh	r0, [r7, #8]
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801158e:	2304      	movs	r3, #4
 8011590:	2237      	movs	r2, #55	; 0x37
 8011592:	f000 fbe3 	bl	8011d5c <dhcp_option>
 8011596:	4603      	mov	r3, r0
 8011598:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801159a:	2300      	movs	r3, #0
 801159c:	77fb      	strb	r3, [r7, #31]
 801159e:	e00e      	b.n	80115be <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80115a0:	8938      	ldrh	r0, [r7, #8]
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80115a8:	7ffb      	ldrb	r3, [r7, #31]
 80115aa:	4a29      	ldr	r2, [pc, #164]	; (8011650 <dhcp_discover+0x130>)
 80115ac:	5cd3      	ldrb	r3, [r2, r3]
 80115ae:	461a      	mov	r2, r3
 80115b0:	f000 fc08 	bl	8011dc4 <dhcp_option_byte>
 80115b4:	4603      	mov	r3, r0
 80115b6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80115b8:	7ffb      	ldrb	r3, [r7, #31]
 80115ba:	3301      	adds	r3, #1
 80115bc:	77fb      	strb	r3, [r7, #31]
 80115be:	7ffb      	ldrb	r3, [r7, #31]
 80115c0:	2b03      	cmp	r3, #3
 80115c2:	d9ed      	bls.n	80115a0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80115c4:	8938      	ldrh	r0, [r7, #8]
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	33f0      	adds	r3, #240	; 0xf0
 80115ca:	693a      	ldr	r2, [r7, #16]
 80115cc:	4619      	mov	r1, r3
 80115ce:	f001 f93d 	bl	801284c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80115d2:	4b20      	ldr	r3, [pc, #128]	; (8011654 <dhcp_discover+0x134>)
 80115d4:	6818      	ldr	r0, [r3, #0]
 80115d6:	4b20      	ldr	r3, [pc, #128]	; (8011658 <dhcp_discover+0x138>)
 80115d8:	9301      	str	r3, [sp, #4]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	2343      	movs	r3, #67	; 0x43
 80115e0:	4a1e      	ldr	r2, [pc, #120]	; (801165c <dhcp_discover+0x13c>)
 80115e2:	6939      	ldr	r1, [r7, #16]
 80115e4:	f00e fbc8 	bl	801fd78 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80115e8:	6938      	ldr	r0, [r7, #16]
 80115ea:	f006 f8bf 	bl	801776c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	799b      	ldrb	r3, [r3, #6]
 80115f2:	2bff      	cmp	r3, #255	; 0xff
 80115f4:	d005      	beq.n	8011602 <dhcp_discover+0xe2>
    dhcp->tries++;
 80115f6:	69bb      	ldr	r3, [r7, #24]
 80115f8:	799b      	ldrb	r3, [r3, #6]
 80115fa:	3301      	adds	r3, #1
 80115fc:	b2da      	uxtb	r2, r3
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011602:	69bb      	ldr	r3, [r7, #24]
 8011604:	799b      	ldrb	r3, [r3, #6]
 8011606:	2b05      	cmp	r3, #5
 8011608:	d80d      	bhi.n	8011626 <dhcp_discover+0x106>
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	799b      	ldrb	r3, [r3, #6]
 801160e:	461a      	mov	r2, r3
 8011610:	2301      	movs	r3, #1
 8011612:	4093      	lsls	r3, r2
 8011614:	b29b      	uxth	r3, r3
 8011616:	461a      	mov	r2, r3
 8011618:	0152      	lsls	r2, r2, #5
 801161a:	1ad2      	subs	r2, r2, r3
 801161c:	0092      	lsls	r2, r2, #2
 801161e:	4413      	add	r3, r2
 8011620:	00db      	lsls	r3, r3, #3
 8011622:	b29b      	uxth	r3, r3
 8011624:	e001      	b.n	801162a <dhcp_discover+0x10a>
 8011626:	f64e 2360 	movw	r3, #60000	; 0xea60
 801162a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801162c:	897b      	ldrh	r3, [r7, #10]
 801162e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011632:	4a0b      	ldr	r2, [pc, #44]	; (8011660 <dhcp_discover+0x140>)
 8011634:	fb82 1203 	smull	r1, r2, r2, r3
 8011638:	1152      	asrs	r2, r2, #5
 801163a:	17db      	asrs	r3, r3, #31
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	b29a      	uxth	r2, r3
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011648:	4618      	mov	r0, r3
 801164a:	3720      	adds	r7, #32
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	24000030 	.word	0x24000030
 8011654:	24009b28 	.word	0x24009b28
 8011658:	08025de8 	.word	0x08025de8
 801165c:	08025dec 	.word	0x08025dec
 8011660:	10624dd3 	.word	0x10624dd3

08011664 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b088      	sub	sp, #32
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d107      	bne.n	8011682 <dhcp_bind+0x1e>
 8011672:	4b64      	ldr	r3, [pc, #400]	; (8011804 <dhcp_bind+0x1a0>)
 8011674:	f240 4215 	movw	r2, #1045	; 0x415
 8011678:	4963      	ldr	r1, [pc, #396]	; (8011808 <dhcp_bind+0x1a4>)
 801167a:	4864      	ldr	r0, [pc, #400]	; (801180c <dhcp_bind+0x1a8>)
 801167c:	f00e ff68 	bl	8020550 <iprintf>
 8011680:	e0bc      	b.n	80117fc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011686:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d107      	bne.n	801169e <dhcp_bind+0x3a>
 801168e:	4b5d      	ldr	r3, [pc, #372]	; (8011804 <dhcp_bind+0x1a0>)
 8011690:	f240 4217 	movw	r2, #1047	; 0x417
 8011694:	495e      	ldr	r1, [pc, #376]	; (8011810 <dhcp_bind+0x1ac>)
 8011696:	485d      	ldr	r0, [pc, #372]	; (801180c <dhcp_bind+0x1a8>)
 8011698:	f00e ff5a 	bl	8020550 <iprintf>
 801169c:	e0ae      	b.n	80117fc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801169e:	69bb      	ldr	r3, [r7, #24]
 80116a0:	2200      	movs	r2, #0
 80116a2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80116a4:	69bb      	ldr	r3, [r7, #24]
 80116a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ac:	d019      	beq.n	80116e2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116b2:	331e      	adds	r3, #30
 80116b4:	4a57      	ldr	r2, [pc, #348]	; (8011814 <dhcp_bind+0x1b0>)
 80116b6:	fba2 2303 	umull	r2, r3, r2, r3
 80116ba:	095b      	lsrs	r3, r3, #5
 80116bc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80116be:	69fb      	ldr	r3, [r7, #28]
 80116c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116c4:	d302      	bcc.n	80116cc <dhcp_bind+0x68>
      timeout = 0xffff;
 80116c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116ca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	8a9b      	ldrh	r3, [r3, #20]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d102      	bne.n	80116e2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	2201      	movs	r2, #1
 80116e0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80116e2:	69bb      	ldr	r3, [r7, #24]
 80116e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ea:	d01d      	beq.n	8011728 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f0:	331e      	adds	r3, #30
 80116f2:	4a48      	ldr	r2, [pc, #288]	; (8011814 <dhcp_bind+0x1b0>)
 80116f4:	fba2 2303 	umull	r2, r3, r2, r3
 80116f8:	095b      	lsrs	r3, r3, #5
 80116fa:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011702:	d302      	bcc.n	801170a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8011704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011708:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	b29a      	uxth	r2, r3
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	895b      	ldrh	r3, [r3, #10]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d102      	bne.n	8011720 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801171a:	69bb      	ldr	r3, [r7, #24]
 801171c:	2201      	movs	r2, #1
 801171e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	895a      	ldrh	r2, [r3, #10]
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011730:	d01d      	beq.n	801176e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011732:	69bb      	ldr	r3, [r7, #24]
 8011734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011736:	331e      	adds	r3, #30
 8011738:	4a36      	ldr	r2, [pc, #216]	; (8011814 <dhcp_bind+0x1b0>)
 801173a:	fba2 2303 	umull	r2, r3, r2, r3
 801173e:	095b      	lsrs	r3, r3, #5
 8011740:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011748:	d302      	bcc.n	8011750 <dhcp_bind+0xec>
      timeout = 0xffff;
 801174a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801174e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011750:	69fb      	ldr	r3, [r7, #28]
 8011752:	b29a      	uxth	r2, r3
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011758:	69bb      	ldr	r3, [r7, #24]
 801175a:	899b      	ldrh	r3, [r3, #12]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d102      	bne.n	8011766 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	2201      	movs	r2, #1
 8011764:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	899a      	ldrh	r2, [r3, #12]
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	895a      	ldrh	r2, [r3, #10]
 8011772:	69bb      	ldr	r3, [r7, #24]
 8011774:	899b      	ldrh	r3, [r3, #12]
 8011776:	429a      	cmp	r2, r3
 8011778:	d306      	bcc.n	8011788 <dhcp_bind+0x124>
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	899b      	ldrh	r3, [r3, #12]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d002      	beq.n	8011788 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	2200      	movs	r2, #0
 8011786:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	79db      	ldrb	r3, [r3, #7]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d003      	beq.n	8011798 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	6a1b      	ldr	r3, [r3, #32]
 8011794:	613b      	str	r3, [r7, #16]
 8011796:	e014      	b.n	80117c2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	331c      	adds	r3, #28
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80117a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	db02      	blt.n	80117ae <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80117a8:	23ff      	movs	r3, #255	; 0xff
 80117aa:	613b      	str	r3, [r7, #16]
 80117ac:	e009      	b.n	80117c2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80117ae:	7dfb      	ldrb	r3, [r7, #23]
 80117b0:	2bbf      	cmp	r3, #191	; 0xbf
 80117b2:	d903      	bls.n	80117bc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80117b4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80117b8:	613b      	str	r3, [r7, #16]
 80117ba:	e002      	b.n	80117c2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80117bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80117c0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d108      	bne.n	80117e0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	69da      	ldr	r2, [r3, #28]
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	4013      	ands	r3, r2
 80117d6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80117de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80117e0:	210a      	movs	r1, #10
 80117e2:	69b8      	ldr	r0, [r7, #24]
 80117e4:	f000 faa0 	bl	8011d28 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	f103 011c 	add.w	r1, r3, #28
 80117ee:	f107 030c 	add.w	r3, r7, #12
 80117f2:	f107 0210 	add.w	r2, r7, #16
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f005 f904 	bl	8016a04 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80117fc:	3720      	adds	r7, #32
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	0802202c 	.word	0x0802202c
 8011808:	08022190 	.word	0x08022190
 801180c:	08022090 	.word	0x08022090
 8011810:	080221ac 	.word	0x080221ac
 8011814:	88888889 	.word	0x88888889

08011818 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b08a      	sub	sp, #40	; 0x28
 801181c:	af02      	add	r7, sp, #8
 801181e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011824:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011826:	2105      	movs	r1, #5
 8011828:	69b8      	ldr	r0, [r7, #24]
 801182a:	f000 fa7d 	bl	8011d28 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801182e:	f107 030c 	add.w	r3, r7, #12
 8011832:	2203      	movs	r2, #3
 8011834:	69b9      	ldr	r1, [r7, #24]
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 ff32 	bl	80126a0 <dhcp_create_msg>
 801183c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d04e      	beq.n	80118e2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801184a:	89b8      	ldrh	r0, [r7, #12]
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011852:	2302      	movs	r3, #2
 8011854:	2239      	movs	r2, #57	; 0x39
 8011856:	f000 fa81 	bl	8011d5c <dhcp_option>
 801185a:	4603      	mov	r3, r0
 801185c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801185e:	89b8      	ldrh	r0, [r7, #12]
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801186a:	461a      	mov	r2, r3
 801186c:	f000 fad0 	bl	8011e10 <dhcp_option_short>
 8011870:	4603      	mov	r3, r0
 8011872:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011874:	89b8      	ldrh	r0, [r7, #12]
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801187c:	2304      	movs	r3, #4
 801187e:	2237      	movs	r2, #55	; 0x37
 8011880:	f000 fa6c 	bl	8011d5c <dhcp_option>
 8011884:	4603      	mov	r3, r0
 8011886:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011888:	2300      	movs	r3, #0
 801188a:	77bb      	strb	r3, [r7, #30]
 801188c:	e00e      	b.n	80118ac <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801188e:	89b8      	ldrh	r0, [r7, #12]
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011896:	7fbb      	ldrb	r3, [r7, #30]
 8011898:	4a2a      	ldr	r2, [pc, #168]	; (8011944 <dhcp_renew+0x12c>)
 801189a:	5cd3      	ldrb	r3, [r2, r3]
 801189c:	461a      	mov	r2, r3
 801189e:	f000 fa91 	bl	8011dc4 <dhcp_option_byte>
 80118a2:	4603      	mov	r3, r0
 80118a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118a6:	7fbb      	ldrb	r3, [r7, #30]
 80118a8:	3301      	adds	r3, #1
 80118aa:	77bb      	strb	r3, [r7, #30]
 80118ac:	7fbb      	ldrb	r3, [r7, #30]
 80118ae:	2b03      	cmp	r3, #3
 80118b0:	d9ed      	bls.n	801188e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80118b2:	89b8      	ldrh	r0, [r7, #12]
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	33f0      	adds	r3, #240	; 0xf0
 80118b8:	697a      	ldr	r2, [r7, #20]
 80118ba:	4619      	mov	r1, r3
 80118bc:	f000 ffc6 	bl	801284c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80118c0:	4b21      	ldr	r3, [pc, #132]	; (8011948 <dhcp_renew+0x130>)
 80118c2:	6818      	ldr	r0, [r3, #0]
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	f103 0218 	add.w	r2, r3, #24
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	9300      	str	r3, [sp, #0]
 80118ce:	2343      	movs	r3, #67	; 0x43
 80118d0:	6979      	ldr	r1, [r7, #20]
 80118d2:	f00e f9dd 	bl	801fc90 <udp_sendto_if>
 80118d6:	4603      	mov	r3, r0
 80118d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80118da:	6978      	ldr	r0, [r7, #20]
 80118dc:	f005 ff46 	bl	801776c <pbuf_free>
 80118e0:	e001      	b.n	80118e6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80118e2:	23ff      	movs	r3, #255	; 0xff
 80118e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80118e6:	69bb      	ldr	r3, [r7, #24]
 80118e8:	799b      	ldrb	r3, [r3, #6]
 80118ea:	2bff      	cmp	r3, #255	; 0xff
 80118ec:	d005      	beq.n	80118fa <dhcp_renew+0xe2>
    dhcp->tries++;
 80118ee:	69bb      	ldr	r3, [r7, #24]
 80118f0:	799b      	ldrb	r3, [r3, #6]
 80118f2:	3301      	adds	r3, #1
 80118f4:	b2da      	uxtb	r2, r3
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	799b      	ldrb	r3, [r3, #6]
 80118fe:	2b09      	cmp	r3, #9
 8011900:	d80a      	bhi.n	8011918 <dhcp_renew+0x100>
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	799b      	ldrb	r3, [r3, #6]
 8011906:	b29b      	uxth	r3, r3
 8011908:	461a      	mov	r2, r3
 801190a:	0152      	lsls	r2, r2, #5
 801190c:	1ad2      	subs	r2, r2, r3
 801190e:	0092      	lsls	r2, r2, #2
 8011910:	4413      	add	r3, r2
 8011912:	011b      	lsls	r3, r3, #4
 8011914:	b29b      	uxth	r3, r3
 8011916:	e001      	b.n	801191c <dhcp_renew+0x104>
 8011918:	f644 6320 	movw	r3, #20000	; 0x4e20
 801191c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801191e:	89fb      	ldrh	r3, [r7, #14]
 8011920:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011924:	4a09      	ldr	r2, [pc, #36]	; (801194c <dhcp_renew+0x134>)
 8011926:	fb82 1203 	smull	r1, r2, r2, r3
 801192a:	1152      	asrs	r2, r2, #5
 801192c:	17db      	asrs	r3, r3, #31
 801192e:	1ad3      	subs	r3, r2, r3
 8011930:	b29a      	uxth	r2, r3
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011936:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801193a:	4618      	mov	r0, r3
 801193c:	3720      	adds	r7, #32
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
 8011942:	bf00      	nop
 8011944:	24000030 	.word	0x24000030
 8011948:	24009b28 	.word	0x24009b28
 801194c:	10624dd3 	.word	0x10624dd3

08011950 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b08a      	sub	sp, #40	; 0x28
 8011954:	af02      	add	r7, sp, #8
 8011956:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801195c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801195e:	2104      	movs	r1, #4
 8011960:	69b8      	ldr	r0, [r7, #24]
 8011962:	f000 f9e1 	bl	8011d28 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011966:	f107 030c 	add.w	r3, r7, #12
 801196a:	2203      	movs	r2, #3
 801196c:	69b9      	ldr	r1, [r7, #24]
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f000 fe96 	bl	80126a0 <dhcp_create_msg>
 8011974:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d04c      	beq.n	8011a16 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011982:	89b8      	ldrh	r0, [r7, #12]
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801198a:	2302      	movs	r3, #2
 801198c:	2239      	movs	r2, #57	; 0x39
 801198e:	f000 f9e5 	bl	8011d5c <dhcp_option>
 8011992:	4603      	mov	r3, r0
 8011994:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011996:	89b8      	ldrh	r0, [r7, #12]
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80119a2:	461a      	mov	r2, r3
 80119a4:	f000 fa34 	bl	8011e10 <dhcp_option_short>
 80119a8:	4603      	mov	r3, r0
 80119aa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80119ac:	89b8      	ldrh	r0, [r7, #12]
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119b4:	2304      	movs	r3, #4
 80119b6:	2237      	movs	r2, #55	; 0x37
 80119b8:	f000 f9d0 	bl	8011d5c <dhcp_option>
 80119bc:	4603      	mov	r3, r0
 80119be:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80119c0:	2300      	movs	r3, #0
 80119c2:	77bb      	strb	r3, [r7, #30]
 80119c4:	e00e      	b.n	80119e4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80119c6:	89b8      	ldrh	r0, [r7, #12]
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119ce:	7fbb      	ldrb	r3, [r7, #30]
 80119d0:	4a29      	ldr	r2, [pc, #164]	; (8011a78 <dhcp_rebind+0x128>)
 80119d2:	5cd3      	ldrb	r3, [r2, r3]
 80119d4:	461a      	mov	r2, r3
 80119d6:	f000 f9f5 	bl	8011dc4 <dhcp_option_byte>
 80119da:	4603      	mov	r3, r0
 80119dc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80119de:	7fbb      	ldrb	r3, [r7, #30]
 80119e0:	3301      	adds	r3, #1
 80119e2:	77bb      	strb	r3, [r7, #30]
 80119e4:	7fbb      	ldrb	r3, [r7, #30]
 80119e6:	2b03      	cmp	r3, #3
 80119e8:	d9ed      	bls.n	80119c6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80119ea:	89b8      	ldrh	r0, [r7, #12]
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	33f0      	adds	r3, #240	; 0xf0
 80119f0:	697a      	ldr	r2, [r7, #20]
 80119f2:	4619      	mov	r1, r3
 80119f4:	f000 ff2a 	bl	801284c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80119f8:	4b20      	ldr	r3, [pc, #128]	; (8011a7c <dhcp_rebind+0x12c>)
 80119fa:	6818      	ldr	r0, [r3, #0]
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	9300      	str	r3, [sp, #0]
 8011a00:	2343      	movs	r3, #67	; 0x43
 8011a02:	4a1f      	ldr	r2, [pc, #124]	; (8011a80 <dhcp_rebind+0x130>)
 8011a04:	6979      	ldr	r1, [r7, #20]
 8011a06:	f00e f943 	bl	801fc90 <udp_sendto_if>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011a0e:	6978      	ldr	r0, [r7, #20]
 8011a10:	f005 feac 	bl	801776c <pbuf_free>
 8011a14:	e001      	b.n	8011a1a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011a16:	23ff      	movs	r3, #255	; 0xff
 8011a18:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	799b      	ldrb	r3, [r3, #6]
 8011a1e:	2bff      	cmp	r3, #255	; 0xff
 8011a20:	d005      	beq.n	8011a2e <dhcp_rebind+0xde>
    dhcp->tries++;
 8011a22:	69bb      	ldr	r3, [r7, #24]
 8011a24:	799b      	ldrb	r3, [r3, #6]
 8011a26:	3301      	adds	r3, #1
 8011a28:	b2da      	uxtb	r2, r3
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011a2e:	69bb      	ldr	r3, [r7, #24]
 8011a30:	799b      	ldrb	r3, [r3, #6]
 8011a32:	2b09      	cmp	r3, #9
 8011a34:	d80a      	bhi.n	8011a4c <dhcp_rebind+0xfc>
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	799b      	ldrb	r3, [r3, #6]
 8011a3a:	b29b      	uxth	r3, r3
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	0152      	lsls	r2, r2, #5
 8011a40:	1ad2      	subs	r2, r2, r3
 8011a42:	0092      	lsls	r2, r2, #2
 8011a44:	4413      	add	r3, r2
 8011a46:	00db      	lsls	r3, r3, #3
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	e001      	b.n	8011a50 <dhcp_rebind+0x100>
 8011a4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8011a50:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011a52:	89fb      	ldrh	r3, [r7, #14]
 8011a54:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011a58:	4a0a      	ldr	r2, [pc, #40]	; (8011a84 <dhcp_rebind+0x134>)
 8011a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8011a5e:	1152      	asrs	r2, r2, #5
 8011a60:	17db      	asrs	r3, r3, #31
 8011a62:	1ad3      	subs	r3, r2, r3
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011a6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3720      	adds	r7, #32
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	24000030 	.word	0x24000030
 8011a7c:	24009b28 	.word	0x24009b28
 8011a80:	08025dec 	.word	0x08025dec
 8011a84:	10624dd3 	.word	0x10624dd3

08011a88 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011a88:	b5b0      	push	{r4, r5, r7, lr}
 8011a8a:	b08a      	sub	sp, #40	; 0x28
 8011a8c:	af02      	add	r7, sp, #8
 8011a8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a94:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8011a96:	2103      	movs	r1, #3
 8011a98:	69b8      	ldr	r0, [r7, #24]
 8011a9a:	f000 f945 	bl	8011d28 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011a9e:	f107 030c 	add.w	r3, r7, #12
 8011aa2:	2203      	movs	r2, #3
 8011aa4:	69b9      	ldr	r1, [r7, #24]
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 fdfa 	bl	80126a0 <dhcp_create_msg>
 8011aac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d066      	beq.n	8011b82 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011aba:	89b8      	ldrh	r0, [r7, #12]
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011ac2:	2302      	movs	r3, #2
 8011ac4:	2239      	movs	r2, #57	; 0x39
 8011ac6:	f000 f949 	bl	8011d5c <dhcp_option>
 8011aca:	4603      	mov	r3, r0
 8011acc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8011ace:	89b8      	ldrh	r0, [r7, #12]
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	33f0      	adds	r3, #240	; 0xf0
 8011ad4:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011ad8:	4619      	mov	r1, r3
 8011ada:	f000 f999 	bl	8011e10 <dhcp_option_short>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011ae2:	89b8      	ldrh	r0, [r7, #12]
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011aea:	2304      	movs	r3, #4
 8011aec:	2232      	movs	r2, #50	; 0x32
 8011aee:	f000 f935 	bl	8011d5c <dhcp_option>
 8011af2:	4603      	mov	r3, r0
 8011af4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011af6:	89bc      	ldrh	r4, [r7, #12]
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	69db      	ldr	r3, [r3, #28]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fe fff9 	bl	8010afa <lwip_htonl>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	4629      	mov	r1, r5
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f000 f9b0 	bl	8011e74 <dhcp_option_long>
 8011b14:	4603      	mov	r3, r0
 8011b16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011b18:	89b8      	ldrh	r0, [r7, #12]
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011b20:	2304      	movs	r3, #4
 8011b22:	2237      	movs	r2, #55	; 0x37
 8011b24:	f000 f91a 	bl	8011d5c <dhcp_option>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	77bb      	strb	r3, [r7, #30]
 8011b30:	e00e      	b.n	8011b50 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011b32:	89b8      	ldrh	r0, [r7, #12]
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011b3a:	7fbb      	ldrb	r3, [r7, #30]
 8011b3c:	4a29      	ldr	r2, [pc, #164]	; (8011be4 <dhcp_reboot+0x15c>)
 8011b3e:	5cd3      	ldrb	r3, [r2, r3]
 8011b40:	461a      	mov	r2, r3
 8011b42:	f000 f93f 	bl	8011dc4 <dhcp_option_byte>
 8011b46:	4603      	mov	r3, r0
 8011b48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011b4a:	7fbb      	ldrb	r3, [r7, #30]
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	77bb      	strb	r3, [r7, #30]
 8011b50:	7fbb      	ldrb	r3, [r7, #30]
 8011b52:	2b03      	cmp	r3, #3
 8011b54:	d9ed      	bls.n	8011b32 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011b56:	89b8      	ldrh	r0, [r7, #12]
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	33f0      	adds	r3, #240	; 0xf0
 8011b5c:	697a      	ldr	r2, [r7, #20]
 8011b5e:	4619      	mov	r1, r3
 8011b60:	f000 fe74 	bl	801284c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011b64:	4b20      	ldr	r3, [pc, #128]	; (8011be8 <dhcp_reboot+0x160>)
 8011b66:	6818      	ldr	r0, [r3, #0]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	9300      	str	r3, [sp, #0]
 8011b6c:	2343      	movs	r3, #67	; 0x43
 8011b6e:	4a1f      	ldr	r2, [pc, #124]	; (8011bec <dhcp_reboot+0x164>)
 8011b70:	6979      	ldr	r1, [r7, #20]
 8011b72:	f00e f88d 	bl	801fc90 <udp_sendto_if>
 8011b76:	4603      	mov	r3, r0
 8011b78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011b7a:	6978      	ldr	r0, [r7, #20]
 8011b7c:	f005 fdf6 	bl	801776c <pbuf_free>
 8011b80:	e001      	b.n	8011b86 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011b82:	23ff      	movs	r3, #255	; 0xff
 8011b84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	799b      	ldrb	r3, [r3, #6]
 8011b8a:	2bff      	cmp	r3, #255	; 0xff
 8011b8c:	d005      	beq.n	8011b9a <dhcp_reboot+0x112>
    dhcp->tries++;
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	799b      	ldrb	r3, [r3, #6]
 8011b92:	3301      	adds	r3, #1
 8011b94:	b2da      	uxtb	r2, r3
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	799b      	ldrb	r3, [r3, #6]
 8011b9e:	2b09      	cmp	r3, #9
 8011ba0:	d80a      	bhi.n	8011bb8 <dhcp_reboot+0x130>
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	799b      	ldrb	r3, [r3, #6]
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	461a      	mov	r2, r3
 8011baa:	0152      	lsls	r2, r2, #5
 8011bac:	1ad2      	subs	r2, r2, r3
 8011bae:	0092      	lsls	r2, r2, #2
 8011bb0:	4413      	add	r3, r2
 8011bb2:	00db      	lsls	r3, r3, #3
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	e001      	b.n	8011bbc <dhcp_reboot+0x134>
 8011bb8:	f242 7310 	movw	r3, #10000	; 0x2710
 8011bbc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011bbe:	89fb      	ldrh	r3, [r7, #14]
 8011bc0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011bc4:	4a0a      	ldr	r2, [pc, #40]	; (8011bf0 <dhcp_reboot+0x168>)
 8011bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8011bca:	1152      	asrs	r2, r2, #5
 8011bcc:	17db      	asrs	r3, r3, #31
 8011bce:	1ad3      	subs	r3, r2, r3
 8011bd0:	b29a      	uxth	r2, r3
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011bd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3720      	adds	r7, #32
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bdb0      	pop	{r4, r5, r7, pc}
 8011be2:	bf00      	nop
 8011be4:	24000030 	.word	0x24000030
 8011be8:	24009b28 	.word	0x24009b28
 8011bec:	08025dec 	.word	0x08025dec
 8011bf0:	10624dd3 	.word	0x10624dd3

08011bf4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8011bf4:	b5b0      	push	{r4, r5, r7, lr}
 8011bf6:	b08a      	sub	sp, #40	; 0x28
 8011bf8:	af02      	add	r7, sp, #8
 8011bfa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c00:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f000 8084 	beq.w	8011d12 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8011c0a:	69fb      	ldr	r3, [r7, #28]
 8011c0c:	795b      	ldrb	r3, [r3, #5]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	f000 8081 	beq.w	8011d16 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	699b      	ldr	r3, [r3, #24]
 8011c18:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011c20:	69fb      	ldr	r3, [r7, #28]
 8011c22:	2200      	movs	r2, #0
 8011c24:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011c26:	69fb      	ldr	r3, [r7, #28]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011c2c:	69fb      	ldr	r3, [r7, #28]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011c32:	69fb      	ldr	r3, [r7, #28]
 8011c34:	2200      	movs	r2, #0
 8011c36:	631a      	str	r2, [r3, #48]	; 0x30
 8011c38:	69fb      	ldr	r3, [r7, #28]
 8011c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011c48:	69fb      	ldr	r3, [r7, #28]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	829a      	strh	r2, [r3, #20]
 8011c4e:	69fb      	ldr	r3, [r7, #28]
 8011c50:	8a9a      	ldrh	r2, [r3, #20]
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	825a      	strh	r2, [r3, #18]
 8011c56:	69fb      	ldr	r3, [r7, #28]
 8011c58:	8a5a      	ldrh	r2, [r3, #18]
 8011c5a:	69fb      	ldr	r3, [r7, #28]
 8011c5c:	821a      	strh	r2, [r3, #16]
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	8a1a      	ldrh	r2, [r3, #16]
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f000 fe1e 	bl	80128a8 <dhcp_supplied_address>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d03b      	beq.n	8011cea <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8011c72:	f107 030e 	add.w	r3, r7, #14
 8011c76:	2207      	movs	r2, #7
 8011c78:	69f9      	ldr	r1, [r7, #28]
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 fd10 	bl	80126a0 <dhcp_create_msg>
 8011c80:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8011c82:	69bb      	ldr	r3, [r7, #24]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d030      	beq.n	8011cea <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011c88:	69bb      	ldr	r3, [r7, #24]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011c8e:	89f8      	ldrh	r0, [r7, #14]
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011c96:	2304      	movs	r3, #4
 8011c98:	2236      	movs	r2, #54	; 0x36
 8011c9a:	f000 f85f 	bl	8011d5c <dhcp_option>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8011ca2:	89fc      	ldrh	r4, [r7, #14]
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7fe ff24 	bl	8010afa <lwip_htonl>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f000 f8db 	bl	8011e74 <dhcp_option_long>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011cc2:	89f8      	ldrh	r0, [r7, #14]
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	33f0      	adds	r3, #240	; 0xf0
 8011cc8:	69ba      	ldr	r2, [r7, #24]
 8011cca:	4619      	mov	r1, r3
 8011ccc:	f000 fdbe 	bl	801284c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011cd0:	4b13      	ldr	r3, [pc, #76]	; (8011d20 <dhcp_release_and_stop+0x12c>)
 8011cd2:	6818      	ldr	r0, [r3, #0]
 8011cd4:	f107 0210 	add.w	r2, r7, #16
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	2343      	movs	r3, #67	; 0x43
 8011cde:	69b9      	ldr	r1, [r7, #24]
 8011ce0:	f00d ffd6 	bl	801fc90 <udp_sendto_if>
      pbuf_free(p_out);
 8011ce4:	69b8      	ldr	r0, [r7, #24]
 8011ce6:	f005 fd41 	bl	801776c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011cea:	4b0e      	ldr	r3, [pc, #56]	; (8011d24 <dhcp_release_and_stop+0x130>)
 8011cec:	4a0d      	ldr	r2, [pc, #52]	; (8011d24 <dhcp_release_and_stop+0x130>)
 8011cee:	490d      	ldr	r1, [pc, #52]	; (8011d24 <dhcp_release_and_stop+0x130>)
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f004 fe87 	bl	8016a04 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8011cf6:	2100      	movs	r1, #0
 8011cf8:	69f8      	ldr	r0, [r7, #28]
 8011cfa:	f000 f815 	bl	8011d28 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	791b      	ldrb	r3, [r3, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d008      	beq.n	8011d18 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011d06:	f7fe ff63 	bl	8010bd0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	711a      	strb	r2, [r3, #4]
 8011d10:	e002      	b.n	8011d18 <dhcp_release_and_stop+0x124>
    return;
 8011d12:	bf00      	nop
 8011d14:	e000      	b.n	8011d18 <dhcp_release_and_stop+0x124>
    return;
 8011d16:	bf00      	nop
  }
}
 8011d18:	3720      	adds	r7, #32
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	24009b28 	.word	0x24009b28
 8011d24:	08025de8 	.word	0x08025de8

08011d28 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	460b      	mov	r3, r1
 8011d32:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	795b      	ldrb	r3, [r3, #5]
 8011d38:	78fa      	ldrb	r2, [r7, #3]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d008      	beq.n	8011d50 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	78fa      	ldrb	r2, [r7, #3]
 8011d42:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	811a      	strh	r2, [r3, #8]
  }
}
 8011d50:	bf00      	nop
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr

08011d5c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b082      	sub	sp, #8
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6039      	str	r1, [r7, #0]
 8011d64:	4611      	mov	r1, r2
 8011d66:	461a      	mov	r2, r3
 8011d68:	4603      	mov	r3, r0
 8011d6a:	80fb      	strh	r3, [r7, #6]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	717b      	strb	r3, [r7, #5]
 8011d70:	4613      	mov	r3, r2
 8011d72:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011d74:	88fa      	ldrh	r2, [r7, #6]
 8011d76:	793b      	ldrb	r3, [r7, #4]
 8011d78:	4413      	add	r3, r2
 8011d7a:	3302      	adds	r3, #2
 8011d7c:	2b44      	cmp	r3, #68	; 0x44
 8011d7e:	d906      	bls.n	8011d8e <dhcp_option+0x32>
 8011d80:	4b0d      	ldr	r3, [pc, #52]	; (8011db8 <dhcp_option+0x5c>)
 8011d82:	f240 529a 	movw	r2, #1434	; 0x59a
 8011d86:	490d      	ldr	r1, [pc, #52]	; (8011dbc <dhcp_option+0x60>)
 8011d88:	480d      	ldr	r0, [pc, #52]	; (8011dc0 <dhcp_option+0x64>)
 8011d8a:	f00e fbe1 	bl	8020550 <iprintf>
  options[options_out_len++] = option_type;
 8011d8e:	88fb      	ldrh	r3, [r7, #6]
 8011d90:	1c5a      	adds	r2, r3, #1
 8011d92:	80fa      	strh	r2, [r7, #6]
 8011d94:	461a      	mov	r2, r3
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	4413      	add	r3, r2
 8011d9a:	797a      	ldrb	r2, [r7, #5]
 8011d9c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8011d9e:	88fb      	ldrh	r3, [r7, #6]
 8011da0:	1c5a      	adds	r2, r3, #1
 8011da2:	80fa      	strh	r2, [r7, #6]
 8011da4:	461a      	mov	r2, r3
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	4413      	add	r3, r2
 8011daa:	793a      	ldrb	r2, [r7, #4]
 8011dac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011dae:	88fb      	ldrh	r3, [r7, #6]
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	0802202c 	.word	0x0802202c
 8011dbc:	080221c4 	.word	0x080221c4
 8011dc0:	08022090 	.word	0x08022090

08011dc4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	4603      	mov	r3, r0
 8011dcc:	6039      	str	r1, [r7, #0]
 8011dce:	80fb      	strh	r3, [r7, #6]
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011dd4:	88fb      	ldrh	r3, [r7, #6]
 8011dd6:	2b43      	cmp	r3, #67	; 0x43
 8011dd8:	d906      	bls.n	8011de8 <dhcp_option_byte+0x24>
 8011dda:	4b0a      	ldr	r3, [pc, #40]	; (8011e04 <dhcp_option_byte+0x40>)
 8011ddc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8011de0:	4909      	ldr	r1, [pc, #36]	; (8011e08 <dhcp_option_byte+0x44>)
 8011de2:	480a      	ldr	r0, [pc, #40]	; (8011e0c <dhcp_option_byte+0x48>)
 8011de4:	f00e fbb4 	bl	8020550 <iprintf>
  options[options_out_len++] = value;
 8011de8:	88fb      	ldrh	r3, [r7, #6]
 8011dea:	1c5a      	adds	r2, r3, #1
 8011dec:	80fa      	strh	r2, [r7, #6]
 8011dee:	461a      	mov	r2, r3
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	4413      	add	r3, r2
 8011df4:	797a      	ldrb	r2, [r7, #5]
 8011df6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011df8:	88fb      	ldrh	r3, [r7, #6]
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	3708      	adds	r7, #8
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	0802202c 	.word	0x0802202c
 8011e08:	08022208 	.word	0x08022208
 8011e0c:	08022090 	.word	0x08022090

08011e10 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	4603      	mov	r3, r0
 8011e18:	6039      	str	r1, [r7, #0]
 8011e1a:	80fb      	strh	r3, [r7, #6]
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011e20:	88fb      	ldrh	r3, [r7, #6]
 8011e22:	3302      	adds	r3, #2
 8011e24:	2b44      	cmp	r3, #68	; 0x44
 8011e26:	d906      	bls.n	8011e36 <dhcp_option_short+0x26>
 8011e28:	4b0f      	ldr	r3, [pc, #60]	; (8011e68 <dhcp_option_short+0x58>)
 8011e2a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8011e2e:	490f      	ldr	r1, [pc, #60]	; (8011e6c <dhcp_option_short+0x5c>)
 8011e30:	480f      	ldr	r0, [pc, #60]	; (8011e70 <dhcp_option_short+0x60>)
 8011e32:	f00e fb8d 	bl	8020550 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011e36:	88bb      	ldrh	r3, [r7, #4]
 8011e38:	0a1b      	lsrs	r3, r3, #8
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	88fb      	ldrh	r3, [r7, #6]
 8011e3e:	1c59      	adds	r1, r3, #1
 8011e40:	80f9      	strh	r1, [r7, #6]
 8011e42:	4619      	mov	r1, r3
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	440b      	add	r3, r1
 8011e48:	b2d2      	uxtb	r2, r2
 8011e4a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011e4c:	88fb      	ldrh	r3, [r7, #6]
 8011e4e:	1c5a      	adds	r2, r3, #1
 8011e50:	80fa      	strh	r2, [r7, #6]
 8011e52:	461a      	mov	r2, r3
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	4413      	add	r3, r2
 8011e58:	88ba      	ldrh	r2, [r7, #4]
 8011e5a:	b2d2      	uxtb	r2, r2
 8011e5c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011e5e:	88fb      	ldrh	r3, [r7, #6]
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3708      	adds	r7, #8
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	0802202c 	.word	0x0802202c
 8011e6c:	08022240 	.word	0x08022240
 8011e70:	08022090 	.word	0x08022090

08011e74 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	607a      	str	r2, [r7, #4]
 8011e80:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011e82:	89fb      	ldrh	r3, [r7, #14]
 8011e84:	3304      	adds	r3, #4
 8011e86:	2b44      	cmp	r3, #68	; 0x44
 8011e88:	d906      	bls.n	8011e98 <dhcp_option_long+0x24>
 8011e8a:	4b19      	ldr	r3, [pc, #100]	; (8011ef0 <dhcp_option_long+0x7c>)
 8011e8c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8011e90:	4918      	ldr	r1, [pc, #96]	; (8011ef4 <dhcp_option_long+0x80>)
 8011e92:	4819      	ldr	r0, [pc, #100]	; (8011ef8 <dhcp_option_long+0x84>)
 8011e94:	f00e fb5c 	bl	8020550 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	0e1a      	lsrs	r2, r3, #24
 8011e9c:	89fb      	ldrh	r3, [r7, #14]
 8011e9e:	1c59      	adds	r1, r3, #1
 8011ea0:	81f9      	strh	r1, [r7, #14]
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	440b      	add	r3, r1
 8011ea8:	b2d2      	uxtb	r2, r2
 8011eaa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	0c1a      	lsrs	r2, r3, #16
 8011eb0:	89fb      	ldrh	r3, [r7, #14]
 8011eb2:	1c59      	adds	r1, r3, #1
 8011eb4:	81f9      	strh	r1, [r7, #14]
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	440b      	add	r3, r1
 8011ebc:	b2d2      	uxtb	r2, r2
 8011ebe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	0a1a      	lsrs	r2, r3, #8
 8011ec4:	89fb      	ldrh	r3, [r7, #14]
 8011ec6:	1c59      	adds	r1, r3, #1
 8011ec8:	81f9      	strh	r1, [r7, #14]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	440b      	add	r3, r1
 8011ed0:	b2d2      	uxtb	r2, r2
 8011ed2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011ed4:	89fb      	ldrh	r3, [r7, #14]
 8011ed6:	1c5a      	adds	r2, r3, #1
 8011ed8:	81fa      	strh	r2, [r7, #14]
 8011eda:	461a      	mov	r2, r3
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	4413      	add	r3, r2
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	b2d2      	uxtb	r2, r2
 8011ee4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011ee6:	89fb      	ldrh	r3, [r7, #14]
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3710      	adds	r7, #16
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	0802202c 	.word	0x0802202c
 8011ef4:	0802227c 	.word	0x0802227c
 8011ef8:	08022090 	.word	0x08022090

08011efc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b090      	sub	sp, #64	; 0x40
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8011f06:	2300      	movs	r3, #0
 8011f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8011f0e:	220a      	movs	r2, #10
 8011f10:	2100      	movs	r1, #0
 8011f12:	48ba      	ldr	r0, [pc, #744]	; (80121fc <dhcp_parse_reply+0x300>)
 8011f14:	f00e fa34 	bl	8020380 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	895b      	ldrh	r3, [r3, #10]
 8011f1c:	2b2b      	cmp	r3, #43	; 0x2b
 8011f1e:	d802      	bhi.n	8011f26 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8011f20:	f06f 0301 	mvn.w	r3, #1
 8011f24:	e2ea      	b.n	80124fc <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	685b      	ldr	r3, [r3, #4]
 8011f2a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8011f2c:	23f0      	movs	r3, #240	; 0xf0
 8011f2e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	891b      	ldrh	r3, [r3, #8]
 8011f34:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011f3a:	e00c      	b.n	8011f56 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8011f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3e:	895b      	ldrh	r3, [r3, #10]
 8011f40:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011f42:	1ad3      	subs	r3, r2, r3
 8011f44:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8011f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f48:	895b      	ldrh	r3, [r3, #10]
 8011f4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8011f4c:	1ad3      	subs	r3, r2, r3
 8011f4e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8011f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d004      	beq.n	8011f66 <dhcp_parse_reply+0x6a>
 8011f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f5e:	895b      	ldrh	r3, [r3, #10]
 8011f60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d2ea      	bcs.n	8011f3c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8011f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d102      	bne.n	8011f72 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8011f6c:	f06f 0301 	mvn.w	r3, #1
 8011f70:	e2c4      	b.n	80124fc <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 8011f72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011f74:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8011f76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011f78:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8011f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011f80:	e267      	b.n	8012452 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8011f82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f86:	4413      	add	r3, r2
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8011f92:	f04f 33ff 	mov.w	r3, #4294967295
 8011f96:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8011f98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011f9a:	3302      	adds	r3, #2
 8011f9c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8011f9e:	8bfa      	ldrh	r2, [r7, #30]
 8011fa0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d202      	bcs.n	8011fac <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8011fa6:	f06f 0301 	mvn.w	r3, #1
 8011faa:	e2a7      	b.n	80124fc <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011fac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011fae:	3301      	adds	r3, #1
 8011fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fb2:	8952      	ldrh	r2, [r2, #10]
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	da07      	bge.n	8011fc8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8011fb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011fba:	3301      	adds	r3, #1
 8011fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011fbe:	4413      	add	r3, r2
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011fc6:	e00b      	b.n	8011fe0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d004      	beq.n	8011fda <dhcp_parse_reply+0xde>
 8011fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	e000      	b.n	8011fdc <dhcp_parse_reply+0xe0>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8011fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8011fe8:	7dfb      	ldrb	r3, [r7, #23]
 8011fea:	2b3b      	cmp	r3, #59	; 0x3b
 8011fec:	f200 815a 	bhi.w	80122a4 <dhcp_parse_reply+0x3a8>
 8011ff0:	a201      	add	r2, pc, #4	; (adr r2, 8011ff8 <dhcp_parse_reply+0xfc>)
 8011ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ff6:	bf00      	nop
 8011ff8:	080120e9 	.word	0x080120e9
 8011ffc:	080120f9 	.word	0x080120f9
 8012000:	080122a5 	.word	0x080122a5
 8012004:	0801211b 	.word	0x0801211b
 8012008:	080122a5 	.word	0x080122a5
 801200c:	080122a5 	.word	0x080122a5
 8012010:	08012147 	.word	0x08012147
 8012014:	080122a5 	.word	0x080122a5
 8012018:	080122a5 	.word	0x080122a5
 801201c:	080122a5 	.word	0x080122a5
 8012020:	080122a5 	.word	0x080122a5
 8012024:	080122a5 	.word	0x080122a5
 8012028:	080122a5 	.word	0x080122a5
 801202c:	080122a5 	.word	0x080122a5
 8012030:	080122a5 	.word	0x080122a5
 8012034:	080122a5 	.word	0x080122a5
 8012038:	080122a5 	.word	0x080122a5
 801203c:	080122a5 	.word	0x080122a5
 8012040:	080122a5 	.word	0x080122a5
 8012044:	080122a5 	.word	0x080122a5
 8012048:	080122a5 	.word	0x080122a5
 801204c:	080122a5 	.word	0x080122a5
 8012050:	080122a5 	.word	0x080122a5
 8012054:	080122a5 	.word	0x080122a5
 8012058:	080122a5 	.word	0x080122a5
 801205c:	080122a5 	.word	0x080122a5
 8012060:	080122a5 	.word	0x080122a5
 8012064:	080122a5 	.word	0x080122a5
 8012068:	080122a5 	.word	0x080122a5
 801206c:	080122a5 	.word	0x080122a5
 8012070:	080122a5 	.word	0x080122a5
 8012074:	080122a5 	.word	0x080122a5
 8012078:	080122a5 	.word	0x080122a5
 801207c:	080122a5 	.word	0x080122a5
 8012080:	080122a5 	.word	0x080122a5
 8012084:	080122a5 	.word	0x080122a5
 8012088:	080122a5 	.word	0x080122a5
 801208c:	080122a5 	.word	0x080122a5
 8012090:	080122a5 	.word	0x080122a5
 8012094:	080122a5 	.word	0x080122a5
 8012098:	080122a5 	.word	0x080122a5
 801209c:	080122a5 	.word	0x080122a5
 80120a0:	080122a5 	.word	0x080122a5
 80120a4:	080122a5 	.word	0x080122a5
 80120a8:	080122a5 	.word	0x080122a5
 80120ac:	080122a5 	.word	0x080122a5
 80120b0:	080122a5 	.word	0x080122a5
 80120b4:	080122a5 	.word	0x080122a5
 80120b8:	080122a5 	.word	0x080122a5
 80120bc:	080122a5 	.word	0x080122a5
 80120c0:	080122a5 	.word	0x080122a5
 80120c4:	0801219d 	.word	0x0801219d
 80120c8:	080121bf 	.word	0x080121bf
 80120cc:	0801221d 	.word	0x0801221d
 80120d0:	0801223f 	.word	0x0801223f
 80120d4:	080122a5 	.word	0x080122a5
 80120d8:	080122a5 	.word	0x080122a5
 80120dc:	080122a5 	.word	0x080122a5
 80120e0:	08012261 	.word	0x08012261
 80120e4:	08012283 	.word	0x08012283
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80120e8:	2300      	movs	r3, #0
 80120ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80120ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80120f6:	e0d9      	b.n	80122ac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80120f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120fc:	2b04      	cmp	r3, #4
 80120fe:	d009      	beq.n	8012114 <dhcp_parse_reply+0x218>
 8012100:	4b3f      	ldr	r3, [pc, #252]	; (8012200 <dhcp_parse_reply+0x304>)
 8012102:	f240 622e 	movw	r2, #1582	; 0x62e
 8012106:	493f      	ldr	r1, [pc, #252]	; (8012204 <dhcp_parse_reply+0x308>)
 8012108:	483f      	ldr	r0, [pc, #252]	; (8012208 <dhcp_parse_reply+0x30c>)
 801210a:	f00e fa21 	bl	8020550 <iprintf>
 801210e:	f06f 0305 	mvn.w	r3, #5
 8012112:	e1f3      	b.n	80124fc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8012114:	2306      	movs	r3, #6
 8012116:	623b      	str	r3, [r7, #32]
        break;
 8012118:	e0c8      	b.n	80122ac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801211a:	2304      	movs	r3, #4
 801211c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012120:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012124:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012128:	429a      	cmp	r2, r3
 801212a:	d209      	bcs.n	8012140 <dhcp_parse_reply+0x244>
 801212c:	4b34      	ldr	r3, [pc, #208]	; (8012200 <dhcp_parse_reply+0x304>)
 801212e:	f240 6233 	movw	r2, #1587	; 0x633
 8012132:	4936      	ldr	r1, [pc, #216]	; (801220c <dhcp_parse_reply+0x310>)
 8012134:	4834      	ldr	r0, [pc, #208]	; (8012208 <dhcp_parse_reply+0x30c>)
 8012136:	f00e fa0b 	bl	8020550 <iprintf>
 801213a:	f06f 0305 	mvn.w	r3, #5
 801213e:	e1dd      	b.n	80124fc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012140:	2307      	movs	r3, #7
 8012142:	623b      	str	r3, [r7, #32]
        break;
 8012144:	e0b2      	b.n	80122ac <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8012146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801214a:	f003 0303 	and.w	r3, r3, #3
 801214e:	b2db      	uxtb	r3, r3
 8012150:	2b00      	cmp	r3, #0
 8012152:	d009      	beq.n	8012168 <dhcp_parse_reply+0x26c>
 8012154:	4b2a      	ldr	r3, [pc, #168]	; (8012200 <dhcp_parse_reply+0x304>)
 8012156:	f240 6239 	movw	r2, #1593	; 0x639
 801215a:	492d      	ldr	r1, [pc, #180]	; (8012210 <dhcp_parse_reply+0x314>)
 801215c:	482a      	ldr	r0, [pc, #168]	; (8012208 <dhcp_parse_reply+0x30c>)
 801215e:	f00e f9f7 	bl	8020550 <iprintf>
 8012162:	f06f 0305 	mvn.w	r3, #5
 8012166:	e1c9      	b.n	80124fc <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8012168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801216c:	2b08      	cmp	r3, #8
 801216e:	bf28      	it	cs
 8012170:	2308      	movcs	r3, #8
 8012172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012176:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801217a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801217e:	429a      	cmp	r2, r3
 8012180:	d209      	bcs.n	8012196 <dhcp_parse_reply+0x29a>
 8012182:	4b1f      	ldr	r3, [pc, #124]	; (8012200 <dhcp_parse_reply+0x304>)
 8012184:	f240 623c 	movw	r2, #1596	; 0x63c
 8012188:	4920      	ldr	r1, [pc, #128]	; (801220c <dhcp_parse_reply+0x310>)
 801218a:	481f      	ldr	r0, [pc, #124]	; (8012208 <dhcp_parse_reply+0x30c>)
 801218c:	f00e f9e0 	bl	8020550 <iprintf>
 8012190:	f06f 0305 	mvn.w	r3, #5
 8012194:	e1b2      	b.n	80124fc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8012196:	2308      	movs	r3, #8
 8012198:	623b      	str	r3, [r7, #32]
        break;
 801219a:	e087      	b.n	80122ac <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801219c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121a0:	2b04      	cmp	r3, #4
 80121a2:	d009      	beq.n	80121b8 <dhcp_parse_reply+0x2bc>
 80121a4:	4b16      	ldr	r3, [pc, #88]	; (8012200 <dhcp_parse_reply+0x304>)
 80121a6:	f240 6241 	movw	r2, #1601	; 0x641
 80121aa:	4916      	ldr	r1, [pc, #88]	; (8012204 <dhcp_parse_reply+0x308>)
 80121ac:	4816      	ldr	r0, [pc, #88]	; (8012208 <dhcp_parse_reply+0x30c>)
 80121ae:	f00e f9cf 	bl	8020550 <iprintf>
 80121b2:	f06f 0305 	mvn.w	r3, #5
 80121b6:	e1a1      	b.n	80124fc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80121b8:	2303      	movs	r3, #3
 80121ba:	623b      	str	r3, [r7, #32]
        break;
 80121bc:	e076      	b.n	80122ac <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80121be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121c2:	2b01      	cmp	r3, #1
 80121c4:	d009      	beq.n	80121da <dhcp_parse_reply+0x2de>
 80121c6:	4b0e      	ldr	r3, [pc, #56]	; (8012200 <dhcp_parse_reply+0x304>)
 80121c8:	f240 624f 	movw	r2, #1615	; 0x64f
 80121cc:	4911      	ldr	r1, [pc, #68]	; (8012214 <dhcp_parse_reply+0x318>)
 80121ce:	480e      	ldr	r0, [pc, #56]	; (8012208 <dhcp_parse_reply+0x30c>)
 80121d0:	f00e f9be 	bl	8020550 <iprintf>
 80121d4:	f06f 0305 	mvn.w	r3, #5
 80121d8:	e190      	b.n	80124fc <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80121da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80121dc:	2bf0      	cmp	r3, #240	; 0xf0
 80121de:	d009      	beq.n	80121f4 <dhcp_parse_reply+0x2f8>
 80121e0:	4b07      	ldr	r3, [pc, #28]	; (8012200 <dhcp_parse_reply+0x304>)
 80121e2:	f240 6251 	movw	r2, #1617	; 0x651
 80121e6:	490c      	ldr	r1, [pc, #48]	; (8012218 <dhcp_parse_reply+0x31c>)
 80121e8:	4807      	ldr	r0, [pc, #28]	; (8012208 <dhcp_parse_reply+0x30c>)
 80121ea:	f00e f9b1 	bl	8020550 <iprintf>
 80121ee:	f06f 0305 	mvn.w	r3, #5
 80121f2:	e183      	b.n	80124fc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80121f4:	2300      	movs	r3, #0
 80121f6:	623b      	str	r3, [r7, #32]
        break;
 80121f8:	e058      	b.n	80122ac <dhcp_parse_reply+0x3b0>
 80121fa:	bf00      	nop
 80121fc:	24009b1c 	.word	0x24009b1c
 8012200:	0802202c 	.word	0x0802202c
 8012204:	080222b8 	.word	0x080222b8
 8012208:	08022090 	.word	0x08022090
 801220c:	080222c4 	.word	0x080222c4
 8012210:	080222d8 	.word	0x080222d8
 8012214:	080222e8 	.word	0x080222e8
 8012218:	080222f4 	.word	0x080222f4
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801221c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012220:	2b01      	cmp	r3, #1
 8012222:	d009      	beq.n	8012238 <dhcp_parse_reply+0x33c>
 8012224:	4b9d      	ldr	r3, [pc, #628]	; (801249c <dhcp_parse_reply+0x5a0>)
 8012226:	f240 6255 	movw	r2, #1621	; 0x655
 801222a:	499d      	ldr	r1, [pc, #628]	; (80124a0 <dhcp_parse_reply+0x5a4>)
 801222c:	489d      	ldr	r0, [pc, #628]	; (80124a4 <dhcp_parse_reply+0x5a8>)
 801222e:	f00e f98f 	bl	8020550 <iprintf>
 8012232:	f06f 0305 	mvn.w	r3, #5
 8012236:	e161      	b.n	80124fc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012238:	2301      	movs	r3, #1
 801223a:	623b      	str	r3, [r7, #32]
        break;
 801223c:	e036      	b.n	80122ac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801223e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012242:	2b04      	cmp	r3, #4
 8012244:	d009      	beq.n	801225a <dhcp_parse_reply+0x35e>
 8012246:	4b95      	ldr	r3, [pc, #596]	; (801249c <dhcp_parse_reply+0x5a0>)
 8012248:	f240 6259 	movw	r2, #1625	; 0x659
 801224c:	4996      	ldr	r1, [pc, #600]	; (80124a8 <dhcp_parse_reply+0x5ac>)
 801224e:	4895      	ldr	r0, [pc, #596]	; (80124a4 <dhcp_parse_reply+0x5a8>)
 8012250:	f00e f97e 	bl	8020550 <iprintf>
 8012254:	f06f 0305 	mvn.w	r3, #5
 8012258:	e150      	b.n	80124fc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801225a:	2302      	movs	r3, #2
 801225c:	623b      	str	r3, [r7, #32]
        break;
 801225e:	e025      	b.n	80122ac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012264:	2b04      	cmp	r3, #4
 8012266:	d009      	beq.n	801227c <dhcp_parse_reply+0x380>
 8012268:	4b8c      	ldr	r3, [pc, #560]	; (801249c <dhcp_parse_reply+0x5a0>)
 801226a:	f240 625d 	movw	r2, #1629	; 0x65d
 801226e:	498e      	ldr	r1, [pc, #568]	; (80124a8 <dhcp_parse_reply+0x5ac>)
 8012270:	488c      	ldr	r0, [pc, #560]	; (80124a4 <dhcp_parse_reply+0x5a8>)
 8012272:	f00e f96d 	bl	8020550 <iprintf>
 8012276:	f06f 0305 	mvn.w	r3, #5
 801227a:	e13f      	b.n	80124fc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 801227c:	2304      	movs	r3, #4
 801227e:	623b      	str	r3, [r7, #32]
        break;
 8012280:	e014      	b.n	80122ac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012286:	2b04      	cmp	r3, #4
 8012288:	d009      	beq.n	801229e <dhcp_parse_reply+0x3a2>
 801228a:	4b84      	ldr	r3, [pc, #528]	; (801249c <dhcp_parse_reply+0x5a0>)
 801228c:	f240 6261 	movw	r2, #1633	; 0x661
 8012290:	4985      	ldr	r1, [pc, #532]	; (80124a8 <dhcp_parse_reply+0x5ac>)
 8012292:	4884      	ldr	r0, [pc, #528]	; (80124a4 <dhcp_parse_reply+0x5a8>)
 8012294:	f00e f95c 	bl	8020550 <iprintf>
 8012298:	f06f 0305 	mvn.w	r3, #5
 801229c:	e12e      	b.n	80124fc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 801229e:	2305      	movs	r3, #5
 80122a0:	623b      	str	r3, [r7, #32]
        break;
 80122a2:	e003      	b.n	80122ac <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 80122a4:	2300      	movs	r3, #0
 80122a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80122aa:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80122ac:	7dfb      	ldrb	r3, [r7, #23]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d103      	bne.n	80122ba <dhcp_parse_reply+0x3be>
      offset++;
 80122b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122b4:	3301      	adds	r3, #1
 80122b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80122b8:	e0a1      	b.n	80123fe <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80122ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80122bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122c0:	4413      	add	r3, r2
 80122c2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80122c6:	4293      	cmp	r3, r2
 80122c8:	dd02      	ble.n	80122d0 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 80122ca:	f06f 0301 	mvn.w	r3, #1
 80122ce:	e115      	b.n	80124fc <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 80122d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122d8:	4413      	add	r3, r2
 80122da:	b29b      	uxth	r3, r3
 80122dc:	3302      	adds	r3, #2
 80122de:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80122e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	f000 808a 	beq.w	80123fe <dhcp_parse_reply+0x502>
        u32_t value = 0;
 80122ea:	2300      	movs	r3, #0
 80122ec:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80122ee:	6a3b      	ldr	r3, [r7, #32]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	db02      	blt.n	80122fa <dhcp_parse_reply+0x3fe>
 80122f4:	6a3b      	ldr	r3, [r7, #32]
 80122f6:	2b09      	cmp	r3, #9
 80122f8:	dd06      	ble.n	8012308 <dhcp_parse_reply+0x40c>
 80122fa:	4b68      	ldr	r3, [pc, #416]	; (801249c <dhcp_parse_reply+0x5a0>)
 80122fc:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8012300:	496a      	ldr	r1, [pc, #424]	; (80124ac <dhcp_parse_reply+0x5b0>)
 8012302:	4868      	ldr	r0, [pc, #416]	; (80124a4 <dhcp_parse_reply+0x5a8>)
 8012304:	f00e f924 	bl	8020550 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012308:	4a69      	ldr	r2, [pc, #420]	; (80124b0 <dhcp_parse_reply+0x5b4>)
 801230a:	6a3b      	ldr	r3, [r7, #32]
 801230c:	4413      	add	r3, r2
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d174      	bne.n	80123fe <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8012314:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012318:	2b04      	cmp	r3, #4
 801231a:	bf28      	it	cs
 801231c:	2304      	movcs	r3, #4
 801231e:	b2db      	uxtb	r3, r3
 8012320:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8012322:	8bfb      	ldrh	r3, [r7, #30]
 8012324:	8aba      	ldrh	r2, [r7, #20]
 8012326:	f107 0108 	add.w	r1, r7, #8
 801232a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801232c:	f005 fc24 	bl	8017b78 <pbuf_copy_partial>
 8012330:	4603      	mov	r3, r0
 8012332:	461a      	mov	r2, r3
 8012334:	8abb      	ldrh	r3, [r7, #20]
 8012336:	4293      	cmp	r3, r2
 8012338:	d002      	beq.n	8012340 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801233a:	f06f 0301 	mvn.w	r3, #1
 801233e:	e0dd      	b.n	80124fc <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 8012340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012344:	2b04      	cmp	r3, #4
 8012346:	d933      	bls.n	80123b0 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801234c:	f003 0303 	and.w	r3, r3, #3
 8012350:	b2db      	uxtb	r3, r3
 8012352:	2b00      	cmp	r3, #0
 8012354:	d009      	beq.n	801236a <dhcp_parse_reply+0x46e>
 8012356:	4b51      	ldr	r3, [pc, #324]	; (801249c <dhcp_parse_reply+0x5a0>)
 8012358:	f240 6281 	movw	r2, #1665	; 0x681
 801235c:	4955      	ldr	r1, [pc, #340]	; (80124b4 <dhcp_parse_reply+0x5b8>)
 801235e:	4851      	ldr	r0, [pc, #324]	; (80124a4 <dhcp_parse_reply+0x5a8>)
 8012360:	f00e f8f6 	bl	8020550 <iprintf>
 8012364:	f06f 0305 	mvn.w	r3, #5
 8012368:	e0c8      	b.n	80124fc <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 801236a:	4a51      	ldr	r2, [pc, #324]	; (80124b0 <dhcp_parse_reply+0x5b4>)
 801236c:	6a3b      	ldr	r3, [r7, #32]
 801236e:	4413      	add	r3, r2
 8012370:	2201      	movs	r2, #1
 8012372:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	4618      	mov	r0, r3
 8012378:	f7fe fbbf 	bl	8010afa <lwip_htonl>
 801237c:	4602      	mov	r2, r0
 801237e:	494e      	ldr	r1, [pc, #312]	; (80124b8 <dhcp_parse_reply+0x5bc>)
 8012380:	6a3b      	ldr	r3, [r7, #32]
 8012382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012386:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801238a:	3b04      	subs	r3, #4
 801238c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8012390:	8bfb      	ldrh	r3, [r7, #30]
 8012392:	3304      	adds	r3, #4
 8012394:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012396:	8a7a      	ldrh	r2, [r7, #18]
 8012398:	8bfb      	ldrh	r3, [r7, #30]
 801239a:	429a      	cmp	r2, r3
 801239c:	d202      	bcs.n	80123a4 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801239e:	f06f 0301 	mvn.w	r3, #1
 80123a2:	e0ab      	b.n	80124fc <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 80123a4:	8a7b      	ldrh	r3, [r7, #18]
 80123a6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80123a8:	6a3b      	ldr	r3, [r7, #32]
 80123aa:	3301      	adds	r3, #1
 80123ac:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80123ae:	e79e      	b.n	80122ee <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 80123b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80123b4:	2b04      	cmp	r3, #4
 80123b6:	d106      	bne.n	80123c6 <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7fe fb9d 	bl	8010afa <lwip_htonl>
 80123c0:	4603      	mov	r3, r0
 80123c2:	60bb      	str	r3, [r7, #8]
 80123c4:	e011      	b.n	80123ea <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80123c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d009      	beq.n	80123e2 <dhcp_parse_reply+0x4e6>
 80123ce:	4b33      	ldr	r3, [pc, #204]	; (801249c <dhcp_parse_reply+0x5a0>)
 80123d0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80123d4:	4939      	ldr	r1, [pc, #228]	; (80124bc <dhcp_parse_reply+0x5c0>)
 80123d6:	4833      	ldr	r0, [pc, #204]	; (80124a4 <dhcp_parse_reply+0x5a8>)
 80123d8:	f00e f8ba 	bl	8020550 <iprintf>
 80123dc:	f06f 0305 	mvn.w	r3, #5
 80123e0:	e08c      	b.n	80124fc <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 80123e2:	f107 0308 	add.w	r3, r7, #8
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80123ea:	4a31      	ldr	r2, [pc, #196]	; (80124b0 <dhcp_parse_reply+0x5b4>)
 80123ec:	6a3b      	ldr	r3, [r7, #32]
 80123ee:	4413      	add	r3, r2
 80123f0:	2201      	movs	r2, #1
 80123f2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80123f4:	68ba      	ldr	r2, [r7, #8]
 80123f6:	4930      	ldr	r1, [pc, #192]	; (80124b8 <dhcp_parse_reply+0x5bc>)
 80123f8:	6a3b      	ldr	r3, [r7, #32]
 80123fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80123fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012400:	895b      	ldrh	r3, [r3, #10]
 8012402:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012404:	429a      	cmp	r2, r3
 8012406:	d324      	bcc.n	8012452 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 8012408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240a:	895b      	ldrh	r3, [r3, #10]
 801240c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801240e:	1ad3      	subs	r3, r2, r3
 8012410:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012414:	895b      	ldrh	r3, [r3, #10]
 8012416:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012418:	1ad3      	subs	r3, r2, r3
 801241a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801241c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801241e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012420:	429a      	cmp	r2, r3
 8012422:	d213      	bcs.n	801244c <dhcp_parse_reply+0x550>
        q = q->next;
 8012424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242c:	2b00      	cmp	r3, #0
 801242e:	d109      	bne.n	8012444 <dhcp_parse_reply+0x548>
 8012430:	4b1a      	ldr	r3, [pc, #104]	; (801249c <dhcp_parse_reply+0x5a0>)
 8012432:	f240 629d 	movw	r2, #1693	; 0x69d
 8012436:	4922      	ldr	r1, [pc, #136]	; (80124c0 <dhcp_parse_reply+0x5c4>)
 8012438:	481a      	ldr	r0, [pc, #104]	; (80124a4 <dhcp_parse_reply+0x5a8>)
 801243a:	f00e f889 	bl	8020550 <iprintf>
 801243e:	f06f 0305 	mvn.w	r3, #5
 8012442:	e05b      	b.n	80124fc <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 8012444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	63fb      	str	r3, [r7, #60]	; 0x3c
 801244a:	e002      	b.n	8012452 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801244c:	f06f 0301 	mvn.w	r3, #1
 8012450:	e054      	b.n	80124fc <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012454:	2b00      	cmp	r3, #0
 8012456:	d00a      	beq.n	801246e <dhcp_parse_reply+0x572>
 8012458:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801245a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801245c:	429a      	cmp	r2, r3
 801245e:	d206      	bcs.n	801246e <dhcp_parse_reply+0x572>
 8012460:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012462:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012464:	4413      	add	r3, r2
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	2bff      	cmp	r3, #255	; 0xff
 801246a:	f47f ad8a 	bne.w	8011f82 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801246e:	4b10      	ldr	r3, [pc, #64]	; (80124b0 <dhcp_parse_reply+0x5b4>)
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d02d      	beq.n	80124d2 <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012476:	4b10      	ldr	r3, [pc, #64]	; (80124b8 <dhcp_parse_reply+0x5bc>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801247c:	4b0c      	ldr	r3, [pc, #48]	; (80124b0 <dhcp_parse_reply+0x5b4>)
 801247e:	2200      	movs	r2, #0
 8012480:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	2b01      	cmp	r3, #1
 8012486:	d102      	bne.n	801248e <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 8012488:	2301      	movs	r3, #1
 801248a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801248c:	e021      	b.n	80124d2 <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	2b02      	cmp	r3, #2
 8012492:	d117      	bne.n	80124c4 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 8012494:	2301      	movs	r3, #1
 8012496:	62bb      	str	r3, [r7, #40]	; 0x28
 8012498:	e01b      	b.n	80124d2 <dhcp_parse_reply+0x5d6>
 801249a:	bf00      	nop
 801249c:	0802202c 	.word	0x0802202c
 80124a0:	080222e8 	.word	0x080222e8
 80124a4:	08022090 	.word	0x08022090
 80124a8:	080222b8 	.word	0x080222b8
 80124ac:	0802230c 	.word	0x0802230c
 80124b0:	24009b1c 	.word	0x24009b1c
 80124b4:	08022320 	.word	0x08022320
 80124b8:	24009af4 	.word	0x24009af4
 80124bc:	08022338 	.word	0x08022338
 80124c0:	0802234c 	.word	0x0802234c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	2b03      	cmp	r3, #3
 80124c8:	d103      	bne.n	80124d2 <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 80124ca:	2301      	movs	r3, #1
 80124cc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80124ce:	2301      	movs	r3, #1
 80124d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80124d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d006      	beq.n	80124e6 <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80124d8:	2300      	movs	r3, #0
 80124da:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80124dc:	236c      	movs	r3, #108	; 0x6c
 80124de:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80124e0:	23ec      	movs	r3, #236	; 0xec
 80124e2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80124e4:	e527      	b.n	8011f36 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80124e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d006      	beq.n	80124fa <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 80124ec:	2300      	movs	r3, #0
 80124ee:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80124f0:	232c      	movs	r3, #44	; 0x2c
 80124f2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80124f4:	236c      	movs	r3, #108	; 0x6c
 80124f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80124f8:	e51d      	b.n	8011f36 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80124fa:	2300      	movs	r3, #0
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3740      	adds	r7, #64	; 0x40
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}

08012504 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b08a      	sub	sp, #40	; 0x28
 8012508:	af00      	add	r7, sp, #0
 801250a:	60f8      	str	r0, [r7, #12]
 801250c:	60b9      	str	r1, [r7, #8]
 801250e:	607a      	str	r2, [r7, #4]
 8012510:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8012512:	4b60      	ldr	r3, [pc, #384]	; (8012694 <dhcp_recv+0x190>)
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801251c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	2b00      	cmp	r3, #0
 8012528:	f000 809d 	beq.w	8012666 <dhcp_recv+0x162>
 801252c:	69fb      	ldr	r3, [r7, #28]
 801252e:	791b      	ldrb	r3, [r3, #4]
 8012530:	2b00      	cmp	r3, #0
 8012532:	f000 8098 	beq.w	8012666 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	895b      	ldrh	r3, [r3, #10]
 801253a:	2b2b      	cmp	r3, #43	; 0x2b
 801253c:	f240 8095 	bls.w	801266a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	2b02      	cmp	r3, #2
 8012546:	f040 8092 	bne.w	801266e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801254a:	2300      	movs	r3, #0
 801254c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012550:	e012      	b.n	8012578 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012556:	6a3a      	ldr	r2, [r7, #32]
 8012558:	4413      	add	r3, r2
 801255a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801255e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012562:	69b9      	ldr	r1, [r7, #24]
 8012564:	440b      	add	r3, r1
 8012566:	7f1b      	ldrb	r3, [r3, #28]
 8012568:	429a      	cmp	r2, r3
 801256a:	f040 8082 	bne.w	8012672 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801256e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012572:	3301      	adds	r3, #1
 8012574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012578:	6a3b      	ldr	r3, [r7, #32]
 801257a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801257e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012582:	429a      	cmp	r2, r3
 8012584:	d203      	bcs.n	801258e <dhcp_recv+0x8a>
 8012586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801258a:	2b05      	cmp	r3, #5
 801258c:	d9e1      	bls.n	8012552 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	4618      	mov	r0, r3
 8012594:	f7fe fab1 	bl	8010afa <lwip_htonl>
 8012598:	4602      	mov	r2, r0
 801259a:	69fb      	ldr	r3, [r7, #28]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	429a      	cmp	r2, r3
 80125a0:	d169      	bne.n	8012676 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80125a2:	69f9      	ldr	r1, [r7, #28]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff fca9 	bl	8011efc <dhcp_parse_reply>
 80125aa:	4603      	mov	r3, r0
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d164      	bne.n	801267a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80125b0:	4b39      	ldr	r3, [pc, #228]	; (8012698 <dhcp_recv+0x194>)
 80125b2:	785b      	ldrb	r3, [r3, #1]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d062      	beq.n	801267e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80125be:	4b37      	ldr	r3, [pc, #220]	; (801269c <dhcp_recv+0x198>)
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80125c4:	7cfb      	ldrb	r3, [r7, #19]
 80125c6:	2b05      	cmp	r3, #5
 80125c8:	d12a      	bne.n	8012620 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	795b      	ldrb	r3, [r3, #5]
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	d112      	bne.n	80125f8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80125d2:	6979      	ldr	r1, [r7, #20]
 80125d4:	6a38      	ldr	r0, [r7, #32]
 80125d6:	f7fe fdc7 	bl	8011168 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80125da:	6a3b      	ldr	r3, [r7, #32]
 80125dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80125e0:	f003 0308 	and.w	r3, r3, #8
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d003      	beq.n	80125f0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80125e8:	6a38      	ldr	r0, [r7, #32]
 80125ea:	f7fe fb35 	bl	8010c58 <dhcp_check>
 80125ee:	e049      	b.n	8012684 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80125f0:	6a38      	ldr	r0, [r7, #32]
 80125f2:	f7ff f837 	bl	8011664 <dhcp_bind>
 80125f6:	e045      	b.n	8012684 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80125f8:	69fb      	ldr	r3, [r7, #28]
 80125fa:	795b      	ldrb	r3, [r3, #5]
 80125fc:	2b03      	cmp	r3, #3
 80125fe:	d007      	beq.n	8012610 <dhcp_recv+0x10c>
 8012600:	69fb      	ldr	r3, [r7, #28]
 8012602:	795b      	ldrb	r3, [r3, #5]
 8012604:	2b04      	cmp	r3, #4
 8012606:	d003      	beq.n	8012610 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801260c:	2b05      	cmp	r3, #5
 801260e:	d139      	bne.n	8012684 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8012610:	6979      	ldr	r1, [r7, #20]
 8012612:	6a38      	ldr	r0, [r7, #32]
 8012614:	f7fe fda8 	bl	8011168 <dhcp_handle_ack>
      dhcp_bind(netif);
 8012618:	6a38      	ldr	r0, [r7, #32]
 801261a:	f7ff f823 	bl	8011664 <dhcp_bind>
 801261e:	e031      	b.n	8012684 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8012620:	7cfb      	ldrb	r3, [r7, #19]
 8012622:	2b06      	cmp	r3, #6
 8012624:	d113      	bne.n	801264e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012626:	69fb      	ldr	r3, [r7, #28]
 8012628:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801262a:	2b03      	cmp	r3, #3
 801262c:	d00b      	beq.n	8012646 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	795b      	ldrb	r3, [r3, #5]
 8012632:	2b01      	cmp	r3, #1
 8012634:	d007      	beq.n	8012646 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801263a:	2b04      	cmp	r3, #4
 801263c:	d003      	beq.n	8012646 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	795b      	ldrb	r3, [r3, #5]
 8012642:	2b05      	cmp	r3, #5
 8012644:	d103      	bne.n	801264e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8012646:	6a38      	ldr	r0, [r7, #32]
 8012648:	f7fe faec 	bl	8010c24 <dhcp_handle_nak>
 801264c:	e01a      	b.n	8012684 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801264e:	7cfb      	ldrb	r3, [r7, #19]
 8012650:	2b02      	cmp	r3, #2
 8012652:	d116      	bne.n	8012682 <dhcp_recv+0x17e>
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	795b      	ldrb	r3, [r3, #5]
 8012658:	2b06      	cmp	r3, #6
 801265a:	d112      	bne.n	8012682 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801265c:	6979      	ldr	r1, [r7, #20]
 801265e:	6a38      	ldr	r0, [r7, #32]
 8012660:	f7fe fb2e 	bl	8010cc0 <dhcp_handle_offer>
 8012664:	e00e      	b.n	8012684 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012666:	bf00      	nop
 8012668:	e00c      	b.n	8012684 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801266a:	bf00      	nop
 801266c:	e00a      	b.n	8012684 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801266e:	bf00      	nop
 8012670:	e008      	b.n	8012684 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8012672:	bf00      	nop
 8012674:	e006      	b.n	8012684 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012676:	bf00      	nop
 8012678:	e004      	b.n	8012684 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801267a:	bf00      	nop
 801267c:	e002      	b.n	8012684 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801267e:	bf00      	nop
 8012680:	e000      	b.n	8012684 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8012682:	bf00      	nop
  pbuf_free(p);
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f005 f871 	bl	801776c <pbuf_free>
}
 801268a:	bf00      	nop
 801268c:	3728      	adds	r7, #40	; 0x28
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	2400a0b0 	.word	0x2400a0b0
 8012698:	24009b1c 	.word	0x24009b1c
 801269c:	24009af4 	.word	0x24009af4

080126a0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b088      	sub	sp, #32
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	603b      	str	r3, [r7, #0]
 80126ac:	4613      	mov	r3, r2
 80126ae:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d108      	bne.n	80126c8 <dhcp_create_msg+0x28>
 80126b6:	4b5f      	ldr	r3, [pc, #380]	; (8012834 <dhcp_create_msg+0x194>)
 80126b8:	f240 7269 	movw	r2, #1897	; 0x769
 80126bc:	495e      	ldr	r1, [pc, #376]	; (8012838 <dhcp_create_msg+0x198>)
 80126be:	485f      	ldr	r0, [pc, #380]	; (801283c <dhcp_create_msg+0x19c>)
 80126c0:	f00d ff46 	bl	8020550 <iprintf>
 80126c4:	2300      	movs	r3, #0
 80126c6:	e0b1      	b.n	801282c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d108      	bne.n	80126e0 <dhcp_create_msg+0x40>
 80126ce:	4b59      	ldr	r3, [pc, #356]	; (8012834 <dhcp_create_msg+0x194>)
 80126d0:	f240 726a 	movw	r2, #1898	; 0x76a
 80126d4:	495a      	ldr	r1, [pc, #360]	; (8012840 <dhcp_create_msg+0x1a0>)
 80126d6:	4859      	ldr	r0, [pc, #356]	; (801283c <dhcp_create_msg+0x19c>)
 80126d8:	f00d ff3a 	bl	8020550 <iprintf>
 80126dc:	2300      	movs	r3, #0
 80126de:	e0a5      	b.n	801282c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80126e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126e4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80126e8:	2036      	movs	r0, #54	; 0x36
 80126ea:	f004 fd5b 	bl	80171a4 <pbuf_alloc>
 80126ee:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d101      	bne.n	80126fa <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80126f6:	2300      	movs	r3, #0
 80126f8:	e098      	b.n	801282c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	895b      	ldrh	r3, [r3, #10]
 80126fe:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8012702:	d206      	bcs.n	8012712 <dhcp_create_msg+0x72>
 8012704:	4b4b      	ldr	r3, [pc, #300]	; (8012834 <dhcp_create_msg+0x194>)
 8012706:	f240 7271 	movw	r2, #1905	; 0x771
 801270a:	494e      	ldr	r1, [pc, #312]	; (8012844 <dhcp_create_msg+0x1a4>)
 801270c:	484b      	ldr	r0, [pc, #300]	; (801283c <dhcp_create_msg+0x19c>)
 801270e:	f00d ff1f 	bl	8020550 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8012712:	79fb      	ldrb	r3, [r7, #7]
 8012714:	2b03      	cmp	r3, #3
 8012716:	d103      	bne.n	8012720 <dhcp_create_msg+0x80>
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	795b      	ldrb	r3, [r3, #5]
 801271c:	2b03      	cmp	r3, #3
 801271e:	d10d      	bne.n	801273c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	799b      	ldrb	r3, [r3, #6]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d105      	bne.n	8012734 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8012728:	f00d ff2a 	bl	8020580 <rand>
 801272c:	4603      	mov	r3, r0
 801272e:	461a      	mov	r2, r3
 8012730:	4b45      	ldr	r3, [pc, #276]	; (8012848 <dhcp_create_msg+0x1a8>)
 8012732:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8012734:	4b44      	ldr	r3, [pc, #272]	; (8012848 <dhcp_create_msg+0x1a8>)
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8012742:	f44f 729a 	mov.w	r2, #308	; 0x134
 8012746:	2100      	movs	r1, #0
 8012748:	6978      	ldr	r0, [r7, #20]
 801274a:	f00d fe19 	bl	8020380 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	2201      	movs	r2, #1
 8012752:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	2201      	movs	r2, #1
 8012758:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	4618      	mov	r0, r3
 801276a:	f7fe f9c6 	bl	8010afa <lwip_htonl>
 801276e:	4602      	mov	r2, r0
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8012774:	79fb      	ldrb	r3, [r7, #7]
 8012776:	2b08      	cmp	r3, #8
 8012778:	d010      	beq.n	801279c <dhcp_create_msg+0xfc>
 801277a:	79fb      	ldrb	r3, [r7, #7]
 801277c:	2b04      	cmp	r3, #4
 801277e:	d00d      	beq.n	801279c <dhcp_create_msg+0xfc>
 8012780:	79fb      	ldrb	r3, [r7, #7]
 8012782:	2b07      	cmp	r3, #7
 8012784:	d00a      	beq.n	801279c <dhcp_create_msg+0xfc>
 8012786:	79fb      	ldrb	r3, [r7, #7]
 8012788:	2b03      	cmp	r3, #3
 801278a:	d10c      	bne.n	80127a6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012790:	2b05      	cmp	r3, #5
 8012792:	d003      	beq.n	801279c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	795b      	ldrb	r3, [r3, #5]
 8012798:	2b04      	cmp	r3, #4
 801279a:	d104      	bne.n	80127a6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	3304      	adds	r3, #4
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80127a6:	2300      	movs	r3, #0
 80127a8:	83fb      	strh	r3, [r7, #30]
 80127aa:	e00c      	b.n	80127c6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80127ac:	8bfa      	ldrh	r2, [r7, #30]
 80127ae:	8bfb      	ldrh	r3, [r7, #30]
 80127b0:	68f9      	ldr	r1, [r7, #12]
 80127b2:	440a      	add	r2, r1
 80127b4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 80127b8:	697a      	ldr	r2, [r7, #20]
 80127ba:	4413      	add	r3, r2
 80127bc:	460a      	mov	r2, r1
 80127be:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80127c0:	8bfb      	ldrh	r3, [r7, #30]
 80127c2:	3301      	adds	r3, #1
 80127c4:	83fb      	strh	r3, [r7, #30]
 80127c6:	8bfb      	ldrh	r3, [r7, #30]
 80127c8:	2b05      	cmp	r3, #5
 80127ca:	d9ef      	bls.n	80127ac <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	2200      	movs	r2, #0
 80127d0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80127d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80127d8:	2200      	movs	r2, #0
 80127da:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80127de:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80127e2:	2200      	movs	r2, #0
 80127e4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80127e8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80127ec:	2200      	movs	r2, #0
 80127ee:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80127f2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80127fc:	2301      	movs	r3, #1
 80127fe:	2235      	movs	r2, #53	; 0x35
 8012800:	2000      	movs	r0, #0
 8012802:	f7ff faab 	bl	8011d5c <dhcp_option>
 8012806:	4603      	mov	r3, r0
 8012808:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012810:	79fa      	ldrb	r2, [r7, #7]
 8012812:	8a7b      	ldrh	r3, [r7, #18]
 8012814:	4618      	mov	r0, r3
 8012816:	f7ff fad5 	bl	8011dc4 <dhcp_option_byte>
 801281a:	4603      	mov	r3, r0
 801281c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d002      	beq.n	801282a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	8a7a      	ldrh	r2, [r7, #18]
 8012828:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801282a:	69bb      	ldr	r3, [r7, #24]
}
 801282c:	4618      	mov	r0, r3
 801282e:	3720      	adds	r7, #32
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}
 8012834:	0802202c 	.word	0x0802202c
 8012838:	08022360 	.word	0x08022360
 801283c:	08022090 	.word	0x08022090
 8012840:	08022380 	.word	0x08022380
 8012844:	080223a0 	.word	0x080223a0
 8012848:	24009b30 	.word	0x24009b30

0801284c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	4603      	mov	r3, r0
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
 8012858:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801285a:	89fb      	ldrh	r3, [r7, #14]
 801285c:	1c5a      	adds	r2, r3, #1
 801285e:	81fa      	strh	r2, [r7, #14]
 8012860:	461a      	mov	r2, r3
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	4413      	add	r3, r2
 8012866:	22ff      	movs	r2, #255	; 0xff
 8012868:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801286a:	e007      	b.n	801287c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801286c:	89fb      	ldrh	r3, [r7, #14]
 801286e:	1c5a      	adds	r2, r3, #1
 8012870:	81fa      	strh	r2, [r7, #14]
 8012872:	461a      	mov	r2, r3
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	4413      	add	r3, r2
 8012878:	2200      	movs	r2, #0
 801287a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801287c:	89fb      	ldrh	r3, [r7, #14]
 801287e:	2b43      	cmp	r3, #67	; 0x43
 8012880:	d904      	bls.n	801288c <dhcp_option_trailer+0x40>
 8012882:	89fb      	ldrh	r3, [r7, #14]
 8012884:	f003 0303 	and.w	r3, r3, #3
 8012888:	2b00      	cmp	r3, #0
 801288a:	d002      	beq.n	8012892 <dhcp_option_trailer+0x46>
 801288c:	89fb      	ldrh	r3, [r7, #14]
 801288e:	2b43      	cmp	r3, #67	; 0x43
 8012890:	d9ec      	bls.n	801286c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012892:	89fb      	ldrh	r3, [r7, #14]
 8012894:	33f0      	adds	r3, #240	; 0xf0
 8012896:	b29b      	uxth	r3, r3
 8012898:	4619      	mov	r1, r3
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f004 fde0 	bl	8017460 <pbuf_realloc>
}
 80128a0:	bf00      	nop
 80128a2:	3710      	adds	r7, #16
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}

080128a8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80128a8:	b480      	push	{r7}
 80128aa:	b085      	sub	sp, #20
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d017      	beq.n	80128e6 <dhcp_supplied_address+0x3e>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d013      	beq.n	80128e6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128c2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	795b      	ldrb	r3, [r3, #5]
 80128c8:	2b0a      	cmp	r3, #10
 80128ca:	d007      	beq.n	80128dc <dhcp_supplied_address+0x34>
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	795b      	ldrb	r3, [r3, #5]
 80128d0:	2b05      	cmp	r3, #5
 80128d2:	d003      	beq.n	80128dc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80128d8:	2b04      	cmp	r3, #4
 80128da:	d101      	bne.n	80128e0 <dhcp_supplied_address+0x38>
 80128dc:	2301      	movs	r3, #1
 80128de:	e000      	b.n	80128e2 <dhcp_supplied_address+0x3a>
 80128e0:	2300      	movs	r3, #0
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	e000      	b.n	80128e8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3714      	adds	r7, #20
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80128f4:	b480      	push	{r7}
 80128f6:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80128f8:	bf00      	nop
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr
	...

08012904 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8012904:	b480      	push	{r7}
 8012906:	b083      	sub	sp, #12
 8012908:	af00      	add	r7, sp, #0
 801290a:	4603      	mov	r3, r0
 801290c:	6039      	str	r1, [r7, #0]
 801290e:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8012910:	79fb      	ldrb	r3, [r7, #7]
 8012912:	2b01      	cmp	r3, #1
 8012914:	d80f      	bhi.n	8012936 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d006      	beq.n	801292a <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 801291c:	79fb      	ldrb	r3, [r7, #7]
 801291e:	4909      	ldr	r1, [pc, #36]	; (8012944 <dns_setserver+0x40>)
 8012920:	683a      	ldr	r2, [r7, #0]
 8012922:	6812      	ldr	r2, [r2, #0]
 8012924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8012928:	e005      	b.n	8012936 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 801292a:	79fb      	ldrb	r3, [r7, #7]
 801292c:	4905      	ldr	r1, [pc, #20]	; (8012944 <dns_setserver+0x40>)
 801292e:	4a06      	ldr	r2, [pc, #24]	; (8012948 <dns_setserver+0x44>)
 8012930:	6812      	ldr	r2, [r2, #0]
 8012932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012936:	bf00      	nop
 8012938:	370c      	adds	r7, #12
 801293a:	46bd      	mov	sp, r7
 801293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012940:	4770      	bx	lr
 8012942:	bf00      	nop
 8012944:	24009fb4 	.word	0x24009fb4
 8012948:	08025de8 	.word	0x08025de8

0801294c <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8012950:	f000 faa8 	bl	8012ea4 <dns_check_entries>
}
 8012954:	bf00      	nop
 8012956:	bd80      	pop	{r7, pc}

08012958 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b090      	sub	sp, #64	; 0x40
 801295c:	af00      	add	r7, sp, #0
 801295e:	4603      	mov	r3, r0
 8012960:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8012962:	79fa      	ldrb	r2, [r7, #7]
 8012964:	4613      	mov	r3, r2
 8012966:	011b      	lsls	r3, r3, #4
 8012968:	4413      	add	r3, r2
 801296a:	011b      	lsls	r3, r3, #4
 801296c:	4a6c      	ldr	r2, [pc, #432]	; (8012b20 <dns_send+0x1c8>)
 801296e:	4413      	add	r3, r2
 8012970:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8012972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012974:	7adb      	ldrb	r3, [r3, #11]
 8012976:	2b01      	cmp	r3, #1
 8012978:	d906      	bls.n	8012988 <dns_send+0x30>
 801297a:	4b6a      	ldr	r3, [pc, #424]	; (8012b24 <dns_send+0x1cc>)
 801297c:	f240 22fa 	movw	r2, #762	; 0x2fa
 8012980:	4969      	ldr	r1, [pc, #420]	; (8012b28 <dns_send+0x1d0>)
 8012982:	486a      	ldr	r0, [pc, #424]	; (8012b2c <dns_send+0x1d4>)
 8012984:	f00d fde4 	bl	8020550 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8012988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298a:	7adb      	ldrb	r3, [r3, #11]
 801298c:	461a      	mov	r2, r3
 801298e:	4b68      	ldr	r3, [pc, #416]	; (8012b30 <dns_send+0x1d8>)
 8012990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d109      	bne.n	80129ac <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8012998:	79fb      	ldrb	r3, [r7, #7]
 801299a:	2100      	movs	r1, #0
 801299c:	4618      	mov	r0, r3
 801299e:	f000 f8cb 	bl	8012b38 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 80129a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a4:	2200      	movs	r2, #0
 80129a6:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 80129a8:	2300      	movs	r3, #0
 80129aa:	e0b4      	b.n	8012b16 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80129ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ae:	3310      	adds	r3, #16
 80129b0:	4618      	mov	r0, r3
 80129b2:	f7ed fc95 	bl	80002e0 <strlen>
 80129b6:	4603      	mov	r3, r0
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	3312      	adds	r3, #18
 80129bc:	b29b      	uxth	r3, r3
 80129be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129c2:	4619      	mov	r1, r3
 80129c4:	2036      	movs	r0, #54	; 0x36
 80129c6:	f004 fbed 	bl	80171a4 <pbuf_alloc>
 80129ca:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f000 8095 	beq.w	8012afe <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80129d4:	f107 0310 	add.w	r3, r7, #16
 80129d8:	220c      	movs	r2, #12
 80129da:	2100      	movs	r1, #0
 80129dc:	4618      	mov	r0, r3
 80129de:	f00d fccf 	bl	8020380 <memset>
    hdr.id = lwip_htons(entry->txid);
 80129e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e4:	891b      	ldrh	r3, [r3, #8]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7fe f872 	bl	8010ad0 <lwip_htons>
 80129ec:	4603      	mov	r3, r0
 80129ee:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 80129f0:	2301      	movs	r3, #1
 80129f2:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 80129f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129f8:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80129fa:	f107 0310 	add.w	r3, r7, #16
 80129fe:	220c      	movs	r2, #12
 8012a00:	4619      	mov	r1, r3
 8012a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a04:	f005 f966 	bl	8017cd4 <pbuf_take>
    hostname = entry->name;
 8012a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0a:	3310      	adds	r3, #16
 8012a0c:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8012a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a10:	3b01      	subs	r3, #1
 8012a12:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8012a14:	230c      	movs	r3, #12
 8012a16:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8012a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a20:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012a22:	2300      	movs	r3, #0
 8012a24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a28:	e007      	b.n	8012a3a <dns_send+0xe2>
        ++n;
 8012a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a2e:	3301      	adds	r3, #1
 8012a30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a36:	3301      	adds	r3, #1
 8012a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8012a40:	d003      	beq.n	8012a4a <dns_send+0xf2>
 8012a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d1ef      	bne.n	8012a2a <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8012a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8012a52:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012a54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a58:	4413      	add	r3, r2
 8012a5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	dc53      	bgt.n	8012b0a <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8012a62:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012a66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a68:	4619      	mov	r1, r3
 8012a6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a6c:	f005 fa99 	bl	8017fa2 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8012a70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a72:	3301      	adds	r3, #1
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a7c:	f005 f9bc 	bl	8017df8 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8012a80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a88:	4413      	add	r3, r2
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8012a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d1bf      	bne.n	8012a18 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8012a98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012aa0:	f005 fa7f 	bl	8017fa2 <pbuf_put_at>
    query_idx++;
 8012aa4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8012aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012aae:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8012ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ab4:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8012ab6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ab8:	f107 010c 	add.w	r1, r7, #12
 8012abc:	2204      	movs	r2, #4
 8012abe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ac0:	f005 f99a 	bl	8017df8 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac6:	7bdb      	ldrb	r3, [r3, #15]
 8012ac8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8012acc:	2335      	movs	r3, #53	; 0x35
 8012ace:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8012ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad2:	7adb      	ldrb	r3, [r3, #11]
 8012ad4:	009b      	lsls	r3, r3, #2
 8012ad6:	4a16      	ldr	r2, [pc, #88]	; (8012b30 <dns_send+0x1d8>)
 8012ad8:	4413      	add	r3, r2
 8012ada:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8012adc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012ae0:	4a14      	ldr	r2, [pc, #80]	; (8012b34 <dns_send+0x1dc>)
 8012ae2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012ae6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ae8:	69fa      	ldr	r2, [r7, #28]
 8012aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012aec:	f00d f874 	bl	801fbd8 <udp_sendto>
 8012af0:	4603      	mov	r3, r0
 8012af2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8012af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012af8:	f004 fe38 	bl	801776c <pbuf_free>
 8012afc:	e002      	b.n	8012b04 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8012afe:	23ff      	movs	r3, #255	; 0xff
 8012b00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8012b04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012b08:	e005      	b.n	8012b16 <dns_send+0x1be>
        goto overflow_return;
 8012b0a:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8012b0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b0e:	f004 fe2d 	bl	801776c <pbuf_free>
  return ERR_VAL;
 8012b12:	f06f 0305 	mvn.w	r3, #5
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3740      	adds	r7, #64	; 0x40
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	24009b44 	.word	0x24009b44
 8012b24:	080223e0 	.word	0x080223e0
 8012b28:	08022418 	.word	0x08022418
 8012b2c:	08022430 	.word	0x08022430
 8012b30:	24009fb4 	.word	0x24009fb4
 8012b34:	24009b34 	.word	0x24009b34

08012b38 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b085      	sub	sp, #20
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	4603      	mov	r3, r0
 8012b40:	6039      	str	r1, [r7, #0]
 8012b42:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012b44:	2300      	movs	r3, #0
 8012b46:	73fb      	strb	r3, [r7, #15]
 8012b48:	e03d      	b.n	8012bc6 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8012b4a:	7bfa      	ldrb	r2, [r7, #15]
 8012b4c:	4957      	ldr	r1, [pc, #348]	; (8012cac <dns_call_found+0x174>)
 8012b4e:	4613      	mov	r3, r2
 8012b50:	005b      	lsls	r3, r3, #1
 8012b52:	4413      	add	r3, r2
 8012b54:	009b      	lsls	r3, r3, #2
 8012b56:	440b      	add	r3, r1
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d030      	beq.n	8012bc0 <dns_call_found+0x88>
 8012b5e:	7bfa      	ldrb	r2, [r7, #15]
 8012b60:	4952      	ldr	r1, [pc, #328]	; (8012cac <dns_call_found+0x174>)
 8012b62:	4613      	mov	r3, r2
 8012b64:	005b      	lsls	r3, r3, #1
 8012b66:	4413      	add	r3, r2
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	440b      	add	r3, r1
 8012b6c:	3308      	adds	r3, #8
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	79fa      	ldrb	r2, [r7, #7]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d124      	bne.n	8012bc0 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8012b76:	7bfa      	ldrb	r2, [r7, #15]
 8012b78:	494c      	ldr	r1, [pc, #304]	; (8012cac <dns_call_found+0x174>)
 8012b7a:	4613      	mov	r3, r2
 8012b7c:	005b      	lsls	r3, r3, #1
 8012b7e:	4413      	add	r3, r2
 8012b80:	009b      	lsls	r3, r3, #2
 8012b82:	440b      	add	r3, r1
 8012b84:	681c      	ldr	r4, [r3, #0]
 8012b86:	79fa      	ldrb	r2, [r7, #7]
 8012b88:	4613      	mov	r3, r2
 8012b8a:	011b      	lsls	r3, r3, #4
 8012b8c:	4413      	add	r3, r2
 8012b8e:	011b      	lsls	r3, r3, #4
 8012b90:	3310      	adds	r3, #16
 8012b92:	4a47      	ldr	r2, [pc, #284]	; (8012cb0 <dns_call_found+0x178>)
 8012b94:	1898      	adds	r0, r3, r2
 8012b96:	7bfa      	ldrb	r2, [r7, #15]
 8012b98:	4944      	ldr	r1, [pc, #272]	; (8012cac <dns_call_found+0x174>)
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	005b      	lsls	r3, r3, #1
 8012b9e:	4413      	add	r3, r2
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	440b      	add	r3, r1
 8012ba4:	3304      	adds	r3, #4
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	461a      	mov	r2, r3
 8012baa:	6839      	ldr	r1, [r7, #0]
 8012bac:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8012bae:	7bfa      	ldrb	r2, [r7, #15]
 8012bb0:	493e      	ldr	r1, [pc, #248]	; (8012cac <dns_call_found+0x174>)
 8012bb2:	4613      	mov	r3, r2
 8012bb4:	005b      	lsls	r3, r3, #1
 8012bb6:	4413      	add	r3, r2
 8012bb8:	009b      	lsls	r3, r3, #2
 8012bba:	440b      	add	r3, r1
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	73fb      	strb	r3, [r7, #15]
 8012bc6:	7bfb      	ldrb	r3, [r7, #15]
 8012bc8:	2b03      	cmp	r3, #3
 8012bca:	d9be      	bls.n	8012b4a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012bcc:	2300      	movs	r3, #0
 8012bce:	73fb      	strb	r3, [r7, #15]
 8012bd0:	e031      	b.n	8012c36 <dns_call_found+0xfe>
    if (i == idx) {
 8012bd2:	7bfa      	ldrb	r2, [r7, #15]
 8012bd4:	79fb      	ldrb	r3, [r7, #7]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d029      	beq.n	8012c2e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8012bda:	7bfa      	ldrb	r2, [r7, #15]
 8012bdc:	4934      	ldr	r1, [pc, #208]	; (8012cb0 <dns_call_found+0x178>)
 8012bde:	4613      	mov	r3, r2
 8012be0:	011b      	lsls	r3, r3, #4
 8012be2:	4413      	add	r3, r2
 8012be4:	011b      	lsls	r3, r3, #4
 8012be6:	440b      	add	r3, r1
 8012be8:	330a      	adds	r3, #10
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2b02      	cmp	r3, #2
 8012bee:	d11f      	bne.n	8012c30 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8012bf0:	7bfa      	ldrb	r2, [r7, #15]
 8012bf2:	492f      	ldr	r1, [pc, #188]	; (8012cb0 <dns_call_found+0x178>)
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	011b      	lsls	r3, r3, #4
 8012bf8:	4413      	add	r3, r2
 8012bfa:	011b      	lsls	r3, r3, #4
 8012bfc:	440b      	add	r3, r1
 8012bfe:	330f      	adds	r3, #15
 8012c00:	7819      	ldrb	r1, [r3, #0]
 8012c02:	79fa      	ldrb	r2, [r7, #7]
 8012c04:	482a      	ldr	r0, [pc, #168]	; (8012cb0 <dns_call_found+0x178>)
 8012c06:	4613      	mov	r3, r2
 8012c08:	011b      	lsls	r3, r3, #4
 8012c0a:	4413      	add	r3, r2
 8012c0c:	011b      	lsls	r3, r3, #4
 8012c0e:	4403      	add	r3, r0
 8012c10:	330f      	adds	r3, #15
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	4299      	cmp	r1, r3
 8012c16:	d10b      	bne.n	8012c30 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8012c18:	79fa      	ldrb	r2, [r7, #7]
 8012c1a:	4925      	ldr	r1, [pc, #148]	; (8012cb0 <dns_call_found+0x178>)
 8012c1c:	4613      	mov	r3, r2
 8012c1e:	011b      	lsls	r3, r3, #4
 8012c20:	4413      	add	r3, r2
 8012c22:	011b      	lsls	r3, r3, #4
 8012c24:	440b      	add	r3, r1
 8012c26:	330f      	adds	r3, #15
 8012c28:	2204      	movs	r2, #4
 8012c2a:	701a      	strb	r2, [r3, #0]
        break;
 8012c2c:	e006      	b.n	8012c3c <dns_call_found+0x104>
      continue; /* only check other requests */
 8012c2e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012c30:	7bfb      	ldrb	r3, [r7, #15]
 8012c32:	3301      	adds	r3, #1
 8012c34:	73fb      	strb	r3, [r7, #15]
 8012c36:	7bfb      	ldrb	r3, [r7, #15]
 8012c38:	2b03      	cmp	r3, #3
 8012c3a:	d9ca      	bls.n	8012bd2 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8012c3c:	79fa      	ldrb	r2, [r7, #7]
 8012c3e:	491c      	ldr	r1, [pc, #112]	; (8012cb0 <dns_call_found+0x178>)
 8012c40:	4613      	mov	r3, r2
 8012c42:	011b      	lsls	r3, r3, #4
 8012c44:	4413      	add	r3, r2
 8012c46:	011b      	lsls	r3, r3, #4
 8012c48:	440b      	add	r3, r1
 8012c4a:	330f      	adds	r3, #15
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	2b03      	cmp	r3, #3
 8012c50:	d827      	bhi.n	8012ca2 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8012c52:	79fa      	ldrb	r2, [r7, #7]
 8012c54:	4916      	ldr	r1, [pc, #88]	; (8012cb0 <dns_call_found+0x178>)
 8012c56:	4613      	mov	r3, r2
 8012c58:	011b      	lsls	r3, r3, #4
 8012c5a:	4413      	add	r3, r2
 8012c5c:	011b      	lsls	r3, r3, #4
 8012c5e:	440b      	add	r3, r1
 8012c60:	330f      	adds	r3, #15
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	461a      	mov	r2, r3
 8012c66:	4b13      	ldr	r3, [pc, #76]	; (8012cb4 <dns_call_found+0x17c>)
 8012c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f00d faa7 	bl	80201c0 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8012c72:	79fa      	ldrb	r2, [r7, #7]
 8012c74:	490e      	ldr	r1, [pc, #56]	; (8012cb0 <dns_call_found+0x178>)
 8012c76:	4613      	mov	r3, r2
 8012c78:	011b      	lsls	r3, r3, #4
 8012c7a:	4413      	add	r3, r2
 8012c7c:	011b      	lsls	r3, r3, #4
 8012c7e:	440b      	add	r3, r1
 8012c80:	330f      	adds	r3, #15
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	4619      	mov	r1, r3
 8012c86:	4b0b      	ldr	r3, [pc, #44]	; (8012cb4 <dns_call_found+0x17c>)
 8012c88:	2200      	movs	r2, #0
 8012c8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8012c8e:	79fa      	ldrb	r2, [r7, #7]
 8012c90:	4907      	ldr	r1, [pc, #28]	; (8012cb0 <dns_call_found+0x178>)
 8012c92:	4613      	mov	r3, r2
 8012c94:	011b      	lsls	r3, r3, #4
 8012c96:	4413      	add	r3, r2
 8012c98:	011b      	lsls	r3, r3, #4
 8012c9a:	440b      	add	r3, r1
 8012c9c:	330f      	adds	r3, #15
 8012c9e:	2204      	movs	r2, #4
 8012ca0:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8012ca2:	bf00      	nop
 8012ca4:	3714      	adds	r7, #20
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd90      	pop	{r4, r7, pc}
 8012caa:	bf00      	nop
 8012cac:	24009f84 	.word	0x24009f84
 8012cb0:	24009b44 	.word	0x24009b44
 8012cb4:	24009b34 	.word	0x24009b34

08012cb8 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8012cbe:	f00d fc5f 	bl	8020580 <rand>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	71fb      	strb	r3, [r7, #7]
 8012cca:	e01a      	b.n	8012d02 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012ccc:	79fa      	ldrb	r2, [r7, #7]
 8012cce:	4911      	ldr	r1, [pc, #68]	; (8012d14 <dns_create_txid+0x5c>)
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	011b      	lsls	r3, r3, #4
 8012cd4:	4413      	add	r3, r2
 8012cd6:	011b      	lsls	r3, r3, #4
 8012cd8:	440b      	add	r3, r1
 8012cda:	330a      	adds	r3, #10
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	2b02      	cmp	r3, #2
 8012ce0:	d10c      	bne.n	8012cfc <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8012ce2:	79fa      	ldrb	r2, [r7, #7]
 8012ce4:	490b      	ldr	r1, [pc, #44]	; (8012d14 <dns_create_txid+0x5c>)
 8012ce6:	4613      	mov	r3, r2
 8012ce8:	011b      	lsls	r3, r3, #4
 8012cea:	4413      	add	r3, r2
 8012cec:	011b      	lsls	r3, r3, #4
 8012cee:	440b      	add	r3, r1
 8012cf0:	3308      	adds	r3, #8
 8012cf2:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012cf4:	88ba      	ldrh	r2, [r7, #4]
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d100      	bne.n	8012cfc <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8012cfa:	e7e0      	b.n	8012cbe <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012cfc:	79fb      	ldrb	r3, [r7, #7]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	71fb      	strb	r3, [r7, #7]
 8012d02:	79fb      	ldrb	r3, [r7, #7]
 8012d04:	2b03      	cmp	r3, #3
 8012d06:	d9e1      	bls.n	8012ccc <dns_create_txid+0x14>
    }
  }

  return txid;
 8012d08:	88bb      	ldrh	r3, [r7, #4]
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3708      	adds	r7, #8
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	24009b44 	.word	0x24009b44

08012d18 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b085      	sub	sp, #20
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8012d20:	2300      	movs	r3, #0
 8012d22:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d00d      	beq.n	8012d46 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	7adb      	ldrb	r3, [r3, #11]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d109      	bne.n	8012d46 <dns_backupserver_available+0x2e>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	7adb      	ldrb	r3, [r3, #11]
 8012d36:	3301      	adds	r3, #1
 8012d38:	4a06      	ldr	r2, [pc, #24]	; (8012d54 <dns_backupserver_available+0x3c>)
 8012d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d001      	beq.n	8012d46 <dns_backupserver_available+0x2e>
      ret = 1;
 8012d42:	2301      	movs	r3, #1
 8012d44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3714      	adds	r7, #20
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d52:	4770      	bx	lr
 8012d54:	24009fb4 	.word	0x24009fb4

08012d58 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b084      	sub	sp, #16
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	4603      	mov	r3, r0
 8012d60:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8012d62:	79fa      	ldrb	r2, [r7, #7]
 8012d64:	4613      	mov	r3, r2
 8012d66:	011b      	lsls	r3, r3, #4
 8012d68:	4413      	add	r3, r2
 8012d6a:	011b      	lsls	r3, r3, #4
 8012d6c:	4a48      	ldr	r2, [pc, #288]	; (8012e90 <dns_check_entry+0x138>)
 8012d6e:	4413      	add	r3, r2
 8012d70:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8012d72:	79fb      	ldrb	r3, [r7, #7]
 8012d74:	2b03      	cmp	r3, #3
 8012d76:	d906      	bls.n	8012d86 <dns_check_entry+0x2e>
 8012d78:	4b46      	ldr	r3, [pc, #280]	; (8012e94 <dns_check_entry+0x13c>)
 8012d7a:	f240 421c 	movw	r2, #1052	; 0x41c
 8012d7e:	4946      	ldr	r1, [pc, #280]	; (8012e98 <dns_check_entry+0x140>)
 8012d80:	4846      	ldr	r0, [pc, #280]	; (8012e9c <dns_check_entry+0x144>)
 8012d82:	f00d fbe5 	bl	8020550 <iprintf>

  switch (entry->state) {
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	7a9b      	ldrb	r3, [r3, #10]
 8012d8a:	2b03      	cmp	r3, #3
 8012d8c:	d86f      	bhi.n	8012e6e <dns_check_entry+0x116>
 8012d8e:	a201      	add	r2, pc, #4	; (adr r2, 8012d94 <dns_check_entry+0x3c>)
 8012d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d94:	08012e7f 	.word	0x08012e7f
 8012d98:	08012da5 	.word	0x08012da5
 8012d9c:	08012dd7 	.word	0x08012dd7
 8012da0:	08012e4d 	.word	0x08012e4d
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8012da4:	f7ff ff88 	bl	8012cb8 <dns_create_txid>
 8012da8:	4603      	mov	r3, r0
 8012daa:	461a      	mov	r2, r3
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2202      	movs	r2, #2
 8012db4:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	2200      	movs	r2, #0
 8012dba:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8012dc8:	79fb      	ldrb	r3, [r7, #7]
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7ff fdc4 	bl	8012958 <dns_send>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8012dd4:	e058      	b.n	8012e88 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	7b1b      	ldrb	r3, [r3, #12]
 8012dda:	3b01      	subs	r3, #1
 8012ddc:	b2da      	uxtb	r2, r3
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	731a      	strb	r2, [r3, #12]
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	7b1b      	ldrb	r3, [r3, #12]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d14b      	bne.n	8012e82 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	7b5b      	ldrb	r3, [r3, #13]
 8012dee:	3301      	adds	r3, #1
 8012df0:	b2da      	uxtb	r2, r3
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	735a      	strb	r2, [r3, #13]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	7b5b      	ldrb	r3, [r3, #13]
 8012dfa:	2b04      	cmp	r3, #4
 8012dfc:	d11b      	bne.n	8012e36 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8012dfe:	68f8      	ldr	r0, [r7, #12]
 8012e00:	f7ff ff8a 	bl	8012d18 <dns_backupserver_available>
 8012e04:	4603      	mov	r3, r0
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d00c      	beq.n	8012e24 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	7adb      	ldrb	r3, [r3, #11]
 8012e0e:	3301      	adds	r3, #1
 8012e10:	b2da      	uxtb	r2, r3
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	2201      	movs	r2, #1
 8012e1a:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	735a      	strb	r2, [r3, #13]
 8012e22:	e00c      	b.n	8012e3e <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8012e24:	79fb      	ldrb	r3, [r7, #7]
 8012e26:	2100      	movs	r1, #0
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7ff fe85 	bl	8012b38 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2200      	movs	r2, #0
 8012e32:	729a      	strb	r2, [r3, #10]
            break;
 8012e34:	e028      	b.n	8012e88 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	7b5a      	ldrb	r2, [r3, #13]
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8012e3e:	79fb      	ldrb	r3, [r7, #7]
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7ff fd89 	bl	8012958 <dns_send>
 8012e46:	4603      	mov	r3, r0
 8012e48:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8012e4a:	e01a      	b.n	8012e82 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d008      	beq.n	8012e66 <dns_check_entry+0x10e>
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	1e5a      	subs	r2, r3, #1
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	601a      	str	r2, [r3, #0]
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d10f      	bne.n	8012e86 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	2200      	movs	r2, #0
 8012e6a:	729a      	strb	r2, [r3, #10]
      }
      break;
 8012e6c:	e00b      	b.n	8012e86 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8012e6e:	4b09      	ldr	r3, [pc, #36]	; (8012e94 <dns_check_entry+0x13c>)
 8012e70:	f240 425b 	movw	r2, #1115	; 0x45b
 8012e74:	490a      	ldr	r1, [pc, #40]	; (8012ea0 <dns_check_entry+0x148>)
 8012e76:	4809      	ldr	r0, [pc, #36]	; (8012e9c <dns_check_entry+0x144>)
 8012e78:	f00d fb6a 	bl	8020550 <iprintf>
      break;
 8012e7c:	e004      	b.n	8012e88 <dns_check_entry+0x130>
      break;
 8012e7e:	bf00      	nop
 8012e80:	e002      	b.n	8012e88 <dns_check_entry+0x130>
      break;
 8012e82:	bf00      	nop
 8012e84:	e000      	b.n	8012e88 <dns_check_entry+0x130>
      break;
 8012e86:	bf00      	nop
  }
}
 8012e88:	bf00      	nop
 8012e8a:	3710      	adds	r7, #16
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}
 8012e90:	24009b44 	.word	0x24009b44
 8012e94:	080223e0 	.word	0x080223e0
 8012e98:	08022458 	.word	0x08022458
 8012e9c:	08022430 	.word	0x08022430
 8012ea0:	08022474 	.word	0x08022474

08012ea4 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012eaa:	2300      	movs	r3, #0
 8012eac:	71fb      	strb	r3, [r7, #7]
 8012eae:	e006      	b.n	8012ebe <dns_check_entries+0x1a>
    dns_check_entry(i);
 8012eb0:	79fb      	ldrb	r3, [r7, #7]
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7ff ff50 	bl	8012d58 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012eb8:	79fb      	ldrb	r3, [r7, #7]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	71fb      	strb	r3, [r7, #7]
 8012ebe:	79fb      	ldrb	r3, [r7, #7]
 8012ec0:	2b03      	cmp	r3, #3
 8012ec2:	d9f5      	bls.n	8012eb0 <dns_check_entries+0xc>
  }
}
 8012ec4:	bf00      	nop
 8012ec6:	bf00      	nop
 8012ec8:	3708      	adds	r7, #8
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
	...

08012ed0 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b083      	sub	sp, #12
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8012eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	dc04      	bgt.n	8012eec <err_to_errno+0x1c>
 8012ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ee6:	f113 0f10 	cmn.w	r3, #16
 8012eea:	da01      	bge.n	8012ef0 <err_to_errno+0x20>
    return EIO;
 8012eec:	2305      	movs	r3, #5
 8012eee:	e005      	b.n	8012efc <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8012ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ef4:	425b      	negs	r3, r3
 8012ef6:	4a04      	ldr	r2, [pc, #16]	; (8012f08 <err_to_errno+0x38>)
 8012ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	370c      	adds	r7, #12
 8012f00:	46bd      	mov	sp, r7
 8012f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f06:	4770      	bx	lr
 8012f08:	08025d94 	.word	0x08025d94

08012f0c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012f14:	4915      	ldr	r1, [pc, #84]	; (8012f6c <etharp_free_entry+0x60>)
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	4613      	mov	r3, r2
 8012f1a:	005b      	lsls	r3, r3, #1
 8012f1c:	4413      	add	r3, r2
 8012f1e:	00db      	lsls	r3, r3, #3
 8012f20:	440b      	add	r3, r1
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d013      	beq.n	8012f50 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012f28:	4910      	ldr	r1, [pc, #64]	; (8012f6c <etharp_free_entry+0x60>)
 8012f2a:	687a      	ldr	r2, [r7, #4]
 8012f2c:	4613      	mov	r3, r2
 8012f2e:	005b      	lsls	r3, r3, #1
 8012f30:	4413      	add	r3, r2
 8012f32:	00db      	lsls	r3, r3, #3
 8012f34:	440b      	add	r3, r1
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f004 fc17 	bl	801776c <pbuf_free>
    arp_table[i].q = NULL;
 8012f3e:	490b      	ldr	r1, [pc, #44]	; (8012f6c <etharp_free_entry+0x60>)
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	4613      	mov	r3, r2
 8012f44:	005b      	lsls	r3, r3, #1
 8012f46:	4413      	add	r3, r2
 8012f48:	00db      	lsls	r3, r3, #3
 8012f4a:	440b      	add	r3, r1
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012f50:	4906      	ldr	r1, [pc, #24]	; (8012f6c <etharp_free_entry+0x60>)
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	4613      	mov	r3, r2
 8012f56:	005b      	lsls	r3, r3, #1
 8012f58:	4413      	add	r3, r2
 8012f5a:	00db      	lsls	r3, r3, #3
 8012f5c:	440b      	add	r3, r1
 8012f5e:	3314      	adds	r3, #20
 8012f60:	2200      	movs	r2, #0
 8012f62:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012f64:	bf00      	nop
 8012f66:	3708      	adds	r7, #8
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	24009fbc 	.word	0x24009fbc

08012f70 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012f76:	2300      	movs	r3, #0
 8012f78:	607b      	str	r3, [r7, #4]
 8012f7a:	e096      	b.n	80130aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012f7c:	494f      	ldr	r1, [pc, #316]	; (80130bc <etharp_tmr+0x14c>)
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	4613      	mov	r3, r2
 8012f82:	005b      	lsls	r3, r3, #1
 8012f84:	4413      	add	r3, r2
 8012f86:	00db      	lsls	r3, r3, #3
 8012f88:	440b      	add	r3, r1
 8012f8a:	3314      	adds	r3, #20
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012f90:	78fb      	ldrb	r3, [r7, #3]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f000 8086 	beq.w	80130a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012f98:	4948      	ldr	r1, [pc, #288]	; (80130bc <etharp_tmr+0x14c>)
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	4613      	mov	r3, r2
 8012f9e:	005b      	lsls	r3, r3, #1
 8012fa0:	4413      	add	r3, r2
 8012fa2:	00db      	lsls	r3, r3, #3
 8012fa4:	440b      	add	r3, r1
 8012fa6:	3312      	adds	r3, #18
 8012fa8:	881b      	ldrh	r3, [r3, #0]
 8012faa:	3301      	adds	r3, #1
 8012fac:	b298      	uxth	r0, r3
 8012fae:	4943      	ldr	r1, [pc, #268]	; (80130bc <etharp_tmr+0x14c>)
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	4613      	mov	r3, r2
 8012fb4:	005b      	lsls	r3, r3, #1
 8012fb6:	4413      	add	r3, r2
 8012fb8:	00db      	lsls	r3, r3, #3
 8012fba:	440b      	add	r3, r1
 8012fbc:	3312      	adds	r3, #18
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012fc2:	493e      	ldr	r1, [pc, #248]	; (80130bc <etharp_tmr+0x14c>)
 8012fc4:	687a      	ldr	r2, [r7, #4]
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	005b      	lsls	r3, r3, #1
 8012fca:	4413      	add	r3, r2
 8012fcc:	00db      	lsls	r3, r3, #3
 8012fce:	440b      	add	r3, r1
 8012fd0:	3312      	adds	r3, #18
 8012fd2:	881b      	ldrh	r3, [r3, #0]
 8012fd4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012fd8:	d215      	bcs.n	8013006 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012fda:	4938      	ldr	r1, [pc, #224]	; (80130bc <etharp_tmr+0x14c>)
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	4613      	mov	r3, r2
 8012fe0:	005b      	lsls	r3, r3, #1
 8012fe2:	4413      	add	r3, r2
 8012fe4:	00db      	lsls	r3, r3, #3
 8012fe6:	440b      	add	r3, r1
 8012fe8:	3314      	adds	r3, #20
 8012fea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	d10e      	bne.n	801300e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012ff0:	4932      	ldr	r1, [pc, #200]	; (80130bc <etharp_tmr+0x14c>)
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	4613      	mov	r3, r2
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	4413      	add	r3, r2
 8012ffa:	00db      	lsls	r3, r3, #3
 8012ffc:	440b      	add	r3, r1
 8012ffe:	3312      	adds	r3, #18
 8013000:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013002:	2b04      	cmp	r3, #4
 8013004:	d903      	bls.n	801300e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f7ff ff80 	bl	8012f0c <etharp_free_entry>
 801300c:	e04a      	b.n	80130a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801300e:	492b      	ldr	r1, [pc, #172]	; (80130bc <etharp_tmr+0x14c>)
 8013010:	687a      	ldr	r2, [r7, #4]
 8013012:	4613      	mov	r3, r2
 8013014:	005b      	lsls	r3, r3, #1
 8013016:	4413      	add	r3, r2
 8013018:	00db      	lsls	r3, r3, #3
 801301a:	440b      	add	r3, r1
 801301c:	3314      	adds	r3, #20
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	2b03      	cmp	r3, #3
 8013022:	d10a      	bne.n	801303a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013024:	4925      	ldr	r1, [pc, #148]	; (80130bc <etharp_tmr+0x14c>)
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	4613      	mov	r3, r2
 801302a:	005b      	lsls	r3, r3, #1
 801302c:	4413      	add	r3, r2
 801302e:	00db      	lsls	r3, r3, #3
 8013030:	440b      	add	r3, r1
 8013032:	3314      	adds	r3, #20
 8013034:	2204      	movs	r2, #4
 8013036:	701a      	strb	r2, [r3, #0]
 8013038:	e034      	b.n	80130a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801303a:	4920      	ldr	r1, [pc, #128]	; (80130bc <etharp_tmr+0x14c>)
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	4613      	mov	r3, r2
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	4413      	add	r3, r2
 8013044:	00db      	lsls	r3, r3, #3
 8013046:	440b      	add	r3, r1
 8013048:	3314      	adds	r3, #20
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	2b04      	cmp	r3, #4
 801304e:	d10a      	bne.n	8013066 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013050:	491a      	ldr	r1, [pc, #104]	; (80130bc <etharp_tmr+0x14c>)
 8013052:	687a      	ldr	r2, [r7, #4]
 8013054:	4613      	mov	r3, r2
 8013056:	005b      	lsls	r3, r3, #1
 8013058:	4413      	add	r3, r2
 801305a:	00db      	lsls	r3, r3, #3
 801305c:	440b      	add	r3, r1
 801305e:	3314      	adds	r3, #20
 8013060:	2202      	movs	r2, #2
 8013062:	701a      	strb	r2, [r3, #0]
 8013064:	e01e      	b.n	80130a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013066:	4915      	ldr	r1, [pc, #84]	; (80130bc <etharp_tmr+0x14c>)
 8013068:	687a      	ldr	r2, [r7, #4]
 801306a:	4613      	mov	r3, r2
 801306c:	005b      	lsls	r3, r3, #1
 801306e:	4413      	add	r3, r2
 8013070:	00db      	lsls	r3, r3, #3
 8013072:	440b      	add	r3, r1
 8013074:	3314      	adds	r3, #20
 8013076:	781b      	ldrb	r3, [r3, #0]
 8013078:	2b01      	cmp	r3, #1
 801307a:	d113      	bne.n	80130a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801307c:	490f      	ldr	r1, [pc, #60]	; (80130bc <etharp_tmr+0x14c>)
 801307e:	687a      	ldr	r2, [r7, #4]
 8013080:	4613      	mov	r3, r2
 8013082:	005b      	lsls	r3, r3, #1
 8013084:	4413      	add	r3, r2
 8013086:	00db      	lsls	r3, r3, #3
 8013088:	440b      	add	r3, r1
 801308a:	3308      	adds	r3, #8
 801308c:	6818      	ldr	r0, [r3, #0]
 801308e:	687a      	ldr	r2, [r7, #4]
 8013090:	4613      	mov	r3, r2
 8013092:	005b      	lsls	r3, r3, #1
 8013094:	4413      	add	r3, r2
 8013096:	00db      	lsls	r3, r3, #3
 8013098:	4a08      	ldr	r2, [pc, #32]	; (80130bc <etharp_tmr+0x14c>)
 801309a:	4413      	add	r3, r2
 801309c:	3304      	adds	r3, #4
 801309e:	4619      	mov	r1, r3
 80130a0:	f000 fe72 	bl	8013d88 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	3301      	adds	r3, #1
 80130a8:	607b      	str	r3, [r7, #4]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2b09      	cmp	r3, #9
 80130ae:	f77f af65 	ble.w	8012f7c <etharp_tmr+0xc>
      }
    }
  }
}
 80130b2:	bf00      	nop
 80130b4:	bf00      	nop
 80130b6:	3708      	adds	r7, #8
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	24009fbc 	.word	0x24009fbc

080130c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08a      	sub	sp, #40	; 0x28
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	460b      	mov	r3, r1
 80130ca:	607a      	str	r2, [r7, #4]
 80130cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80130ce:	230a      	movs	r3, #10
 80130d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80130d2:	230a      	movs	r3, #10
 80130d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80130d6:	230a      	movs	r3, #10
 80130d8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80130da:	2300      	movs	r3, #0
 80130dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80130de:	230a      	movs	r3, #10
 80130e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80130e2:	2300      	movs	r3, #0
 80130e4:	83bb      	strh	r3, [r7, #28]
 80130e6:	2300      	movs	r3, #0
 80130e8:	837b      	strh	r3, [r7, #26]
 80130ea:	2300      	movs	r3, #0
 80130ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130ee:	2300      	movs	r3, #0
 80130f0:	843b      	strh	r3, [r7, #32]
 80130f2:	e0ae      	b.n	8013252 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80130f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130f8:	49a6      	ldr	r1, [pc, #664]	; (8013394 <etharp_find_entry+0x2d4>)
 80130fa:	4613      	mov	r3, r2
 80130fc:	005b      	lsls	r3, r3, #1
 80130fe:	4413      	add	r3, r2
 8013100:	00db      	lsls	r3, r3, #3
 8013102:	440b      	add	r3, r1
 8013104:	3314      	adds	r3, #20
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801310a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801310e:	2b0a      	cmp	r3, #10
 8013110:	d105      	bne.n	801311e <etharp_find_entry+0x5e>
 8013112:	7dfb      	ldrb	r3, [r7, #23]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d102      	bne.n	801311e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013118:	8c3b      	ldrh	r3, [r7, #32]
 801311a:	847b      	strh	r3, [r7, #34]	; 0x22
 801311c:	e095      	b.n	801324a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801311e:	7dfb      	ldrb	r3, [r7, #23]
 8013120:	2b00      	cmp	r3, #0
 8013122:	f000 8092 	beq.w	801324a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013126:	7dfb      	ldrb	r3, [r7, #23]
 8013128:	2b01      	cmp	r3, #1
 801312a:	d009      	beq.n	8013140 <etharp_find_entry+0x80>
 801312c:	7dfb      	ldrb	r3, [r7, #23]
 801312e:	2b01      	cmp	r3, #1
 8013130:	d806      	bhi.n	8013140 <etharp_find_entry+0x80>
 8013132:	4b99      	ldr	r3, [pc, #612]	; (8013398 <etharp_find_entry+0x2d8>)
 8013134:	f240 1223 	movw	r2, #291	; 0x123
 8013138:	4998      	ldr	r1, [pc, #608]	; (801339c <etharp_find_entry+0x2dc>)
 801313a:	4899      	ldr	r0, [pc, #612]	; (80133a0 <etharp_find_entry+0x2e0>)
 801313c:	f00d fa08 	bl	8020550 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d020      	beq.n	8013188 <etharp_find_entry+0xc8>
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	6819      	ldr	r1, [r3, #0]
 801314a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801314e:	4891      	ldr	r0, [pc, #580]	; (8013394 <etharp_find_entry+0x2d4>)
 8013150:	4613      	mov	r3, r2
 8013152:	005b      	lsls	r3, r3, #1
 8013154:	4413      	add	r3, r2
 8013156:	00db      	lsls	r3, r3, #3
 8013158:	4403      	add	r3, r0
 801315a:	3304      	adds	r3, #4
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	4299      	cmp	r1, r3
 8013160:	d112      	bne.n	8013188 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d00c      	beq.n	8013182 <etharp_find_entry+0xc2>
 8013168:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801316c:	4989      	ldr	r1, [pc, #548]	; (8013394 <etharp_find_entry+0x2d4>)
 801316e:	4613      	mov	r3, r2
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	4413      	add	r3, r2
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	440b      	add	r3, r1
 8013178:	3308      	adds	r3, #8
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	687a      	ldr	r2, [r7, #4]
 801317e:	429a      	cmp	r2, r3
 8013180:	d102      	bne.n	8013188 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013182:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013186:	e100      	b.n	801338a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013188:	7dfb      	ldrb	r3, [r7, #23]
 801318a:	2b01      	cmp	r3, #1
 801318c:	d140      	bne.n	8013210 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801318e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013192:	4980      	ldr	r1, [pc, #512]	; (8013394 <etharp_find_entry+0x2d4>)
 8013194:	4613      	mov	r3, r2
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	4413      	add	r3, r2
 801319a:	00db      	lsls	r3, r3, #3
 801319c:	440b      	add	r3, r1
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d01a      	beq.n	80131da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80131a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131a8:	497a      	ldr	r1, [pc, #488]	; (8013394 <etharp_find_entry+0x2d4>)
 80131aa:	4613      	mov	r3, r2
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	4413      	add	r3, r2
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	440b      	add	r3, r1
 80131b4:	3312      	adds	r3, #18
 80131b6:	881b      	ldrh	r3, [r3, #0]
 80131b8:	8bba      	ldrh	r2, [r7, #28]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d845      	bhi.n	801324a <etharp_find_entry+0x18a>
            old_queue = i;
 80131be:	8c3b      	ldrh	r3, [r7, #32]
 80131c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80131c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131c6:	4973      	ldr	r1, [pc, #460]	; (8013394 <etharp_find_entry+0x2d4>)
 80131c8:	4613      	mov	r3, r2
 80131ca:	005b      	lsls	r3, r3, #1
 80131cc:	4413      	add	r3, r2
 80131ce:	00db      	lsls	r3, r3, #3
 80131d0:	440b      	add	r3, r1
 80131d2:	3312      	adds	r3, #18
 80131d4:	881b      	ldrh	r3, [r3, #0]
 80131d6:	83bb      	strh	r3, [r7, #28]
 80131d8:	e037      	b.n	801324a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80131da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131de:	496d      	ldr	r1, [pc, #436]	; (8013394 <etharp_find_entry+0x2d4>)
 80131e0:	4613      	mov	r3, r2
 80131e2:	005b      	lsls	r3, r3, #1
 80131e4:	4413      	add	r3, r2
 80131e6:	00db      	lsls	r3, r3, #3
 80131e8:	440b      	add	r3, r1
 80131ea:	3312      	adds	r3, #18
 80131ec:	881b      	ldrh	r3, [r3, #0]
 80131ee:	8b7a      	ldrh	r2, [r7, #26]
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d82a      	bhi.n	801324a <etharp_find_entry+0x18a>
            old_pending = i;
 80131f4:	8c3b      	ldrh	r3, [r7, #32]
 80131f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80131f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131fc:	4965      	ldr	r1, [pc, #404]	; (8013394 <etharp_find_entry+0x2d4>)
 80131fe:	4613      	mov	r3, r2
 8013200:	005b      	lsls	r3, r3, #1
 8013202:	4413      	add	r3, r2
 8013204:	00db      	lsls	r3, r3, #3
 8013206:	440b      	add	r3, r1
 8013208:	3312      	adds	r3, #18
 801320a:	881b      	ldrh	r3, [r3, #0]
 801320c:	837b      	strh	r3, [r7, #26]
 801320e:	e01c      	b.n	801324a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013210:	7dfb      	ldrb	r3, [r7, #23]
 8013212:	2b01      	cmp	r3, #1
 8013214:	d919      	bls.n	801324a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013216:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801321a:	495e      	ldr	r1, [pc, #376]	; (8013394 <etharp_find_entry+0x2d4>)
 801321c:	4613      	mov	r3, r2
 801321e:	005b      	lsls	r3, r3, #1
 8013220:	4413      	add	r3, r2
 8013222:	00db      	lsls	r3, r3, #3
 8013224:	440b      	add	r3, r1
 8013226:	3312      	adds	r3, #18
 8013228:	881b      	ldrh	r3, [r3, #0]
 801322a:	8b3a      	ldrh	r2, [r7, #24]
 801322c:	429a      	cmp	r2, r3
 801322e:	d80c      	bhi.n	801324a <etharp_find_entry+0x18a>
            old_stable = i;
 8013230:	8c3b      	ldrh	r3, [r7, #32]
 8013232:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013234:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013238:	4956      	ldr	r1, [pc, #344]	; (8013394 <etharp_find_entry+0x2d4>)
 801323a:	4613      	mov	r3, r2
 801323c:	005b      	lsls	r3, r3, #1
 801323e:	4413      	add	r3, r2
 8013240:	00db      	lsls	r3, r3, #3
 8013242:	440b      	add	r3, r1
 8013244:	3312      	adds	r3, #18
 8013246:	881b      	ldrh	r3, [r3, #0]
 8013248:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801324a:	8c3b      	ldrh	r3, [r7, #32]
 801324c:	3301      	adds	r3, #1
 801324e:	b29b      	uxth	r3, r3
 8013250:	843b      	strh	r3, [r7, #32]
 8013252:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013256:	2b09      	cmp	r3, #9
 8013258:	f77f af4c 	ble.w	80130f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801325c:	7afb      	ldrb	r3, [r7, #11]
 801325e:	f003 0302 	and.w	r3, r3, #2
 8013262:	2b00      	cmp	r3, #0
 8013264:	d108      	bne.n	8013278 <etharp_find_entry+0x1b8>
 8013266:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801326a:	2b0a      	cmp	r3, #10
 801326c:	d107      	bne.n	801327e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801326e:	7afb      	ldrb	r3, [r7, #11]
 8013270:	f003 0301 	and.w	r3, r3, #1
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013278:	f04f 33ff 	mov.w	r3, #4294967295
 801327c:	e085      	b.n	801338a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801327e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013282:	2b09      	cmp	r3, #9
 8013284:	dc02      	bgt.n	801328c <etharp_find_entry+0x1cc>
    i = empty;
 8013286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013288:	843b      	strh	r3, [r7, #32]
 801328a:	e039      	b.n	8013300 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801328c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013290:	2b09      	cmp	r3, #9
 8013292:	dc14      	bgt.n	80132be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013296:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013298:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801329c:	493d      	ldr	r1, [pc, #244]	; (8013394 <etharp_find_entry+0x2d4>)
 801329e:	4613      	mov	r3, r2
 80132a0:	005b      	lsls	r3, r3, #1
 80132a2:	4413      	add	r3, r2
 80132a4:	00db      	lsls	r3, r3, #3
 80132a6:	440b      	add	r3, r1
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d018      	beq.n	80132e0 <etharp_find_entry+0x220>
 80132ae:	4b3a      	ldr	r3, [pc, #232]	; (8013398 <etharp_find_entry+0x2d8>)
 80132b0:	f240 126d 	movw	r2, #365	; 0x16d
 80132b4:	493b      	ldr	r1, [pc, #236]	; (80133a4 <etharp_find_entry+0x2e4>)
 80132b6:	483a      	ldr	r0, [pc, #232]	; (80133a0 <etharp_find_entry+0x2e0>)
 80132b8:	f00d f94a 	bl	8020550 <iprintf>
 80132bc:	e010      	b.n	80132e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80132be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80132c2:	2b09      	cmp	r3, #9
 80132c4:	dc02      	bgt.n	80132cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80132c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80132c8:	843b      	strh	r3, [r7, #32]
 80132ca:	e009      	b.n	80132e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80132cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80132d0:	2b09      	cmp	r3, #9
 80132d2:	dc02      	bgt.n	80132da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80132d4:	8bfb      	ldrh	r3, [r7, #30]
 80132d6:	843b      	strh	r3, [r7, #32]
 80132d8:	e002      	b.n	80132e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80132da:	f04f 33ff 	mov.w	r3, #4294967295
 80132de:	e054      	b.n	801338a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80132e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80132e4:	2b09      	cmp	r3, #9
 80132e6:	dd06      	ble.n	80132f6 <etharp_find_entry+0x236>
 80132e8:	4b2b      	ldr	r3, [pc, #172]	; (8013398 <etharp_find_entry+0x2d8>)
 80132ea:	f240 127f 	movw	r2, #383	; 0x17f
 80132ee:	492e      	ldr	r1, [pc, #184]	; (80133a8 <etharp_find_entry+0x2e8>)
 80132f0:	482b      	ldr	r0, [pc, #172]	; (80133a0 <etharp_find_entry+0x2e0>)
 80132f2:	f00d f92d 	bl	8020550 <iprintf>
    etharp_free_entry(i);
 80132f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7ff fe06 	bl	8012f0c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013300:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013304:	2b09      	cmp	r3, #9
 8013306:	dd06      	ble.n	8013316 <etharp_find_entry+0x256>
 8013308:	4b23      	ldr	r3, [pc, #140]	; (8013398 <etharp_find_entry+0x2d8>)
 801330a:	f240 1283 	movw	r2, #387	; 0x183
 801330e:	4926      	ldr	r1, [pc, #152]	; (80133a8 <etharp_find_entry+0x2e8>)
 8013310:	4823      	ldr	r0, [pc, #140]	; (80133a0 <etharp_find_entry+0x2e0>)
 8013312:	f00d f91d 	bl	8020550 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013316:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801331a:	491e      	ldr	r1, [pc, #120]	; (8013394 <etharp_find_entry+0x2d4>)
 801331c:	4613      	mov	r3, r2
 801331e:	005b      	lsls	r3, r3, #1
 8013320:	4413      	add	r3, r2
 8013322:	00db      	lsls	r3, r3, #3
 8013324:	440b      	add	r3, r1
 8013326:	3314      	adds	r3, #20
 8013328:	781b      	ldrb	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d006      	beq.n	801333c <etharp_find_entry+0x27c>
 801332e:	4b1a      	ldr	r3, [pc, #104]	; (8013398 <etharp_find_entry+0x2d8>)
 8013330:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013334:	491d      	ldr	r1, [pc, #116]	; (80133ac <etharp_find_entry+0x2ec>)
 8013336:	481a      	ldr	r0, [pc, #104]	; (80133a0 <etharp_find_entry+0x2e0>)
 8013338:	f00d f90a 	bl	8020550 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d00b      	beq.n	801335a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013342:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	6819      	ldr	r1, [r3, #0]
 801334a:	4812      	ldr	r0, [pc, #72]	; (8013394 <etharp_find_entry+0x2d4>)
 801334c:	4613      	mov	r3, r2
 801334e:	005b      	lsls	r3, r3, #1
 8013350:	4413      	add	r3, r2
 8013352:	00db      	lsls	r3, r3, #3
 8013354:	4403      	add	r3, r0
 8013356:	3304      	adds	r3, #4
 8013358:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801335a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801335e:	490d      	ldr	r1, [pc, #52]	; (8013394 <etharp_find_entry+0x2d4>)
 8013360:	4613      	mov	r3, r2
 8013362:	005b      	lsls	r3, r3, #1
 8013364:	4413      	add	r3, r2
 8013366:	00db      	lsls	r3, r3, #3
 8013368:	440b      	add	r3, r1
 801336a:	3312      	adds	r3, #18
 801336c:	2200      	movs	r2, #0
 801336e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013370:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013374:	4907      	ldr	r1, [pc, #28]	; (8013394 <etharp_find_entry+0x2d4>)
 8013376:	4613      	mov	r3, r2
 8013378:	005b      	lsls	r3, r3, #1
 801337a:	4413      	add	r3, r2
 801337c:	00db      	lsls	r3, r3, #3
 801337e:	440b      	add	r3, r1
 8013380:	3308      	adds	r3, #8
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013386:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801338a:	4618      	mov	r0, r3
 801338c:	3728      	adds	r7, #40	; 0x28
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	24009fbc 	.word	0x24009fbc
 8013398:	080224a0 	.word	0x080224a0
 801339c:	080224e0 	.word	0x080224e0
 80133a0:	08022520 	.word	0x08022520
 80133a4:	08022548 	.word	0x08022548
 80133a8:	08022560 	.word	0x08022560
 80133ac:	08022574 	.word	0x08022574

080133b0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b088      	sub	sp, #32
 80133b4:	af02      	add	r7, sp, #8
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	607a      	str	r2, [r7, #4]
 80133bc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80133c4:	2b06      	cmp	r3, #6
 80133c6:	d006      	beq.n	80133d6 <etharp_update_arp_entry+0x26>
 80133c8:	4b48      	ldr	r3, [pc, #288]	; (80134ec <etharp_update_arp_entry+0x13c>)
 80133ca:	f240 12a9 	movw	r2, #425	; 0x1a9
 80133ce:	4948      	ldr	r1, [pc, #288]	; (80134f0 <etharp_update_arp_entry+0x140>)
 80133d0:	4848      	ldr	r0, [pc, #288]	; (80134f4 <etharp_update_arp_entry+0x144>)
 80133d2:	f00d f8bd 	bl	8020550 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d012      	beq.n	8013402 <etharp_update_arp_entry+0x52>
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d00e      	beq.n	8013402 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	68f9      	ldr	r1, [r7, #12]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f001 fb00 	bl	80149f0 <ip4_addr_isbroadcast_u32>
 80133f0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d105      	bne.n	8013402 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80133fe:	2be0      	cmp	r3, #224	; 0xe0
 8013400:	d102      	bne.n	8013408 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013402:	f06f 030f 	mvn.w	r3, #15
 8013406:	e06c      	b.n	80134e2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013408:	78fb      	ldrb	r3, [r7, #3]
 801340a:	68fa      	ldr	r2, [r7, #12]
 801340c:	4619      	mov	r1, r3
 801340e:	68b8      	ldr	r0, [r7, #8]
 8013410:	f7ff fe56 	bl	80130c0 <etharp_find_entry>
 8013414:	4603      	mov	r3, r0
 8013416:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013418:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801341c:	2b00      	cmp	r3, #0
 801341e:	da02      	bge.n	8013426 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013420:	8afb      	ldrh	r3, [r7, #22]
 8013422:	b25b      	sxtb	r3, r3
 8013424:	e05d      	b.n	80134e2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013426:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801342a:	4933      	ldr	r1, [pc, #204]	; (80134f8 <etharp_update_arp_entry+0x148>)
 801342c:	4613      	mov	r3, r2
 801342e:	005b      	lsls	r3, r3, #1
 8013430:	4413      	add	r3, r2
 8013432:	00db      	lsls	r3, r3, #3
 8013434:	440b      	add	r3, r1
 8013436:	3314      	adds	r3, #20
 8013438:	2202      	movs	r2, #2
 801343a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801343c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013440:	492d      	ldr	r1, [pc, #180]	; (80134f8 <etharp_update_arp_entry+0x148>)
 8013442:	4613      	mov	r3, r2
 8013444:	005b      	lsls	r3, r3, #1
 8013446:	4413      	add	r3, r2
 8013448:	00db      	lsls	r3, r3, #3
 801344a:	440b      	add	r3, r1
 801344c:	3308      	adds	r3, #8
 801344e:	68fa      	ldr	r2, [r7, #12]
 8013450:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013452:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013456:	4613      	mov	r3, r2
 8013458:	005b      	lsls	r3, r3, #1
 801345a:	4413      	add	r3, r2
 801345c:	00db      	lsls	r3, r3, #3
 801345e:	3308      	adds	r3, #8
 8013460:	4a25      	ldr	r2, [pc, #148]	; (80134f8 <etharp_update_arp_entry+0x148>)
 8013462:	4413      	add	r3, r2
 8013464:	3304      	adds	r3, #4
 8013466:	2206      	movs	r2, #6
 8013468:	6879      	ldr	r1, [r7, #4]
 801346a:	4618      	mov	r0, r3
 801346c:	f00c ff7a 	bl	8020364 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013470:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013474:	4920      	ldr	r1, [pc, #128]	; (80134f8 <etharp_update_arp_entry+0x148>)
 8013476:	4613      	mov	r3, r2
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	4413      	add	r3, r2
 801347c:	00db      	lsls	r3, r3, #3
 801347e:	440b      	add	r3, r1
 8013480:	3312      	adds	r3, #18
 8013482:	2200      	movs	r2, #0
 8013484:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013486:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801348a:	491b      	ldr	r1, [pc, #108]	; (80134f8 <etharp_update_arp_entry+0x148>)
 801348c:	4613      	mov	r3, r2
 801348e:	005b      	lsls	r3, r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	440b      	add	r3, r1
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d021      	beq.n	80134e0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801349c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80134a0:	4915      	ldr	r1, [pc, #84]	; (80134f8 <etharp_update_arp_entry+0x148>)
 80134a2:	4613      	mov	r3, r2
 80134a4:	005b      	lsls	r3, r3, #1
 80134a6:	4413      	add	r3, r2
 80134a8:	00db      	lsls	r3, r3, #3
 80134aa:	440b      	add	r3, r1
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80134b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80134b4:	4910      	ldr	r1, [pc, #64]	; (80134f8 <etharp_update_arp_entry+0x148>)
 80134b6:	4613      	mov	r3, r2
 80134b8:	005b      	lsls	r3, r3, #1
 80134ba:	4413      	add	r3, r2
 80134bc:	00db      	lsls	r3, r3, #3
 80134be:	440b      	add	r3, r1
 80134c0:	2200      	movs	r2, #0
 80134c2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 80134ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80134ce:	9300      	str	r3, [sp, #0]
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6939      	ldr	r1, [r7, #16]
 80134d4:	68f8      	ldr	r0, [r7, #12]
 80134d6:	f000 fcf7 	bl	8013ec8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80134da:	6938      	ldr	r0, [r7, #16]
 80134dc:	f004 f946 	bl	801776c <pbuf_free>
  }
  return ERR_OK;
 80134e0:	2300      	movs	r3, #0
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3718      	adds	r7, #24
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	080224a0 	.word	0x080224a0
 80134f0:	080225a0 	.word	0x080225a0
 80134f4:	08022520 	.word	0x08022520
 80134f8:	24009fbc 	.word	0x24009fbc

080134fc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b084      	sub	sp, #16
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013504:	2300      	movs	r3, #0
 8013506:	60fb      	str	r3, [r7, #12]
 8013508:	e01e      	b.n	8013548 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801350a:	4913      	ldr	r1, [pc, #76]	; (8013558 <etharp_cleanup_netif+0x5c>)
 801350c:	68fa      	ldr	r2, [r7, #12]
 801350e:	4613      	mov	r3, r2
 8013510:	005b      	lsls	r3, r3, #1
 8013512:	4413      	add	r3, r2
 8013514:	00db      	lsls	r3, r3, #3
 8013516:	440b      	add	r3, r1
 8013518:	3314      	adds	r3, #20
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801351e:	7afb      	ldrb	r3, [r7, #11]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d00e      	beq.n	8013542 <etharp_cleanup_netif+0x46>
 8013524:	490c      	ldr	r1, [pc, #48]	; (8013558 <etharp_cleanup_netif+0x5c>)
 8013526:	68fa      	ldr	r2, [r7, #12]
 8013528:	4613      	mov	r3, r2
 801352a:	005b      	lsls	r3, r3, #1
 801352c:	4413      	add	r3, r2
 801352e:	00db      	lsls	r3, r3, #3
 8013530:	440b      	add	r3, r1
 8013532:	3308      	adds	r3, #8
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	429a      	cmp	r2, r3
 801353a:	d102      	bne.n	8013542 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801353c:	68f8      	ldr	r0, [r7, #12]
 801353e:	f7ff fce5 	bl	8012f0c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	3301      	adds	r3, #1
 8013546:	60fb      	str	r3, [r7, #12]
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2b09      	cmp	r3, #9
 801354c:	dddd      	ble.n	801350a <etharp_cleanup_netif+0xe>
    }
  }
}
 801354e:	bf00      	nop
 8013550:	bf00      	nop
 8013552:	3710      	adds	r7, #16
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}
 8013558:	24009fbc 	.word	0x24009fbc

0801355c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801355c:	b5b0      	push	{r4, r5, r7, lr}
 801355e:	b08a      	sub	sp, #40	; 0x28
 8013560:	af04      	add	r7, sp, #16
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d107      	bne.n	801357c <etharp_input+0x20>
 801356c:	4b3f      	ldr	r3, [pc, #252]	; (801366c <etharp_input+0x110>)
 801356e:	f240 228a 	movw	r2, #650	; 0x28a
 8013572:	493f      	ldr	r1, [pc, #252]	; (8013670 <etharp_input+0x114>)
 8013574:	483f      	ldr	r0, [pc, #252]	; (8013674 <etharp_input+0x118>)
 8013576:	f00c ffeb 	bl	8020550 <iprintf>
 801357a:	e074      	b.n	8013666 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	881b      	ldrh	r3, [r3, #0]
 8013586:	b29b      	uxth	r3, r3
 8013588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801358c:	d10c      	bne.n	80135a8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013592:	2b06      	cmp	r3, #6
 8013594:	d108      	bne.n	80135a8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801359a:	2b04      	cmp	r3, #4
 801359c:	d104      	bne.n	80135a8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	885b      	ldrh	r3, [r3, #2]
 80135a2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80135a4:	2b08      	cmp	r3, #8
 80135a6:	d003      	beq.n	80135b0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f004 f8df 	bl	801776c <pbuf_free>
    return;
 80135ae:	e05a      	b.n	8013666 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	330e      	adds	r3, #14
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	3318      	adds	r3, #24
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	3304      	adds	r3, #4
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d102      	bne.n	80135d0 <etharp_input+0x74>
    for_us = 0;
 80135ca:	2300      	movs	r3, #0
 80135cc:	75fb      	strb	r3, [r7, #23]
 80135ce:	e009      	b.n	80135e4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80135d0:	68ba      	ldr	r2, [r7, #8]
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	3304      	adds	r3, #4
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	429a      	cmp	r2, r3
 80135da:	bf0c      	ite	eq
 80135dc:	2301      	moveq	r3, #1
 80135de:	2300      	movne	r3, #0
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	f103 0208 	add.w	r2, r3, #8
 80135ea:	7dfb      	ldrb	r3, [r7, #23]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <etharp_input+0x98>
 80135f0:	2301      	movs	r3, #1
 80135f2:	e000      	b.n	80135f6 <etharp_input+0x9a>
 80135f4:	2302      	movs	r3, #2
 80135f6:	f107 010c 	add.w	r1, r7, #12
 80135fa:	6838      	ldr	r0, [r7, #0]
 80135fc:	f7ff fed8 	bl	80133b0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	88db      	ldrh	r3, [r3, #6]
 8013604:	b29b      	uxth	r3, r3
 8013606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801360a:	d003      	beq.n	8013614 <etharp_input+0xb8>
 801360c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013610:	d01e      	beq.n	8013650 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013612:	e025      	b.n	8013660 <etharp_input+0x104>
      if (for_us) {
 8013614:	7dfb      	ldrb	r3, [r7, #23]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d021      	beq.n	801365e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	f103 052e 	add.w	r5, r3, #46	; 0x2e
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013630:	693a      	ldr	r2, [r7, #16]
 8013632:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013634:	2102      	movs	r1, #2
 8013636:	9103      	str	r1, [sp, #12]
 8013638:	f107 010c 	add.w	r1, r7, #12
 801363c:	9102      	str	r1, [sp, #8]
 801363e:	9201      	str	r2, [sp, #4]
 8013640:	9300      	str	r3, [sp, #0]
 8013642:	462b      	mov	r3, r5
 8013644:	4622      	mov	r2, r4
 8013646:	4601      	mov	r1, r0
 8013648:	6838      	ldr	r0, [r7, #0]
 801364a:	f000 faef 	bl	8013c2c <etharp_raw>
      break;
 801364e:	e006      	b.n	801365e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8013650:	f107 030c 	add.w	r3, r7, #12
 8013654:	4619      	mov	r1, r3
 8013656:	6838      	ldr	r0, [r7, #0]
 8013658:	f7fd fec0 	bl	80113dc <dhcp_arp_reply>
      break;
 801365c:	e000      	b.n	8013660 <etharp_input+0x104>
      break;
 801365e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f004 f883 	bl	801776c <pbuf_free>
}
 8013666:	3718      	adds	r7, #24
 8013668:	46bd      	mov	sp, r7
 801366a:	bdb0      	pop	{r4, r5, r7, pc}
 801366c:	080224a0 	.word	0x080224a0
 8013670:	080225f8 	.word	0x080225f8
 8013674:	08022520 	.word	0x08022520

08013678 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b086      	sub	sp, #24
 801367c:	af02      	add	r7, sp, #8
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	4613      	mov	r3, r2
 8013684:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013686:	79fa      	ldrb	r2, [r7, #7]
 8013688:	4944      	ldr	r1, [pc, #272]	; (801379c <etharp_output_to_arp_index+0x124>)
 801368a:	4613      	mov	r3, r2
 801368c:	005b      	lsls	r3, r3, #1
 801368e:	4413      	add	r3, r2
 8013690:	00db      	lsls	r3, r3, #3
 8013692:	440b      	add	r3, r1
 8013694:	3314      	adds	r3, #20
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	2b01      	cmp	r3, #1
 801369a:	d806      	bhi.n	80136aa <etharp_output_to_arp_index+0x32>
 801369c:	4b40      	ldr	r3, [pc, #256]	; (80137a0 <etharp_output_to_arp_index+0x128>)
 801369e:	f240 22ee 	movw	r2, #750	; 0x2ee
 80136a2:	4940      	ldr	r1, [pc, #256]	; (80137a4 <etharp_output_to_arp_index+0x12c>)
 80136a4:	4840      	ldr	r0, [pc, #256]	; (80137a8 <etharp_output_to_arp_index+0x130>)
 80136a6:	f00c ff53 	bl	8020550 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80136aa:	79fa      	ldrb	r2, [r7, #7]
 80136ac:	493b      	ldr	r1, [pc, #236]	; (801379c <etharp_output_to_arp_index+0x124>)
 80136ae:	4613      	mov	r3, r2
 80136b0:	005b      	lsls	r3, r3, #1
 80136b2:	4413      	add	r3, r2
 80136b4:	00db      	lsls	r3, r3, #3
 80136b6:	440b      	add	r3, r1
 80136b8:	3314      	adds	r3, #20
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	2b02      	cmp	r3, #2
 80136be:	d153      	bne.n	8013768 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80136c0:	79fa      	ldrb	r2, [r7, #7]
 80136c2:	4936      	ldr	r1, [pc, #216]	; (801379c <etharp_output_to_arp_index+0x124>)
 80136c4:	4613      	mov	r3, r2
 80136c6:	005b      	lsls	r3, r3, #1
 80136c8:	4413      	add	r3, r2
 80136ca:	00db      	lsls	r3, r3, #3
 80136cc:	440b      	add	r3, r1
 80136ce:	3312      	adds	r3, #18
 80136d0:	881b      	ldrh	r3, [r3, #0]
 80136d2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80136d6:	d919      	bls.n	801370c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80136d8:	79fa      	ldrb	r2, [r7, #7]
 80136da:	4613      	mov	r3, r2
 80136dc:	005b      	lsls	r3, r3, #1
 80136de:	4413      	add	r3, r2
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	4a2e      	ldr	r2, [pc, #184]	; (801379c <etharp_output_to_arp_index+0x124>)
 80136e4:	4413      	add	r3, r2
 80136e6:	3304      	adds	r3, #4
 80136e8:	4619      	mov	r1, r3
 80136ea:	68f8      	ldr	r0, [r7, #12]
 80136ec:	f000 fb4c 	bl	8013d88 <etharp_request>
 80136f0:	4603      	mov	r3, r0
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d138      	bne.n	8013768 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80136f6:	79fa      	ldrb	r2, [r7, #7]
 80136f8:	4928      	ldr	r1, [pc, #160]	; (801379c <etharp_output_to_arp_index+0x124>)
 80136fa:	4613      	mov	r3, r2
 80136fc:	005b      	lsls	r3, r3, #1
 80136fe:	4413      	add	r3, r2
 8013700:	00db      	lsls	r3, r3, #3
 8013702:	440b      	add	r3, r1
 8013704:	3314      	adds	r3, #20
 8013706:	2203      	movs	r2, #3
 8013708:	701a      	strb	r2, [r3, #0]
 801370a:	e02d      	b.n	8013768 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801370c:	79fa      	ldrb	r2, [r7, #7]
 801370e:	4923      	ldr	r1, [pc, #140]	; (801379c <etharp_output_to_arp_index+0x124>)
 8013710:	4613      	mov	r3, r2
 8013712:	005b      	lsls	r3, r3, #1
 8013714:	4413      	add	r3, r2
 8013716:	00db      	lsls	r3, r3, #3
 8013718:	440b      	add	r3, r1
 801371a:	3312      	adds	r3, #18
 801371c:	881b      	ldrh	r3, [r3, #0]
 801371e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013722:	d321      	bcc.n	8013768 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013724:	79fa      	ldrb	r2, [r7, #7]
 8013726:	4613      	mov	r3, r2
 8013728:	005b      	lsls	r3, r3, #1
 801372a:	4413      	add	r3, r2
 801372c:	00db      	lsls	r3, r3, #3
 801372e:	4a1b      	ldr	r2, [pc, #108]	; (801379c <etharp_output_to_arp_index+0x124>)
 8013730:	4413      	add	r3, r2
 8013732:	1d19      	adds	r1, r3, #4
 8013734:	79fa      	ldrb	r2, [r7, #7]
 8013736:	4613      	mov	r3, r2
 8013738:	005b      	lsls	r3, r3, #1
 801373a:	4413      	add	r3, r2
 801373c:	00db      	lsls	r3, r3, #3
 801373e:	3308      	adds	r3, #8
 8013740:	4a16      	ldr	r2, [pc, #88]	; (801379c <etharp_output_to_arp_index+0x124>)
 8013742:	4413      	add	r3, r2
 8013744:	3304      	adds	r3, #4
 8013746:	461a      	mov	r2, r3
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f000 fafb 	bl	8013d44 <etharp_request_dst>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d109      	bne.n	8013768 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013754:	79fa      	ldrb	r2, [r7, #7]
 8013756:	4911      	ldr	r1, [pc, #68]	; (801379c <etharp_output_to_arp_index+0x124>)
 8013758:	4613      	mov	r3, r2
 801375a:	005b      	lsls	r3, r3, #1
 801375c:	4413      	add	r3, r2
 801375e:	00db      	lsls	r3, r3, #3
 8013760:	440b      	add	r3, r1
 8013762:	3314      	adds	r3, #20
 8013764:	2203      	movs	r2, #3
 8013766:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 801376e:	79fa      	ldrb	r2, [r7, #7]
 8013770:	4613      	mov	r3, r2
 8013772:	005b      	lsls	r3, r3, #1
 8013774:	4413      	add	r3, r2
 8013776:	00db      	lsls	r3, r3, #3
 8013778:	3308      	adds	r3, #8
 801377a:	4a08      	ldr	r2, [pc, #32]	; (801379c <etharp_output_to_arp_index+0x124>)
 801377c:	4413      	add	r3, r2
 801377e:	3304      	adds	r3, #4
 8013780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013784:	9200      	str	r2, [sp, #0]
 8013786:	460a      	mov	r2, r1
 8013788:	68b9      	ldr	r1, [r7, #8]
 801378a:	68f8      	ldr	r0, [r7, #12]
 801378c:	f000 fb9c 	bl	8013ec8 <ethernet_output>
 8013790:	4603      	mov	r3, r0
}
 8013792:	4618      	mov	r0, r3
 8013794:	3710      	adds	r7, #16
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	24009fbc 	.word	0x24009fbc
 80137a0:	080224a0 	.word	0x080224a0
 80137a4:	08022618 	.word	0x08022618
 80137a8:	08022520 	.word	0x08022520

080137ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b08a      	sub	sp, #40	; 0x28
 80137b0:	af02      	add	r7, sp, #8
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d106      	bne.n	80137d0 <etharp_output+0x24>
 80137c2:	4b73      	ldr	r3, [pc, #460]	; (8013990 <etharp_output+0x1e4>)
 80137c4:	f240 321e 	movw	r2, #798	; 0x31e
 80137c8:	4972      	ldr	r1, [pc, #456]	; (8013994 <etharp_output+0x1e8>)
 80137ca:	4873      	ldr	r0, [pc, #460]	; (8013998 <etharp_output+0x1ec>)
 80137cc:	f00c fec0 	bl	8020550 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d106      	bne.n	80137e4 <etharp_output+0x38>
 80137d6:	4b6e      	ldr	r3, [pc, #440]	; (8013990 <etharp_output+0x1e4>)
 80137d8:	f240 321f 	movw	r2, #799	; 0x31f
 80137dc:	496f      	ldr	r1, [pc, #444]	; (801399c <etharp_output+0x1f0>)
 80137de:	486e      	ldr	r0, [pc, #440]	; (8013998 <etharp_output+0x1ec>)
 80137e0:	f00c feb6 	bl	8020550 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d106      	bne.n	80137f8 <etharp_output+0x4c>
 80137ea:	4b69      	ldr	r3, [pc, #420]	; (8013990 <etharp_output+0x1e4>)
 80137ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80137f0:	496b      	ldr	r1, [pc, #428]	; (80139a0 <etharp_output+0x1f4>)
 80137f2:	4869      	ldr	r0, [pc, #420]	; (8013998 <etharp_output+0x1ec>)
 80137f4:	f00c feac 	bl	8020550 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	68f9      	ldr	r1, [r7, #12]
 80137fe:	4618      	mov	r0, r3
 8013800:	f001 f8f6 	bl	80149f0 <ip4_addr_isbroadcast_u32>
 8013804:	4603      	mov	r3, r0
 8013806:	2b00      	cmp	r3, #0
 8013808:	d002      	beq.n	8013810 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801380a:	4b66      	ldr	r3, [pc, #408]	; (80139a4 <etharp_output+0x1f8>)
 801380c:	61fb      	str	r3, [r7, #28]
 801380e:	e0af      	b.n	8013970 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013818:	2be0      	cmp	r3, #224	; 0xe0
 801381a:	d118      	bne.n	801384e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801381c:	2301      	movs	r3, #1
 801381e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013820:	2300      	movs	r3, #0
 8013822:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013824:	235e      	movs	r3, #94	; 0x5e
 8013826:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	3301      	adds	r3, #1
 801382c:	781b      	ldrb	r3, [r3, #0]
 801382e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013832:	b2db      	uxtb	r3, r3
 8013834:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	3302      	adds	r3, #2
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	3303      	adds	r3, #3
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013846:	f107 0310 	add.w	r3, r7, #16
 801384a:	61fb      	str	r3, [r7, #28]
 801384c:	e090      	b.n	8013970 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681a      	ldr	r2, [r3, #0]
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	3304      	adds	r3, #4
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	405a      	eors	r2, r3
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	3308      	adds	r3, #8
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	4013      	ands	r3, r2
 8013862:	2b00      	cmp	r3, #0
 8013864:	d012      	beq.n	801388c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801386c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013870:	4293      	cmp	r3, r2
 8013872:	d00b      	beq.n	801388c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	330c      	adds	r3, #12
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d003      	beq.n	8013886 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	330c      	adds	r3, #12
 8013882:	61bb      	str	r3, [r7, #24]
 8013884:	e002      	b.n	801388c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013886:	f06f 0303 	mvn.w	r3, #3
 801388a:	e07d      	b.n	8013988 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801388c:	4b46      	ldr	r3, [pc, #280]	; (80139a8 <etharp_output+0x1fc>)
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	4619      	mov	r1, r3
 8013892:	4a46      	ldr	r2, [pc, #280]	; (80139ac <etharp_output+0x200>)
 8013894:	460b      	mov	r3, r1
 8013896:	005b      	lsls	r3, r3, #1
 8013898:	440b      	add	r3, r1
 801389a:	00db      	lsls	r3, r3, #3
 801389c:	4413      	add	r3, r2
 801389e:	3314      	adds	r3, #20
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	2b01      	cmp	r3, #1
 80138a4:	d925      	bls.n	80138f2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80138a6:	4b40      	ldr	r3, [pc, #256]	; (80139a8 <etharp_output+0x1fc>)
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	4619      	mov	r1, r3
 80138ac:	4a3f      	ldr	r2, [pc, #252]	; (80139ac <etharp_output+0x200>)
 80138ae:	460b      	mov	r3, r1
 80138b0:	005b      	lsls	r3, r3, #1
 80138b2:	440b      	add	r3, r1
 80138b4:	00db      	lsls	r3, r3, #3
 80138b6:	4413      	add	r3, r2
 80138b8:	3308      	adds	r3, #8
 80138ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80138bc:	68fa      	ldr	r2, [r7, #12]
 80138be:	429a      	cmp	r2, r3
 80138c0:	d117      	bne.n	80138f2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	681a      	ldr	r2, [r3, #0]
 80138c6:	4b38      	ldr	r3, [pc, #224]	; (80139a8 <etharp_output+0x1fc>)
 80138c8:	781b      	ldrb	r3, [r3, #0]
 80138ca:	4618      	mov	r0, r3
 80138cc:	4937      	ldr	r1, [pc, #220]	; (80139ac <etharp_output+0x200>)
 80138ce:	4603      	mov	r3, r0
 80138d0:	005b      	lsls	r3, r3, #1
 80138d2:	4403      	add	r3, r0
 80138d4:	00db      	lsls	r3, r3, #3
 80138d6:	440b      	add	r3, r1
 80138d8:	3304      	adds	r3, #4
 80138da:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80138dc:	429a      	cmp	r2, r3
 80138de:	d108      	bne.n	80138f2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80138e0:	4b31      	ldr	r3, [pc, #196]	; (80139a8 <etharp_output+0x1fc>)
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	461a      	mov	r2, r3
 80138e6:	68b9      	ldr	r1, [r7, #8]
 80138e8:	68f8      	ldr	r0, [r7, #12]
 80138ea:	f7ff fec5 	bl	8013678 <etharp_output_to_arp_index>
 80138ee:	4603      	mov	r3, r0
 80138f0:	e04a      	b.n	8013988 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80138f2:	2300      	movs	r3, #0
 80138f4:	75fb      	strb	r3, [r7, #23]
 80138f6:	e031      	b.n	801395c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80138f8:	7dfa      	ldrb	r2, [r7, #23]
 80138fa:	492c      	ldr	r1, [pc, #176]	; (80139ac <etharp_output+0x200>)
 80138fc:	4613      	mov	r3, r2
 80138fe:	005b      	lsls	r3, r3, #1
 8013900:	4413      	add	r3, r2
 8013902:	00db      	lsls	r3, r3, #3
 8013904:	440b      	add	r3, r1
 8013906:	3314      	adds	r3, #20
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	2b01      	cmp	r3, #1
 801390c:	d923      	bls.n	8013956 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801390e:	7dfa      	ldrb	r2, [r7, #23]
 8013910:	4926      	ldr	r1, [pc, #152]	; (80139ac <etharp_output+0x200>)
 8013912:	4613      	mov	r3, r2
 8013914:	005b      	lsls	r3, r3, #1
 8013916:	4413      	add	r3, r2
 8013918:	00db      	lsls	r3, r3, #3
 801391a:	440b      	add	r3, r1
 801391c:	3308      	adds	r3, #8
 801391e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013920:	68fa      	ldr	r2, [r7, #12]
 8013922:	429a      	cmp	r2, r3
 8013924:	d117      	bne.n	8013956 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	6819      	ldr	r1, [r3, #0]
 801392a:	7dfa      	ldrb	r2, [r7, #23]
 801392c:	481f      	ldr	r0, [pc, #124]	; (80139ac <etharp_output+0x200>)
 801392e:	4613      	mov	r3, r2
 8013930:	005b      	lsls	r3, r3, #1
 8013932:	4413      	add	r3, r2
 8013934:	00db      	lsls	r3, r3, #3
 8013936:	4403      	add	r3, r0
 8013938:	3304      	adds	r3, #4
 801393a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801393c:	4299      	cmp	r1, r3
 801393e:	d10a      	bne.n	8013956 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013940:	4a19      	ldr	r2, [pc, #100]	; (80139a8 <etharp_output+0x1fc>)
 8013942:	7dfb      	ldrb	r3, [r7, #23]
 8013944:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013946:	7dfb      	ldrb	r3, [r7, #23]
 8013948:	461a      	mov	r2, r3
 801394a:	68b9      	ldr	r1, [r7, #8]
 801394c:	68f8      	ldr	r0, [r7, #12]
 801394e:	f7ff fe93 	bl	8013678 <etharp_output_to_arp_index>
 8013952:	4603      	mov	r3, r0
 8013954:	e018      	b.n	8013988 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013956:	7dfb      	ldrb	r3, [r7, #23]
 8013958:	3301      	adds	r3, #1
 801395a:	75fb      	strb	r3, [r7, #23]
 801395c:	7dfb      	ldrb	r3, [r7, #23]
 801395e:	2b09      	cmp	r3, #9
 8013960:	d9ca      	bls.n	80138f8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013962:	68ba      	ldr	r2, [r7, #8]
 8013964:	69b9      	ldr	r1, [r7, #24]
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	f000 f822 	bl	80139b0 <etharp_query>
 801396c:	4603      	mov	r3, r0
 801396e:	e00b      	b.n	8013988 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8013976:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	68b9      	ldr	r1, [r7, #8]
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f000 faa1 	bl	8013ec8 <ethernet_output>
 8013986:	4603      	mov	r3, r0
}
 8013988:	4618      	mov	r0, r3
 801398a:	3720      	adds	r7, #32
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}
 8013990:	080224a0 	.word	0x080224a0
 8013994:	080225f8 	.word	0x080225f8
 8013998:	08022520 	.word	0x08022520
 801399c:	08022648 	.word	0x08022648
 80139a0:	080225e8 	.word	0x080225e8
 80139a4:	08025dd8 	.word	0x08025dd8
 80139a8:	2400a0ac 	.word	0x2400a0ac
 80139ac:	24009fbc 	.word	0x24009fbc

080139b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b08c      	sub	sp, #48	; 0x30
 80139b4:	af02      	add	r7, sp, #8
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	60b9      	str	r1, [r7, #8]
 80139ba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	332e      	adds	r3, #46	; 0x2e
 80139c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80139c2:	23ff      	movs	r3, #255	; 0xff
 80139c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80139c8:	2300      	movs	r3, #0
 80139ca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	68f9      	ldr	r1, [r7, #12]
 80139d2:	4618      	mov	r0, r3
 80139d4:	f001 f80c 	bl	80149f0 <ip4_addr_isbroadcast_u32>
 80139d8:	4603      	mov	r3, r0
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d10c      	bne.n	80139f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80139e6:	2be0      	cmp	r3, #224	; 0xe0
 80139e8:	d006      	beq.n	80139f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d003      	beq.n	80139f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d102      	bne.n	80139fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80139f8:	f06f 030f 	mvn.w	r3, #15
 80139fc:	e101      	b.n	8013c02 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80139fe:	68fa      	ldr	r2, [r7, #12]
 8013a00:	2101      	movs	r1, #1
 8013a02:	68b8      	ldr	r0, [r7, #8]
 8013a04:	f7ff fb5c 	bl	80130c0 <etharp_find_entry>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013a0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	da02      	bge.n	8013a1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013a14:	8a7b      	ldrh	r3, [r7, #18]
 8013a16:	b25b      	sxtb	r3, r3
 8013a18:	e0f3      	b.n	8013c02 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013a1a:	8a7b      	ldrh	r3, [r7, #18]
 8013a1c:	2b7e      	cmp	r3, #126	; 0x7e
 8013a1e:	d906      	bls.n	8013a2e <etharp_query+0x7e>
 8013a20:	4b7a      	ldr	r3, [pc, #488]	; (8013c0c <etharp_query+0x25c>)
 8013a22:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013a26:	497a      	ldr	r1, [pc, #488]	; (8013c10 <etharp_query+0x260>)
 8013a28:	487a      	ldr	r0, [pc, #488]	; (8013c14 <etharp_query+0x264>)
 8013a2a:	f00c fd91 	bl	8020550 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013a2e:	8a7b      	ldrh	r3, [r7, #18]
 8013a30:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013a32:	7c7a      	ldrb	r2, [r7, #17]
 8013a34:	4978      	ldr	r1, [pc, #480]	; (8013c18 <etharp_query+0x268>)
 8013a36:	4613      	mov	r3, r2
 8013a38:	005b      	lsls	r3, r3, #1
 8013a3a:	4413      	add	r3, r2
 8013a3c:	00db      	lsls	r3, r3, #3
 8013a3e:	440b      	add	r3, r1
 8013a40:	3314      	adds	r3, #20
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d115      	bne.n	8013a74 <etharp_query+0xc4>
    is_new_entry = 1;
 8013a48:	2301      	movs	r3, #1
 8013a4a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013a4c:	7c7a      	ldrb	r2, [r7, #17]
 8013a4e:	4972      	ldr	r1, [pc, #456]	; (8013c18 <etharp_query+0x268>)
 8013a50:	4613      	mov	r3, r2
 8013a52:	005b      	lsls	r3, r3, #1
 8013a54:	4413      	add	r3, r2
 8013a56:	00db      	lsls	r3, r3, #3
 8013a58:	440b      	add	r3, r1
 8013a5a:	3314      	adds	r3, #20
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013a60:	7c7a      	ldrb	r2, [r7, #17]
 8013a62:	496d      	ldr	r1, [pc, #436]	; (8013c18 <etharp_query+0x268>)
 8013a64:	4613      	mov	r3, r2
 8013a66:	005b      	lsls	r3, r3, #1
 8013a68:	4413      	add	r3, r2
 8013a6a:	00db      	lsls	r3, r3, #3
 8013a6c:	440b      	add	r3, r1
 8013a6e:	3308      	adds	r3, #8
 8013a70:	68fa      	ldr	r2, [r7, #12]
 8013a72:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013a74:	7c7a      	ldrb	r2, [r7, #17]
 8013a76:	4968      	ldr	r1, [pc, #416]	; (8013c18 <etharp_query+0x268>)
 8013a78:	4613      	mov	r3, r2
 8013a7a:	005b      	lsls	r3, r3, #1
 8013a7c:	4413      	add	r3, r2
 8013a7e:	00db      	lsls	r3, r3, #3
 8013a80:	440b      	add	r3, r1
 8013a82:	3314      	adds	r3, #20
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	d011      	beq.n	8013aae <etharp_query+0xfe>
 8013a8a:	7c7a      	ldrb	r2, [r7, #17]
 8013a8c:	4962      	ldr	r1, [pc, #392]	; (8013c18 <etharp_query+0x268>)
 8013a8e:	4613      	mov	r3, r2
 8013a90:	005b      	lsls	r3, r3, #1
 8013a92:	4413      	add	r3, r2
 8013a94:	00db      	lsls	r3, r3, #3
 8013a96:	440b      	add	r3, r1
 8013a98:	3314      	adds	r3, #20
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	2b01      	cmp	r3, #1
 8013a9e:	d806      	bhi.n	8013aae <etharp_query+0xfe>
 8013aa0:	4b5a      	ldr	r3, [pc, #360]	; (8013c0c <etharp_query+0x25c>)
 8013aa2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013aa6:	495d      	ldr	r1, [pc, #372]	; (8013c1c <etharp_query+0x26c>)
 8013aa8:	485a      	ldr	r0, [pc, #360]	; (8013c14 <etharp_query+0x264>)
 8013aaa:	f00c fd51 	bl	8020550 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013aae:	6a3b      	ldr	r3, [r7, #32]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d102      	bne.n	8013aba <etharp_query+0x10a>
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d10c      	bne.n	8013ad4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013aba:	68b9      	ldr	r1, [r7, #8]
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f000 f963 	bl	8013d88 <etharp_request>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d102      	bne.n	8013ad4 <etharp_query+0x124>
      return result;
 8013ace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013ad2:	e096      	b.n	8013c02 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d106      	bne.n	8013ae8 <etharp_query+0x138>
 8013ada:	4b4c      	ldr	r3, [pc, #304]	; (8013c0c <etharp_query+0x25c>)
 8013adc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013ae0:	494f      	ldr	r1, [pc, #316]	; (8013c20 <etharp_query+0x270>)
 8013ae2:	484c      	ldr	r0, [pc, #304]	; (8013c14 <etharp_query+0x264>)
 8013ae4:	f00c fd34 	bl	8020550 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013ae8:	7c7a      	ldrb	r2, [r7, #17]
 8013aea:	494b      	ldr	r1, [pc, #300]	; (8013c18 <etharp_query+0x268>)
 8013aec:	4613      	mov	r3, r2
 8013aee:	005b      	lsls	r3, r3, #1
 8013af0:	4413      	add	r3, r2
 8013af2:	00db      	lsls	r3, r3, #3
 8013af4:	440b      	add	r3, r1
 8013af6:	3314      	adds	r3, #20
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d917      	bls.n	8013b2e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013afe:	4a49      	ldr	r2, [pc, #292]	; (8013c24 <etharp_query+0x274>)
 8013b00:	7c7b      	ldrb	r3, [r7, #17]
 8013b02:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013b04:	7c7a      	ldrb	r2, [r7, #17]
 8013b06:	4613      	mov	r3, r2
 8013b08:	005b      	lsls	r3, r3, #1
 8013b0a:	4413      	add	r3, r2
 8013b0c:	00db      	lsls	r3, r3, #3
 8013b0e:	3308      	adds	r3, #8
 8013b10:	4a41      	ldr	r2, [pc, #260]	; (8013c18 <etharp_query+0x268>)
 8013b12:	4413      	add	r3, r2
 8013b14:	3304      	adds	r3, #4
 8013b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013b1a:	9200      	str	r2, [sp, #0]
 8013b1c:	697a      	ldr	r2, [r7, #20]
 8013b1e:	6879      	ldr	r1, [r7, #4]
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f000 f9d1 	bl	8013ec8 <ethernet_output>
 8013b26:	4603      	mov	r3, r0
 8013b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b2c:	e067      	b.n	8013bfe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013b2e:	7c7a      	ldrb	r2, [r7, #17]
 8013b30:	4939      	ldr	r1, [pc, #228]	; (8013c18 <etharp_query+0x268>)
 8013b32:	4613      	mov	r3, r2
 8013b34:	005b      	lsls	r3, r3, #1
 8013b36:	4413      	add	r3, r2
 8013b38:	00db      	lsls	r3, r3, #3
 8013b3a:	440b      	add	r3, r1
 8013b3c:	3314      	adds	r3, #20
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	2b01      	cmp	r3, #1
 8013b42:	d15c      	bne.n	8013bfe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013b44:	2300      	movs	r3, #0
 8013b46:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013b4c:	e01c      	b.n	8013b88 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013b4e:	69fb      	ldr	r3, [r7, #28]
 8013b50:	895a      	ldrh	r2, [r3, #10]
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	891b      	ldrh	r3, [r3, #8]
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d10a      	bne.n	8013b70 <etharp_query+0x1c0>
 8013b5a:	69fb      	ldr	r3, [r7, #28]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d006      	beq.n	8013b70 <etharp_query+0x1c0>
 8013b62:	4b2a      	ldr	r3, [pc, #168]	; (8013c0c <etharp_query+0x25c>)
 8013b64:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013b68:	492f      	ldr	r1, [pc, #188]	; (8013c28 <etharp_query+0x278>)
 8013b6a:	482a      	ldr	r0, [pc, #168]	; (8013c14 <etharp_query+0x264>)
 8013b6c:	f00c fcf0 	bl	8020550 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013b70:	69fb      	ldr	r3, [r7, #28]
 8013b72:	7b1b      	ldrb	r3, [r3, #12]
 8013b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d002      	beq.n	8013b82 <etharp_query+0x1d2>
        copy_needed = 1;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	61bb      	str	r3, [r7, #24]
        break;
 8013b80:	e005      	b.n	8013b8e <etharp_query+0x1de>
      }
      p = p->next;
 8013b82:	69fb      	ldr	r3, [r7, #28]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013b88:	69fb      	ldr	r3, [r7, #28]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d1df      	bne.n	8013b4e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013b8e:	69bb      	ldr	r3, [r7, #24]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d007      	beq.n	8013ba4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013b9a:	200e      	movs	r0, #14
 8013b9c:	f004 f996 	bl	8017ecc <pbuf_clone>
 8013ba0:	61f8      	str	r0, [r7, #28]
 8013ba2:	e004      	b.n	8013bae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013ba8:	69f8      	ldr	r0, [r7, #28]
 8013baa:	f003 fe85 	bl	80178b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d021      	beq.n	8013bf8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013bb4:	7c7a      	ldrb	r2, [r7, #17]
 8013bb6:	4918      	ldr	r1, [pc, #96]	; (8013c18 <etharp_query+0x268>)
 8013bb8:	4613      	mov	r3, r2
 8013bba:	005b      	lsls	r3, r3, #1
 8013bbc:	4413      	add	r3, r2
 8013bbe:	00db      	lsls	r3, r3, #3
 8013bc0:	440b      	add	r3, r1
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d00a      	beq.n	8013bde <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013bc8:	7c7a      	ldrb	r2, [r7, #17]
 8013bca:	4913      	ldr	r1, [pc, #76]	; (8013c18 <etharp_query+0x268>)
 8013bcc:	4613      	mov	r3, r2
 8013bce:	005b      	lsls	r3, r3, #1
 8013bd0:	4413      	add	r3, r2
 8013bd2:	00db      	lsls	r3, r3, #3
 8013bd4:	440b      	add	r3, r1
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f003 fdc7 	bl	801776c <pbuf_free>
      }
      arp_table[i].q = p;
 8013bde:	7c7a      	ldrb	r2, [r7, #17]
 8013be0:	490d      	ldr	r1, [pc, #52]	; (8013c18 <etharp_query+0x268>)
 8013be2:	4613      	mov	r3, r2
 8013be4:	005b      	lsls	r3, r3, #1
 8013be6:	4413      	add	r3, r2
 8013be8:	00db      	lsls	r3, r3, #3
 8013bea:	440b      	add	r3, r1
 8013bec:	69fa      	ldr	r2, [r7, #28]
 8013bee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013bf6:	e002      	b.n	8013bfe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013bf8:	23ff      	movs	r3, #255	; 0xff
 8013bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013bfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013c02:	4618      	mov	r0, r3
 8013c04:	3728      	adds	r7, #40	; 0x28
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	080224a0 	.word	0x080224a0
 8013c10:	08022654 	.word	0x08022654
 8013c14:	08022520 	.word	0x08022520
 8013c18:	24009fbc 	.word	0x24009fbc
 8013c1c:	08022664 	.word	0x08022664
 8013c20:	08022648 	.word	0x08022648
 8013c24:	2400a0ac 	.word	0x2400a0ac
 8013c28:	0802268c 	.word	0x0802268c

08013c2c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b08a      	sub	sp, #40	; 0x28
 8013c30:	af02      	add	r7, sp, #8
 8013c32:	60f8      	str	r0, [r7, #12]
 8013c34:	60b9      	str	r1, [r7, #8]
 8013c36:	607a      	str	r2, [r7, #4]
 8013c38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d106      	bne.n	8013c52 <etharp_raw+0x26>
 8013c44:	4b3a      	ldr	r3, [pc, #232]	; (8013d30 <etharp_raw+0x104>)
 8013c46:	f240 4257 	movw	r2, #1111	; 0x457
 8013c4a:	493a      	ldr	r1, [pc, #232]	; (8013d34 <etharp_raw+0x108>)
 8013c4c:	483a      	ldr	r0, [pc, #232]	; (8013d38 <etharp_raw+0x10c>)
 8013c4e:	f00c fc7f 	bl	8020550 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013c52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c56:	211c      	movs	r1, #28
 8013c58:	200e      	movs	r0, #14
 8013c5a:	f003 faa3 	bl	80171a4 <pbuf_alloc>
 8013c5e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d102      	bne.n	8013c6c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013c66:	f04f 33ff 	mov.w	r3, #4294967295
 8013c6a:	e05d      	b.n	8013d28 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013c6c:	69bb      	ldr	r3, [r7, #24]
 8013c6e:	895b      	ldrh	r3, [r3, #10]
 8013c70:	2b1b      	cmp	r3, #27
 8013c72:	d806      	bhi.n	8013c82 <etharp_raw+0x56>
 8013c74:	4b2e      	ldr	r3, [pc, #184]	; (8013d30 <etharp_raw+0x104>)
 8013c76:	f240 4262 	movw	r2, #1122	; 0x462
 8013c7a:	4930      	ldr	r1, [pc, #192]	; (8013d3c <etharp_raw+0x110>)
 8013c7c:	482e      	ldr	r0, [pc, #184]	; (8013d38 <etharp_raw+0x10c>)
 8013c7e:	f00c fc67 	bl	8020550 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013c82:	69bb      	ldr	r3, [r7, #24]
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013c88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7fc ff20 	bl	8010ad0 <lwip_htons>
 8013c90:	4603      	mov	r3, r0
 8013c92:	461a      	mov	r2, r3
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013c9e:	2b06      	cmp	r3, #6
 8013ca0:	d006      	beq.n	8013cb0 <etharp_raw+0x84>
 8013ca2:	4b23      	ldr	r3, [pc, #140]	; (8013d30 <etharp_raw+0x104>)
 8013ca4:	f240 4269 	movw	r2, #1129	; 0x469
 8013ca8:	4925      	ldr	r1, [pc, #148]	; (8013d40 <etharp_raw+0x114>)
 8013caa:	4823      	ldr	r0, [pc, #140]	; (8013d38 <etharp_raw+0x10c>)
 8013cac:	f00c fc50 	bl	8020550 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	3308      	adds	r3, #8
 8013cb4:	2206      	movs	r2, #6
 8013cb6:	6839      	ldr	r1, [r7, #0]
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f00c fb53 	bl	8020364 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	3312      	adds	r3, #18
 8013cc2:	2206      	movs	r2, #6
 8013cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f00c fb4c 	bl	8020364 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	330e      	adds	r3, #14
 8013cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cd2:	6812      	ldr	r2, [r2, #0]
 8013cd4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	3318      	adds	r3, #24
 8013cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cdc:	6812      	ldr	r2, [r2, #0]
 8013cde:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	701a      	strb	r2, [r3, #0]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	f042 0201 	orr.w	r2, r2, #1
 8013cec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	f042 0208 	orr.w	r2, r2, #8
 8013cf6:	709a      	strb	r2, [r3, #2]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	2206      	movs	r2, #6
 8013d00:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	2204      	movs	r2, #4
 8013d06:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013d08:	f640 0306 	movw	r3, #2054	; 0x806
 8013d0c:	9300      	str	r3, [sp, #0]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	68ba      	ldr	r2, [r7, #8]
 8013d12:	69b9      	ldr	r1, [r7, #24]
 8013d14:	68f8      	ldr	r0, [r7, #12]
 8013d16:	f000 f8d7 	bl	8013ec8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013d1a:	69b8      	ldr	r0, [r7, #24]
 8013d1c:	f003 fd26 	bl	801776c <pbuf_free>
  p = NULL;
 8013d20:	2300      	movs	r3, #0
 8013d22:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013d24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3720      	adds	r7, #32
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	080224a0 	.word	0x080224a0
 8013d34:	080225f8 	.word	0x080225f8
 8013d38:	08022520 	.word	0x08022520
 8013d3c:	080226a8 	.word	0x080226a8
 8013d40:	080226dc 	.word	0x080226dc

08013d44 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b088      	sub	sp, #32
 8013d48:	af04      	add	r7, sp, #16
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	60b9      	str	r1, [r7, #8]
 8013d4e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f103 012e 	add.w	r1, r3, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013d60:	2201      	movs	r2, #1
 8013d62:	9203      	str	r2, [sp, #12]
 8013d64:	68ba      	ldr	r2, [r7, #8]
 8013d66:	9202      	str	r2, [sp, #8]
 8013d68:	4a06      	ldr	r2, [pc, #24]	; (8013d84 <etharp_request_dst+0x40>)
 8013d6a:	9201      	str	r2, [sp, #4]
 8013d6c:	9300      	str	r3, [sp, #0]
 8013d6e:	4603      	mov	r3, r0
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	68f8      	ldr	r0, [r7, #12]
 8013d74:	f7ff ff5a 	bl	8013c2c <etharp_raw>
 8013d78:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3710      	adds	r7, #16
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}
 8013d82:	bf00      	nop
 8013d84:	08025de0 	.word	0x08025de0

08013d88 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013d92:	4a05      	ldr	r2, [pc, #20]	; (8013da8 <etharp_request+0x20>)
 8013d94:	6839      	ldr	r1, [r7, #0]
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f7ff ffd4 	bl	8013d44 <etharp_request_dst>
 8013d9c:	4603      	mov	r3, r0
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	3708      	adds	r7, #8
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}
 8013da6:	bf00      	nop
 8013da8:	08025dd8 	.word	0x08025dd8

08013dac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b086      	sub	sp, #24
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013db6:	230e      	movs	r3, #14
 8013db8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	895b      	ldrh	r3, [r3, #10]
 8013dbe:	2b0e      	cmp	r3, #14
 8013dc0:	d96e      	bls.n	8013ea0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	7bdb      	ldrb	r3, [r3, #15]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d106      	bne.n	8013dd8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	b2da      	uxtb	r2, r3
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	7b1a      	ldrb	r2, [r3, #12]
 8013de2:	7b5b      	ldrb	r3, [r3, #13]
 8013de4:	021b      	lsls	r3, r3, #8
 8013de6:	4313      	orrs	r3, r2
 8013de8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	f003 0301 	and.w	r3, r3, #1
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d023      	beq.n	8013e3e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	2b01      	cmp	r3, #1
 8013dfc:	d10f      	bne.n	8013e1e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	785b      	ldrb	r3, [r3, #1]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d11b      	bne.n	8013e3e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013e0a:	2b5e      	cmp	r3, #94	; 0x5e
 8013e0c:	d117      	bne.n	8013e3e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	7b5b      	ldrb	r3, [r3, #13]
 8013e12:	f043 0310 	orr.w	r3, r3, #16
 8013e16:	b2da      	uxtb	r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	735a      	strb	r2, [r3, #13]
 8013e1c:	e00f      	b.n	8013e3e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	2206      	movs	r2, #6
 8013e22:	4928      	ldr	r1, [pc, #160]	; (8013ec4 <ethernet_input+0x118>)
 8013e24:	4618      	mov	r0, r3
 8013e26:	f00c fa8d 	bl	8020344 <memcmp>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d106      	bne.n	8013e3e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	7b5b      	ldrb	r3, [r3, #13]
 8013e34:	f043 0308 	orr.w	r3, r3, #8
 8013e38:	b2da      	uxtb	r2, r3
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013e3e:	89fb      	ldrh	r3, [r7, #14]
 8013e40:	2b08      	cmp	r3, #8
 8013e42:	d003      	beq.n	8013e4c <ethernet_input+0xa0>
 8013e44:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013e48:	d014      	beq.n	8013e74 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013e4a:	e032      	b.n	8013eb2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013e52:	f003 0308 	and.w	r3, r3, #8
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d024      	beq.n	8013ea4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013e5a:	8afb      	ldrh	r3, [r7, #22]
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f003 fbfe 	bl	8017660 <pbuf_remove_header>
 8013e64:	4603      	mov	r3, r0
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d11e      	bne.n	8013ea8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013e6a:	6839      	ldr	r1, [r7, #0]
 8013e6c:	6878      	ldr	r0, [r7, #4]
 8013e6e:	f000 fb97 	bl	80145a0 <ip4_input>
      break;
 8013e72:	e013      	b.n	8013e9c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013e7a:	f003 0308 	and.w	r3, r3, #8
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d014      	beq.n	8013eac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013e82:	8afb      	ldrh	r3, [r7, #22]
 8013e84:	4619      	mov	r1, r3
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f003 fbea 	bl	8017660 <pbuf_remove_header>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d10e      	bne.n	8013eb0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013e92:	6839      	ldr	r1, [r7, #0]
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f7ff fb61 	bl	801355c <etharp_input>
      break;
 8013e9a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	e00c      	b.n	8013eba <ethernet_input+0x10e>
    goto free_and_return;
 8013ea0:	bf00      	nop
 8013ea2:	e006      	b.n	8013eb2 <ethernet_input+0x106>
        goto free_and_return;
 8013ea4:	bf00      	nop
 8013ea6:	e004      	b.n	8013eb2 <ethernet_input+0x106>
        goto free_and_return;
 8013ea8:	bf00      	nop
 8013eaa:	e002      	b.n	8013eb2 <ethernet_input+0x106>
        goto free_and_return;
 8013eac:	bf00      	nop
 8013eae:	e000      	b.n	8013eb2 <ethernet_input+0x106>
        goto free_and_return;
 8013eb0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f003 fc5a 	bl	801776c <pbuf_free>
  return ERR_OK;
 8013eb8:	2300      	movs	r3, #0
}
 8013eba:	4618      	mov	r0, r3
 8013ebc:	3718      	adds	r7, #24
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
 8013ec2:	bf00      	nop
 8013ec4:	08025dd8 	.word	0x08025dd8

08013ec8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b086      	sub	sp, #24
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	60b9      	str	r1, [r7, #8]
 8013ed2:	607a      	str	r2, [r7, #4]
 8013ed4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013ed6:	8c3b      	ldrh	r3, [r7, #32]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7fc fdf9 	bl	8010ad0 <lwip_htons>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013ee2:	210e      	movs	r1, #14
 8013ee4:	68b8      	ldr	r0, [r7, #8]
 8013ee6:	f003 fbab 	bl	8017640 <pbuf_add_header>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d125      	bne.n	8013f3c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	685b      	ldr	r3, [r3, #4]
 8013ef4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	8afa      	ldrh	r2, [r7, #22]
 8013efa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	2206      	movs	r2, #6
 8013f00:	6839      	ldr	r1, [r7, #0]
 8013f02:	4618      	mov	r0, r3
 8013f04:	f00c fa2e 	bl	8020364 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	3306      	adds	r3, #6
 8013f0c:	2206      	movs	r2, #6
 8013f0e:	6879      	ldr	r1, [r7, #4]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f00c fa27 	bl	8020364 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f1c:	2b06      	cmp	r3, #6
 8013f1e:	d006      	beq.n	8013f2e <ethernet_output+0x66>
 8013f20:	4b0a      	ldr	r3, [pc, #40]	; (8013f4c <ethernet_output+0x84>)
 8013f22:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013f26:	490a      	ldr	r1, [pc, #40]	; (8013f50 <ethernet_output+0x88>)
 8013f28:	480a      	ldr	r0, [pc, #40]	; (8013f54 <ethernet_output+0x8c>)
 8013f2a:	f00c fb11 	bl	8020550 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	699b      	ldr	r3, [r3, #24]
 8013f32:	68b9      	ldr	r1, [r7, #8]
 8013f34:	68f8      	ldr	r0, [r7, #12]
 8013f36:	4798      	blx	r3
 8013f38:	4603      	mov	r3, r0
 8013f3a:	e002      	b.n	8013f42 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013f3c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013f3e:	f06f 0301 	mvn.w	r3, #1
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3718      	adds	r7, #24
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}
 8013f4a:	bf00      	nop
 8013f4c:	08022720 	.word	0x08022720
 8013f50:	0802275c 	.word	0x0802275c
 8013f54:	08022790 	.word	0x08022790

08013f58 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b08e      	sub	sp, #56	; 0x38
 8013f5c:	af04      	add	r7, sp, #16
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013f62:	4b87      	ldr	r3, [pc, #540]	; (8014180 <icmp_input+0x228>)
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	f003 030f 	and.w	r3, r3, #15
 8013f70:	b2db      	uxtb	r3, r3
 8013f72:	009b      	lsls	r3, r3, #2
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013f78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f7a:	2b13      	cmp	r3, #19
 8013f7c:	f240 80e8 	bls.w	8014150 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	895b      	ldrh	r3, [r3, #10]
 8013f84:	2b03      	cmp	r3, #3
 8013f86:	f240 80e5 	bls.w	8014154 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013f94:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	f000 80d2 	beq.w	8014142 <icmp_input+0x1ea>
 8013f9e:	2b08      	cmp	r3, #8
 8013fa0:	f040 80d2 	bne.w	8014148 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013fa4:	4b77      	ldr	r3, [pc, #476]	; (8014184 <icmp_input+0x22c>)
 8013fa6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013fa8:	4b75      	ldr	r3, [pc, #468]	; (8014180 <icmp_input+0x228>)
 8013faa:	695b      	ldr	r3, [r3, #20]
 8013fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013fb0:	2be0      	cmp	r3, #224	; 0xe0
 8013fb2:	f000 80d6 	beq.w	8014162 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013fb6:	4b72      	ldr	r3, [pc, #456]	; (8014180 <icmp_input+0x228>)
 8013fb8:	695b      	ldr	r3, [r3, #20]
 8013fba:	4a71      	ldr	r2, [pc, #452]	; (8014180 <icmp_input+0x228>)
 8013fbc:	6812      	ldr	r2, [r2, #0]
 8013fbe:	4611      	mov	r1, r2
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f000 fd15 	bl	80149f0 <ip4_addr_isbroadcast_u32>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	f040 80cc 	bne.w	8014166 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	891b      	ldrh	r3, [r3, #8]
 8013fd2:	2b07      	cmp	r3, #7
 8013fd4:	f240 80c0 	bls.w	8014158 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f000 f9e0 	bl	801439e <inet_chksum_pbuf>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d003      	beq.n	8013fec <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f003 fbc1 	bl	801776c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013fea:	e0c5      	b.n	8014178 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013fec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fee:	330e      	adds	r3, #14
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f003 fb24 	bl	8017640 <pbuf_add_header>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d04b      	beq.n	8014096 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	891a      	ldrh	r2, [r3, #8]
 8014002:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014004:	4413      	add	r3, r2
 8014006:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	891b      	ldrh	r3, [r3, #8]
 801400c:	8b7a      	ldrh	r2, [r7, #26]
 801400e:	429a      	cmp	r2, r3
 8014010:	f0c0 80ab 	bcc.w	801416a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014014:	8b7b      	ldrh	r3, [r7, #26]
 8014016:	f44f 7220 	mov.w	r2, #640	; 0x280
 801401a:	4619      	mov	r1, r3
 801401c:	200e      	movs	r0, #14
 801401e:	f003 f8c1 	bl	80171a4 <pbuf_alloc>
 8014022:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	2b00      	cmp	r3, #0
 8014028:	f000 80a1 	beq.w	801416e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	895b      	ldrh	r3, [r3, #10]
 8014030:	461a      	mov	r2, r3
 8014032:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014034:	3308      	adds	r3, #8
 8014036:	429a      	cmp	r2, r3
 8014038:	d203      	bcs.n	8014042 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801403a:	6978      	ldr	r0, [r7, #20]
 801403c:	f003 fb96 	bl	801776c <pbuf_free>
          goto icmperr;
 8014040:	e096      	b.n	8014170 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801404a:	4618      	mov	r0, r3
 801404c:	f00c f98a 	bl	8020364 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014052:	4619      	mov	r1, r3
 8014054:	6978      	ldr	r0, [r7, #20]
 8014056:	f003 fb03 	bl	8017660 <pbuf_remove_header>
 801405a:	4603      	mov	r3, r0
 801405c:	2b00      	cmp	r3, #0
 801405e:	d009      	beq.n	8014074 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014060:	4b49      	ldr	r3, [pc, #292]	; (8014188 <icmp_input+0x230>)
 8014062:	22b6      	movs	r2, #182	; 0xb6
 8014064:	4949      	ldr	r1, [pc, #292]	; (801418c <icmp_input+0x234>)
 8014066:	484a      	ldr	r0, [pc, #296]	; (8014190 <icmp_input+0x238>)
 8014068:	f00c fa72 	bl	8020550 <iprintf>
          pbuf_free(r);
 801406c:	6978      	ldr	r0, [r7, #20]
 801406e:	f003 fb7d 	bl	801776c <pbuf_free>
          goto icmperr;
 8014072:	e07d      	b.n	8014170 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014074:	6879      	ldr	r1, [r7, #4]
 8014076:	6978      	ldr	r0, [r7, #20]
 8014078:	f003 fcac 	bl	80179d4 <pbuf_copy>
 801407c:	4603      	mov	r3, r0
 801407e:	2b00      	cmp	r3, #0
 8014080:	d003      	beq.n	801408a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014082:	6978      	ldr	r0, [r7, #20]
 8014084:	f003 fb72 	bl	801776c <pbuf_free>
          goto icmperr;
 8014088:	e072      	b.n	8014170 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f003 fb6e 	bl	801776c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	607b      	str	r3, [r7, #4]
 8014094:	e00f      	b.n	80140b6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014096:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014098:	330e      	adds	r3, #14
 801409a:	4619      	mov	r1, r3
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f003 fadf 	bl	8017660 <pbuf_remove_header>
 80140a2:	4603      	mov	r3, r0
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d006      	beq.n	80140b6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80140a8:	4b37      	ldr	r3, [pc, #220]	; (8014188 <icmp_input+0x230>)
 80140aa:	22c7      	movs	r2, #199	; 0xc7
 80140ac:	4939      	ldr	r1, [pc, #228]	; (8014194 <icmp_input+0x23c>)
 80140ae:	4838      	ldr	r0, [pc, #224]	; (8014190 <icmp_input+0x238>)
 80140b0:	f00c fa4e 	bl	8020550 <iprintf>
          goto icmperr;
 80140b4:	e05c      	b.n	8014170 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80140bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140be:	4619      	mov	r1, r3
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f003 fabd 	bl	8017640 <pbuf_add_header>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d13c      	bne.n	8014146 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80140da:	4b29      	ldr	r3, [pc, #164]	; (8014180 <icmp_input+0x228>)
 80140dc:	691a      	ldr	r2, [r3, #16]
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	2200      	movs	r2, #0
 80140e6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	885b      	ldrh	r3, [r3, #2]
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80140f2:	4293      	cmp	r3, r2
 80140f4:	d907      	bls.n	8014106 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80140f6:	693b      	ldr	r3, [r7, #16]
 80140f8:	885b      	ldrh	r3, [r3, #2]
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	3309      	adds	r3, #9
 80140fe:	b29a      	uxth	r2, r3
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	805a      	strh	r2, [r3, #2]
 8014104:	e006      	b.n	8014114 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014106:	693b      	ldr	r3, [r7, #16]
 8014108:	885b      	ldrh	r3, [r3, #2]
 801410a:	b29b      	uxth	r3, r3
 801410c:	3308      	adds	r3, #8
 801410e:	b29a      	uxth	r2, r3
 8014110:	693b      	ldr	r3, [r7, #16]
 8014112:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	22ff      	movs	r2, #255	; 0xff
 8014118:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	2200      	movs	r2, #0
 801411e:	729a      	strb	r2, [r3, #10]
 8014120:	2200      	movs	r2, #0
 8014122:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	9302      	str	r3, [sp, #8]
 8014128:	2301      	movs	r3, #1
 801412a:	9301      	str	r3, [sp, #4]
 801412c:	2300      	movs	r3, #0
 801412e:	9300      	str	r3, [sp, #0]
 8014130:	23ff      	movs	r3, #255	; 0xff
 8014132:	2200      	movs	r2, #0
 8014134:	69f9      	ldr	r1, [r7, #28]
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f000 fb74 	bl	8014824 <ip4_output_if>
 801413c:	4603      	mov	r3, r0
 801413e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014140:	e001      	b.n	8014146 <icmp_input+0x1ee>
      break;
 8014142:	bf00      	nop
 8014144:	e000      	b.n	8014148 <icmp_input+0x1f0>
      break;
 8014146:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f003 fb0f 	bl	801776c <pbuf_free>
  return;
 801414e:	e013      	b.n	8014178 <icmp_input+0x220>
    goto lenerr;
 8014150:	bf00      	nop
 8014152:	e002      	b.n	801415a <icmp_input+0x202>
    goto lenerr;
 8014154:	bf00      	nop
 8014156:	e000      	b.n	801415a <icmp_input+0x202>
        goto lenerr;
 8014158:	bf00      	nop
lenerr:
  pbuf_free(p);
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f003 fb06 	bl	801776c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014160:	e00a      	b.n	8014178 <icmp_input+0x220>
        goto icmperr;
 8014162:	bf00      	nop
 8014164:	e004      	b.n	8014170 <icmp_input+0x218>
        goto icmperr;
 8014166:	bf00      	nop
 8014168:	e002      	b.n	8014170 <icmp_input+0x218>
          goto icmperr;
 801416a:	bf00      	nop
 801416c:	e000      	b.n	8014170 <icmp_input+0x218>
          goto icmperr;
 801416e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f003 fafb 	bl	801776c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014176:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014178:	3728      	adds	r7, #40	; 0x28
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	2400a0b0 	.word	0x2400a0b0
 8014184:	2400a0c4 	.word	0x2400a0c4
 8014188:	080227b8 	.word	0x080227b8
 801418c:	080227f4 	.word	0x080227f4
 8014190:	0802282c 	.word	0x0802282c
 8014194:	08022854 	.word	0x08022854

08014198 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b082      	sub	sp, #8
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
 80141a0:	460b      	mov	r3, r1
 80141a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80141a4:	78fb      	ldrb	r3, [r7, #3]
 80141a6:	461a      	mov	r2, r3
 80141a8:	2103      	movs	r1, #3
 80141aa:	6878      	ldr	r0, [r7, #4]
 80141ac:	f000 f814 	bl	80141d8 <icmp_send_response>
}
 80141b0:	bf00      	nop
 80141b2:	3708      	adds	r7, #8
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}

080141b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	460b      	mov	r3, r1
 80141c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80141c4:	78fb      	ldrb	r3, [r7, #3]
 80141c6:	461a      	mov	r2, r3
 80141c8:	210b      	movs	r1, #11
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	f000 f804 	bl	80141d8 <icmp_send_response>
}
 80141d0:	bf00      	nop
 80141d2:	3708      	adds	r7, #8
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}

080141d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b08c      	sub	sp, #48	; 0x30
 80141dc:	af04      	add	r7, sp, #16
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	460b      	mov	r3, r1
 80141e2:	70fb      	strb	r3, [r7, #3]
 80141e4:	4613      	mov	r3, r2
 80141e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80141e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141ec:	2124      	movs	r1, #36	; 0x24
 80141ee:	2022      	movs	r0, #34	; 0x22
 80141f0:	f002 ffd8 	bl	80171a4 <pbuf_alloc>
 80141f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80141f6:	69fb      	ldr	r3, [r7, #28]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d056      	beq.n	80142aa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	895b      	ldrh	r3, [r3, #10]
 8014200:	2b23      	cmp	r3, #35	; 0x23
 8014202:	d806      	bhi.n	8014212 <icmp_send_response+0x3a>
 8014204:	4b2b      	ldr	r3, [pc, #172]	; (80142b4 <icmp_send_response+0xdc>)
 8014206:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801420a:	492b      	ldr	r1, [pc, #172]	; (80142b8 <icmp_send_response+0xe0>)
 801420c:	482b      	ldr	r0, [pc, #172]	; (80142bc <icmp_send_response+0xe4>)
 801420e:	f00c f99f 	bl	8020550 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014218:	69fb      	ldr	r3, [r7, #28]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801421e:	697b      	ldr	r3, [r7, #20]
 8014220:	78fa      	ldrb	r2, [r7, #3]
 8014222:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	78ba      	ldrb	r2, [r7, #2]
 8014228:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	2200      	movs	r2, #0
 801422e:	711a      	strb	r2, [r3, #4]
 8014230:	2200      	movs	r2, #0
 8014232:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	2200      	movs	r2, #0
 8014238:	719a      	strb	r2, [r3, #6]
 801423a:	2200      	movs	r2, #0
 801423c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	f103 0008 	add.w	r0, r3, #8
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	685b      	ldr	r3, [r3, #4]
 801424a:	221c      	movs	r2, #28
 801424c:	4619      	mov	r1, r3
 801424e:	f00c f889 	bl	8020364 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014252:	69bb      	ldr	r3, [r7, #24]
 8014254:	68db      	ldr	r3, [r3, #12]
 8014256:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014258:	f107 030c 	add.w	r3, r7, #12
 801425c:	4618      	mov	r0, r3
 801425e:	f000 f905 	bl	801446c <ip4_route>
 8014262:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d01b      	beq.n	80142a2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	2200      	movs	r2, #0
 801426e:	709a      	strb	r2, [r3, #2]
 8014270:	2200      	movs	r2, #0
 8014272:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014274:	69fb      	ldr	r3, [r7, #28]
 8014276:	895b      	ldrh	r3, [r3, #10]
 8014278:	4619      	mov	r1, r3
 801427a:	6978      	ldr	r0, [r7, #20]
 801427c:	f000 f87d 	bl	801437a <inet_chksum>
 8014280:	4603      	mov	r3, r0
 8014282:	461a      	mov	r2, r3
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014288:	f107 020c 	add.w	r2, r7, #12
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	9302      	str	r3, [sp, #8]
 8014290:	2301      	movs	r3, #1
 8014292:	9301      	str	r3, [sp, #4]
 8014294:	2300      	movs	r3, #0
 8014296:	9300      	str	r3, [sp, #0]
 8014298:	23ff      	movs	r3, #255	; 0xff
 801429a:	2100      	movs	r1, #0
 801429c:	69f8      	ldr	r0, [r7, #28]
 801429e:	f000 fac1 	bl	8014824 <ip4_output_if>
  }
  pbuf_free(q);
 80142a2:	69f8      	ldr	r0, [r7, #28]
 80142a4:	f003 fa62 	bl	801776c <pbuf_free>
 80142a8:	e000      	b.n	80142ac <icmp_send_response+0xd4>
    return;
 80142aa:	bf00      	nop
}
 80142ac:	3720      	adds	r7, #32
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}
 80142b2:	bf00      	nop
 80142b4:	080227b8 	.word	0x080227b8
 80142b8:	08022888 	.word	0x08022888
 80142bc:	0802282c 	.word	0x0802282c

080142c0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b089      	sub	sp, #36	; 0x24
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80142ce:	2300      	movs	r3, #0
 80142d0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80142d2:	2300      	movs	r3, #0
 80142d4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80142d6:	69fb      	ldr	r3, [r7, #28]
 80142d8:	f003 0301 	and.w	r3, r3, #1
 80142dc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d00d      	beq.n	8014300 <lwip_standard_chksum+0x40>
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	dd0a      	ble.n	8014300 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80142ea:	69fa      	ldr	r2, [r7, #28]
 80142ec:	1c53      	adds	r3, r2, #1
 80142ee:	61fb      	str	r3, [r7, #28]
 80142f0:	f107 030e 	add.w	r3, r7, #14
 80142f4:	3301      	adds	r3, #1
 80142f6:	7812      	ldrb	r2, [r2, #0]
 80142f8:	701a      	strb	r2, [r3, #0]
    len--;
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	3b01      	subs	r3, #1
 80142fe:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8014304:	e00a      	b.n	801431c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8014306:	69bb      	ldr	r3, [r7, #24]
 8014308:	1c9a      	adds	r2, r3, #2
 801430a:	61ba      	str	r2, [r7, #24]
 801430c:	881b      	ldrh	r3, [r3, #0]
 801430e:	461a      	mov	r2, r3
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	4413      	add	r3, r2
 8014314:	617b      	str	r3, [r7, #20]
    len -= 2;
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	3b02      	subs	r3, #2
 801431a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	2b01      	cmp	r3, #1
 8014320:	dcf1      	bgt.n	8014306 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	dd04      	ble.n	8014332 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8014328:	f107 030e 	add.w	r3, r7, #14
 801432c:	69ba      	ldr	r2, [r7, #24]
 801432e:	7812      	ldrb	r2, [r2, #0]
 8014330:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8014332:	89fb      	ldrh	r3, [r7, #14]
 8014334:	461a      	mov	r2, r3
 8014336:	697b      	ldr	r3, [r7, #20]
 8014338:	4413      	add	r3, r2
 801433a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	0c1a      	lsrs	r2, r3, #16
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	b29b      	uxth	r3, r3
 8014344:	4413      	add	r3, r2
 8014346:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	0c1a      	lsrs	r2, r3, #16
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	b29b      	uxth	r3, r3
 8014350:	4413      	add	r3, r2
 8014352:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d007      	beq.n	801436a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	021b      	lsls	r3, r3, #8
 801435e:	b29a      	uxth	r2, r3
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	0a1b      	lsrs	r3, r3, #8
 8014364:	b2db      	uxtb	r3, r3
 8014366:	4313      	orrs	r3, r2
 8014368:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	b29b      	uxth	r3, r3
}
 801436e:	4618      	mov	r0, r3
 8014370:	3724      	adds	r7, #36	; 0x24
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr

0801437a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801437a:	b580      	push	{r7, lr}
 801437c:	b082      	sub	sp, #8
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
 8014382:	460b      	mov	r3, r1
 8014384:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8014386:	887b      	ldrh	r3, [r7, #2]
 8014388:	4619      	mov	r1, r3
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f7ff ff98 	bl	80142c0 <lwip_standard_chksum>
 8014390:	4603      	mov	r3, r0
 8014392:	43db      	mvns	r3, r3
 8014394:	b29b      	uxth	r3, r3
}
 8014396:	4618      	mov	r0, r3
 8014398:	3708      	adds	r7, #8
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}

0801439e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801439e:	b580      	push	{r7, lr}
 80143a0:	b086      	sub	sp, #24
 80143a2:	af00      	add	r7, sp, #0
 80143a4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80143a6:	2300      	movs	r3, #0
 80143a8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80143aa:	2300      	movs	r3, #0
 80143ac:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	613b      	str	r3, [r7, #16]
 80143b2:	e02b      	b.n	801440c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	685a      	ldr	r2, [r3, #4]
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	895b      	ldrh	r3, [r3, #10]
 80143bc:	4619      	mov	r1, r3
 80143be:	4610      	mov	r0, r2
 80143c0:	f7ff ff7e 	bl	80142c0 <lwip_standard_chksum>
 80143c4:	4603      	mov	r3, r0
 80143c6:	461a      	mov	r2, r3
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	4413      	add	r3, r2
 80143cc:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	0c1a      	lsrs	r2, r3, #16
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	4413      	add	r3, r2
 80143d8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	895b      	ldrh	r3, [r3, #10]
 80143de:	f003 0301 	and.w	r3, r3, #1
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d00e      	beq.n	8014406 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	bf0c      	ite	eq
 80143ee:	2301      	moveq	r3, #1
 80143f0:	2300      	movne	r3, #0
 80143f2:	b2db      	uxtb	r3, r3
 80143f4:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	021b      	lsls	r3, r3, #8
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	0a1b      	lsrs	r3, r3, #8
 8014400:	b2db      	uxtb	r3, r3
 8014402:	4313      	orrs	r3, r2
 8014404:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	613b      	str	r3, [r7, #16]
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d1d0      	bne.n	80143b4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d007      	beq.n	8014428 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	021b      	lsls	r3, r3, #8
 801441c:	b29a      	uxth	r2, r3
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	0a1b      	lsrs	r3, r3, #8
 8014422:	b2db      	uxtb	r3, r3
 8014424:	4313      	orrs	r3, r2
 8014426:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	b29b      	uxth	r3, r3
 801442c:	43db      	mvns	r3, r3
 801442e:	b29b      	uxth	r3, r3
}
 8014430:	4618      	mov	r0, r3
 8014432:	3718      	adds	r7, #24
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801443e:	2300      	movs	r3, #0
 8014440:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8014442:	f004 fc75 	bl	8018d30 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8014446:	f001 fbe7 	bl	8015c18 <mem_init>
  memp_init();
 801444a:	f001 ff3f 	bl	80162cc <memp_init>
  pbuf_init();
  netif_init();
 801444e:	f002 f903 	bl	8016658 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014452:	f00b f9cb 	bl	801f7ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014456:	f004 fce7 	bl	8018e28 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 801445a:	f7fe fa4b 	bl	80128f4 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801445e:	f00b f90b 	bl	801f678 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014462:	bf00      	nop
 8014464:	3708      	adds	r7, #8
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
	...

0801446c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801446c:	b480      	push	{r7}
 801446e:	b085      	sub	sp, #20
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014474:	4b33      	ldr	r3, [pc, #204]	; (8014544 <ip4_route+0xd8>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	60fb      	str	r3, [r7, #12]
 801447a:	e036      	b.n	80144ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014482:	f003 0301 	and.w	r3, r3, #1
 8014486:	b2db      	uxtb	r3, r3
 8014488:	2b00      	cmp	r3, #0
 801448a:	d02b      	beq.n	80144e4 <ip4_route+0x78>
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014492:	089b      	lsrs	r3, r3, #2
 8014494:	f003 0301 	and.w	r3, r3, #1
 8014498:	b2db      	uxtb	r3, r3
 801449a:	2b00      	cmp	r3, #0
 801449c:	d022      	beq.n	80144e4 <ip4_route+0x78>
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	3304      	adds	r3, #4
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d01d      	beq.n	80144e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	3304      	adds	r3, #4
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	405a      	eors	r2, r3
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	3308      	adds	r3, #8
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	4013      	ands	r3, r2
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d101      	bne.n	80144c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	e038      	b.n	8014536 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80144ca:	f003 0302 	and.w	r3, r3, #2
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d108      	bne.n	80144e4 <ip4_route+0x78>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681a      	ldr	r2, [r3, #0]
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	330c      	adds	r3, #12
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d101      	bne.n	80144e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	e028      	b.n	8014536 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	60fb      	str	r3, [r7, #12]
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d1c5      	bne.n	801447c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80144f0:	4b15      	ldr	r3, [pc, #84]	; (8014548 <ip4_route+0xdc>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d01a      	beq.n	801452e <ip4_route+0xc2>
 80144f8:	4b13      	ldr	r3, [pc, #76]	; (8014548 <ip4_route+0xdc>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014500:	f003 0301 	and.w	r3, r3, #1
 8014504:	2b00      	cmp	r3, #0
 8014506:	d012      	beq.n	801452e <ip4_route+0xc2>
 8014508:	4b0f      	ldr	r3, [pc, #60]	; (8014548 <ip4_route+0xdc>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014510:	f003 0304 	and.w	r3, r3, #4
 8014514:	2b00      	cmp	r3, #0
 8014516:	d00a      	beq.n	801452e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014518:	4b0b      	ldr	r3, [pc, #44]	; (8014548 <ip4_route+0xdc>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	3304      	adds	r3, #4
 801451e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014520:	2b00      	cmp	r3, #0
 8014522:	d004      	beq.n	801452e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	b2db      	uxtb	r3, r3
 801452a:	2b7f      	cmp	r3, #127	; 0x7f
 801452c:	d101      	bne.n	8014532 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801452e:	2300      	movs	r3, #0
 8014530:	e001      	b.n	8014536 <ip4_route+0xca>
  }

  return netif_default;
 8014532:	4b05      	ldr	r3, [pc, #20]	; (8014548 <ip4_route+0xdc>)
 8014534:	681b      	ldr	r3, [r3, #0]
}
 8014536:	4618      	mov	r0, r3
 8014538:	3714      	adds	r7, #20
 801453a:	46bd      	mov	sp, r7
 801453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014540:	4770      	bx	lr
 8014542:	bf00      	nop
 8014544:	2400d330 	.word	0x2400d330
 8014548:	2400d334 	.word	0x2400d334

0801454c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801455a:	f003 0301 	and.w	r3, r3, #1
 801455e:	b2db      	uxtb	r3, r3
 8014560:	2b00      	cmp	r3, #0
 8014562:	d016      	beq.n	8014592 <ip4_input_accept+0x46>
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	3304      	adds	r3, #4
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d011      	beq.n	8014592 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801456e:	4b0b      	ldr	r3, [pc, #44]	; (801459c <ip4_input_accept+0x50>)
 8014570:	695a      	ldr	r2, [r3, #20]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	3304      	adds	r3, #4
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	429a      	cmp	r2, r3
 801457a:	d008      	beq.n	801458e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801457c:	4b07      	ldr	r3, [pc, #28]	; (801459c <ip4_input_accept+0x50>)
 801457e:	695b      	ldr	r3, [r3, #20]
 8014580:	6879      	ldr	r1, [r7, #4]
 8014582:	4618      	mov	r0, r3
 8014584:	f000 fa34 	bl	80149f0 <ip4_addr_isbroadcast_u32>
 8014588:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801458a:	2b00      	cmp	r3, #0
 801458c:	d001      	beq.n	8014592 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801458e:	2301      	movs	r3, #1
 8014590:	e000      	b.n	8014594 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014592:	2300      	movs	r3, #0
}
 8014594:	4618      	mov	r0, r3
 8014596:	3708      	adds	r7, #8
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	2400a0b0 	.word	0x2400a0b0

080145a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b088      	sub	sp, #32
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80145aa:	2301      	movs	r3, #1
 80145ac:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80145b4:	69fb      	ldr	r3, [r7, #28]
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	091b      	lsrs	r3, r3, #4
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	2b04      	cmp	r3, #4
 80145be:	d004      	beq.n	80145ca <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f003 f8d3 	bl	801776c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80145c6:	2300      	movs	r3, #0
 80145c8:	e123      	b.n	8014812 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80145ca:	69fb      	ldr	r3, [r7, #28]
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	f003 030f 	and.w	r3, r3, #15
 80145d2:	b2db      	uxtb	r3, r3
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	b2db      	uxtb	r3, r3
 80145d8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	885b      	ldrh	r3, [r3, #2]
 80145de:	b29b      	uxth	r3, r3
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7fc fa75 	bl	8010ad0 <lwip_htons>
 80145e6:	4603      	mov	r3, r0
 80145e8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	891b      	ldrh	r3, [r3, #8]
 80145ee:	8a3a      	ldrh	r2, [r7, #16]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d204      	bcs.n	80145fe <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80145f4:	8a3b      	ldrh	r3, [r7, #16]
 80145f6:	4619      	mov	r1, r3
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f002 ff31 	bl	8017460 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	895b      	ldrh	r3, [r3, #10]
 8014602:	8a7a      	ldrh	r2, [r7, #18]
 8014604:	429a      	cmp	r2, r3
 8014606:	d807      	bhi.n	8014618 <ip4_input+0x78>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	891b      	ldrh	r3, [r3, #8]
 801460c:	8a3a      	ldrh	r2, [r7, #16]
 801460e:	429a      	cmp	r2, r3
 8014610:	d802      	bhi.n	8014618 <ip4_input+0x78>
 8014612:	8a7b      	ldrh	r3, [r7, #18]
 8014614:	2b13      	cmp	r3, #19
 8014616:	d804      	bhi.n	8014622 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f003 f8a7 	bl	801776c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801461e:	2300      	movs	r3, #0
 8014620:	e0f7      	b.n	8014812 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014622:	69fb      	ldr	r3, [r7, #28]
 8014624:	691b      	ldr	r3, [r3, #16]
 8014626:	4a7d      	ldr	r2, [pc, #500]	; (801481c <ip4_input+0x27c>)
 8014628:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	4a7b      	ldr	r2, [pc, #492]	; (801481c <ip4_input+0x27c>)
 8014630:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014632:	4b7a      	ldr	r3, [pc, #488]	; (801481c <ip4_input+0x27c>)
 8014634:	695b      	ldr	r3, [r3, #20]
 8014636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801463a:	2be0      	cmp	r3, #224	; 0xe0
 801463c:	d112      	bne.n	8014664 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014644:	f003 0301 	and.w	r3, r3, #1
 8014648:	b2db      	uxtb	r3, r3
 801464a:	2b00      	cmp	r3, #0
 801464c:	d007      	beq.n	801465e <ip4_input+0xbe>
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	3304      	adds	r3, #4
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d002      	beq.n	801465e <ip4_input+0xbe>
      netif = inp;
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	61bb      	str	r3, [r7, #24]
 801465c:	e02a      	b.n	80146b4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801465e:	2300      	movs	r3, #0
 8014660:	61bb      	str	r3, [r7, #24]
 8014662:	e027      	b.n	80146b4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014664:	6838      	ldr	r0, [r7, #0]
 8014666:	f7ff ff71 	bl	801454c <ip4_input_accept>
 801466a:	4603      	mov	r3, r0
 801466c:	2b00      	cmp	r3, #0
 801466e:	d002      	beq.n	8014676 <ip4_input+0xd6>
      netif = inp;
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	61bb      	str	r3, [r7, #24]
 8014674:	e01e      	b.n	80146b4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8014676:	2300      	movs	r3, #0
 8014678:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801467a:	4b68      	ldr	r3, [pc, #416]	; (801481c <ip4_input+0x27c>)
 801467c:	695b      	ldr	r3, [r3, #20]
 801467e:	b2db      	uxtb	r3, r3
 8014680:	2b7f      	cmp	r3, #127	; 0x7f
 8014682:	d017      	beq.n	80146b4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014684:	4b66      	ldr	r3, [pc, #408]	; (8014820 <ip4_input+0x280>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	61bb      	str	r3, [r7, #24]
 801468a:	e00e      	b.n	80146aa <ip4_input+0x10a>
          if (netif == inp) {
 801468c:	69ba      	ldr	r2, [r7, #24]
 801468e:	683b      	ldr	r3, [r7, #0]
 8014690:	429a      	cmp	r2, r3
 8014692:	d006      	beq.n	80146a2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014694:	69b8      	ldr	r0, [r7, #24]
 8014696:	f7ff ff59 	bl	801454c <ip4_input_accept>
 801469a:	4603      	mov	r3, r0
 801469c:	2b00      	cmp	r3, #0
 801469e:	d108      	bne.n	80146b2 <ip4_input+0x112>
 80146a0:	e000      	b.n	80146a4 <ip4_input+0x104>
            continue;
 80146a2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	61bb      	str	r3, [r7, #24]
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d1ed      	bne.n	801468c <ip4_input+0xec>
 80146b0:	e000      	b.n	80146b4 <ip4_input+0x114>
            break;
 80146b2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80146b4:	69bb      	ldr	r3, [r7, #24]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d111      	bne.n	80146de <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80146ba:	69fb      	ldr	r3, [r7, #28]
 80146bc:	7a5b      	ldrb	r3, [r3, #9]
 80146be:	2b11      	cmp	r3, #17
 80146c0:	d10d      	bne.n	80146de <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80146c2:	8a7b      	ldrh	r3, [r7, #18]
 80146c4:	69fa      	ldr	r2, [r7, #28]
 80146c6:	4413      	add	r3, r2
 80146c8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	885b      	ldrh	r3, [r3, #2]
 80146ce:	b29b      	uxth	r3, r3
 80146d0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80146d4:	d103      	bne.n	80146de <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80146da:	2300      	movs	r3, #0
 80146dc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d017      	beq.n	8014714 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80146e4:	4b4d      	ldr	r3, [pc, #308]	; (801481c <ip4_input+0x27c>)
 80146e6:	691b      	ldr	r3, [r3, #16]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d013      	beq.n	8014714 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80146ec:	4b4b      	ldr	r3, [pc, #300]	; (801481c <ip4_input+0x27c>)
 80146ee:	691b      	ldr	r3, [r3, #16]
 80146f0:	6839      	ldr	r1, [r7, #0]
 80146f2:	4618      	mov	r0, r3
 80146f4:	f000 f97c 	bl	80149f0 <ip4_addr_isbroadcast_u32>
 80146f8:	4603      	mov	r3, r0
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d105      	bne.n	801470a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80146fe:	4b47      	ldr	r3, [pc, #284]	; (801481c <ip4_input+0x27c>)
 8014700:	691b      	ldr	r3, [r3, #16]
 8014702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014706:	2be0      	cmp	r3, #224	; 0xe0
 8014708:	d104      	bne.n	8014714 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f003 f82e 	bl	801776c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014710:	2300      	movs	r3, #0
 8014712:	e07e      	b.n	8014812 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014714:	69bb      	ldr	r3, [r7, #24]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d104      	bne.n	8014724 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f003 f826 	bl	801776c <pbuf_free>
    return ERR_OK;
 8014720:	2300      	movs	r3, #0
 8014722:	e076      	b.n	8014812 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014724:	69fb      	ldr	r3, [r7, #28]
 8014726:	88db      	ldrh	r3, [r3, #6]
 8014728:	b29b      	uxth	r3, r3
 801472a:	461a      	mov	r2, r3
 801472c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014730:	4013      	ands	r3, r2
 8014732:	2b00      	cmp	r3, #0
 8014734:	d00b      	beq.n	801474e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 fe6e 	bl	8015418 <ip4_reass>
 801473c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d101      	bne.n	8014748 <ip4_input+0x1a8>
      return ERR_OK;
 8014744:	2300      	movs	r3, #0
 8014746:	e064      	b.n	8014812 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801474e:	4a33      	ldr	r2, [pc, #204]	; (801481c <ip4_input+0x27c>)
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014754:	4a31      	ldr	r2, [pc, #196]	; (801481c <ip4_input+0x27c>)
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801475a:	4a30      	ldr	r2, [pc, #192]	; (801481c <ip4_input+0x27c>)
 801475c:	69fb      	ldr	r3, [r7, #28]
 801475e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	781b      	ldrb	r3, [r3, #0]
 8014764:	f003 030f 	and.w	r3, r3, #15
 8014768:	b2db      	uxtb	r3, r3
 801476a:	009b      	lsls	r3, r3, #2
 801476c:	b2db      	uxtb	r3, r3
 801476e:	b29a      	uxth	r2, r3
 8014770:	4b2a      	ldr	r3, [pc, #168]	; (801481c <ip4_input+0x27c>)
 8014772:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014774:	8a7b      	ldrh	r3, [r7, #18]
 8014776:	4619      	mov	r1, r3
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f002 ff71 	bl	8017660 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801477e:	69fb      	ldr	r3, [r7, #28]
 8014780:	7a5b      	ldrb	r3, [r3, #9]
 8014782:	2b11      	cmp	r3, #17
 8014784:	d006      	beq.n	8014794 <ip4_input+0x1f4>
 8014786:	2b11      	cmp	r3, #17
 8014788:	dc13      	bgt.n	80147b2 <ip4_input+0x212>
 801478a:	2b01      	cmp	r3, #1
 801478c:	d00c      	beq.n	80147a8 <ip4_input+0x208>
 801478e:	2b06      	cmp	r3, #6
 8014790:	d005      	beq.n	801479e <ip4_input+0x1fe>
 8014792:	e00e      	b.n	80147b2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014794:	6839      	ldr	r1, [r7, #0]
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f00b f8d6 	bl	801f948 <udp_input>
        break;
 801479c:	e026      	b.n	80147ec <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801479e:	6839      	ldr	r1, [r7, #0]
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f006 fad7 	bl	801ad54 <tcp_input>
        break;
 80147a6:	e021      	b.n	80147ec <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80147a8:	6839      	ldr	r1, [r7, #0]
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f7ff fbd4 	bl	8013f58 <icmp_input>
        break;
 80147b0:	e01c      	b.n	80147ec <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80147b2:	4b1a      	ldr	r3, [pc, #104]	; (801481c <ip4_input+0x27c>)
 80147b4:	695b      	ldr	r3, [r3, #20]
 80147b6:	69b9      	ldr	r1, [r7, #24]
 80147b8:	4618      	mov	r0, r3
 80147ba:	f000 f919 	bl	80149f0 <ip4_addr_isbroadcast_u32>
 80147be:	4603      	mov	r3, r0
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d10f      	bne.n	80147e4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80147c4:	4b15      	ldr	r3, [pc, #84]	; (801481c <ip4_input+0x27c>)
 80147c6:	695b      	ldr	r3, [r3, #20]
 80147c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80147cc:	2be0      	cmp	r3, #224	; 0xe0
 80147ce:	d009      	beq.n	80147e4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80147d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147d4:	4619      	mov	r1, r3
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f002 ffb5 	bl	8017746 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80147dc:	2102      	movs	r1, #2
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f7ff fcda 	bl	8014198 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f002 ffc1 	bl	801776c <pbuf_free>
        break;
 80147ea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80147ec:	4b0b      	ldr	r3, [pc, #44]	; (801481c <ip4_input+0x27c>)
 80147ee:	2200      	movs	r2, #0
 80147f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80147f2:	4b0a      	ldr	r3, [pc, #40]	; (801481c <ip4_input+0x27c>)
 80147f4:	2200      	movs	r2, #0
 80147f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80147f8:	4b08      	ldr	r3, [pc, #32]	; (801481c <ip4_input+0x27c>)
 80147fa:	2200      	movs	r2, #0
 80147fc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80147fe:	4b07      	ldr	r3, [pc, #28]	; (801481c <ip4_input+0x27c>)
 8014800:	2200      	movs	r2, #0
 8014802:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014804:	4b05      	ldr	r3, [pc, #20]	; (801481c <ip4_input+0x27c>)
 8014806:	2200      	movs	r2, #0
 8014808:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801480a:	4b04      	ldr	r3, [pc, #16]	; (801481c <ip4_input+0x27c>)
 801480c:	2200      	movs	r2, #0
 801480e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014810:	2300      	movs	r3, #0
}
 8014812:	4618      	mov	r0, r3
 8014814:	3720      	adds	r7, #32
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	2400a0b0 	.word	0x2400a0b0
 8014820:	2400d330 	.word	0x2400d330

08014824 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b08a      	sub	sp, #40	; 0x28
 8014828:	af04      	add	r7, sp, #16
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	60b9      	str	r1, [r7, #8]
 801482e:	607a      	str	r2, [r7, #4]
 8014830:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d009      	beq.n	8014850 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d003      	beq.n	801484a <ip4_output_if+0x26>
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d102      	bne.n	8014850 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484c:	3304      	adds	r3, #4
 801484e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014850:	78fa      	ldrb	r2, [r7, #3]
 8014852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014854:	9302      	str	r3, [sp, #8]
 8014856:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801485a:	9301      	str	r3, [sp, #4]
 801485c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	4613      	mov	r3, r2
 8014864:	687a      	ldr	r2, [r7, #4]
 8014866:	6979      	ldr	r1, [r7, #20]
 8014868:	68f8      	ldr	r0, [r7, #12]
 801486a:	f000 f805 	bl	8014878 <ip4_output_if_src>
 801486e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014870:	4618      	mov	r0, r3
 8014872:	3718      	adds	r7, #24
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b088      	sub	sp, #32
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
 8014884:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	7b9b      	ldrb	r3, [r3, #14]
 801488a:	2b01      	cmp	r3, #1
 801488c:	d006      	beq.n	801489c <ip4_output_if_src+0x24>
 801488e:	4b52      	ldr	r3, [pc, #328]	; (80149d8 <ip4_output_if_src+0x160>)
 8014890:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014894:	4951      	ldr	r1, [pc, #324]	; (80149dc <ip4_output_if_src+0x164>)
 8014896:	4852      	ldr	r0, [pc, #328]	; (80149e0 <ip4_output_if_src+0x168>)
 8014898:	f00b fe5a 	bl	8020550 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d060      	beq.n	8014964 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80148a2:	2314      	movs	r3, #20
 80148a4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80148a6:	2114      	movs	r1, #20
 80148a8:	68f8      	ldr	r0, [r7, #12]
 80148aa:	f002 fec9 	bl	8017640 <pbuf_add_header>
 80148ae:	4603      	mov	r3, r0
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d002      	beq.n	80148ba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80148b4:	f06f 0301 	mvn.w	r3, #1
 80148b8:	e089      	b.n	80149ce <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	895b      	ldrh	r3, [r3, #10]
 80148c4:	2b13      	cmp	r3, #19
 80148c6:	d806      	bhi.n	80148d6 <ip4_output_if_src+0x5e>
 80148c8:	4b43      	ldr	r3, [pc, #268]	; (80149d8 <ip4_output_if_src+0x160>)
 80148ca:	f44f 7262 	mov.w	r2, #904	; 0x388
 80148ce:	4945      	ldr	r1, [pc, #276]	; (80149e4 <ip4_output_if_src+0x16c>)
 80148d0:	4843      	ldr	r0, [pc, #268]	; (80149e0 <ip4_output_if_src+0x168>)
 80148d2:	f00b fe3d 	bl	8020550 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80148d6:	69fb      	ldr	r3, [r7, #28]
 80148d8:	78fa      	ldrb	r2, [r7, #3]
 80148da:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80148dc:	69fb      	ldr	r3, [r7, #28]
 80148de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80148e2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80148ec:	8b7b      	ldrh	r3, [r7, #26]
 80148ee:	089b      	lsrs	r3, r3, #2
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	b2db      	uxtb	r3, r3
 80148f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148f8:	b2da      	uxtb	r2, r3
 80148fa:	69fb      	ldr	r3, [r7, #28]
 80148fc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80148fe:	69fb      	ldr	r3, [r7, #28]
 8014900:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014904:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	891b      	ldrh	r3, [r3, #8]
 801490a:	4618      	mov	r0, r3
 801490c:	f7fc f8e0 	bl	8010ad0 <lwip_htons>
 8014910:	4603      	mov	r3, r0
 8014912:	461a      	mov	r2, r3
 8014914:	69fb      	ldr	r3, [r7, #28]
 8014916:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014918:	69fb      	ldr	r3, [r7, #28]
 801491a:	2200      	movs	r2, #0
 801491c:	719a      	strb	r2, [r3, #6]
 801491e:	2200      	movs	r2, #0
 8014920:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014922:	4b31      	ldr	r3, [pc, #196]	; (80149e8 <ip4_output_if_src+0x170>)
 8014924:	881b      	ldrh	r3, [r3, #0]
 8014926:	4618      	mov	r0, r3
 8014928:	f7fc f8d2 	bl	8010ad0 <lwip_htons>
 801492c:	4603      	mov	r3, r0
 801492e:	461a      	mov	r2, r3
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014934:	4b2c      	ldr	r3, [pc, #176]	; (80149e8 <ip4_output_if_src+0x170>)
 8014936:	881b      	ldrh	r3, [r3, #0]
 8014938:	3301      	adds	r3, #1
 801493a:	b29a      	uxth	r2, r3
 801493c:	4b2a      	ldr	r3, [pc, #168]	; (80149e8 <ip4_output_if_src+0x170>)
 801493e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d104      	bne.n	8014950 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014946:	4b29      	ldr	r3, [pc, #164]	; (80149ec <ip4_output_if_src+0x174>)
 8014948:	681a      	ldr	r2, [r3, #0]
 801494a:	69fb      	ldr	r3, [r7, #28]
 801494c:	60da      	str	r2, [r3, #12]
 801494e:	e003      	b.n	8014958 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	69fb      	ldr	r3, [r7, #28]
 8014956:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	2200      	movs	r2, #0
 801495c:	729a      	strb	r2, [r3, #10]
 801495e:	2200      	movs	r2, #0
 8014960:	72da      	strb	r2, [r3, #11]
 8014962:	e00f      	b.n	8014984 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	895b      	ldrh	r3, [r3, #10]
 8014968:	2b13      	cmp	r3, #19
 801496a:	d802      	bhi.n	8014972 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801496c:	f06f 0301 	mvn.w	r3, #1
 8014970:	e02d      	b.n	80149ce <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	685b      	ldr	r3, [r3, #4]
 8014976:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	691b      	ldr	r3, [r3, #16]
 801497c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801497e:	f107 0314 	add.w	r3, r7, #20
 8014982:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681a      	ldr	r2, [r3, #0]
 8014988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801498a:	3304      	adds	r3, #4
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	429a      	cmp	r2, r3
 8014990:	d105      	bne.n	801499e <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 8014992:	68f9      	ldr	r1, [r7, #12]
 8014994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014996:	f002 fa15 	bl	8016dc4 <netif_loop_output>
 801499a:	4603      	mov	r3, r0
 801499c:	e017      	b.n	80149ce <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d00c      	beq.n	80149c0 <ip4_output_if_src+0x148>
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	891a      	ldrh	r2, [r3, #8]
 80149aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d906      	bls.n	80149c0 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80149b6:	68f8      	ldr	r0, [r7, #12]
 80149b8:	f000 ff22 	bl	8015800 <ip4_frag>
 80149bc:	4603      	mov	r3, r0
 80149be:	e006      	b.n	80149ce <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80149c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c2:	695b      	ldr	r3, [r3, #20]
 80149c4:	687a      	ldr	r2, [r7, #4]
 80149c6:	68f9      	ldr	r1, [r7, #12]
 80149c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149ca:	4798      	blx	r3
 80149cc:	4603      	mov	r3, r0
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3720      	adds	r7, #32
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	080228b4 	.word	0x080228b4
 80149dc:	080228f0 	.word	0x080228f0
 80149e0:	080228fc 	.word	0x080228fc
 80149e4:	08022924 	.word	0x08022924
 80149e8:	2400a0c8 	.word	0x2400a0c8
 80149ec:	08025de8 	.word	0x08025de8

080149f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80149f0:	b480      	push	{r7}
 80149f2:	b085      	sub	sp, #20
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a04:	d002      	beq.n	8014a0c <ip4_addr_isbroadcast_u32+0x1c>
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d101      	bne.n	8014a10 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	e02a      	b.n	8014a66 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014a16:	f003 0302 	and.w	r3, r3, #2
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d101      	bne.n	8014a22 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	e021      	b.n	8014a66 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	3304      	adds	r3, #4
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	687a      	ldr	r2, [r7, #4]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d101      	bne.n	8014a32 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	e019      	b.n	8014a66 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014a32:	68fa      	ldr	r2, [r7, #12]
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	3304      	adds	r3, #4
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	405a      	eors	r2, r3
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	3308      	adds	r3, #8
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	4013      	ands	r3, r2
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d10d      	bne.n	8014a64 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	3308      	adds	r3, #8
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	43da      	mvns	r2, r3
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	3308      	adds	r3, #8
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d101      	bne.n	8014a64 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014a60:	2301      	movs	r3, #1
 8014a62:	e000      	b.n	8014a66 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014a64:	2300      	movs	r3, #0
  }
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3714      	adds	r7, #20
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a70:	4770      	bx	lr

08014a72 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8014a72:	b580      	push	{r7, lr}
 8014a74:	b084      	sub	sp, #16
 8014a76:	af00      	add	r7, sp, #0
 8014a78:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8014a7a:	f107 030c 	add.w	r3, r7, #12
 8014a7e:	4619      	mov	r1, r3
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f000 f80b 	bl	8014a9c <ip4addr_aton>
 8014a86:	4603      	mov	r3, r0
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d001      	beq.n	8014a90 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	e001      	b.n	8014a94 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8014a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3710      	adds	r7, #16
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}

08014a9c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b08a      	sub	sp, #40	; 0x28
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
 8014aa4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8014aa6:	f107 030c 	add.w	r3, r7, #12
 8014aaa:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8014ab4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014ab8:	3301      	adds	r3, #1
 8014aba:	4a89      	ldr	r2, [pc, #548]	; (8014ce0 <ip4addr_aton+0x244>)
 8014abc:	4413      	add	r3, r2
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	f003 0304 	and.w	r3, r3, #4
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d101      	bne.n	8014acc <ip4addr_aton+0x30>
      return 0;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	e105      	b.n	8014cd8 <ip4addr_aton+0x23c>
    }
    val = 0;
 8014acc:	2300      	movs	r3, #0
 8014ace:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8014ad0:	230a      	movs	r3, #10
 8014ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8014ad6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014ada:	2b30      	cmp	r3, #48	; 0x30
 8014adc:	d11c      	bne.n	8014b18 <ip4addr_aton+0x7c>
      c = *++cp;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	3301      	adds	r3, #1
 8014ae2:	607b      	str	r3, [r7, #4]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8014aec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014af0:	2b78      	cmp	r3, #120	; 0x78
 8014af2:	d003      	beq.n	8014afc <ip4addr_aton+0x60>
 8014af4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014af8:	2b58      	cmp	r3, #88	; 0x58
 8014afa:	d10a      	bne.n	8014b12 <ip4addr_aton+0x76>
        base = 16;
 8014afc:	2310      	movs	r3, #16
 8014afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	3301      	adds	r3, #1
 8014b06:	607b      	str	r3, [r7, #4]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014b10:	e002      	b.n	8014b18 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8014b12:	2308      	movs	r3, #8
 8014b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8014b18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	4a70      	ldr	r2, [pc, #448]	; (8014ce0 <ip4addr_aton+0x244>)
 8014b20:	4413      	add	r3, r2
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	f003 0304 	and.w	r3, r3, #4
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d011      	beq.n	8014b50 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8014b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b32:	fb03 f202 	mul.w	r2, r3, r2
 8014b36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014b3a:	4413      	add	r3, r2
 8014b3c:	3b30      	subs	r3, #48	; 0x30
 8014b3e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	3301      	adds	r3, #1
 8014b44:	607b      	str	r3, [r7, #4]
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014b4e:	e7e3      	b.n	8014b18 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8014b50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b54:	2b10      	cmp	r3, #16
 8014b56:	d127      	bne.n	8014ba8 <ip4addr_aton+0x10c>
 8014b58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	4a60      	ldr	r2, [pc, #384]	; (8014ce0 <ip4addr_aton+0x244>)
 8014b60:	4413      	add	r3, r2
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d01d      	beq.n	8014ba8 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8014b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b6e:	011b      	lsls	r3, r3, #4
 8014b70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014b74:	f102 010a 	add.w	r1, r2, #10
 8014b78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014b7c:	3201      	adds	r2, #1
 8014b7e:	4858      	ldr	r0, [pc, #352]	; (8014ce0 <ip4addr_aton+0x244>)
 8014b80:	4402      	add	r2, r0
 8014b82:	7812      	ldrb	r2, [r2, #0]
 8014b84:	f002 0203 	and.w	r2, r2, #3
 8014b88:	2a02      	cmp	r2, #2
 8014b8a:	d101      	bne.n	8014b90 <ip4addr_aton+0xf4>
 8014b8c:	2261      	movs	r2, #97	; 0x61
 8014b8e:	e000      	b.n	8014b92 <ip4addr_aton+0xf6>
 8014b90:	2241      	movs	r2, #65	; 0x41
 8014b92:	1a8a      	subs	r2, r1, r2
 8014b94:	4313      	orrs	r3, r2
 8014b96:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	607b      	str	r3, [r7, #4]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8014ba6:	e7b7      	b.n	8014b18 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8014ba8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014bac:	2b2e      	cmp	r3, #46	; 0x2e
 8014bae:	d114      	bne.n	8014bda <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8014bb0:	f107 030c 	add.w	r3, r7, #12
 8014bb4:	330c      	adds	r3, #12
 8014bb6:	69fa      	ldr	r2, [r7, #28]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d301      	bcc.n	8014bc0 <ip4addr_aton+0x124>
        return 0;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	e08b      	b.n	8014cd8 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8014bc0:	69fb      	ldr	r3, [r7, #28]
 8014bc2:	1d1a      	adds	r2, r3, #4
 8014bc4:	61fa      	str	r2, [r7, #28]
 8014bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bc8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	3301      	adds	r3, #1
 8014bce:	607b      	str	r3, [r7, #4]
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8014bd8:	e76c      	b.n	8014ab4 <ip4addr_aton+0x18>
    } else {
      break;
 8014bda:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8014bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d00b      	beq.n	8014bfc <ip4addr_aton+0x160>
 8014be4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014be8:	3301      	adds	r3, #1
 8014bea:	4a3d      	ldr	r2, [pc, #244]	; (8014ce0 <ip4addr_aton+0x244>)
 8014bec:	4413      	add	r3, r2
 8014bee:	781b      	ldrb	r3, [r3, #0]
 8014bf0:	f003 0308 	and.w	r3, r3, #8
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d101      	bne.n	8014bfc <ip4addr_aton+0x160>
    return 0;
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	e06d      	b.n	8014cd8 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8014bfc:	f107 030c 	add.w	r3, r7, #12
 8014c00:	69fa      	ldr	r2, [r7, #28]
 8014c02:	1ad3      	subs	r3, r2, r3
 8014c04:	109b      	asrs	r3, r3, #2
 8014c06:	3301      	adds	r3, #1
 8014c08:	2b04      	cmp	r3, #4
 8014c0a:	d853      	bhi.n	8014cb4 <ip4addr_aton+0x218>
 8014c0c:	a201      	add	r2, pc, #4	; (adr r2, 8014c14 <ip4addr_aton+0x178>)
 8014c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c12:	bf00      	nop
 8014c14:	08014c29 	.word	0x08014c29
 8014c18:	08014cc3 	.word	0x08014cc3
 8014c1c:	08014c2d 	.word	0x08014c2d
 8014c20:	08014c4f 	.word	0x08014c4f
 8014c24:	08014c7d 	.word	0x08014c7d

    case 0:
      return 0;       /* initial nondigit */
 8014c28:	2300      	movs	r3, #0
 8014c2a:	e055      	b.n	8014cd8 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8014c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014c32:	d301      	bcc.n	8014c38 <ip4addr_aton+0x19c>
        return 0;
 8014c34:	2300      	movs	r3, #0
 8014c36:	e04f      	b.n	8014cd8 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	2bff      	cmp	r3, #255	; 0xff
 8014c3c:	d901      	bls.n	8014c42 <ip4addr_aton+0x1a6>
        return 0;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	e04a      	b.n	8014cd8 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	061b      	lsls	r3, r3, #24
 8014c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c48:	4313      	orrs	r3, r2
 8014c4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014c4c:	e03a      	b.n	8014cc4 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8014c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c54:	d301      	bcc.n	8014c5a <ip4addr_aton+0x1be>
        return 0;
 8014c56:	2300      	movs	r3, #0
 8014c58:	e03e      	b.n	8014cd8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	2bff      	cmp	r3, #255	; 0xff
 8014c5e:	d802      	bhi.n	8014c66 <ip4addr_aton+0x1ca>
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	2bff      	cmp	r3, #255	; 0xff
 8014c64:	d901      	bls.n	8014c6a <ip4addr_aton+0x1ce>
        return 0;
 8014c66:	2300      	movs	r3, #0
 8014c68:	e036      	b.n	8014cd8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	061a      	lsls	r2, r3, #24
 8014c6e:	693b      	ldr	r3, [r7, #16]
 8014c70:	041b      	lsls	r3, r3, #16
 8014c72:	4313      	orrs	r3, r2
 8014c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c76:	4313      	orrs	r3, r2
 8014c78:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014c7a:	e023      	b.n	8014cc4 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8014c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c7e:	2bff      	cmp	r3, #255	; 0xff
 8014c80:	d901      	bls.n	8014c86 <ip4addr_aton+0x1ea>
        return 0;
 8014c82:	2300      	movs	r3, #0
 8014c84:	e028      	b.n	8014cd8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	2bff      	cmp	r3, #255	; 0xff
 8014c8a:	d805      	bhi.n	8014c98 <ip4addr_aton+0x1fc>
 8014c8c:	693b      	ldr	r3, [r7, #16]
 8014c8e:	2bff      	cmp	r3, #255	; 0xff
 8014c90:	d802      	bhi.n	8014c98 <ip4addr_aton+0x1fc>
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	2bff      	cmp	r3, #255	; 0xff
 8014c96:	d901      	bls.n	8014c9c <ip4addr_aton+0x200>
        return 0;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	e01d      	b.n	8014cd8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	061a      	lsls	r2, r3, #24
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	041b      	lsls	r3, r3, #16
 8014ca4:	431a      	orrs	r2, r3
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	021b      	lsls	r3, r3, #8
 8014caa:	4313      	orrs	r3, r2
 8014cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cae:	4313      	orrs	r3, r2
 8014cb0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014cb2:	e007      	b.n	8014cc4 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8014cb4:	4b0b      	ldr	r3, [pc, #44]	; (8014ce4 <ip4addr_aton+0x248>)
 8014cb6:	22f9      	movs	r2, #249	; 0xf9
 8014cb8:	490b      	ldr	r1, [pc, #44]	; (8014ce8 <ip4addr_aton+0x24c>)
 8014cba:	480c      	ldr	r0, [pc, #48]	; (8014cec <ip4addr_aton+0x250>)
 8014cbc:	f00b fc48 	bl	8020550 <iprintf>
      break;
 8014cc0:	e000      	b.n	8014cc4 <ip4addr_aton+0x228>
      break;
 8014cc2:	bf00      	nop
  }
  if (addr) {
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d005      	beq.n	8014cd6 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8014cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ccc:	f7fb ff15 	bl	8010afa <lwip_htonl>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8014cd6:	2301      	movs	r3, #1
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	3728      	adds	r7, #40	; 0x28
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}
 8014ce0:	08025f28 	.word	0x08025f28
 8014ce4:	08022954 	.word	0x08022954
 8014ce8:	08022994 	.word	0x08022994
 8014cec:	080229a0 	.word	0x080229a0

08014cf0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8014cf8:	2210      	movs	r2, #16
 8014cfa:	4904      	ldr	r1, [pc, #16]	; (8014d0c <ip4addr_ntoa+0x1c>)
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f000 f807 	bl	8014d10 <ip4addr_ntoa_r>
 8014d02:	4603      	mov	r3, r0
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3708      	adds	r7, #8
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}
 8014d0c:	2400a0cc 	.word	0x2400a0cc

08014d10 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8014d10:	b480      	push	{r7}
 8014d12:	b08d      	sub	sp, #52	; 0x34
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8014d2a:	f107 0318 	add.w	r3, r7, #24
 8014d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8014d30:	2300      	movs	r3, #0
 8014d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d36:	e058      	b.n	8014dea <ip4addr_ntoa_r+0xda>
    i = 0;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8014d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d40:	781a      	ldrb	r2, [r3, #0]
 8014d42:	4b32      	ldr	r3, [pc, #200]	; (8014e0c <ip4addr_ntoa_r+0xfc>)
 8014d44:	fba3 1302 	umull	r1, r3, r3, r2
 8014d48:	08d9      	lsrs	r1, r3, #3
 8014d4a:	460b      	mov	r3, r1
 8014d4c:	009b      	lsls	r3, r3, #2
 8014d4e:	440b      	add	r3, r1
 8014d50:	005b      	lsls	r3, r3, #1
 8014d52:	1ad3      	subs	r3, r2, r3
 8014d54:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8014d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d58:	781b      	ldrb	r3, [r3, #0]
 8014d5a:	4a2c      	ldr	r2, [pc, #176]	; (8014e0c <ip4addr_ntoa_r+0xfc>)
 8014d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8014d60:	08db      	lsrs	r3, r3, #3
 8014d62:	b2da      	uxtb	r2, r3
 8014d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d66:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8014d68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d6c:	1c5a      	adds	r2, r3, #1
 8014d6e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8014d72:	4619      	mov	r1, r3
 8014d74:	7ffb      	ldrb	r3, [r7, #31]
 8014d76:	3330      	adds	r3, #48	; 0x30
 8014d78:	b2da      	uxtb	r2, r3
 8014d7a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8014d7e:	443b      	add	r3, r7
 8014d80:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8014d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d86:	781b      	ldrb	r3, [r3, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d1d8      	bne.n	8014d3e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8014d8c:	e011      	b.n	8014db2 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8014d8e:	6a3b      	ldr	r3, [r7, #32]
 8014d90:	1c5a      	adds	r2, r3, #1
 8014d92:	623a      	str	r2, [r7, #32]
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	429a      	cmp	r2, r3
 8014d98:	dc01      	bgt.n	8014d9e <ip4addr_ntoa_r+0x8e>
        return NULL;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	e030      	b.n	8014e00 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8014d9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8014da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014da4:	1c59      	adds	r1, r3, #1
 8014da6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8014da8:	3230      	adds	r2, #48	; 0x30
 8014daa:	443a      	add	r2, r7
 8014dac:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8014db0:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8014db2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014db6:	1e5a      	subs	r2, r3, #1
 8014db8:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d1e6      	bne.n	8014d8e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8014dc0:	6a3b      	ldr	r3, [r7, #32]
 8014dc2:	1c5a      	adds	r2, r3, #1
 8014dc4:	623a      	str	r2, [r7, #32]
 8014dc6:	687a      	ldr	r2, [r7, #4]
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	dc01      	bgt.n	8014dd0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8014dcc:	2300      	movs	r3, #0
 8014dce:	e017      	b.n	8014e00 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8014dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dd2:	1c5a      	adds	r2, r3, #1
 8014dd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014dd6:	222e      	movs	r2, #46	; 0x2e
 8014dd8:	701a      	strb	r2, [r3, #0]
    ap++;
 8014dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ddc:	3301      	adds	r3, #1
 8014dde:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8014de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014de4:	3301      	adds	r3, #1
 8014de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dee:	2b03      	cmp	r3, #3
 8014df0:	d9a2      	bls.n	8014d38 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8014df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df4:	3b01      	subs	r3, #1
 8014df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	701a      	strb	r2, [r3, #0]
  return buf;
 8014dfe:	68bb      	ldr	r3, [r7, #8]
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3734      	adds	r7, #52	; 0x34
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr
 8014e0c:	cccccccd 	.word	0xcccccccd

08014e10 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b084      	sub	sp, #16
 8014e14:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014e16:	2300      	movs	r3, #0
 8014e18:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014e1a:	4b12      	ldr	r3, [pc, #72]	; (8014e64 <ip_reass_tmr+0x54>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014e20:	e018      	b.n	8014e54 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	7fdb      	ldrb	r3, [r3, #31]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d00b      	beq.n	8014e42 <ip_reass_tmr+0x32>
      r->timer--;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	7fdb      	ldrb	r3, [r3, #31]
 8014e2e:	3b01      	subs	r3, #1
 8014e30:	b2da      	uxtb	r2, r3
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	60fb      	str	r3, [r7, #12]
 8014e40:	e008      	b.n	8014e54 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014e4c:	68b9      	ldr	r1, [r7, #8]
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f000 f80a 	bl	8014e68 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d1e3      	bne.n	8014e22 <ip_reass_tmr+0x12>
    }
  }
}
 8014e5a:	bf00      	nop
 8014e5c:	bf00      	nop
 8014e5e:	3710      	adds	r7, #16
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	2400a0dc 	.word	0x2400a0dc

08014e68 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b088      	sub	sp, #32
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014e72:	2300      	movs	r3, #0
 8014e74:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014e76:	683a      	ldr	r2, [r7, #0]
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d105      	bne.n	8014e8a <ip_reass_free_complete_datagram+0x22>
 8014e7e:	4b45      	ldr	r3, [pc, #276]	; (8014f94 <ip_reass_free_complete_datagram+0x12c>)
 8014e80:	22ab      	movs	r2, #171	; 0xab
 8014e82:	4945      	ldr	r1, [pc, #276]	; (8014f98 <ip_reass_free_complete_datagram+0x130>)
 8014e84:	4845      	ldr	r0, [pc, #276]	; (8014f9c <ip_reass_free_complete_datagram+0x134>)
 8014e86:	f00b fb63 	bl	8020550 <iprintf>
  if (prev != NULL) {
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d00a      	beq.n	8014ea6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d005      	beq.n	8014ea6 <ip_reass_free_complete_datagram+0x3e>
 8014e9a:	4b3e      	ldr	r3, [pc, #248]	; (8014f94 <ip_reass_free_complete_datagram+0x12c>)
 8014e9c:	22ad      	movs	r2, #173	; 0xad
 8014e9e:	4940      	ldr	r1, [pc, #256]	; (8014fa0 <ip_reass_free_complete_datagram+0x138>)
 8014ea0:	483e      	ldr	r0, [pc, #248]	; (8014f9c <ip_reass_free_complete_datagram+0x134>)
 8014ea2:	f00b fb55 	bl	8020550 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	685b      	ldr	r3, [r3, #4]
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	889b      	ldrh	r3, [r3, #4]
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d12a      	bne.n	8014f0e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	685b      	ldr	r3, [r3, #4]
 8014ebc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014ebe:	697b      	ldr	r3, [r7, #20]
 8014ec0:	681a      	ldr	r2, [r3, #0]
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014ec6:	69bb      	ldr	r3, [r7, #24]
 8014ec8:	6858      	ldr	r0, [r3, #4]
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	3308      	adds	r3, #8
 8014ece:	2214      	movs	r2, #20
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	f00b fa47 	bl	8020364 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014ed6:	2101      	movs	r1, #1
 8014ed8:	69b8      	ldr	r0, [r7, #24]
 8014eda:	f7ff f96d 	bl	80141b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014ede:	69b8      	ldr	r0, [r7, #24]
 8014ee0:	f002 fcd2 	bl	8017888 <pbuf_clen>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014ee8:	8bfa      	ldrh	r2, [r7, #30]
 8014eea:	8a7b      	ldrh	r3, [r7, #18]
 8014eec:	4413      	add	r3, r2
 8014eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ef2:	db05      	blt.n	8014f00 <ip_reass_free_complete_datagram+0x98>
 8014ef4:	4b27      	ldr	r3, [pc, #156]	; (8014f94 <ip_reass_free_complete_datagram+0x12c>)
 8014ef6:	22bc      	movs	r2, #188	; 0xbc
 8014ef8:	492a      	ldr	r1, [pc, #168]	; (8014fa4 <ip_reass_free_complete_datagram+0x13c>)
 8014efa:	4828      	ldr	r0, [pc, #160]	; (8014f9c <ip_reass_free_complete_datagram+0x134>)
 8014efc:	f00b fb28 	bl	8020550 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014f00:	8bfa      	ldrh	r2, [r7, #30]
 8014f02:	8a7b      	ldrh	r3, [r7, #18]
 8014f04:	4413      	add	r3, r2
 8014f06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014f08:	69b8      	ldr	r0, [r7, #24]
 8014f0a:	f002 fc2f 	bl	801776c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014f14:	e01f      	b.n	8014f56 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014f16:	69bb      	ldr	r3, [r7, #24]
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014f1c:	69bb      	ldr	r3, [r7, #24]
 8014f1e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014f26:	68f8      	ldr	r0, [r7, #12]
 8014f28:	f002 fcae 	bl	8017888 <pbuf_clen>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014f30:	8bfa      	ldrh	r2, [r7, #30]
 8014f32:	8a7b      	ldrh	r3, [r7, #18]
 8014f34:	4413      	add	r3, r2
 8014f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f3a:	db05      	blt.n	8014f48 <ip_reass_free_complete_datagram+0xe0>
 8014f3c:	4b15      	ldr	r3, [pc, #84]	; (8014f94 <ip_reass_free_complete_datagram+0x12c>)
 8014f3e:	22cc      	movs	r2, #204	; 0xcc
 8014f40:	4918      	ldr	r1, [pc, #96]	; (8014fa4 <ip_reass_free_complete_datagram+0x13c>)
 8014f42:	4816      	ldr	r0, [pc, #88]	; (8014f9c <ip_reass_free_complete_datagram+0x134>)
 8014f44:	f00b fb04 	bl	8020550 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014f48:	8bfa      	ldrh	r2, [r7, #30]
 8014f4a:	8a7b      	ldrh	r3, [r7, #18]
 8014f4c:	4413      	add	r3, r2
 8014f4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014f50:	68f8      	ldr	r0, [r7, #12]
 8014f52:	f002 fc0b 	bl	801776c <pbuf_free>
  while (p != NULL) {
 8014f56:	69bb      	ldr	r3, [r7, #24]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d1dc      	bne.n	8014f16 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014f5c:	6839      	ldr	r1, [r7, #0]
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f000 f8c2 	bl	80150e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014f64:	4b10      	ldr	r3, [pc, #64]	; (8014fa8 <ip_reass_free_complete_datagram+0x140>)
 8014f66:	881b      	ldrh	r3, [r3, #0]
 8014f68:	8bfa      	ldrh	r2, [r7, #30]
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d905      	bls.n	8014f7a <ip_reass_free_complete_datagram+0x112>
 8014f6e:	4b09      	ldr	r3, [pc, #36]	; (8014f94 <ip_reass_free_complete_datagram+0x12c>)
 8014f70:	22d2      	movs	r2, #210	; 0xd2
 8014f72:	490e      	ldr	r1, [pc, #56]	; (8014fac <ip_reass_free_complete_datagram+0x144>)
 8014f74:	4809      	ldr	r0, [pc, #36]	; (8014f9c <ip_reass_free_complete_datagram+0x134>)
 8014f76:	f00b faeb 	bl	8020550 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014f7a:	4b0b      	ldr	r3, [pc, #44]	; (8014fa8 <ip_reass_free_complete_datagram+0x140>)
 8014f7c:	881a      	ldrh	r2, [r3, #0]
 8014f7e:	8bfb      	ldrh	r3, [r7, #30]
 8014f80:	1ad3      	subs	r3, r2, r3
 8014f82:	b29a      	uxth	r2, r3
 8014f84:	4b08      	ldr	r3, [pc, #32]	; (8014fa8 <ip_reass_free_complete_datagram+0x140>)
 8014f86:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014f88:	8bfb      	ldrh	r3, [r7, #30]
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3720      	adds	r7, #32
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}
 8014f92:	bf00      	nop
 8014f94:	080229c8 	.word	0x080229c8
 8014f98:	08022a08 	.word	0x08022a08
 8014f9c:	08022a14 	.word	0x08022a14
 8014fa0:	08022a3c 	.word	0x08022a3c
 8014fa4:	08022a50 	.word	0x08022a50
 8014fa8:	2400a0e0 	.word	0x2400a0e0
 8014fac:	08022a70 	.word	0x08022a70

08014fb0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b08a      	sub	sp, #40	; 0x28
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014fce:	4b28      	ldr	r3, [pc, #160]	; (8015070 <ip_reass_remove_oldest_datagram+0xc0>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014fd4:	e030      	b.n	8015038 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd8:	695a      	ldr	r2, [r3, #20]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	68db      	ldr	r3, [r3, #12]
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d10c      	bne.n	8014ffc <ip_reass_remove_oldest_datagram+0x4c>
 8014fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe4:	699a      	ldr	r2, [r3, #24]
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	691b      	ldr	r3, [r3, #16]
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d106      	bne.n	8014ffc <ip_reass_remove_oldest_datagram+0x4c>
 8014fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff0:	899a      	ldrh	r2, [r3, #12]
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	889b      	ldrh	r3, [r3, #4]
 8014ff6:	b29b      	uxth	r3, r3
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d014      	beq.n	8015026 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	3301      	adds	r3, #1
 8015000:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015002:	6a3b      	ldr	r3, [r7, #32]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d104      	bne.n	8015012 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801500a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801500c:	69fb      	ldr	r3, [r7, #28]
 801500e:	61bb      	str	r3, [r7, #24]
 8015010:	e009      	b.n	8015026 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015014:	7fda      	ldrb	r2, [r3, #31]
 8015016:	6a3b      	ldr	r3, [r7, #32]
 8015018:	7fdb      	ldrb	r3, [r3, #31]
 801501a:	429a      	cmp	r2, r3
 801501c:	d803      	bhi.n	8015026 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015020:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015022:	69fb      	ldr	r3, [r7, #28]
 8015024:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d001      	beq.n	8015032 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015030:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503a:	2b00      	cmp	r3, #0
 801503c:	d1cb      	bne.n	8014fd6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801503e:	6a3b      	ldr	r3, [r7, #32]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d008      	beq.n	8015056 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015044:	69b9      	ldr	r1, [r7, #24]
 8015046:	6a38      	ldr	r0, [r7, #32]
 8015048:	f7ff ff0e 	bl	8014e68 <ip_reass_free_complete_datagram>
 801504c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801504e:	697a      	ldr	r2, [r7, #20]
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	4413      	add	r3, r2
 8015054:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015056:	697a      	ldr	r2, [r7, #20]
 8015058:	683b      	ldr	r3, [r7, #0]
 801505a:	429a      	cmp	r2, r3
 801505c:	da02      	bge.n	8015064 <ip_reass_remove_oldest_datagram+0xb4>
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	2b01      	cmp	r3, #1
 8015062:	dcac      	bgt.n	8014fbe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015064:	697b      	ldr	r3, [r7, #20]
}
 8015066:	4618      	mov	r0, r3
 8015068:	3728      	adds	r7, #40	; 0x28
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	2400a0dc 	.word	0x2400a0dc

08015074 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801507e:	2004      	movs	r0, #4
 8015080:	f001 f992 	bl	80163a8 <memp_malloc>
 8015084:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d110      	bne.n	80150ae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801508c:	6839      	ldr	r1, [r7, #0]
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f7ff ff8e 	bl	8014fb0 <ip_reass_remove_oldest_datagram>
 8015094:	4602      	mov	r2, r0
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	4293      	cmp	r3, r2
 801509a:	dc03      	bgt.n	80150a4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801509c:	2004      	movs	r0, #4
 801509e:	f001 f983 	bl	80163a8 <memp_malloc>
 80150a2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d101      	bne.n	80150ae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80150aa:	2300      	movs	r3, #0
 80150ac:	e016      	b.n	80150dc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80150ae:	2220      	movs	r2, #32
 80150b0:	2100      	movs	r1, #0
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	f00b f964 	bl	8020380 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	220f      	movs	r2, #15
 80150bc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80150be:	4b09      	ldr	r3, [pc, #36]	; (80150e4 <ip_reass_enqueue_new_datagram+0x70>)
 80150c0:	681a      	ldr	r2, [r3, #0]
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80150c6:	4a07      	ldr	r2, [pc, #28]	; (80150e4 <ip_reass_enqueue_new_datagram+0x70>)
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	3308      	adds	r3, #8
 80150d0:	2214      	movs	r2, #20
 80150d2:	6879      	ldr	r1, [r7, #4]
 80150d4:	4618      	mov	r0, r3
 80150d6:	f00b f945 	bl	8020364 <memcpy>
  return ipr;
 80150da:	68fb      	ldr	r3, [r7, #12]
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3710      	adds	r7, #16
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}
 80150e4:	2400a0dc 	.word	0x2400a0dc

080150e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b082      	sub	sp, #8
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80150f2:	4b10      	ldr	r3, [pc, #64]	; (8015134 <ip_reass_dequeue_datagram+0x4c>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d104      	bne.n	8015106 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	4a0c      	ldr	r2, [pc, #48]	; (8015134 <ip_reass_dequeue_datagram+0x4c>)
 8015102:	6013      	str	r3, [r2, #0]
 8015104:	e00d      	b.n	8015122 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d106      	bne.n	801511a <ip_reass_dequeue_datagram+0x32>
 801510c:	4b0a      	ldr	r3, [pc, #40]	; (8015138 <ip_reass_dequeue_datagram+0x50>)
 801510e:	f240 1245 	movw	r2, #325	; 0x145
 8015112:	490a      	ldr	r1, [pc, #40]	; (801513c <ip_reass_dequeue_datagram+0x54>)
 8015114:	480a      	ldr	r0, [pc, #40]	; (8015140 <ip_reass_dequeue_datagram+0x58>)
 8015116:	f00b fa1b 	bl	8020550 <iprintf>
    prev->next = ipr->next;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681a      	ldr	r2, [r3, #0]
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015122:	6879      	ldr	r1, [r7, #4]
 8015124:	2004      	movs	r0, #4
 8015126:	f001 f9b5 	bl	8016494 <memp_free>
}
 801512a:	bf00      	nop
 801512c:	3708      	adds	r7, #8
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}
 8015132:	bf00      	nop
 8015134:	2400a0dc 	.word	0x2400a0dc
 8015138:	080229c8 	.word	0x080229c8
 801513c:	08022a94 	.word	0x08022a94
 8015140:	08022a14 	.word	0x08022a14

08015144 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b08c      	sub	sp, #48	; 0x30
 8015148:	af00      	add	r7, sp, #0
 801514a:	60f8      	str	r0, [r7, #12]
 801514c:	60b9      	str	r1, [r7, #8]
 801514e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015150:	2300      	movs	r3, #0
 8015152:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015154:	2301      	movs	r3, #1
 8015156:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801515e:	69fb      	ldr	r3, [r7, #28]
 8015160:	885b      	ldrh	r3, [r3, #2]
 8015162:	b29b      	uxth	r3, r3
 8015164:	4618      	mov	r0, r3
 8015166:	f7fb fcb3 	bl	8010ad0 <lwip_htons>
 801516a:	4603      	mov	r3, r0
 801516c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801516e:	69fb      	ldr	r3, [r7, #28]
 8015170:	781b      	ldrb	r3, [r3, #0]
 8015172:	f003 030f 	and.w	r3, r3, #15
 8015176:	b2db      	uxtb	r3, r3
 8015178:	009b      	lsls	r3, r3, #2
 801517a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801517c:	7e7b      	ldrb	r3, [r7, #25]
 801517e:	b29b      	uxth	r3, r3
 8015180:	8b7a      	ldrh	r2, [r7, #26]
 8015182:	429a      	cmp	r2, r3
 8015184:	d202      	bcs.n	801518c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015186:	f04f 33ff 	mov.w	r3, #4294967295
 801518a:	e135      	b.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801518c:	7e7b      	ldrb	r3, [r7, #25]
 801518e:	b29b      	uxth	r3, r3
 8015190:	8b7a      	ldrh	r2, [r7, #26]
 8015192:	1ad3      	subs	r3, r2, r3
 8015194:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	88db      	ldrh	r3, [r3, #6]
 801519a:	b29b      	uxth	r3, r3
 801519c:	4618      	mov	r0, r3
 801519e:	f7fb fc97 	bl	8010ad0 <lwip_htons>
 80151a2:	4603      	mov	r3, r0
 80151a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	00db      	lsls	r3, r3, #3
 80151ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	685b      	ldr	r3, [r3, #4]
 80151b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80151b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151b6:	2200      	movs	r2, #0
 80151b8:	701a      	strb	r2, [r3, #0]
 80151ba:	2200      	movs	r2, #0
 80151bc:	705a      	strb	r2, [r3, #1]
 80151be:	2200      	movs	r2, #0
 80151c0:	709a      	strb	r2, [r3, #2]
 80151c2:	2200      	movs	r2, #0
 80151c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80151c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151c8:	8afa      	ldrh	r2, [r7, #22]
 80151ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80151cc:	8afa      	ldrh	r2, [r7, #22]
 80151ce:	8b7b      	ldrh	r3, [r7, #26]
 80151d0:	4413      	add	r3, r2
 80151d2:	b29a      	uxth	r2, r3
 80151d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80151d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151da:	88db      	ldrh	r3, [r3, #6]
 80151dc:	b29b      	uxth	r3, r3
 80151de:	8afa      	ldrh	r2, [r7, #22]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d902      	bls.n	80151ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80151e4:	f04f 33ff 	mov.w	r3, #4294967295
 80151e8:	e106      	b.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	627b      	str	r3, [r7, #36]	; 0x24
 80151f0:	e068      	b.n	80152c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80151f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80151f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151fa:	889b      	ldrh	r3, [r3, #4]
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	889b      	ldrh	r3, [r3, #4]
 8015202:	b29b      	uxth	r3, r3
 8015204:	429a      	cmp	r2, r3
 8015206:	d235      	bcs.n	8015274 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801520c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015210:	2b00      	cmp	r3, #0
 8015212:	d020      	beq.n	8015256 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015216:	889b      	ldrh	r3, [r3, #4]
 8015218:	b29a      	uxth	r2, r3
 801521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801521c:	88db      	ldrh	r3, [r3, #6]
 801521e:	b29b      	uxth	r3, r3
 8015220:	429a      	cmp	r2, r3
 8015222:	d307      	bcc.n	8015234 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015226:	88db      	ldrh	r3, [r3, #6]
 8015228:	b29a      	uxth	r2, r3
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	889b      	ldrh	r3, [r3, #4]
 801522e:	b29b      	uxth	r3, r3
 8015230:	429a      	cmp	r2, r3
 8015232:	d902      	bls.n	801523a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015234:	f04f 33ff 	mov.w	r3, #4294967295
 8015238:	e0de      	b.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523c:	68ba      	ldr	r2, [r7, #8]
 801523e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015242:	88db      	ldrh	r3, [r3, #6]
 8015244:	b29a      	uxth	r2, r3
 8015246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015248:	889b      	ldrh	r3, [r3, #4]
 801524a:	b29b      	uxth	r3, r3
 801524c:	429a      	cmp	r2, r3
 801524e:	d03d      	beq.n	80152cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015250:	2300      	movs	r3, #0
 8015252:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015254:	e03a      	b.n	80152cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015258:	88db      	ldrh	r3, [r3, #6]
 801525a:	b29a      	uxth	r2, r3
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	889b      	ldrh	r3, [r3, #4]
 8015260:	b29b      	uxth	r3, r3
 8015262:	429a      	cmp	r2, r3
 8015264:	d902      	bls.n	801526c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015266:	f04f 33ff 	mov.w	r3, #4294967295
 801526a:	e0c5      	b.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	68ba      	ldr	r2, [r7, #8]
 8015270:	605a      	str	r2, [r3, #4]
      break;
 8015272:	e02b      	b.n	80152cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015276:	889b      	ldrh	r3, [r3, #4]
 8015278:	b29a      	uxth	r2, r3
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	889b      	ldrh	r3, [r3, #4]
 801527e:	b29b      	uxth	r3, r3
 8015280:	429a      	cmp	r2, r3
 8015282:	d102      	bne.n	801528a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015284:	f04f 33ff 	mov.w	r3, #4294967295
 8015288:	e0b6      	b.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801528c:	889b      	ldrh	r3, [r3, #4]
 801528e:	b29a      	uxth	r2, r3
 8015290:	693b      	ldr	r3, [r7, #16]
 8015292:	88db      	ldrh	r3, [r3, #6]
 8015294:	b29b      	uxth	r3, r3
 8015296:	429a      	cmp	r2, r3
 8015298:	d202      	bcs.n	80152a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801529a:	f04f 33ff 	mov.w	r3, #4294967295
 801529e:	e0ab      	b.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80152a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d009      	beq.n	80152ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80152a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a8:	88db      	ldrh	r3, [r3, #6]
 80152aa:	b29a      	uxth	r2, r3
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	889b      	ldrh	r3, [r3, #4]
 80152b0:	b29b      	uxth	r3, r3
 80152b2:	429a      	cmp	r2, r3
 80152b4:	d001      	beq.n	80152ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80152b6:	2300      	movs	r3, #0
 80152b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80152c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d193      	bne.n	80151f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80152ca:	e000      	b.n	80152ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80152cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80152ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d12d      	bne.n	8015330 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80152d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d01c      	beq.n	8015314 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80152da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152dc:	88db      	ldrh	r3, [r3, #6]
 80152de:	b29a      	uxth	r2, r3
 80152e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e2:	889b      	ldrh	r3, [r3, #4]
 80152e4:	b29b      	uxth	r3, r3
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d906      	bls.n	80152f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80152ea:	4b45      	ldr	r3, [pc, #276]	; (8015400 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152ec:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80152f0:	4944      	ldr	r1, [pc, #272]	; (8015404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80152f2:	4845      	ldr	r0, [pc, #276]	; (8015408 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152f4:	f00b f92c 	bl	8020550 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80152f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152fa:	68ba      	ldr	r2, [r7, #8]
 80152fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80152fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015300:	88db      	ldrh	r3, [r3, #6]
 8015302:	b29a      	uxth	r2, r3
 8015304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015306:	889b      	ldrh	r3, [r3, #4]
 8015308:	b29b      	uxth	r3, r3
 801530a:	429a      	cmp	r2, r3
 801530c:	d010      	beq.n	8015330 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801530e:	2300      	movs	r3, #0
 8015310:	623b      	str	r3, [r7, #32]
 8015312:	e00d      	b.n	8015330 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	685b      	ldr	r3, [r3, #4]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d006      	beq.n	801532a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801531c:	4b38      	ldr	r3, [pc, #224]	; (8015400 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801531e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015322:	493a      	ldr	r1, [pc, #232]	; (801540c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015324:	4838      	ldr	r0, [pc, #224]	; (8015408 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015326:	f00b f913 	bl	8020550 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	68ba      	ldr	r2, [r7, #8]
 801532e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d105      	bne.n	8015342 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	7f9b      	ldrb	r3, [r3, #30]
 801533a:	f003 0301 	and.w	r3, r3, #1
 801533e:	2b00      	cmp	r3, #0
 8015340:	d059      	beq.n	80153f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015342:	6a3b      	ldr	r3, [r7, #32]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d04f      	beq.n	80153e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d006      	beq.n	801535e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	685b      	ldr	r3, [r3, #4]
 8015354:	685b      	ldr	r3, [r3, #4]
 8015356:	889b      	ldrh	r3, [r3, #4]
 8015358:	b29b      	uxth	r3, r3
 801535a:	2b00      	cmp	r3, #0
 801535c:	d002      	beq.n	8015364 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801535e:	2300      	movs	r3, #0
 8015360:	623b      	str	r3, [r7, #32]
 8015362:	e041      	b.n	80153e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015366:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801536e:	e012      	b.n	8015396 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015372:	685b      	ldr	r3, [r3, #4]
 8015374:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015378:	88db      	ldrh	r3, [r3, #6]
 801537a:	b29a      	uxth	r2, r3
 801537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801537e:	889b      	ldrh	r3, [r3, #4]
 8015380:	b29b      	uxth	r3, r3
 8015382:	429a      	cmp	r2, r3
 8015384:	d002      	beq.n	801538c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015386:	2300      	movs	r3, #0
 8015388:	623b      	str	r3, [r7, #32]
            break;
 801538a:	e007      	b.n	801539c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801538e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015398:	2b00      	cmp	r3, #0
 801539a:	d1e9      	bne.n	8015370 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801539c:	6a3b      	ldr	r3, [r7, #32]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d022      	beq.n	80153e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	685b      	ldr	r3, [r3, #4]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d106      	bne.n	80153b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80153aa:	4b15      	ldr	r3, [pc, #84]	; (8015400 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153ac:	f240 12df 	movw	r2, #479	; 0x1df
 80153b0:	4917      	ldr	r1, [pc, #92]	; (8015410 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80153b2:	4815      	ldr	r0, [pc, #84]	; (8015408 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153b4:	f00b f8cc 	bl	8020550 <iprintf>
          LWIP_ASSERT("sanity check",
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d106      	bne.n	80153d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80153c4:	4b0e      	ldr	r3, [pc, #56]	; (8015400 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80153ca:	4911      	ldr	r1, [pc, #68]	; (8015410 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80153cc:	480e      	ldr	r0, [pc, #56]	; (8015408 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153ce:	f00b f8bf 	bl	8020550 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80153d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d006      	beq.n	80153e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80153da:	4b09      	ldr	r3, [pc, #36]	; (8015400 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153dc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80153e0:	490c      	ldr	r1, [pc, #48]	; (8015414 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80153e2:	4809      	ldr	r0, [pc, #36]	; (8015408 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153e4:	f00b f8b4 	bl	8020550 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80153e8:	6a3b      	ldr	r3, [r7, #32]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	bf14      	ite	ne
 80153ee:	2301      	movne	r3, #1
 80153f0:	2300      	moveq	r3, #0
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	e000      	b.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80153f6:	2300      	movs	r3, #0
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3730      	adds	r7, #48	; 0x30
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	080229c8 	.word	0x080229c8
 8015404:	08022ab0 	.word	0x08022ab0
 8015408:	08022a14 	.word	0x08022a14
 801540c:	08022ad0 	.word	0x08022ad0
 8015410:	08022b08 	.word	0x08022b08
 8015414:	08022b18 	.word	0x08022b18

08015418 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b08e      	sub	sp, #56	; 0x38
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015428:	781b      	ldrb	r3, [r3, #0]
 801542a:	f003 030f 	and.w	r3, r3, #15
 801542e:	b2db      	uxtb	r3, r3
 8015430:	009b      	lsls	r3, r3, #2
 8015432:	b2db      	uxtb	r3, r3
 8015434:	2b14      	cmp	r3, #20
 8015436:	f040 8171 	bne.w	801571c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801543c:	88db      	ldrh	r3, [r3, #6]
 801543e:	b29b      	uxth	r3, r3
 8015440:	4618      	mov	r0, r3
 8015442:	f7fb fb45 	bl	8010ad0 <lwip_htons>
 8015446:	4603      	mov	r3, r0
 8015448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801544c:	b29b      	uxth	r3, r3
 801544e:	00db      	lsls	r3, r3, #3
 8015450:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015454:	885b      	ldrh	r3, [r3, #2]
 8015456:	b29b      	uxth	r3, r3
 8015458:	4618      	mov	r0, r3
 801545a:	f7fb fb39 	bl	8010ad0 <lwip_htons>
 801545e:	4603      	mov	r3, r0
 8015460:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015464:	781b      	ldrb	r3, [r3, #0]
 8015466:	f003 030f 	and.w	r3, r3, #15
 801546a:	b2db      	uxtb	r3, r3
 801546c:	009b      	lsls	r3, r3, #2
 801546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015476:	b29b      	uxth	r3, r3
 8015478:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801547a:	429a      	cmp	r2, r3
 801547c:	f0c0 8150 	bcc.w	8015720 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015484:	b29b      	uxth	r3, r3
 8015486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015488:	1ad3      	subs	r3, r2, r3
 801548a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f002 f9fb 	bl	8017888 <pbuf_clen>
 8015492:	4603      	mov	r3, r0
 8015494:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015496:	4b8c      	ldr	r3, [pc, #560]	; (80156c8 <ip4_reass+0x2b0>)
 8015498:	881b      	ldrh	r3, [r3, #0]
 801549a:	461a      	mov	r2, r3
 801549c:	8c3b      	ldrh	r3, [r7, #32]
 801549e:	4413      	add	r3, r2
 80154a0:	2b0a      	cmp	r3, #10
 80154a2:	dd10      	ble.n	80154c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80154a4:	8c3b      	ldrh	r3, [r7, #32]
 80154a6:	4619      	mov	r1, r3
 80154a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154aa:	f7ff fd81 	bl	8014fb0 <ip_reass_remove_oldest_datagram>
 80154ae:	4603      	mov	r3, r0
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	f000 8137 	beq.w	8015724 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80154b6:	4b84      	ldr	r3, [pc, #528]	; (80156c8 <ip4_reass+0x2b0>)
 80154b8:	881b      	ldrh	r3, [r3, #0]
 80154ba:	461a      	mov	r2, r3
 80154bc:	8c3b      	ldrh	r3, [r7, #32]
 80154be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80154c0:	2b0a      	cmp	r3, #10
 80154c2:	f300 812f 	bgt.w	8015724 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80154c6:	4b81      	ldr	r3, [pc, #516]	; (80156cc <ip4_reass+0x2b4>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	633b      	str	r3, [r7, #48]	; 0x30
 80154cc:	e015      	b.n	80154fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80154ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d0:	695a      	ldr	r2, [r3, #20]
 80154d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d4:	68db      	ldr	r3, [r3, #12]
 80154d6:	429a      	cmp	r2, r3
 80154d8:	d10c      	bne.n	80154f4 <ip4_reass+0xdc>
 80154da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154dc:	699a      	ldr	r2, [r3, #24]
 80154de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e0:	691b      	ldr	r3, [r3, #16]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d106      	bne.n	80154f4 <ip4_reass+0xdc>
 80154e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e8:	899a      	ldrh	r2, [r3, #12]
 80154ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ec:	889b      	ldrh	r3, [r3, #4]
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d006      	beq.n	8015502 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80154f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	633b      	str	r3, [r7, #48]	; 0x30
 80154fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d1e6      	bne.n	80154ce <ip4_reass+0xb6>
 8015500:	e000      	b.n	8015504 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015502:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015506:	2b00      	cmp	r3, #0
 8015508:	d109      	bne.n	801551e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801550a:	8c3b      	ldrh	r3, [r7, #32]
 801550c:	4619      	mov	r1, r3
 801550e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015510:	f7ff fdb0 	bl	8015074 <ip_reass_enqueue_new_datagram>
 8015514:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015518:	2b00      	cmp	r3, #0
 801551a:	d11c      	bne.n	8015556 <ip4_reass+0x13e>
      goto nullreturn;
 801551c:	e105      	b.n	801572a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015520:	88db      	ldrh	r3, [r3, #6]
 8015522:	b29b      	uxth	r3, r3
 8015524:	4618      	mov	r0, r3
 8015526:	f7fb fad3 	bl	8010ad0 <lwip_htons>
 801552a:	4603      	mov	r3, r0
 801552c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015530:	2b00      	cmp	r3, #0
 8015532:	d110      	bne.n	8015556 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015536:	89db      	ldrh	r3, [r3, #14]
 8015538:	4618      	mov	r0, r3
 801553a:	f7fb fac9 	bl	8010ad0 <lwip_htons>
 801553e:	4603      	mov	r3, r0
 8015540:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015544:	2b00      	cmp	r3, #0
 8015546:	d006      	beq.n	8015556 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801554a:	3308      	adds	r3, #8
 801554c:	2214      	movs	r2, #20
 801554e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015550:	4618      	mov	r0, r3
 8015552:	f00a ff07 	bl	8020364 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015558:	88db      	ldrh	r3, [r3, #6]
 801555a:	b29b      	uxth	r3, r3
 801555c:	f003 0320 	and.w	r3, r3, #32
 8015560:	2b00      	cmp	r3, #0
 8015562:	bf0c      	ite	eq
 8015564:	2301      	moveq	r3, #1
 8015566:	2300      	movne	r3, #0
 8015568:	b2db      	uxtb	r3, r3
 801556a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d00e      	beq.n	8015590 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015572:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015576:	4413      	add	r3, r2
 8015578:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801557a:	8b7a      	ldrh	r2, [r7, #26]
 801557c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801557e:	429a      	cmp	r2, r3
 8015580:	f0c0 80a0 	bcc.w	80156c4 <ip4_reass+0x2ac>
 8015584:	8b7b      	ldrh	r3, [r7, #26]
 8015586:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801558a:	4293      	cmp	r3, r2
 801558c:	f200 809a 	bhi.w	80156c4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015590:	69fa      	ldr	r2, [r7, #28]
 8015592:	6879      	ldr	r1, [r7, #4]
 8015594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015596:	f7ff fdd5 	bl	8015144 <ip_reass_chain_frag_into_datagram_and_validate>
 801559a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155a2:	f000 809b 	beq.w	80156dc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80155a6:	4b48      	ldr	r3, [pc, #288]	; (80156c8 <ip4_reass+0x2b0>)
 80155a8:	881a      	ldrh	r2, [r3, #0]
 80155aa:	8c3b      	ldrh	r3, [r7, #32]
 80155ac:	4413      	add	r3, r2
 80155ae:	b29a      	uxth	r2, r3
 80155b0:	4b45      	ldr	r3, [pc, #276]	; (80156c8 <ip4_reass+0x2b0>)
 80155b2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d00d      	beq.n	80155d6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80155ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80155bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155be:	4413      	add	r3, r2
 80155c0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80155c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c4:	8a7a      	ldrh	r2, [r7, #18]
 80155c6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80155c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ca:	7f9b      	ldrb	r3, [r3, #30]
 80155cc:	f043 0301 	orr.w	r3, r3, #1
 80155d0:	b2da      	uxtb	r2, r3
 80155d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	2b01      	cmp	r3, #1
 80155da:	d171      	bne.n	80156c0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80155dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155de:	8b9b      	ldrh	r3, [r3, #28]
 80155e0:	3314      	adds	r3, #20
 80155e2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80155e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80155ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155f0:	685b      	ldr	r3, [r3, #4]
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80155f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155f8:	3308      	adds	r3, #8
 80155fa:	2214      	movs	r2, #20
 80155fc:	4619      	mov	r1, r3
 80155fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015600:	f00a feb0 	bl	8020364 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015604:	8a3b      	ldrh	r3, [r7, #16]
 8015606:	4618      	mov	r0, r3
 8015608:	f7fb fa62 	bl	8010ad0 <lwip_htons>
 801560c:	4603      	mov	r3, r0
 801560e:	461a      	mov	r2, r3
 8015610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015612:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015616:	2200      	movs	r2, #0
 8015618:	719a      	strb	r2, [r3, #6]
 801561a:	2200      	movs	r2, #0
 801561c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015620:	2200      	movs	r2, #0
 8015622:	729a      	strb	r2, [r3, #10]
 8015624:	2200      	movs	r2, #0
 8015626:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801562a:	685b      	ldr	r3, [r3, #4]
 801562c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801562e:	e00d      	b.n	801564c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015632:	685b      	ldr	r3, [r3, #4]
 8015634:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015636:	2114      	movs	r1, #20
 8015638:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801563a:	f002 f811 	bl	8017660 <pbuf_remove_header>
      pbuf_cat(p, r);
 801563e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f002 f961 	bl	8017908 <pbuf_cat>
      r = iprh->next_pbuf;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801564e:	2b00      	cmp	r3, #0
 8015650:	d1ee      	bne.n	8015630 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015652:	4b1e      	ldr	r3, [pc, #120]	; (80156cc <ip4_reass+0x2b4>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015658:	429a      	cmp	r2, r3
 801565a:	d102      	bne.n	8015662 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801565c:	2300      	movs	r3, #0
 801565e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015660:	e010      	b.n	8015684 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015662:	4b1a      	ldr	r3, [pc, #104]	; (80156cc <ip4_reass+0x2b4>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015668:	e007      	b.n	801567a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015670:	429a      	cmp	r2, r3
 8015672:	d006      	beq.n	8015682 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	62fb      	str	r3, [r7, #44]	; 0x2c
 801567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567c:	2b00      	cmp	r3, #0
 801567e:	d1f4      	bne.n	801566a <ip4_reass+0x252>
 8015680:	e000      	b.n	8015684 <ip4_reass+0x26c>
          break;
 8015682:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015688:	f7ff fd2e 	bl	80150e8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f002 f8fb 	bl	8017888 <pbuf_clen>
 8015692:	4603      	mov	r3, r0
 8015694:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015696:	4b0c      	ldr	r3, [pc, #48]	; (80156c8 <ip4_reass+0x2b0>)
 8015698:	881b      	ldrh	r3, [r3, #0]
 801569a:	8c3a      	ldrh	r2, [r7, #32]
 801569c:	429a      	cmp	r2, r3
 801569e:	d906      	bls.n	80156ae <ip4_reass+0x296>
 80156a0:	4b0b      	ldr	r3, [pc, #44]	; (80156d0 <ip4_reass+0x2b8>)
 80156a2:	f240 229b 	movw	r2, #667	; 0x29b
 80156a6:	490b      	ldr	r1, [pc, #44]	; (80156d4 <ip4_reass+0x2bc>)
 80156a8:	480b      	ldr	r0, [pc, #44]	; (80156d8 <ip4_reass+0x2c0>)
 80156aa:	f00a ff51 	bl	8020550 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80156ae:	4b06      	ldr	r3, [pc, #24]	; (80156c8 <ip4_reass+0x2b0>)
 80156b0:	881a      	ldrh	r2, [r3, #0]
 80156b2:	8c3b      	ldrh	r3, [r7, #32]
 80156b4:	1ad3      	subs	r3, r2, r3
 80156b6:	b29a      	uxth	r2, r3
 80156b8:	4b03      	ldr	r3, [pc, #12]	; (80156c8 <ip4_reass+0x2b0>)
 80156ba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	e038      	b.n	8015732 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80156c0:	2300      	movs	r3, #0
 80156c2:	e036      	b.n	8015732 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80156c4:	bf00      	nop
 80156c6:	e00a      	b.n	80156de <ip4_reass+0x2c6>
 80156c8:	2400a0e0 	.word	0x2400a0e0
 80156cc:	2400a0dc 	.word	0x2400a0dc
 80156d0:	080229c8 	.word	0x080229c8
 80156d4:	08022b3c 	.word	0x08022b3c
 80156d8:	08022a14 	.word	0x08022a14
    goto nullreturn_ipr;
 80156dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80156de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d106      	bne.n	80156f2 <ip4_reass+0x2da>
 80156e4:	4b15      	ldr	r3, [pc, #84]	; (801573c <ip4_reass+0x324>)
 80156e6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80156ea:	4915      	ldr	r1, [pc, #84]	; (8015740 <ip4_reass+0x328>)
 80156ec:	4815      	ldr	r0, [pc, #84]	; (8015744 <ip4_reass+0x32c>)
 80156ee:	f00a ff2f 	bl	8020550 <iprintf>
  if (ipr->p == NULL) {
 80156f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f4:	685b      	ldr	r3, [r3, #4]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d116      	bne.n	8015728 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80156fa:	4b13      	ldr	r3, [pc, #76]	; (8015748 <ip4_reass+0x330>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015700:	429a      	cmp	r2, r3
 8015702:	d006      	beq.n	8015712 <ip4_reass+0x2fa>
 8015704:	4b0d      	ldr	r3, [pc, #52]	; (801573c <ip4_reass+0x324>)
 8015706:	f240 22ab 	movw	r2, #683	; 0x2ab
 801570a:	4910      	ldr	r1, [pc, #64]	; (801574c <ip4_reass+0x334>)
 801570c:	480d      	ldr	r0, [pc, #52]	; (8015744 <ip4_reass+0x32c>)
 801570e:	f00a ff1f 	bl	8020550 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015712:	2100      	movs	r1, #0
 8015714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015716:	f7ff fce7 	bl	80150e8 <ip_reass_dequeue_datagram>
 801571a:	e006      	b.n	801572a <ip4_reass+0x312>
    goto nullreturn;
 801571c:	bf00      	nop
 801571e:	e004      	b.n	801572a <ip4_reass+0x312>
    goto nullreturn;
 8015720:	bf00      	nop
 8015722:	e002      	b.n	801572a <ip4_reass+0x312>
      goto nullreturn;
 8015724:	bf00      	nop
 8015726:	e000      	b.n	801572a <ip4_reass+0x312>
  }

nullreturn:
 8015728:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f002 f81e 	bl	801776c <pbuf_free>
  return NULL;
 8015730:	2300      	movs	r3, #0
}
 8015732:	4618      	mov	r0, r3
 8015734:	3738      	adds	r7, #56	; 0x38
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	080229c8 	.word	0x080229c8
 8015740:	08022b58 	.word	0x08022b58
 8015744:	08022a14 	.word	0x08022a14
 8015748:	2400a0dc 	.word	0x2400a0dc
 801574c:	08022b64 	.word	0x08022b64

08015750 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015754:	2005      	movs	r0, #5
 8015756:	f000 fe27 	bl	80163a8 <memp_malloc>
 801575a:	4603      	mov	r3, r0
}
 801575c:	4618      	mov	r0, r3
 801575e:	bd80      	pop	{r7, pc}

08015760 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d106      	bne.n	801577c <ip_frag_free_pbuf_custom_ref+0x1c>
 801576e:	4b07      	ldr	r3, [pc, #28]	; (801578c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015770:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015774:	4906      	ldr	r1, [pc, #24]	; (8015790 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015776:	4807      	ldr	r0, [pc, #28]	; (8015794 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015778:	f00a feea 	bl	8020550 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801577c:	6879      	ldr	r1, [r7, #4]
 801577e:	2005      	movs	r0, #5
 8015780:	f000 fe88 	bl	8016494 <memp_free>
}
 8015784:	bf00      	nop
 8015786:	3708      	adds	r7, #8
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}
 801578c:	080229c8 	.word	0x080229c8
 8015790:	08022b84 	.word	0x08022b84
 8015794:	08022a14 	.word	0x08022a14

08015798 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b084      	sub	sp, #16
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d106      	bne.n	80157b8 <ipfrag_free_pbuf_custom+0x20>
 80157aa:	4b11      	ldr	r3, [pc, #68]	; (80157f0 <ipfrag_free_pbuf_custom+0x58>)
 80157ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 80157b0:	4910      	ldr	r1, [pc, #64]	; (80157f4 <ipfrag_free_pbuf_custom+0x5c>)
 80157b2:	4811      	ldr	r0, [pc, #68]	; (80157f8 <ipfrag_free_pbuf_custom+0x60>)
 80157b4:	f00a fecc 	bl	8020550 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80157b8:	68fa      	ldr	r2, [r7, #12]
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	429a      	cmp	r2, r3
 80157be:	d006      	beq.n	80157ce <ipfrag_free_pbuf_custom+0x36>
 80157c0:	4b0b      	ldr	r3, [pc, #44]	; (80157f0 <ipfrag_free_pbuf_custom+0x58>)
 80157c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80157c6:	490d      	ldr	r1, [pc, #52]	; (80157fc <ipfrag_free_pbuf_custom+0x64>)
 80157c8:	480b      	ldr	r0, [pc, #44]	; (80157f8 <ipfrag_free_pbuf_custom+0x60>)
 80157ca:	f00a fec1 	bl	8020550 <iprintf>
  if (pcr->original != NULL) {
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	695b      	ldr	r3, [r3, #20]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d004      	beq.n	80157e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	695b      	ldr	r3, [r3, #20]
 80157da:	4618      	mov	r0, r3
 80157dc:	f001 ffc6 	bl	801776c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80157e0:	68f8      	ldr	r0, [r7, #12]
 80157e2:	f7ff ffbd 	bl	8015760 <ip_frag_free_pbuf_custom_ref>
}
 80157e6:	bf00      	nop
 80157e8:	3710      	adds	r7, #16
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
 80157ee:	bf00      	nop
 80157f0:	080229c8 	.word	0x080229c8
 80157f4:	08022b90 	.word	0x08022b90
 80157f8:	08022a14 	.word	0x08022a14
 80157fc:	08022b9c 	.word	0x08022b9c

08015800 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b094      	sub	sp, #80	; 0x50
 8015804:	af02      	add	r7, sp, #8
 8015806:	60f8      	str	r0, [r7, #12]
 8015808:	60b9      	str	r1, [r7, #8]
 801580a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801580c:	2300      	movs	r3, #0
 801580e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8015816:	3b14      	subs	r3, #20
 8015818:	2b00      	cmp	r3, #0
 801581a:	da00      	bge.n	801581e <ip4_frag+0x1e>
 801581c:	3307      	adds	r3, #7
 801581e:	10db      	asrs	r3, r3, #3
 8015820:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015822:	2314      	movs	r3, #20
 8015824:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	685b      	ldr	r3, [r3, #4]
 801582a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801582e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	f003 030f 	and.w	r3, r3, #15
 8015838:	b2db      	uxtb	r3, r3
 801583a:	009b      	lsls	r3, r3, #2
 801583c:	b2db      	uxtb	r3, r3
 801583e:	2b14      	cmp	r3, #20
 8015840:	d002      	beq.n	8015848 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015842:	f06f 0305 	mvn.w	r3, #5
 8015846:	e110      	b.n	8015a6a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	895b      	ldrh	r3, [r3, #10]
 801584c:	2b13      	cmp	r3, #19
 801584e:	d809      	bhi.n	8015864 <ip4_frag+0x64>
 8015850:	4b88      	ldr	r3, [pc, #544]	; (8015a74 <ip4_frag+0x274>)
 8015852:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015856:	4988      	ldr	r1, [pc, #544]	; (8015a78 <ip4_frag+0x278>)
 8015858:	4888      	ldr	r0, [pc, #544]	; (8015a7c <ip4_frag+0x27c>)
 801585a:	f00a fe79 	bl	8020550 <iprintf>
 801585e:	f06f 0305 	mvn.w	r3, #5
 8015862:	e102      	b.n	8015a6a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015866:	88db      	ldrh	r3, [r3, #6]
 8015868:	b29b      	uxth	r3, r3
 801586a:	4618      	mov	r0, r3
 801586c:	f7fb f930 	bl	8010ad0 <lwip_htons>
 8015870:	4603      	mov	r3, r0
 8015872:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015874:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015876:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801587a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801587e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015884:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	891b      	ldrh	r3, [r3, #8]
 801588a:	3b14      	subs	r3, #20
 801588c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015890:	e0e1      	b.n	8015a56 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015892:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015894:	00db      	lsls	r3, r3, #3
 8015896:	b29b      	uxth	r3, r3
 8015898:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801589c:	4293      	cmp	r3, r2
 801589e:	bf28      	it	cs
 80158a0:	4613      	movcs	r3, r2
 80158a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80158a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80158a8:	2114      	movs	r1, #20
 80158aa:	200e      	movs	r0, #14
 80158ac:	f001 fc7a 	bl	80171a4 <pbuf_alloc>
 80158b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80158b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	f000 80d5 	beq.w	8015a64 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80158ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158bc:	895b      	ldrh	r3, [r3, #10]
 80158be:	2b13      	cmp	r3, #19
 80158c0:	d806      	bhi.n	80158d0 <ip4_frag+0xd0>
 80158c2:	4b6c      	ldr	r3, [pc, #432]	; (8015a74 <ip4_frag+0x274>)
 80158c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80158c8:	496d      	ldr	r1, [pc, #436]	; (8015a80 <ip4_frag+0x280>)
 80158ca:	486c      	ldr	r0, [pc, #432]	; (8015a7c <ip4_frag+0x27c>)
 80158cc:	f00a fe40 	bl	8020550 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80158d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d2:	685b      	ldr	r3, [r3, #4]
 80158d4:	2214      	movs	r2, #20
 80158d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80158d8:	4618      	mov	r0, r3
 80158da:	f00a fd43 	bl	8020364 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80158de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80158e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80158e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80158ea:	e064      	b.n	80159b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	895a      	ldrh	r2, [r3, #10]
 80158f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80158f2:	1ad3      	subs	r3, r2, r3
 80158f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	895b      	ldrh	r3, [r3, #10]
 80158fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d906      	bls.n	801590e <ip4_frag+0x10e>
 8015900:	4b5c      	ldr	r3, [pc, #368]	; (8015a74 <ip4_frag+0x274>)
 8015902:	f240 322d 	movw	r2, #813	; 0x32d
 8015906:	495f      	ldr	r1, [pc, #380]	; (8015a84 <ip4_frag+0x284>)
 8015908:	485c      	ldr	r0, [pc, #368]	; (8015a7c <ip4_frag+0x27c>)
 801590a:	f00a fe21 	bl	8020550 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801590e:	8bfa      	ldrh	r2, [r7, #30]
 8015910:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015914:	4293      	cmp	r3, r2
 8015916:	bf28      	it	cs
 8015918:	4613      	movcs	r3, r2
 801591a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801591e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015922:	2b00      	cmp	r3, #0
 8015924:	d105      	bne.n	8015932 <ip4_frag+0x132>
        poff = 0;
 8015926:	2300      	movs	r3, #0
 8015928:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	60fb      	str	r3, [r7, #12]
        continue;
 8015930:	e041      	b.n	80159b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015932:	f7ff ff0d 	bl	8015750 <ip_frag_alloc_pbuf_custom_ref>
 8015936:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015938:	69bb      	ldr	r3, [r7, #24]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d103      	bne.n	8015946 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801593e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015940:	f001 ff14 	bl	801776c <pbuf_free>
        goto memerr;
 8015944:	e08f      	b.n	8015a66 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015946:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801594c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801594e:	4413      	add	r3, r2
 8015950:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015954:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015958:	9201      	str	r2, [sp, #4]
 801595a:	9300      	str	r3, [sp, #0]
 801595c:	4603      	mov	r3, r0
 801595e:	2241      	movs	r2, #65	; 0x41
 8015960:	2000      	movs	r0, #0
 8015962:	f001 fd49 	bl	80173f8 <pbuf_alloced_custom>
 8015966:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d106      	bne.n	801597c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801596e:	69b8      	ldr	r0, [r7, #24]
 8015970:	f7ff fef6 	bl	8015760 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015976:	f001 fef9 	bl	801776c <pbuf_free>
        goto memerr;
 801597a:	e074      	b.n	8015a66 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801597c:	68f8      	ldr	r0, [r7, #12]
 801597e:	f001 ff9b 	bl	80178b8 <pbuf_ref>
      pcr->original = p;
 8015982:	69bb      	ldr	r3, [r7, #24]
 8015984:	68fa      	ldr	r2, [r7, #12]
 8015986:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	4a3f      	ldr	r2, [pc, #252]	; (8015a88 <ip4_frag+0x288>)
 801598c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801598e:	6979      	ldr	r1, [r7, #20]
 8015990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015992:	f001 ffb9 	bl	8017908 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015996:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801599a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801599e:	1ad3      	subs	r3, r2, r3
 80159a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80159a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d004      	beq.n	80159b6 <ip4_frag+0x1b6>
        poff = 0;
 80159ac:	2300      	movs	r3, #0
 80159ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80159b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d196      	bne.n	80158ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80159be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80159c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80159c4:	4413      	add	r3, r2
 80159c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80159cc:	f1a3 0213 	sub.w	r2, r3, #19
 80159d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80159d4:	429a      	cmp	r2, r3
 80159d6:	bfcc      	ite	gt
 80159d8:	2301      	movgt	r3, #1
 80159da:	2300      	movle	r3, #0
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80159e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80159e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80159e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80159ea:	6a3b      	ldr	r3, [r7, #32]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d002      	beq.n	80159f6 <ip4_frag+0x1f6>
 80159f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d003      	beq.n	80159fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80159f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80159f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80159fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80159fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015a00:	4618      	mov	r0, r3
 8015a02:	f7fb f865 	bl	8010ad0 <lwip_htons>
 8015a06:	4603      	mov	r3, r0
 8015a08:	461a      	mov	r2, r3
 8015a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a0c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015a0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015a10:	3314      	adds	r3, #20
 8015a12:	b29b      	uxth	r3, r3
 8015a14:	4618      	mov	r0, r3
 8015a16:	f7fb f85b 	bl	8010ad0 <lwip_htons>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	461a      	mov	r2, r3
 8015a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a20:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a24:	2200      	movs	r2, #0
 8015a26:	729a      	strb	r2, [r3, #10]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015a2c:	68bb      	ldr	r3, [r7, #8]
 8015a2e:	695b      	ldr	r3, [r3, #20]
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015a34:	68b8      	ldr	r0, [r7, #8]
 8015a36:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a3a:	f001 fe97 	bl	801776c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015a3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015a42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015a44:	1ad3      	subs	r3, r2, r3
 8015a46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015a4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015a4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a50:	4413      	add	r3, r2
 8015a52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015a56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	f47f af19 	bne.w	8015892 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015a60:	2300      	movs	r3, #0
 8015a62:	e002      	b.n	8015a6a <ip4_frag+0x26a>
      goto memerr;
 8015a64:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	3748      	adds	r7, #72	; 0x48
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	080229c8 	.word	0x080229c8
 8015a78:	08022ba8 	.word	0x08022ba8
 8015a7c:	08022a14 	.word	0x08022a14
 8015a80:	08022bc4 	.word	0x08022bc4
 8015a84:	08022be4 	.word	0x08022be4
 8015a88:	08015799 	.word	0x08015799

08015a8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b083      	sub	sp, #12
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	4603      	mov	r3, r0
 8015a94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8015a96:	4b05      	ldr	r3, [pc, #20]	; (8015aac <ptr_to_mem+0x20>)
 8015a98:	681a      	ldr	r2, [r3, #0]
 8015a9a:	88fb      	ldrh	r3, [r7, #6]
 8015a9c:	4413      	add	r3, r2
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	370c      	adds	r7, #12
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa8:	4770      	bx	lr
 8015aaa:	bf00      	nop
 8015aac:	2400a0e4 	.word	0x2400a0e4

08015ab0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b083      	sub	sp, #12
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8015ab8:	4b05      	ldr	r3, [pc, #20]	; (8015ad0 <mem_to_ptr+0x20>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	687a      	ldr	r2, [r7, #4]
 8015abe:	1ad3      	subs	r3, r2, r3
 8015ac0:	b29b      	uxth	r3, r3
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	370c      	adds	r7, #12
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015acc:	4770      	bx	lr
 8015ace:	bf00      	nop
 8015ad0:	2400a0e4 	.word	0x2400a0e4

08015ad4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8015ad4:	b590      	push	{r4, r7, lr}
 8015ad6:	b085      	sub	sp, #20
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015adc:	4b45      	ldr	r3, [pc, #276]	; (8015bf4 <plug_holes+0x120>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	687a      	ldr	r2, [r7, #4]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d206      	bcs.n	8015af4 <plug_holes+0x20>
 8015ae6:	4b44      	ldr	r3, [pc, #272]	; (8015bf8 <plug_holes+0x124>)
 8015ae8:	f240 12df 	movw	r2, #479	; 0x1df
 8015aec:	4943      	ldr	r1, [pc, #268]	; (8015bfc <plug_holes+0x128>)
 8015aee:	4844      	ldr	r0, [pc, #272]	; (8015c00 <plug_holes+0x12c>)
 8015af0:	f00a fd2e 	bl	8020550 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015af4:	4b43      	ldr	r3, [pc, #268]	; (8015c04 <plug_holes+0x130>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	687a      	ldr	r2, [r7, #4]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d306      	bcc.n	8015b0c <plug_holes+0x38>
 8015afe:	4b3e      	ldr	r3, [pc, #248]	; (8015bf8 <plug_holes+0x124>)
 8015b00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015b04:	4940      	ldr	r1, [pc, #256]	; (8015c08 <plug_holes+0x134>)
 8015b06:	483e      	ldr	r0, [pc, #248]	; (8015c00 <plug_holes+0x12c>)
 8015b08:	f00a fd22 	bl	8020550 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	791b      	ldrb	r3, [r3, #4]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d006      	beq.n	8015b22 <plug_holes+0x4e>
 8015b14:	4b38      	ldr	r3, [pc, #224]	; (8015bf8 <plug_holes+0x124>)
 8015b16:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015b1a:	493c      	ldr	r1, [pc, #240]	; (8015c0c <plug_holes+0x138>)
 8015b1c:	4838      	ldr	r0, [pc, #224]	; (8015c00 <plug_holes+0x12c>)
 8015b1e:	f00a fd17 	bl	8020550 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	881b      	ldrh	r3, [r3, #0]
 8015b26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015b2a:	d906      	bls.n	8015b3a <plug_holes+0x66>
 8015b2c:	4b32      	ldr	r3, [pc, #200]	; (8015bf8 <plug_holes+0x124>)
 8015b2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8015b32:	4937      	ldr	r1, [pc, #220]	; (8015c10 <plug_holes+0x13c>)
 8015b34:	4832      	ldr	r0, [pc, #200]	; (8015c00 <plug_holes+0x12c>)
 8015b36:	f00a fd0b 	bl	8020550 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	881b      	ldrh	r3, [r3, #0]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7ff ffa4 	bl	8015a8c <ptr_to_mem>
 8015b44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8015b46:	687a      	ldr	r2, [r7, #4]
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d024      	beq.n	8015b98 <plug_holes+0xc4>
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	791b      	ldrb	r3, [r3, #4]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d120      	bne.n	8015b98 <plug_holes+0xc4>
 8015b56:	4b2b      	ldr	r3, [pc, #172]	; (8015c04 <plug_holes+0x130>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	68fa      	ldr	r2, [r7, #12]
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d01b      	beq.n	8015b98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8015b60:	4b2c      	ldr	r3, [pc, #176]	; (8015c14 <plug_holes+0x140>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	68fa      	ldr	r2, [r7, #12]
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d102      	bne.n	8015b70 <plug_holes+0x9c>
      lfree = mem;
 8015b6a:	4a2a      	ldr	r2, [pc, #168]	; (8015c14 <plug_holes+0x140>)
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	881a      	ldrh	r2, [r3, #0]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	881b      	ldrh	r3, [r3, #0]
 8015b7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015b80:	d00a      	beq.n	8015b98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	881b      	ldrh	r3, [r3, #0]
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7ff ff80 	bl	8015a8c <ptr_to_mem>
 8015b8c:	4604      	mov	r4, r0
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f7ff ff8e 	bl	8015ab0 <mem_to_ptr>
 8015b94:	4603      	mov	r3, r0
 8015b96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	885b      	ldrh	r3, [r3, #2]
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f7ff ff75 	bl	8015a8c <ptr_to_mem>
 8015ba2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8015ba4:	68ba      	ldr	r2, [r7, #8]
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	d01f      	beq.n	8015bec <plug_holes+0x118>
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	791b      	ldrb	r3, [r3, #4]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d11b      	bne.n	8015bec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8015bb4:	4b17      	ldr	r3, [pc, #92]	; (8015c14 <plug_holes+0x140>)
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	687a      	ldr	r2, [r7, #4]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d102      	bne.n	8015bc4 <plug_holes+0xf0>
      lfree = pmem;
 8015bbe:	4a15      	ldr	r2, [pc, #84]	; (8015c14 <plug_holes+0x140>)
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	881a      	ldrh	r2, [r3, #0]
 8015bc8:	68bb      	ldr	r3, [r7, #8]
 8015bca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	881b      	ldrh	r3, [r3, #0]
 8015bd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015bd4:	d00a      	beq.n	8015bec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	881b      	ldrh	r3, [r3, #0]
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7ff ff56 	bl	8015a8c <ptr_to_mem>
 8015be0:	4604      	mov	r4, r0
 8015be2:	68b8      	ldr	r0, [r7, #8]
 8015be4:	f7ff ff64 	bl	8015ab0 <mem_to_ptr>
 8015be8:	4603      	mov	r3, r0
 8015bea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8015bec:	bf00      	nop
 8015bee:	3714      	adds	r7, #20
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd90      	pop	{r4, r7, pc}
 8015bf4:	2400a0e4 	.word	0x2400a0e4
 8015bf8:	08022bf4 	.word	0x08022bf4
 8015bfc:	08022c2c 	.word	0x08022c2c
 8015c00:	08022c44 	.word	0x08022c44
 8015c04:	2400a0e8 	.word	0x2400a0e8
 8015c08:	08022c6c 	.word	0x08022c6c
 8015c0c:	08022c88 	.word	0x08022c88
 8015c10:	08022ca4 	.word	0x08022ca4
 8015c14:	2400a0f0 	.word	0x2400a0f0

08015c18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015c1e:	4b1d      	ldr	r3, [pc, #116]	; (8015c94 <mem_init+0x7c>)
 8015c20:	4a1d      	ldr	r2, [pc, #116]	; (8015c98 <mem_init+0x80>)
 8015c22:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8015c24:	4b1b      	ldr	r3, [pc, #108]	; (8015c94 <mem_init+0x7c>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015c30:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	2200      	movs	r2, #0
 8015c36:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015c3e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8015c42:	f7ff ff23 	bl	8015a8c <ptr_to_mem>
 8015c46:	4603      	mov	r3, r0
 8015c48:	4a14      	ldr	r2, [pc, #80]	; (8015c9c <mem_init+0x84>)
 8015c4a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8015c4c:	4b13      	ldr	r3, [pc, #76]	; (8015c9c <mem_init+0x84>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	2201      	movs	r2, #1
 8015c52:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8015c54:	4b11      	ldr	r3, [pc, #68]	; (8015c9c <mem_init+0x84>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015c5c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015c5e:	4b0f      	ldr	r3, [pc, #60]	; (8015c9c <mem_init+0x84>)
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015c66:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8015c68:	4b0a      	ldr	r3, [pc, #40]	; (8015c94 <mem_init+0x7c>)
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	4a0c      	ldr	r2, [pc, #48]	; (8015ca0 <mem_init+0x88>)
 8015c6e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8015c70:	480c      	ldr	r0, [pc, #48]	; (8015ca4 <mem_init+0x8c>)
 8015c72:	f003 f869 	bl	8018d48 <sys_mutex_new>
 8015c76:	4603      	mov	r3, r0
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d006      	beq.n	8015c8a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8015c7c:	4b0a      	ldr	r3, [pc, #40]	; (8015ca8 <mem_init+0x90>)
 8015c7e:	f240 221f 	movw	r2, #543	; 0x21f
 8015c82:	490a      	ldr	r1, [pc, #40]	; (8015cac <mem_init+0x94>)
 8015c84:	480a      	ldr	r0, [pc, #40]	; (8015cb0 <mem_init+0x98>)
 8015c86:	f00a fc63 	bl	8020550 <iprintf>
  }
}
 8015c8a:	bf00      	nop
 8015c8c:	3708      	adds	r7, #8
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}
 8015c92:	bf00      	nop
 8015c94:	2400a0e4 	.word	0x2400a0e4
 8015c98:	30044000 	.word	0x30044000
 8015c9c:	2400a0e8 	.word	0x2400a0e8
 8015ca0:	2400a0f0 	.word	0x2400a0f0
 8015ca4:	2400a0ec 	.word	0x2400a0ec
 8015ca8:	08022bf4 	.word	0x08022bf4
 8015cac:	08022cd0 	.word	0x08022cd0
 8015cb0:	08022c44 	.word	0x08022c44

08015cb4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b086      	sub	sp, #24
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f7ff fef7 	bl	8015ab0 <mem_to_ptr>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	881b      	ldrh	r3, [r3, #0]
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f7ff fede 	bl	8015a8c <ptr_to_mem>
 8015cd0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	885b      	ldrh	r3, [r3, #2]
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7ff fed8 	bl	8015a8c <ptr_to_mem>
 8015cdc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	881b      	ldrh	r3, [r3, #0]
 8015ce2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015ce6:	d818      	bhi.n	8015d1a <mem_link_valid+0x66>
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	885b      	ldrh	r3, [r3, #2]
 8015cec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015cf0:	d813      	bhi.n	8015d1a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015cf6:	8afa      	ldrh	r2, [r7, #22]
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d004      	beq.n	8015d06 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	881b      	ldrh	r3, [r3, #0]
 8015d00:	8afa      	ldrh	r2, [r7, #22]
 8015d02:	429a      	cmp	r2, r3
 8015d04:	d109      	bne.n	8015d1a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015d06:	4b08      	ldr	r3, [pc, #32]	; (8015d28 <mem_link_valid+0x74>)
 8015d08:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015d0a:	693a      	ldr	r2, [r7, #16]
 8015d0c:	429a      	cmp	r2, r3
 8015d0e:	d006      	beq.n	8015d1e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015d10:	693b      	ldr	r3, [r7, #16]
 8015d12:	885b      	ldrh	r3, [r3, #2]
 8015d14:	8afa      	ldrh	r2, [r7, #22]
 8015d16:	429a      	cmp	r2, r3
 8015d18:	d001      	beq.n	8015d1e <mem_link_valid+0x6a>
    return 0;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	e000      	b.n	8015d20 <mem_link_valid+0x6c>
  }
  return 1;
 8015d1e:	2301      	movs	r3, #1
}
 8015d20:	4618      	mov	r0, r3
 8015d22:	3718      	adds	r7, #24
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bd80      	pop	{r7, pc}
 8015d28:	2400a0e8 	.word	0x2400a0e8

08015d2c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b088      	sub	sp, #32
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d070      	beq.n	8015e1c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f003 0303 	and.w	r3, r3, #3
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d00d      	beq.n	8015d60 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015d44:	4b37      	ldr	r3, [pc, #220]	; (8015e24 <mem_free+0xf8>)
 8015d46:	f240 2273 	movw	r2, #627	; 0x273
 8015d4a:	4937      	ldr	r1, [pc, #220]	; (8015e28 <mem_free+0xfc>)
 8015d4c:	4837      	ldr	r0, [pc, #220]	; (8015e2c <mem_free+0x100>)
 8015d4e:	f00a fbff 	bl	8020550 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015d52:	f003 f84b 	bl	8018dec <sys_arch_protect>
 8015d56:	60f8      	str	r0, [r7, #12]
 8015d58:	68f8      	ldr	r0, [r7, #12]
 8015d5a:	f003 f855 	bl	8018e08 <sys_arch_unprotect>
    return;
 8015d5e:	e05e      	b.n	8015e1e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	3b08      	subs	r3, #8
 8015d64:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8015d66:	4b32      	ldr	r3, [pc, #200]	; (8015e30 <mem_free+0x104>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	69fa      	ldr	r2, [r7, #28]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d306      	bcc.n	8015d7e <mem_free+0x52>
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f103 020c 	add.w	r2, r3, #12
 8015d76:	4b2f      	ldr	r3, [pc, #188]	; (8015e34 <mem_free+0x108>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d90d      	bls.n	8015d9a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8015d7e:	4b29      	ldr	r3, [pc, #164]	; (8015e24 <mem_free+0xf8>)
 8015d80:	f240 227f 	movw	r2, #639	; 0x27f
 8015d84:	492c      	ldr	r1, [pc, #176]	; (8015e38 <mem_free+0x10c>)
 8015d86:	4829      	ldr	r0, [pc, #164]	; (8015e2c <mem_free+0x100>)
 8015d88:	f00a fbe2 	bl	8020550 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015d8c:	f003 f82e 	bl	8018dec <sys_arch_protect>
 8015d90:	6138      	str	r0, [r7, #16]
 8015d92:	6938      	ldr	r0, [r7, #16]
 8015d94:	f003 f838 	bl	8018e08 <sys_arch_unprotect>
    return;
 8015d98:	e041      	b.n	8015e1e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8015d9a:	4828      	ldr	r0, [pc, #160]	; (8015e3c <mem_free+0x110>)
 8015d9c:	f002 ffea 	bl	8018d74 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	791b      	ldrb	r3, [r3, #4]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d110      	bne.n	8015dca <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015da8:	4b1e      	ldr	r3, [pc, #120]	; (8015e24 <mem_free+0xf8>)
 8015daa:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8015dae:	4924      	ldr	r1, [pc, #144]	; (8015e40 <mem_free+0x114>)
 8015db0:	481e      	ldr	r0, [pc, #120]	; (8015e2c <mem_free+0x100>)
 8015db2:	f00a fbcd 	bl	8020550 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8015db6:	4821      	ldr	r0, [pc, #132]	; (8015e3c <mem_free+0x110>)
 8015db8:	f002 ffeb 	bl	8018d92 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015dbc:	f003 f816 	bl	8018dec <sys_arch_protect>
 8015dc0:	6178      	str	r0, [r7, #20]
 8015dc2:	6978      	ldr	r0, [r7, #20]
 8015dc4:	f003 f820 	bl	8018e08 <sys_arch_unprotect>
    return;
 8015dc8:	e029      	b.n	8015e1e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8015dca:	69f8      	ldr	r0, [r7, #28]
 8015dcc:	f7ff ff72 	bl	8015cb4 <mem_link_valid>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d110      	bne.n	8015df8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015dd6:	4b13      	ldr	r3, [pc, #76]	; (8015e24 <mem_free+0xf8>)
 8015dd8:	f240 2295 	movw	r2, #661	; 0x295
 8015ddc:	4919      	ldr	r1, [pc, #100]	; (8015e44 <mem_free+0x118>)
 8015dde:	4813      	ldr	r0, [pc, #76]	; (8015e2c <mem_free+0x100>)
 8015de0:	f00a fbb6 	bl	8020550 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8015de4:	4815      	ldr	r0, [pc, #84]	; (8015e3c <mem_free+0x110>)
 8015de6:	f002 ffd4 	bl	8018d92 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015dea:	f002 ffff 	bl	8018dec <sys_arch_protect>
 8015dee:	61b8      	str	r0, [r7, #24]
 8015df0:	69b8      	ldr	r0, [r7, #24]
 8015df2:	f003 f809 	bl	8018e08 <sys_arch_unprotect>
    return;
 8015df6:	e012      	b.n	8015e1e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8015dfe:	4b12      	ldr	r3, [pc, #72]	; (8015e48 <mem_free+0x11c>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	69fa      	ldr	r2, [r7, #28]
 8015e04:	429a      	cmp	r2, r3
 8015e06:	d202      	bcs.n	8015e0e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8015e08:	4a0f      	ldr	r2, [pc, #60]	; (8015e48 <mem_free+0x11c>)
 8015e0a:	69fb      	ldr	r3, [r7, #28]
 8015e0c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8015e0e:	69f8      	ldr	r0, [r7, #28]
 8015e10:	f7ff fe60 	bl	8015ad4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8015e14:	4809      	ldr	r0, [pc, #36]	; (8015e3c <mem_free+0x110>)
 8015e16:	f002 ffbc 	bl	8018d92 <sys_mutex_unlock>
 8015e1a:	e000      	b.n	8015e1e <mem_free+0xf2>
    return;
 8015e1c:	bf00      	nop
}
 8015e1e:	3720      	adds	r7, #32
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}
 8015e24:	08022bf4 	.word	0x08022bf4
 8015e28:	08022cec 	.word	0x08022cec
 8015e2c:	08022c44 	.word	0x08022c44
 8015e30:	2400a0e4 	.word	0x2400a0e4
 8015e34:	2400a0e8 	.word	0x2400a0e8
 8015e38:	08022d10 	.word	0x08022d10
 8015e3c:	2400a0ec 	.word	0x2400a0ec
 8015e40:	08022d2c 	.word	0x08022d2c
 8015e44:	08022d54 	.word	0x08022d54
 8015e48:	2400a0f0 	.word	0x2400a0f0

08015e4c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b088      	sub	sp, #32
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	460b      	mov	r3, r1
 8015e56:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015e58:	887b      	ldrh	r3, [r7, #2]
 8015e5a:	3303      	adds	r3, #3
 8015e5c:	b29b      	uxth	r3, r3
 8015e5e:	f023 0303 	bic.w	r3, r3, #3
 8015e62:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015e64:	8bfb      	ldrh	r3, [r7, #30]
 8015e66:	2b0b      	cmp	r3, #11
 8015e68:	d801      	bhi.n	8015e6e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8015e6a:	230c      	movs	r3, #12
 8015e6c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015e6e:	8bfb      	ldrh	r3, [r7, #30]
 8015e70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015e74:	d803      	bhi.n	8015e7e <mem_trim+0x32>
 8015e76:	8bfa      	ldrh	r2, [r7, #30]
 8015e78:	887b      	ldrh	r3, [r7, #2]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d201      	bcs.n	8015e82 <mem_trim+0x36>
    return NULL;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	e0d8      	b.n	8016034 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015e82:	4b6e      	ldr	r3, [pc, #440]	; (801603c <mem_trim+0x1f0>)
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	687a      	ldr	r2, [r7, #4]
 8015e88:	429a      	cmp	r2, r3
 8015e8a:	d304      	bcc.n	8015e96 <mem_trim+0x4a>
 8015e8c:	4b6c      	ldr	r3, [pc, #432]	; (8016040 <mem_trim+0x1f4>)
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	687a      	ldr	r2, [r7, #4]
 8015e92:	429a      	cmp	r2, r3
 8015e94:	d306      	bcc.n	8015ea4 <mem_trim+0x58>
 8015e96:	4b6b      	ldr	r3, [pc, #428]	; (8016044 <mem_trim+0x1f8>)
 8015e98:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015e9c:	496a      	ldr	r1, [pc, #424]	; (8016048 <mem_trim+0x1fc>)
 8015e9e:	486b      	ldr	r0, [pc, #428]	; (801604c <mem_trim+0x200>)
 8015ea0:	f00a fb56 	bl	8020550 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015ea4:	4b65      	ldr	r3, [pc, #404]	; (801603c <mem_trim+0x1f0>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	687a      	ldr	r2, [r7, #4]
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	d304      	bcc.n	8015eb8 <mem_trim+0x6c>
 8015eae:	4b64      	ldr	r3, [pc, #400]	; (8016040 <mem_trim+0x1f4>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	687a      	ldr	r2, [r7, #4]
 8015eb4:	429a      	cmp	r2, r3
 8015eb6:	d307      	bcc.n	8015ec8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015eb8:	f002 ff98 	bl	8018dec <sys_arch_protect>
 8015ebc:	60b8      	str	r0, [r7, #8]
 8015ebe:	68b8      	ldr	r0, [r7, #8]
 8015ec0:	f002 ffa2 	bl	8018e08 <sys_arch_unprotect>
    return rmem;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	e0b5      	b.n	8016034 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	3b08      	subs	r3, #8
 8015ecc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8015ece:	69b8      	ldr	r0, [r7, #24]
 8015ed0:	f7ff fdee 	bl	8015ab0 <mem_to_ptr>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015ed8:	69bb      	ldr	r3, [r7, #24]
 8015eda:	881a      	ldrh	r2, [r3, #0]
 8015edc:	8afb      	ldrh	r3, [r7, #22]
 8015ede:	1ad3      	subs	r3, r2, r3
 8015ee0:	b29b      	uxth	r3, r3
 8015ee2:	3b08      	subs	r3, #8
 8015ee4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8015ee6:	8bfa      	ldrh	r2, [r7, #30]
 8015ee8:	8abb      	ldrh	r3, [r7, #20]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d906      	bls.n	8015efc <mem_trim+0xb0>
 8015eee:	4b55      	ldr	r3, [pc, #340]	; (8016044 <mem_trim+0x1f8>)
 8015ef0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8015ef4:	4956      	ldr	r1, [pc, #344]	; (8016050 <mem_trim+0x204>)
 8015ef6:	4855      	ldr	r0, [pc, #340]	; (801604c <mem_trim+0x200>)
 8015ef8:	f00a fb2a 	bl	8020550 <iprintf>
  if (newsize > size) {
 8015efc:	8bfa      	ldrh	r2, [r7, #30]
 8015efe:	8abb      	ldrh	r3, [r7, #20]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d901      	bls.n	8015f08 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8015f04:	2300      	movs	r3, #0
 8015f06:	e095      	b.n	8016034 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8015f08:	8bfa      	ldrh	r2, [r7, #30]
 8015f0a:	8abb      	ldrh	r3, [r7, #20]
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	d101      	bne.n	8015f14 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	e08f      	b.n	8016034 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8015f14:	484f      	ldr	r0, [pc, #316]	; (8016054 <mem_trim+0x208>)
 8015f16:	f002 ff2d 	bl	8018d74 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8015f1a:	69bb      	ldr	r3, [r7, #24]
 8015f1c:	881b      	ldrh	r3, [r3, #0]
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7ff fdb4 	bl	8015a8c <ptr_to_mem>
 8015f24:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	791b      	ldrb	r3, [r3, #4]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d13f      	bne.n	8015fae <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015f2e:	69bb      	ldr	r3, [r7, #24]
 8015f30:	881b      	ldrh	r3, [r3, #0]
 8015f32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015f36:	d106      	bne.n	8015f46 <mem_trim+0xfa>
 8015f38:	4b42      	ldr	r3, [pc, #264]	; (8016044 <mem_trim+0x1f8>)
 8015f3a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8015f3e:	4946      	ldr	r1, [pc, #280]	; (8016058 <mem_trim+0x20c>)
 8015f40:	4842      	ldr	r0, [pc, #264]	; (801604c <mem_trim+0x200>)
 8015f42:	f00a fb05 	bl	8020550 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8015f46:	693b      	ldr	r3, [r7, #16]
 8015f48:	881b      	ldrh	r3, [r3, #0]
 8015f4a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015f4c:	8afa      	ldrh	r2, [r7, #22]
 8015f4e:	8bfb      	ldrh	r3, [r7, #30]
 8015f50:	4413      	add	r3, r2
 8015f52:	b29b      	uxth	r3, r3
 8015f54:	3308      	adds	r3, #8
 8015f56:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8015f58:	4b40      	ldr	r3, [pc, #256]	; (801605c <mem_trim+0x210>)
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	693a      	ldr	r2, [r7, #16]
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	d106      	bne.n	8015f70 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8015f62:	89fb      	ldrh	r3, [r7, #14]
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7ff fd91 	bl	8015a8c <ptr_to_mem>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	4a3b      	ldr	r2, [pc, #236]	; (801605c <mem_trim+0x210>)
 8015f6e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8015f70:	89fb      	ldrh	r3, [r7, #14]
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7ff fd8a 	bl	8015a8c <ptr_to_mem>
 8015f78:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015f7a:	693b      	ldr	r3, [r7, #16]
 8015f7c:	2200      	movs	r2, #0
 8015f7e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	89ba      	ldrh	r2, [r7, #12]
 8015f84:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	8afa      	ldrh	r2, [r7, #22]
 8015f8a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	89fa      	ldrh	r2, [r7, #14]
 8015f90:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015f92:	693b      	ldr	r3, [r7, #16]
 8015f94:	881b      	ldrh	r3, [r3, #0]
 8015f96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015f9a:	d047      	beq.n	801602c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015f9c:	693b      	ldr	r3, [r7, #16]
 8015f9e:	881b      	ldrh	r3, [r3, #0]
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7ff fd73 	bl	8015a8c <ptr_to_mem>
 8015fa6:	4602      	mov	r2, r0
 8015fa8:	89fb      	ldrh	r3, [r7, #14]
 8015faa:	8053      	strh	r3, [r2, #2]
 8015fac:	e03e      	b.n	801602c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015fae:	8bfb      	ldrh	r3, [r7, #30]
 8015fb0:	f103 0214 	add.w	r2, r3, #20
 8015fb4:	8abb      	ldrh	r3, [r7, #20]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d838      	bhi.n	801602c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015fba:	8afa      	ldrh	r2, [r7, #22]
 8015fbc:	8bfb      	ldrh	r3, [r7, #30]
 8015fbe:	4413      	add	r3, r2
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	3308      	adds	r3, #8
 8015fc4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015fc6:	69bb      	ldr	r3, [r7, #24]
 8015fc8:	881b      	ldrh	r3, [r3, #0]
 8015fca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015fce:	d106      	bne.n	8015fde <mem_trim+0x192>
 8015fd0:	4b1c      	ldr	r3, [pc, #112]	; (8016044 <mem_trim+0x1f8>)
 8015fd2:	f240 3216 	movw	r2, #790	; 0x316
 8015fd6:	4920      	ldr	r1, [pc, #128]	; (8016058 <mem_trim+0x20c>)
 8015fd8:	481c      	ldr	r0, [pc, #112]	; (801604c <mem_trim+0x200>)
 8015fda:	f00a fab9 	bl	8020550 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8015fde:	89fb      	ldrh	r3, [r7, #14]
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7ff fd53 	bl	8015a8c <ptr_to_mem>
 8015fe6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8015fe8:	4b1c      	ldr	r3, [pc, #112]	; (801605c <mem_trim+0x210>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	693a      	ldr	r2, [r7, #16]
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d202      	bcs.n	8015ff8 <mem_trim+0x1ac>
      lfree = mem2;
 8015ff2:	4a1a      	ldr	r2, [pc, #104]	; (801605c <mem_trim+0x210>)
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8015ffe:	69bb      	ldr	r3, [r7, #24]
 8016000:	881a      	ldrh	r2, [r3, #0]
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	8afa      	ldrh	r2, [r7, #22]
 801600a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801600c:	69bb      	ldr	r3, [r7, #24]
 801600e:	89fa      	ldrh	r2, [r7, #14]
 8016010:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	881b      	ldrh	r3, [r3, #0]
 8016016:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801601a:	d007      	beq.n	801602c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801601c:	693b      	ldr	r3, [r7, #16]
 801601e:	881b      	ldrh	r3, [r3, #0]
 8016020:	4618      	mov	r0, r3
 8016022:	f7ff fd33 	bl	8015a8c <ptr_to_mem>
 8016026:	4602      	mov	r2, r0
 8016028:	89fb      	ldrh	r3, [r7, #14]
 801602a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801602c:	4809      	ldr	r0, [pc, #36]	; (8016054 <mem_trim+0x208>)
 801602e:	f002 feb0 	bl	8018d92 <sys_mutex_unlock>
  return rmem;
 8016032:	687b      	ldr	r3, [r7, #4]
}
 8016034:	4618      	mov	r0, r3
 8016036:	3720      	adds	r7, #32
 8016038:	46bd      	mov	sp, r7
 801603a:	bd80      	pop	{r7, pc}
 801603c:	2400a0e4 	.word	0x2400a0e4
 8016040:	2400a0e8 	.word	0x2400a0e8
 8016044:	08022bf4 	.word	0x08022bf4
 8016048:	08022d88 	.word	0x08022d88
 801604c:	08022c44 	.word	0x08022c44
 8016050:	08022da0 	.word	0x08022da0
 8016054:	2400a0ec 	.word	0x2400a0ec
 8016058:	08022dc0 	.word	0x08022dc0
 801605c:	2400a0f0 	.word	0x2400a0f0

08016060 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b088      	sub	sp, #32
 8016064:	af00      	add	r7, sp, #0
 8016066:	4603      	mov	r3, r0
 8016068:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801606a:	88fb      	ldrh	r3, [r7, #6]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d101      	bne.n	8016074 <mem_malloc+0x14>
    return NULL;
 8016070:	2300      	movs	r3, #0
 8016072:	e0e2      	b.n	801623a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8016074:	88fb      	ldrh	r3, [r7, #6]
 8016076:	3303      	adds	r3, #3
 8016078:	b29b      	uxth	r3, r3
 801607a:	f023 0303 	bic.w	r3, r3, #3
 801607e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8016080:	8bbb      	ldrh	r3, [r7, #28]
 8016082:	2b0b      	cmp	r3, #11
 8016084:	d801      	bhi.n	801608a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8016086:	230c      	movs	r3, #12
 8016088:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801608a:	8bbb      	ldrh	r3, [r7, #28]
 801608c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016090:	d803      	bhi.n	801609a <mem_malloc+0x3a>
 8016092:	8bba      	ldrh	r2, [r7, #28]
 8016094:	88fb      	ldrh	r3, [r7, #6]
 8016096:	429a      	cmp	r2, r3
 8016098:	d201      	bcs.n	801609e <mem_malloc+0x3e>
    return NULL;
 801609a:	2300      	movs	r3, #0
 801609c:	e0cd      	b.n	801623a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801609e:	4869      	ldr	r0, [pc, #420]	; (8016244 <mem_malloc+0x1e4>)
 80160a0:	f002 fe68 	bl	8018d74 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80160a4:	4b68      	ldr	r3, [pc, #416]	; (8016248 <mem_malloc+0x1e8>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	4618      	mov	r0, r3
 80160aa:	f7ff fd01 	bl	8015ab0 <mem_to_ptr>
 80160ae:	4603      	mov	r3, r0
 80160b0:	83fb      	strh	r3, [r7, #30]
 80160b2:	e0b7      	b.n	8016224 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80160b4:	8bfb      	ldrh	r3, [r7, #30]
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7ff fce8 	bl	8015a8c <ptr_to_mem>
 80160bc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80160be:	697b      	ldr	r3, [r7, #20]
 80160c0:	791b      	ldrb	r3, [r3, #4]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	f040 80a7 	bne.w	8016216 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80160c8:	697b      	ldr	r3, [r7, #20]
 80160ca:	881b      	ldrh	r3, [r3, #0]
 80160cc:	461a      	mov	r2, r3
 80160ce:	8bfb      	ldrh	r3, [r7, #30]
 80160d0:	1ad3      	subs	r3, r2, r3
 80160d2:	f1a3 0208 	sub.w	r2, r3, #8
 80160d6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80160d8:	429a      	cmp	r2, r3
 80160da:	f0c0 809c 	bcc.w	8016216 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80160de:	697b      	ldr	r3, [r7, #20]
 80160e0:	881b      	ldrh	r3, [r3, #0]
 80160e2:	461a      	mov	r2, r3
 80160e4:	8bfb      	ldrh	r3, [r7, #30]
 80160e6:	1ad3      	subs	r3, r2, r3
 80160e8:	f1a3 0208 	sub.w	r2, r3, #8
 80160ec:	8bbb      	ldrh	r3, [r7, #28]
 80160ee:	3314      	adds	r3, #20
 80160f0:	429a      	cmp	r2, r3
 80160f2:	d333      	bcc.n	801615c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80160f4:	8bfa      	ldrh	r2, [r7, #30]
 80160f6:	8bbb      	ldrh	r3, [r7, #28]
 80160f8:	4413      	add	r3, r2
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	3308      	adds	r3, #8
 80160fe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016100:	8a7b      	ldrh	r3, [r7, #18]
 8016102:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016106:	d106      	bne.n	8016116 <mem_malloc+0xb6>
 8016108:	4b50      	ldr	r3, [pc, #320]	; (801624c <mem_malloc+0x1ec>)
 801610a:	f240 3287 	movw	r2, #903	; 0x387
 801610e:	4950      	ldr	r1, [pc, #320]	; (8016250 <mem_malloc+0x1f0>)
 8016110:	4850      	ldr	r0, [pc, #320]	; (8016254 <mem_malloc+0x1f4>)
 8016112:	f00a fa1d 	bl	8020550 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8016116:	8a7b      	ldrh	r3, [r7, #18]
 8016118:	4618      	mov	r0, r3
 801611a:	f7ff fcb7 	bl	8015a8c <ptr_to_mem>
 801611e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	2200      	movs	r2, #0
 8016124:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8016126:	697b      	ldr	r3, [r7, #20]
 8016128:	881a      	ldrh	r2, [r3, #0]
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	8bfa      	ldrh	r2, [r7, #30]
 8016132:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8016134:	697b      	ldr	r3, [r7, #20]
 8016136:	8a7a      	ldrh	r2, [r7, #18]
 8016138:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801613a:	697b      	ldr	r3, [r7, #20]
 801613c:	2201      	movs	r2, #1
 801613e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	881b      	ldrh	r3, [r3, #0]
 8016144:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016148:	d00b      	beq.n	8016162 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	881b      	ldrh	r3, [r3, #0]
 801614e:	4618      	mov	r0, r3
 8016150:	f7ff fc9c 	bl	8015a8c <ptr_to_mem>
 8016154:	4602      	mov	r2, r0
 8016156:	8a7b      	ldrh	r3, [r7, #18]
 8016158:	8053      	strh	r3, [r2, #2]
 801615a:	e002      	b.n	8016162 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801615c:	697b      	ldr	r3, [r7, #20]
 801615e:	2201      	movs	r2, #1
 8016160:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8016162:	4b39      	ldr	r3, [pc, #228]	; (8016248 <mem_malloc+0x1e8>)
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	697a      	ldr	r2, [r7, #20]
 8016168:	429a      	cmp	r2, r3
 801616a:	d127      	bne.n	80161bc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801616c:	4b36      	ldr	r3, [pc, #216]	; (8016248 <mem_malloc+0x1e8>)
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8016172:	e005      	b.n	8016180 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8016174:	69bb      	ldr	r3, [r7, #24]
 8016176:	881b      	ldrh	r3, [r3, #0]
 8016178:	4618      	mov	r0, r3
 801617a:	f7ff fc87 	bl	8015a8c <ptr_to_mem>
 801617e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8016180:	69bb      	ldr	r3, [r7, #24]
 8016182:	791b      	ldrb	r3, [r3, #4]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d004      	beq.n	8016192 <mem_malloc+0x132>
 8016188:	4b33      	ldr	r3, [pc, #204]	; (8016258 <mem_malloc+0x1f8>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	69ba      	ldr	r2, [r7, #24]
 801618e:	429a      	cmp	r2, r3
 8016190:	d1f0      	bne.n	8016174 <mem_malloc+0x114>
          }
          lfree = cur;
 8016192:	4a2d      	ldr	r2, [pc, #180]	; (8016248 <mem_malloc+0x1e8>)
 8016194:	69bb      	ldr	r3, [r7, #24]
 8016196:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8016198:	4b2b      	ldr	r3, [pc, #172]	; (8016248 <mem_malloc+0x1e8>)
 801619a:	681a      	ldr	r2, [r3, #0]
 801619c:	4b2e      	ldr	r3, [pc, #184]	; (8016258 <mem_malloc+0x1f8>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d00b      	beq.n	80161bc <mem_malloc+0x15c>
 80161a4:	4b28      	ldr	r3, [pc, #160]	; (8016248 <mem_malloc+0x1e8>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	791b      	ldrb	r3, [r3, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d006      	beq.n	80161bc <mem_malloc+0x15c>
 80161ae:	4b27      	ldr	r3, [pc, #156]	; (801624c <mem_malloc+0x1ec>)
 80161b0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80161b4:	4929      	ldr	r1, [pc, #164]	; (801625c <mem_malloc+0x1fc>)
 80161b6:	4827      	ldr	r0, [pc, #156]	; (8016254 <mem_malloc+0x1f4>)
 80161b8:	f00a f9ca 	bl	8020550 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80161bc:	4821      	ldr	r0, [pc, #132]	; (8016244 <mem_malloc+0x1e4>)
 80161be:	f002 fde8 	bl	8018d92 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80161c2:	8bba      	ldrh	r2, [r7, #28]
 80161c4:	697b      	ldr	r3, [r7, #20]
 80161c6:	4413      	add	r3, r2
 80161c8:	3308      	adds	r3, #8
 80161ca:	4a23      	ldr	r2, [pc, #140]	; (8016258 <mem_malloc+0x1f8>)
 80161cc:	6812      	ldr	r2, [r2, #0]
 80161ce:	4293      	cmp	r3, r2
 80161d0:	d906      	bls.n	80161e0 <mem_malloc+0x180>
 80161d2:	4b1e      	ldr	r3, [pc, #120]	; (801624c <mem_malloc+0x1ec>)
 80161d4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80161d8:	4921      	ldr	r1, [pc, #132]	; (8016260 <mem_malloc+0x200>)
 80161da:	481e      	ldr	r0, [pc, #120]	; (8016254 <mem_malloc+0x1f4>)
 80161dc:	f00a f9b8 	bl	8020550 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	f003 0303 	and.w	r3, r3, #3
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d006      	beq.n	80161f8 <mem_malloc+0x198>
 80161ea:	4b18      	ldr	r3, [pc, #96]	; (801624c <mem_malloc+0x1ec>)
 80161ec:	f240 32bb 	movw	r2, #955	; 0x3bb
 80161f0:	491c      	ldr	r1, [pc, #112]	; (8016264 <mem_malloc+0x204>)
 80161f2:	4818      	ldr	r0, [pc, #96]	; (8016254 <mem_malloc+0x1f4>)
 80161f4:	f00a f9ac 	bl	8020550 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	f003 0303 	and.w	r3, r3, #3
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d006      	beq.n	8016210 <mem_malloc+0x1b0>
 8016202:	4b12      	ldr	r3, [pc, #72]	; (801624c <mem_malloc+0x1ec>)
 8016204:	f240 32bd 	movw	r2, #957	; 0x3bd
 8016208:	4917      	ldr	r1, [pc, #92]	; (8016268 <mem_malloc+0x208>)
 801620a:	4812      	ldr	r0, [pc, #72]	; (8016254 <mem_malloc+0x1f4>)
 801620c:	f00a f9a0 	bl	8020550 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	3308      	adds	r3, #8
 8016214:	e011      	b.n	801623a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8016216:	8bfb      	ldrh	r3, [r7, #30]
 8016218:	4618      	mov	r0, r3
 801621a:	f7ff fc37 	bl	8015a8c <ptr_to_mem>
 801621e:	4603      	mov	r3, r0
 8016220:	881b      	ldrh	r3, [r3, #0]
 8016222:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016224:	8bfa      	ldrh	r2, [r7, #30]
 8016226:	8bbb      	ldrh	r3, [r7, #28]
 8016228:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801622c:	429a      	cmp	r2, r3
 801622e:	f4ff af41 	bcc.w	80160b4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8016232:	4804      	ldr	r0, [pc, #16]	; (8016244 <mem_malloc+0x1e4>)
 8016234:	f002 fdad 	bl	8018d92 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8016238:	2300      	movs	r3, #0
}
 801623a:	4618      	mov	r0, r3
 801623c:	3720      	adds	r7, #32
 801623e:	46bd      	mov	sp, r7
 8016240:	bd80      	pop	{r7, pc}
 8016242:	bf00      	nop
 8016244:	2400a0ec 	.word	0x2400a0ec
 8016248:	2400a0f0 	.word	0x2400a0f0
 801624c:	08022bf4 	.word	0x08022bf4
 8016250:	08022dc0 	.word	0x08022dc0
 8016254:	08022c44 	.word	0x08022c44
 8016258:	2400a0e8 	.word	0x2400a0e8
 801625c:	08022dd4 	.word	0x08022dd4
 8016260:	08022df0 	.word	0x08022df0
 8016264:	08022e20 	.word	0x08022e20
 8016268:	08022e50 	.word	0x08022e50

0801626c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801626c:	b480      	push	{r7}
 801626e:	b085      	sub	sp, #20
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	689b      	ldr	r3, [r3, #8]
 8016278:	2200      	movs	r2, #0
 801627a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	3303      	adds	r3, #3
 8016282:	f023 0303 	bic.w	r3, r3, #3
 8016286:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8016288:	2300      	movs	r3, #0
 801628a:	60fb      	str	r3, [r7, #12]
 801628c:	e011      	b.n	80162b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	689b      	ldr	r3, [r3, #8]
 8016292:	681a      	ldr	r2, [r3, #0]
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	689b      	ldr	r3, [r3, #8]
 801629c:	68ba      	ldr	r2, [r7, #8]
 801629e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	881b      	ldrh	r3, [r3, #0]
 80162a4:	461a      	mov	r2, r3
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	4413      	add	r3, r2
 80162aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	3301      	adds	r3, #1
 80162b0:	60fb      	str	r3, [r7, #12]
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	885b      	ldrh	r3, [r3, #2]
 80162b6:	461a      	mov	r2, r3
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	4293      	cmp	r3, r2
 80162bc:	dbe7      	blt.n	801628e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80162be:	bf00      	nop
 80162c0:	bf00      	nop
 80162c2:	3714      	adds	r7, #20
 80162c4:	46bd      	mov	sp, r7
 80162c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ca:	4770      	bx	lr

080162cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b082      	sub	sp, #8
 80162d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80162d2:	2300      	movs	r3, #0
 80162d4:	80fb      	strh	r3, [r7, #6]
 80162d6:	e009      	b.n	80162ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80162d8:	88fb      	ldrh	r3, [r7, #6]
 80162da:	4a08      	ldr	r2, [pc, #32]	; (80162fc <memp_init+0x30>)
 80162dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7ff ffc3 	bl	801626c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80162e6:	88fb      	ldrh	r3, [r7, #6]
 80162e8:	3301      	adds	r3, #1
 80162ea:	80fb      	strh	r3, [r7, #6]
 80162ec:	88fb      	ldrh	r3, [r7, #6]
 80162ee:	2b0d      	cmp	r3, #13
 80162f0:	d9f2      	bls.n	80162d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80162f2:	bf00      	nop
 80162f4:	bf00      	nop
 80162f6:	3708      	adds	r7, #8
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	08025e98 	.word	0x08025e98

08016300 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b084      	sub	sp, #16
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8016308:	f002 fd70 	bl	8018dec <sys_arch_protect>
 801630c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	689b      	ldr	r3, [r3, #8]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8016316:	68bb      	ldr	r3, [r7, #8]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d015      	beq.n	8016348 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	689b      	ldr	r3, [r3, #8]
 8016320:	68ba      	ldr	r2, [r7, #8]
 8016322:	6812      	ldr	r2, [r2, #0]
 8016324:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8016326:	68bb      	ldr	r3, [r7, #8]
 8016328:	f003 0303 	and.w	r3, r3, #3
 801632c:	2b00      	cmp	r3, #0
 801632e:	d006      	beq.n	801633e <do_memp_malloc_pool+0x3e>
 8016330:	4b09      	ldr	r3, [pc, #36]	; (8016358 <do_memp_malloc_pool+0x58>)
 8016332:	f44f 728c 	mov.w	r2, #280	; 0x118
 8016336:	4909      	ldr	r1, [pc, #36]	; (801635c <do_memp_malloc_pool+0x5c>)
 8016338:	4809      	ldr	r0, [pc, #36]	; (8016360 <do_memp_malloc_pool+0x60>)
 801633a:	f00a f909 	bl	8020550 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801633e:	68f8      	ldr	r0, [r7, #12]
 8016340:	f002 fd62 	bl	8018e08 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	e003      	b.n	8016350 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016348:	68f8      	ldr	r0, [r7, #12]
 801634a:	f002 fd5d 	bl	8018e08 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801634e:	2300      	movs	r3, #0
}
 8016350:	4618      	mov	r0, r3
 8016352:	3710      	adds	r7, #16
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}
 8016358:	08022e74 	.word	0x08022e74
 801635c:	08022eac 	.word	0x08022eac
 8016360:	08022ed0 	.word	0x08022ed0

08016364 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d106      	bne.n	8016380 <memp_malloc_pool+0x1c>
 8016372:	4b0a      	ldr	r3, [pc, #40]	; (801639c <memp_malloc_pool+0x38>)
 8016374:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8016378:	4909      	ldr	r1, [pc, #36]	; (80163a0 <memp_malloc_pool+0x3c>)
 801637a:	480a      	ldr	r0, [pc, #40]	; (80163a4 <memp_malloc_pool+0x40>)
 801637c:	f00a f8e8 	bl	8020550 <iprintf>
  if (desc == NULL) {
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d101      	bne.n	801638a <memp_malloc_pool+0x26>
    return NULL;
 8016386:	2300      	movs	r3, #0
 8016388:	e003      	b.n	8016392 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ff ffb8 	bl	8016300 <do_memp_malloc_pool>
 8016390:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8016392:	4618      	mov	r0, r3
 8016394:	3708      	adds	r7, #8
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}
 801639a:	bf00      	nop
 801639c:	08022e74 	.word	0x08022e74
 80163a0:	08022ef8 	.word	0x08022ef8
 80163a4:	08022ed0 	.word	0x08022ed0

080163a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b084      	sub	sp, #16
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	4603      	mov	r3, r0
 80163b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80163b2:	79fb      	ldrb	r3, [r7, #7]
 80163b4:	2b0d      	cmp	r3, #13
 80163b6:	d908      	bls.n	80163ca <memp_malloc+0x22>
 80163b8:	4b0a      	ldr	r3, [pc, #40]	; (80163e4 <memp_malloc+0x3c>)
 80163ba:	f240 1257 	movw	r2, #343	; 0x157
 80163be:	490a      	ldr	r1, [pc, #40]	; (80163e8 <memp_malloc+0x40>)
 80163c0:	480a      	ldr	r0, [pc, #40]	; (80163ec <memp_malloc+0x44>)
 80163c2:	f00a f8c5 	bl	8020550 <iprintf>
 80163c6:	2300      	movs	r3, #0
 80163c8:	e008      	b.n	80163dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80163ca:	79fb      	ldrb	r3, [r7, #7]
 80163cc:	4a08      	ldr	r2, [pc, #32]	; (80163f0 <memp_malloc+0x48>)
 80163ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163d2:	4618      	mov	r0, r3
 80163d4:	f7ff ff94 	bl	8016300 <do_memp_malloc_pool>
 80163d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80163da:	68fb      	ldr	r3, [r7, #12]
}
 80163dc:	4618      	mov	r0, r3
 80163de:	3710      	adds	r7, #16
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	08022e74 	.word	0x08022e74
 80163e8:	08022f0c 	.word	0x08022f0c
 80163ec:	08022ed0 	.word	0x08022ed0
 80163f0:	08025e98 	.word	0x08025e98

080163f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b084      	sub	sp, #16
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
 80163fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80163fe:	683b      	ldr	r3, [r7, #0]
 8016400:	f003 0303 	and.w	r3, r3, #3
 8016404:	2b00      	cmp	r3, #0
 8016406:	d006      	beq.n	8016416 <do_memp_free_pool+0x22>
 8016408:	4b0d      	ldr	r3, [pc, #52]	; (8016440 <do_memp_free_pool+0x4c>)
 801640a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801640e:	490d      	ldr	r1, [pc, #52]	; (8016444 <do_memp_free_pool+0x50>)
 8016410:	480d      	ldr	r0, [pc, #52]	; (8016448 <do_memp_free_pool+0x54>)
 8016412:	f00a f89d 	bl	8020550 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8016416:	683b      	ldr	r3, [r7, #0]
 8016418:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801641a:	f002 fce7 	bl	8018dec <sys_arch_protect>
 801641e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	689b      	ldr	r3, [r3, #8]
 8016424:	681a      	ldr	r2, [r3, #0]
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	689b      	ldr	r3, [r3, #8]
 801642e:	68fa      	ldr	r2, [r7, #12]
 8016430:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8016432:	68b8      	ldr	r0, [r7, #8]
 8016434:	f002 fce8 	bl	8018e08 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8016438:	bf00      	nop
 801643a:	3710      	adds	r7, #16
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}
 8016440:	08022e74 	.word	0x08022e74
 8016444:	08022f2c 	.word	0x08022f2c
 8016448:	08022ed0 	.word	0x08022ed0

0801644c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b082      	sub	sp, #8
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d106      	bne.n	801646a <memp_free_pool+0x1e>
 801645c:	4b0a      	ldr	r3, [pc, #40]	; (8016488 <memp_free_pool+0x3c>)
 801645e:	f240 1295 	movw	r2, #405	; 0x195
 8016462:	490a      	ldr	r1, [pc, #40]	; (801648c <memp_free_pool+0x40>)
 8016464:	480a      	ldr	r0, [pc, #40]	; (8016490 <memp_free_pool+0x44>)
 8016466:	f00a f873 	bl	8020550 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d007      	beq.n	8016480 <memp_free_pool+0x34>
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d004      	beq.n	8016480 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8016476:	6839      	ldr	r1, [r7, #0]
 8016478:	6878      	ldr	r0, [r7, #4]
 801647a:	f7ff ffbb 	bl	80163f4 <do_memp_free_pool>
 801647e:	e000      	b.n	8016482 <memp_free_pool+0x36>
    return;
 8016480:	bf00      	nop
}
 8016482:	3708      	adds	r7, #8
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}
 8016488:	08022e74 	.word	0x08022e74
 801648c:	08022ef8 	.word	0x08022ef8
 8016490:	08022ed0 	.word	0x08022ed0

08016494 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b082      	sub	sp, #8
 8016498:	af00      	add	r7, sp, #0
 801649a:	4603      	mov	r3, r0
 801649c:	6039      	str	r1, [r7, #0]
 801649e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80164a0:	79fb      	ldrb	r3, [r7, #7]
 80164a2:	2b0d      	cmp	r3, #13
 80164a4:	d907      	bls.n	80164b6 <memp_free+0x22>
 80164a6:	4b0c      	ldr	r3, [pc, #48]	; (80164d8 <memp_free+0x44>)
 80164a8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80164ac:	490b      	ldr	r1, [pc, #44]	; (80164dc <memp_free+0x48>)
 80164ae:	480c      	ldr	r0, [pc, #48]	; (80164e0 <memp_free+0x4c>)
 80164b0:	f00a f84e 	bl	8020550 <iprintf>
 80164b4:	e00c      	b.n	80164d0 <memp_free+0x3c>

  if (mem == NULL) {
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d008      	beq.n	80164ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80164bc:	79fb      	ldrb	r3, [r7, #7]
 80164be:	4a09      	ldr	r2, [pc, #36]	; (80164e4 <memp_free+0x50>)
 80164c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80164c4:	6839      	ldr	r1, [r7, #0]
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7ff ff94 	bl	80163f4 <do_memp_free_pool>
 80164cc:	e000      	b.n	80164d0 <memp_free+0x3c>
    return;
 80164ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80164d0:	3708      	adds	r7, #8
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
 80164d6:	bf00      	nop
 80164d8:	08022e74 	.word	0x08022e74
 80164dc:	08022f4c 	.word	0x08022f4c
 80164e0:	08022ed0 	.word	0x08022ed0
 80164e4:	08025e98 	.word	0x08025e98

080164e8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d013      	beq.n	801651e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d00b      	beq.n	8016516 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	4618      	mov	r0, r3
 8016504:	f001 f932 	bl	801776c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2200      	movs	r2, #0
 801650c:	605a      	str	r2, [r3, #4]
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	685a      	ldr	r2, [r3, #4]
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8016516:	6879      	ldr	r1, [r7, #4]
 8016518:	2006      	movs	r0, #6
 801651a:	f7ff ffbb 	bl	8016494 <memp_free>
  }
}
 801651e:	bf00      	nop
 8016520:	3708      	adds	r7, #8
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}
	...

08016528 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b082      	sub	sp, #8
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d106      	bne.n	8016544 <netbuf_free+0x1c>
 8016536:	4b0d      	ldr	r3, [pc, #52]	; (801656c <netbuf_free+0x44>)
 8016538:	2281      	movs	r2, #129	; 0x81
 801653a:	490d      	ldr	r1, [pc, #52]	; (8016570 <netbuf_free+0x48>)
 801653c:	480d      	ldr	r0, [pc, #52]	; (8016574 <netbuf_free+0x4c>)
 801653e:	f00a f807 	bl	8020550 <iprintf>
 8016542:	e00f      	b.n	8016564 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d004      	beq.n	8016556 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	4618      	mov	r0, r3
 8016552:	f001 f90b 	bl	801776c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2200      	movs	r2, #0
 801655a:	605a      	str	r2, [r3, #4]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	685a      	ldr	r2, [r3, #4]
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8016564:	3708      	adds	r7, #8
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}
 801656a:	bf00      	nop
 801656c:	08022f68 	.word	0x08022f68
 8016570:	08023008 	.word	0x08023008
 8016574:	08022fbc 	.word	0x08022fbc

08016578 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b084      	sub	sp, #16
 801657c:	af00      	add	r7, sp, #0
 801657e:	60f8      	str	r0, [r7, #12]
 8016580:	60b9      	str	r1, [r7, #8]
 8016582:	4613      	mov	r3, r2
 8016584:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d108      	bne.n	801659e <netbuf_ref+0x26>
 801658c:	4b1c      	ldr	r3, [pc, #112]	; (8016600 <netbuf_ref+0x88>)
 801658e:	2299      	movs	r2, #153	; 0x99
 8016590:	491c      	ldr	r1, [pc, #112]	; (8016604 <netbuf_ref+0x8c>)
 8016592:	481d      	ldr	r0, [pc, #116]	; (8016608 <netbuf_ref+0x90>)
 8016594:	f009 ffdc 	bl	8020550 <iprintf>
 8016598:	f06f 030f 	mvn.w	r3, #15
 801659c:	e02b      	b.n	80165f6 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d004      	beq.n	80165b0 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	4618      	mov	r0, r3
 80165ac:	f001 f8de 	bl	801776c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80165b0:	2241      	movs	r2, #65	; 0x41
 80165b2:	2100      	movs	r1, #0
 80165b4:	2036      	movs	r0, #54	; 0x36
 80165b6:	f000 fdf5 	bl	80171a4 <pbuf_alloc>
 80165ba:	4602      	mov	r2, r0
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d105      	bne.n	80165d4 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	2200      	movs	r2, #0
 80165cc:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 80165ce:	f04f 33ff 	mov.w	r3, #4294967295
 80165d2:	e010      	b.n	80165f6 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	68ba      	ldr	r2, [r7, #8]
 80165da:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	88fa      	ldrh	r2, [r7, #6]
 80165e2:	811a      	strh	r2, [r3, #8]
 80165e4:	68fa      	ldr	r2, [r7, #12]
 80165e6:	6812      	ldr	r2, [r2, #0]
 80165e8:	891b      	ldrh	r3, [r3, #8]
 80165ea:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80165f4:	2300      	movs	r3, #0
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	3710      	adds	r7, #16
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	08022f68 	.word	0x08022f68
 8016604:	08023024 	.word	0x08023024
 8016608:	08022fbc 	.word	0x08022fbc

0801660c <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d105      	bne.n	8016626 <netif_loopif_init+0x1a>
 801661a:	4b0b      	ldr	r3, [pc, #44]	; (8016648 <netif_loopif_init+0x3c>)
 801661c:	2299      	movs	r2, #153	; 0x99
 801661e:	490b      	ldr	r1, [pc, #44]	; (801664c <netif_loopif_init+0x40>)
 8016620:	480b      	ldr	r0, [pc, #44]	; (8016650 <netif_loopif_init+0x44>)
 8016622:	f009 ff95 	bl	8020550 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	226c      	movs	r2, #108	; 0x6c
 801662a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = 'o';
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	226f      	movs	r2, #111	; 0x6f
 8016632:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	4a06      	ldr	r2, [pc, #24]	; (8016654 <netif_loopif_init+0x48>)
 801663a:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 801663c:	2300      	movs	r3, #0
}
 801663e:	4618      	mov	r0, r3
 8016640:	3708      	adds	r7, #8
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
 8016646:	bf00      	nop
 8016648:	08023104 	.word	0x08023104
 801664c:	0802313c 	.word	0x0802313c
 8016650:	08023160 	.word	0x08023160
 8016654:	08016ec9 	.word	0x08016ec9

08016658 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b088      	sub	sp, #32
 801665c:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 801665e:	4b0f      	ldr	r3, [pc, #60]	; (801669c <netif_init+0x44>)
 8016660:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 8016662:	4b0e      	ldr	r3, [pc, #56]	; (801669c <netif_init+0x44>)
 8016664:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 8016666:	23ff      	movs	r3, #255	; 0xff
 8016668:	60bb      	str	r3, [r7, #8]
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
#else  /* NO_SYS */
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, tcpip_input);
 801666a:	1d3b      	adds	r3, r7, #4
 801666c:	f107 0208 	add.w	r2, r7, #8
 8016670:	f107 010c 	add.w	r1, r7, #12
 8016674:	480a      	ldr	r0, [pc, #40]	; (80166a0 <netif_init+0x48>)
 8016676:	9002      	str	r0, [sp, #8]
 8016678:	480a      	ldr	r0, [pc, #40]	; (80166a4 <netif_init+0x4c>)
 801667a:	9001      	str	r0, [sp, #4]
 801667c:	2000      	movs	r0, #0
 801667e:	9000      	str	r0, [sp, #0]
 8016680:	4809      	ldr	r0, [pc, #36]	; (80166a8 <netif_init+0x50>)
 8016682:	f000 f813 	bl	80166ac <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 8016686:	4808      	ldr	r0, [pc, #32]	; (80166a8 <netif_init+0x50>)
 8016688:	f000 fb10 	bl	8016cac <netif_set_link_up>
  netif_set_up(&loop_netif);
 801668c:	4806      	ldr	r0, [pc, #24]	; (80166a8 <netif_init+0x50>)
 801668e:	f000 fa4b 	bl	8016b28 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 8016692:	bf00      	nop
 8016694:	3710      	adds	r7, #16
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}
 801669a:	bf00      	nop
 801669c:	0100007f 	.word	0x0100007f
 80166a0:	0801f32d 	.word	0x0801f32d
 80166a4:	0801660d 	.word	0x0801660d
 80166a8:	2400d33c 	.word	0x2400d33c

080166ac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b086      	sub	sp, #24
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	60f8      	str	r0, [r7, #12]
 80166b4:	60b9      	str	r1, [r7, #8]
 80166b6:	607a      	str	r2, [r7, #4]
 80166b8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d108      	bne.n	80166d2 <netif_add+0x26>
 80166c0:	4b62      	ldr	r3, [pc, #392]	; (801684c <netif_add+0x1a0>)
 80166c2:	f240 1227 	movw	r2, #295	; 0x127
 80166c6:	4962      	ldr	r1, [pc, #392]	; (8016850 <netif_add+0x1a4>)
 80166c8:	4862      	ldr	r0, [pc, #392]	; (8016854 <netif_add+0x1a8>)
 80166ca:	f009 ff41 	bl	8020550 <iprintf>
 80166ce:	2300      	movs	r3, #0
 80166d0:	e0b7      	b.n	8016842 <netif_add+0x196>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80166d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d108      	bne.n	80166ea <netif_add+0x3e>
 80166d8:	4b5c      	ldr	r3, [pc, #368]	; (801684c <netif_add+0x1a0>)
 80166da:	f44f 7294 	mov.w	r2, #296	; 0x128
 80166de:	495e      	ldr	r1, [pc, #376]	; (8016858 <netif_add+0x1ac>)
 80166e0:	485c      	ldr	r0, [pc, #368]	; (8016854 <netif_add+0x1a8>)
 80166e2:	f009 ff35 	bl	8020550 <iprintf>
 80166e6:	2300      	movs	r3, #0
 80166e8:	e0ab      	b.n	8016842 <netif_add+0x196>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d101      	bne.n	80166f4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80166f0:	4b5a      	ldr	r3, [pc, #360]	; (801685c <netif_add+0x1b0>)
 80166f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d101      	bne.n	80166fe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80166fa:	4b58      	ldr	r3, [pc, #352]	; (801685c <netif_add+0x1b0>)
 80166fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d101      	bne.n	8016708 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8016704:	4b55      	ldr	r3, [pc, #340]	; (801685c <netif_add+0x1b0>)
 8016706:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	2200      	movs	r2, #0
 801670c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	2200      	movs	r2, #0
 8016712:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	2200      	movs	r2, #0
 8016718:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	4a50      	ldr	r2, [pc, #320]	; (8016860 <netif_add+0x1b4>)
 801671e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2200      	movs	r2, #0
 8016724:	859a      	strh	r2, [r3, #44]	; 0x2c
  netif->flags = 0;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	2200      	movs	r2, #0
 801672a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	3328      	adds	r3, #40	; 0x28
 8016732:	2204      	movs	r2, #4
 8016734:	2100      	movs	r1, #0
 8016736:	4618      	mov	r0, r3
 8016738:	f009 fe22 	bl	8020380 <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	2200      	movs	r2, #0
 8016740:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	2200      	movs	r2, #0
 8016746:	621a      	str	r2, [r3, #32]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	2200      	movs	r2, #0
 801674c:	63da      	str	r2, [r3, #60]	; 0x3c
  netif->loop_last = NULL;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	2200      	movs	r2, #0
 8016752:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	6a3a      	ldr	r2, [r7, #32]
 8016758:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801675a:	4b42      	ldr	r3, [pc, #264]	; (8016864 <netif_add+0x1b8>)
 801675c:	781a      	ldrb	r2, [r3, #0]
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->input = input;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016768:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	687a      	ldr	r2, [r7, #4]
 801676e:	68b9      	ldr	r1, [r7, #8]
 8016770:	68f8      	ldr	r0, [r7, #12]
 8016772:	f000 f947 	bl	8016a04 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8016776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016778:	68f8      	ldr	r0, [r7, #12]
 801677a:	4798      	blx	r3
 801677c:	4603      	mov	r3, r0
 801677e:	2b00      	cmp	r3, #0
 8016780:	d001      	beq.n	8016786 <netif_add+0xda>
    return NULL;
 8016782:	2300      	movs	r3, #0
 8016784:	e05d      	b.n	8016842 <netif_add+0x196>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801678c:	2bff      	cmp	r3, #255	; 0xff
 801678e:	d103      	bne.n	8016798 <netif_add+0xec>
        netif->num = 0;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	2200      	movs	r2, #0
 8016794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      }
      num_netifs = 0;
 8016798:	2300      	movs	r3, #0
 801679a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801679c:	4b32      	ldr	r3, [pc, #200]	; (8016868 <netif_add+0x1bc>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	617b      	str	r3, [r7, #20]
 80167a2:	e02b      	b.n	80167fc <netif_add+0x150>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80167a4:	697a      	ldr	r2, [r7, #20]
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d106      	bne.n	80167ba <netif_add+0x10e>
 80167ac:	4b27      	ldr	r3, [pc, #156]	; (801684c <netif_add+0x1a0>)
 80167ae:	f240 128b 	movw	r2, #395	; 0x18b
 80167b2:	492e      	ldr	r1, [pc, #184]	; (801686c <netif_add+0x1c0>)
 80167b4:	4827      	ldr	r0, [pc, #156]	; (8016854 <netif_add+0x1a8>)
 80167b6:	f009 fecb 	bl	8020550 <iprintf>
        num_netifs++;
 80167ba:	693b      	ldr	r3, [r7, #16]
 80167bc:	3301      	adds	r3, #1
 80167be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	2bff      	cmp	r3, #255	; 0xff
 80167c4:	dd06      	ble.n	80167d4 <netif_add+0x128>
 80167c6:	4b21      	ldr	r3, [pc, #132]	; (801684c <netif_add+0x1a0>)
 80167c8:	f240 128d 	movw	r2, #397	; 0x18d
 80167cc:	4928      	ldr	r1, [pc, #160]	; (8016870 <netif_add+0x1c4>)
 80167ce:	4821      	ldr	r0, [pc, #132]	; (8016854 <netif_add+0x1a8>)
 80167d0:	f009 febe 	bl	8020550 <iprintf>
        if (netif2->num == netif->num) {
 80167d4:	697b      	ldr	r3, [r7, #20]
 80167d6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d108      	bne.n	80167f6 <netif_add+0x14a>
          netif->num++;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80167ea:	3301      	adds	r3, #1
 80167ec:	b2da      	uxtb	r2, r3
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          break;
 80167f4:	e005      	b.n	8016802 <netif_add+0x156>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80167f6:	697b      	ldr	r3, [r7, #20]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	617b      	str	r3, [r7, #20]
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d1d0      	bne.n	80167a4 <netif_add+0xf8>
        }
      }
    } while (netif2 != NULL);
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d1be      	bne.n	8016786 <netif_add+0xda>
  }
  if (netif->num == 254) {
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801680e:	2bfe      	cmp	r3, #254	; 0xfe
 8016810:	d103      	bne.n	801681a <netif_add+0x16e>
    netif_num = 0;
 8016812:	4b14      	ldr	r3, [pc, #80]	; (8016864 <netif_add+0x1b8>)
 8016814:	2200      	movs	r2, #0
 8016816:	701a      	strb	r2, [r3, #0]
 8016818:	e006      	b.n	8016828 <netif_add+0x17c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016820:	3301      	adds	r3, #1
 8016822:	b2da      	uxtb	r2, r3
 8016824:	4b0f      	ldr	r3, [pc, #60]	; (8016864 <netif_add+0x1b8>)
 8016826:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8016828:	4b0f      	ldr	r3, [pc, #60]	; (8016868 <netif_add+0x1bc>)
 801682a:	681a      	ldr	r2, [r3, #0]
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8016830:	4a0d      	ldr	r2, [pc, #52]	; (8016868 <netif_add+0x1bc>)
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);
 8016836:	2200      	movs	r2, #0
 8016838:	2101      	movs	r1, #1
 801683a:	68f8      	ldr	r0, [r7, #12]
 801683c:	f000 fc00 	bl	8017040 <netif_invoke_ext_callback>

  return netif;
 8016840:	68fb      	ldr	r3, [r7, #12]
}
 8016842:	4618      	mov	r0, r3
 8016844:	3718      	adds	r7, #24
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}
 801684a:	bf00      	nop
 801684c:	08023104 	.word	0x08023104
 8016850:	080231c0 	.word	0x080231c0
 8016854:	08023160 	.word	0x08023160
 8016858:	080231dc 	.word	0x080231dc
 801685c:	08025de8 	.word	0x08025de8
 8016860:	08016fd9 	.word	0x08016fd9
 8016864:	2400d338 	.word	0x2400d338
 8016868:	2400d330 	.word	0x2400d330
 801686c:	08023200 	.word	0x08023200
 8016870:	08023214 	.word	0x08023214

08016874 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b082      	sub	sp, #8
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
 801687c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801687e:	6839      	ldr	r1, [r7, #0]
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	f004 fa15 	bl	801acb0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016886:	6839      	ldr	r1, [r7, #0]
 8016888:	6878      	ldr	r0, [r7, #4]
 801688a:	f009 fcff 	bl	802028c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801688e:	bf00      	nop
 8016890:	3708      	adds	r7, #8
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}
	...

08016898 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b086      	sub	sp, #24
 801689c:	af00      	add	r7, sp, #0
 801689e:	60f8      	str	r0, [r7, #12]
 80168a0:	60b9      	str	r1, [r7, #8]
 80168a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80168a4:	68bb      	ldr	r3, [r7, #8]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d106      	bne.n	80168b8 <netif_do_set_ipaddr+0x20>
 80168aa:	4b21      	ldr	r3, [pc, #132]	; (8016930 <netif_do_set_ipaddr+0x98>)
 80168ac:	f240 12cb 	movw	r2, #459	; 0x1cb
 80168b0:	4920      	ldr	r1, [pc, #128]	; (8016934 <netif_do_set_ipaddr+0x9c>)
 80168b2:	4821      	ldr	r0, [pc, #132]	; (8016938 <netif_do_set_ipaddr+0xa0>)
 80168b4:	f009 fe4c 	bl	8020550 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d106      	bne.n	80168cc <netif_do_set_ipaddr+0x34>
 80168be:	4b1c      	ldr	r3, [pc, #112]	; (8016930 <netif_do_set_ipaddr+0x98>)
 80168c0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80168c4:	491b      	ldr	r1, [pc, #108]	; (8016934 <netif_do_set_ipaddr+0x9c>)
 80168c6:	481c      	ldr	r0, [pc, #112]	; (8016938 <netif_do_set_ipaddr+0xa0>)
 80168c8:	f009 fe42 	bl	8020550 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80168cc:	68bb      	ldr	r3, [r7, #8]
 80168ce:	681a      	ldr	r2, [r3, #0]
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	3304      	adds	r3, #4
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	429a      	cmp	r2, r3
 80168d8:	d024      	beq.n	8016924 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	3304      	adds	r3, #4
 80168e4:	681a      	ldr	r2, [r3, #0]
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80168ea:	f107 0314 	add.w	r3, r7, #20
 80168ee:	4619      	mov	r1, r3
 80168f0:	6878      	ldr	r0, [r7, #4]
 80168f2:	f7ff ffbf 	bl	8016874 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80168f6:	68bb      	ldr	r3, [r7, #8]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d002      	beq.n	8016902 <netif_do_set_ipaddr+0x6a>
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	e000      	b.n	8016904 <netif_do_set_ipaddr+0x6c>
 8016902:	2300      	movs	r3, #0
 8016904:	68fa      	ldr	r2, [r7, #12]
 8016906:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8016908:	2101      	movs	r1, #1
 801690a:	68f8      	ldr	r0, [r7, #12]
 801690c:	f000 f94a 	bl	8016ba4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	69db      	ldr	r3, [r3, #28]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d003      	beq.n	8016920 <netif_do_set_ipaddr+0x88>
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	69db      	ldr	r3, [r3, #28]
 801691c:	68f8      	ldr	r0, [r7, #12]
 801691e:	4798      	blx	r3
    return 1; /* address changed */
 8016920:	2301      	movs	r3, #1
 8016922:	e000      	b.n	8016926 <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 8016924:	2300      	movs	r3, #0
}
 8016926:	4618      	mov	r0, r3
 8016928:	3718      	adds	r7, #24
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}
 801692e:	bf00      	nop
 8016930:	08023104 	.word	0x08023104
 8016934:	08023244 	.word	0x08023244
 8016938:	08023160 	.word	0x08023160

0801693c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b084      	sub	sp, #16
 8016940:	af00      	add	r7, sp, #0
 8016942:	60f8      	str	r0, [r7, #12]
 8016944:	60b9      	str	r1, [r7, #8]
 8016946:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	681a      	ldr	r2, [r3, #0]
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	3308      	adds	r3, #8
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	429a      	cmp	r2, r3
 8016954:	d019      	beq.n	801698a <netif_do_set_netmask+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_nm != NULL);
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d106      	bne.n	801696a <netif_do_set_netmask+0x2e>
 801695c:	4b0d      	ldr	r3, [pc, #52]	; (8016994 <netif_do_set_netmask+0x58>)
 801695e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8016962:	490d      	ldr	r1, [pc, #52]	; (8016998 <netif_do_set_netmask+0x5c>)
 8016964:	480d      	ldr	r0, [pc, #52]	; (801699c <netif_do_set_netmask+0x60>)
 8016966:	f009 fdf3 	bl	8020550 <iprintf>
    ip_addr_copy(*old_nm, *netif_ip_netmask4(netif));
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	3308      	adds	r3, #8
 801696e:	681a      	ldr	r2, [r3, #0]
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d002      	beq.n	8016980 <netif_do_set_netmask+0x44>
 801697a:	68bb      	ldr	r3, [r7, #8]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	e000      	b.n	8016982 <netif_do_set_netmask+0x46>
 8016980:	2300      	movs	r3, #0
 8016982:	68fa      	ldr	r2, [r7, #12]
 8016984:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8016986:	2301      	movs	r3, #1
 8016988:	e000      	b.n	801698c <netif_do_set_netmask+0x50>
  }
  return 0; /* netmask unchanged */
 801698a:	2300      	movs	r3, #0
}
 801698c:	4618      	mov	r0, r3
 801698e:	3710      	adds	r7, #16
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}
 8016994:	08023104 	.word	0x08023104
 8016998:	08023244 	.word	0x08023244
 801699c:	08023160 	.word	0x08023160

080169a0 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b084      	sub	sp, #16
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	60f8      	str	r0, [r7, #12]
 80169a8:	60b9      	str	r1, [r7, #8]
 80169aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	681a      	ldr	r2, [r3, #0]
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	330c      	adds	r3, #12
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	429a      	cmp	r2, r3
 80169b8:	d019      	beq.n	80169ee <netif_do_set_gw+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_gw != NULL);
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d106      	bne.n	80169ce <netif_do_set_gw+0x2e>
 80169c0:	4b0d      	ldr	r3, [pc, #52]	; (80169f8 <netif_do_set_gw+0x58>)
 80169c2:	f44f 7214 	mov.w	r2, #592	; 0x250
 80169c6:	490d      	ldr	r1, [pc, #52]	; (80169fc <netif_do_set_gw+0x5c>)
 80169c8:	480d      	ldr	r0, [pc, #52]	; (8016a00 <netif_do_set_gw+0x60>)
 80169ca:	f009 fdc1 	bl	8020550 <iprintf>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	330c      	adds	r3, #12
 80169d2:	681a      	ldr	r2, [r3, #0]
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d002      	beq.n	80169e4 <netif_do_set_gw+0x44>
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	e000      	b.n	80169e6 <netif_do_set_gw+0x46>
 80169e4:	2300      	movs	r3, #0
 80169e6:	68fa      	ldr	r2, [r7, #12]
 80169e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80169ea:	2301      	movs	r3, #1
 80169ec:	e000      	b.n	80169f0 <netif_do_set_gw+0x50>
  }
  return 0; /* gateway unchanged */
 80169ee:	2300      	movs	r3, #0
}
 80169f0:	4618      	mov	r0, r3
 80169f2:	3710      	adds	r7, #16
 80169f4:	46bd      	mov	sp, r7
 80169f6:	bd80      	pop	{r7, pc}
 80169f8:	08023104 	.word	0x08023104
 80169fc:	08023244 	.word	0x08023244
 8016a00:	08023160 	.word	0x08023160

08016a04 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b08e      	sub	sp, #56	; 0x38
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	607a      	str	r2, [r7, #4]
 8016a10:	603b      	str	r3, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
 8016a12:	2300      	movs	r3, #0
 8016a14:	86fb      	strh	r3, [r7, #54]	; 0x36
  netif_ext_callback_args_t cb_args;
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
 8016a16:	f107 0318 	add.w	r3, r7, #24
 8016a1a:	633b      	str	r3, [r7, #48]	; 0x30
  ip_addr_t *old_gw = &old_gw_val;
 8016a1c:	f107 0314 	add.w	r3, r7, #20
 8016a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d101      	bne.n	8016a2c <netif_set_addr+0x28>
    ipaddr = IP4_ADDR_ANY4;
 8016a28:	4b36      	ldr	r3, [pc, #216]	; (8016b04 <netif_set_addr+0x100>)
 8016a2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d101      	bne.n	8016a36 <netif_set_addr+0x32>
    netmask = IP4_ADDR_ANY4;
 8016a32:	4b34      	ldr	r3, [pc, #208]	; (8016b04 <netif_set_addr+0x100>)
 8016a34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d101      	bne.n	8016a40 <netif_set_addr+0x3c>
    gw = IP4_ADDR_ANY4;
 8016a3c:	4b31      	ldr	r3, [pc, #196]	; (8016b04 <netif_set_addr+0x100>)
 8016a3e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8016a40:	68bb      	ldr	r3, [r7, #8]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d003      	beq.n	8016a4e <netif_set_addr+0x4a>
 8016a46:	68bb      	ldr	r3, [r7, #8]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d101      	bne.n	8016a52 <netif_set_addr+0x4e>
 8016a4e:	2301      	movs	r3, #1
 8016a50:	e000      	b.n	8016a54 <netif_set_addr+0x50>
 8016a52:	2300      	movs	r3, #0
 8016a54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (remove) {
 8016a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d010      	beq.n	8016a7e <netif_set_addr+0x7a>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016a5c:	f107 0310 	add.w	r3, r7, #16
 8016a60:	461a      	mov	r2, r3
 8016a62:	68b9      	ldr	r1, [r7, #8]
 8016a64:	68f8      	ldr	r0, [r7, #12]
 8016a66:	f7ff ff17 	bl	8016898 <netif_do_set_ipaddr>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d006      	beq.n	8016a7e <netif_set_addr+0x7a>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 8016a70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016a72:	f043 0310 	orr.w	r3, r3, #16
 8016a76:	86fb      	strh	r3, [r7, #54]	; 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 8016a78:	f107 0310 	add.w	r3, r7, #16
 8016a7c:	61fb      	str	r3, [r7, #28]
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8016a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a80:	6879      	ldr	r1, [r7, #4]
 8016a82:	68f8      	ldr	r0, [r7, #12]
 8016a84:	f7ff ff5a 	bl	801693c <netif_do_set_netmask>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d005      	beq.n	8016a9a <netif_set_addr+0x96>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
 8016a8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a94:	86fb      	strh	r3, [r7, #54]	; 0x36
    cb_args.ipv4_changed.old_netmask = old_nm;
 8016a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a98:	623b      	str	r3, [r7, #32]
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8016a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a9c:	6839      	ldr	r1, [r7, #0]
 8016a9e:	68f8      	ldr	r0, [r7, #12]
 8016aa0:	f7ff ff7e 	bl	80169a0 <netif_do_set_gw>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d005      	beq.n	8016ab6 <netif_set_addr+0xb2>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
 8016aaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016aac:	f043 0320 	orr.w	r3, r3, #32
 8016ab0:	86fb      	strh	r3, [r7, #54]	; 0x36
    cb_args.ipv4_changed.old_gw = old_gw;
 8016ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab4:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  }
  if (!remove) {
 8016ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d110      	bne.n	8016ade <netif_set_addr+0xda>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016abc:	f107 0310 	add.w	r3, r7, #16
 8016ac0:	461a      	mov	r2, r3
 8016ac2:	68b9      	ldr	r1, [r7, #8]
 8016ac4:	68f8      	ldr	r0, [r7, #12]
 8016ac6:	f7ff fee7 	bl	8016898 <netif_do_set_ipaddr>
 8016aca:	4603      	mov	r3, r0
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d006      	beq.n	8016ade <netif_set_addr+0xda>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 8016ad0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016ad2:	f043 0310 	orr.w	r3, r3, #16
 8016ad6:	86fb      	strh	r3, [r7, #54]	; 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 8016ad8:	f107 0310 	add.w	r3, r7, #16
 8016adc:	61fb      	str	r3, [r7, #28]
#endif
    }
  }

#if LWIP_NETIF_EXT_STATUS_CALLBACK
  if (change_reason != LWIP_NSC_NONE) {
 8016ade:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d00a      	beq.n	8016afa <netif_set_addr+0xf6>
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
 8016ae4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aea:	86fb      	strh	r3, [r7, #54]	; 0x36
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
 8016aec:	f107 021c 	add.w	r2, r7, #28
 8016af0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016af2:	4619      	mov	r1, r3
 8016af4:	68f8      	ldr	r0, [r7, #12]
 8016af6:	f000 faa3 	bl	8017040 <netif_invoke_ext_callback>
  }
#endif
}
 8016afa:	bf00      	nop
 8016afc:	3738      	adds	r7, #56	; 0x38
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}
 8016b02:	bf00      	nop
 8016b04:	08025de8 	.word	0x08025de8

08016b08 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b083      	sub	sp, #12
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8016b10:	4a04      	ldr	r2, [pc, #16]	; (8016b24 <netif_set_default+0x1c>)
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8016b16:	bf00      	nop
 8016b18:	370c      	adds	r7, #12
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b20:	4770      	bx	lr
 8016b22:	bf00      	nop
 8016b24:	2400d334 	.word	0x2400d334

08016b28 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b086      	sub	sp, #24
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d107      	bne.n	8016b46 <netif_set_up+0x1e>
 8016b36:	4b18      	ldr	r3, [pc, #96]	; (8016b98 <netif_set_up+0x70>)
 8016b38:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016b3c:	4917      	ldr	r1, [pc, #92]	; (8016b9c <netif_set_up+0x74>)
 8016b3e:	4818      	ldr	r0, [pc, #96]	; (8016ba0 <netif_set_up+0x78>)
 8016b40:	f009 fd06 	bl	8020550 <iprintf>
 8016b44:	e024      	b.n	8016b90 <netif_set_up+0x68>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b4c:	f003 0301 	and.w	r3, r3, #1
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d11d      	bne.n	8016b90 <netif_set_up+0x68>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b5a:	f043 0301 	orr.w	r3, r3, #1
 8016b5e:	b2da      	uxtb	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	69db      	ldr	r3, [r3, #28]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d003      	beq.n	8016b76 <netif_set_up+0x4e>
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	69db      	ldr	r3, [r3, #28]
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	4798      	blx	r3

#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 1;
 8016b76:	2301      	movs	r3, #1
 8016b78:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 8016b7a:	f107 030c 	add.w	r3, r7, #12
 8016b7e:	461a      	mov	r2, r3
 8016b80:	2108      	movs	r1, #8
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	f000 fa5c 	bl	8017040 <netif_invoke_ext_callback>
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016b88:	2103      	movs	r1, #3
 8016b8a:	6878      	ldr	r0, [r7, #4]
 8016b8c:	f000 f80a 	bl	8016ba4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8016b90:	3718      	adds	r7, #24
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}
 8016b96:	bf00      	nop
 8016b98:	08023104 	.word	0x08023104
 8016b9c:	080232b4 	.word	0x080232b4
 8016ba0:	08023160 	.word	0x08023160

08016ba4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	460b      	mov	r3, r1
 8016bae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d106      	bne.n	8016bc4 <netif_issue_reports+0x20>
 8016bb6:	4b18      	ldr	r3, [pc, #96]	; (8016c18 <netif_issue_reports+0x74>)
 8016bb8:	f240 326d 	movw	r2, #877	; 0x36d
 8016bbc:	4917      	ldr	r1, [pc, #92]	; (8016c1c <netif_issue_reports+0x78>)
 8016bbe:	4818      	ldr	r0, [pc, #96]	; (8016c20 <netif_issue_reports+0x7c>)
 8016bc0:	f009 fcc6 	bl	8020550 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016bca:	f003 0304 	and.w	r3, r3, #4
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d01e      	beq.n	8016c10 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016bd8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d017      	beq.n	8016c10 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016be0:	78fb      	ldrb	r3, [r7, #3]
 8016be2:	f003 0301 	and.w	r3, r3, #1
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d013      	beq.n	8016c12 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	3304      	adds	r3, #4
 8016bee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d00e      	beq.n	8016c12 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016bfa:	f003 0308 	and.w	r3, r3, #8
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d007      	beq.n	8016c12 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	3304      	adds	r3, #4
 8016c06:	4619      	mov	r1, r3
 8016c08:	6878      	ldr	r0, [r7, #4]
 8016c0a:	f7fd f8bd 	bl	8013d88 <etharp_request>
 8016c0e:	e000      	b.n	8016c12 <netif_issue_reports+0x6e>
    return;
 8016c10:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8016c12:	3708      	adds	r7, #8
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}
 8016c18:	08023104 	.word	0x08023104
 8016c1c:	080232d0 	.word	0x080232d0
 8016c20:	08023160 	.word	0x08023160

08016c24 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b086      	sub	sp, #24
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d107      	bne.n	8016c42 <netif_set_down+0x1e>
 8016c32:	4b1b      	ldr	r3, [pc, #108]	; (8016ca0 <netif_set_down+0x7c>)
 8016c34:	f240 329b 	movw	r2, #923	; 0x39b
 8016c38:	491a      	ldr	r1, [pc, #104]	; (8016ca4 <netif_set_down+0x80>)
 8016c3a:	481b      	ldr	r0, [pc, #108]	; (8016ca8 <netif_set_down+0x84>)
 8016c3c:	f009 fc88 	bl	8020550 <iprintf>
 8016c40:	e02a      	b.n	8016c98 <netif_set_down+0x74>

  if (netif->flags & NETIF_FLAG_UP) {
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016c48:	f003 0301 	and.w	r3, r3, #1
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d023      	beq.n	8016c98 <netif_set_down+0x74>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 0;
 8016c50:	2300      	movs	r3, #0
 8016c52:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 8016c54:	f107 030c 	add.w	r3, r7, #12
 8016c58:	461a      	mov	r2, r3
 8016c5a:	2108      	movs	r1, #8
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f000 f9ef 	bl	8017040 <netif_invoke_ext_callback>
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016c68:	f023 0301 	bic.w	r3, r3, #1
 8016c6c:	b2da      	uxtb	r2, r3
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016c7a:	f003 0308 	and.w	r3, r3, #8
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d002      	beq.n	8016c88 <netif_set_down+0x64>
      etharp_cleanup_netif(netif);
 8016c82:	6878      	ldr	r0, [r7, #4]
 8016c84:	f7fc fc3a 	bl	80134fc <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	69db      	ldr	r3, [r3, #28]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d003      	beq.n	8016c98 <netif_set_down+0x74>
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	69db      	ldr	r3, [r3, #28]
 8016c94:	6878      	ldr	r0, [r7, #4]
 8016c96:	4798      	blx	r3
  }
}
 8016c98:	3718      	adds	r7, #24
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}
 8016c9e:	bf00      	nop
 8016ca0:	08023104 	.word	0x08023104
 8016ca4:	080232f4 	.word	0x080232f4
 8016ca8:	08023160 	.word	0x08023160

08016cac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b086      	sub	sp, #24
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d107      	bne.n	8016cca <netif_set_link_up+0x1e>
 8016cba:	4b19      	ldr	r3, [pc, #100]	; (8016d20 <netif_set_link_up+0x74>)
 8016cbc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8016cc0:	4918      	ldr	r1, [pc, #96]	; (8016d24 <netif_set_link_up+0x78>)
 8016cc2:	4819      	ldr	r0, [pc, #100]	; (8016d28 <netif_set_link_up+0x7c>)
 8016cc4:	f009 fc44 	bl	8020550 <iprintf>
 8016cc8:	e027      	b.n	8016d1a <netif_set_link_up+0x6e>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016cd0:	f003 0304 	and.w	r3, r3, #4
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d120      	bne.n	8016d1a <netif_set_link_up+0x6e>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016cde:	f043 0304 	orr.w	r3, r3, #4
 8016ce2:	b2da      	uxtb	r2, r3
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f7fa fb3a 	bl	8011364 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016cf0:	2103      	movs	r1, #3
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f7ff ff56 	bl	8016ba4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6a1b      	ldr	r3, [r3, #32]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d003      	beq.n	8016d08 <netif_set_link_up+0x5c>
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6a1b      	ldr	r3, [r3, #32]
 8016d04:	6878      	ldr	r0, [r7, #4]
 8016d06:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 1;
 8016d08:	2301      	movs	r3, #1
 8016d0a:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 8016d0c:	f107 030c 	add.w	r3, r7, #12
 8016d10:	461a      	mov	r2, r3
 8016d12:	2104      	movs	r1, #4
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f000 f993 	bl	8017040 <netif_invoke_ext_callback>
    }
#endif
  }
}
 8016d1a:	3718      	adds	r7, #24
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd80      	pop	{r7, pc}
 8016d20:	08023104 	.word	0x08023104
 8016d24:	08023314 	.word	0x08023314
 8016d28:	08023160 	.word	0x08023160

08016d2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b086      	sub	sp, #24
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d107      	bne.n	8016d4a <netif_set_link_down+0x1e>
 8016d3a:	4b16      	ldr	r3, [pc, #88]	; (8016d94 <netif_set_link_down+0x68>)
 8016d3c:	f240 4206 	movw	r2, #1030	; 0x406
 8016d40:	4915      	ldr	r1, [pc, #84]	; (8016d98 <netif_set_link_down+0x6c>)
 8016d42:	4816      	ldr	r0, [pc, #88]	; (8016d9c <netif_set_link_down+0x70>)
 8016d44:	f009 fc04 	bl	8020550 <iprintf>
 8016d48:	e020      	b.n	8016d8c <netif_set_link_down+0x60>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016d50:	f003 0304 	and.w	r3, r3, #4
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d019      	beq.n	8016d8c <netif_set_link_down+0x60>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016d5e:	f023 0304 	bic.w	r3, r3, #4
 8016d62:	b2da      	uxtb	r2, r3
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6a1b      	ldr	r3, [r3, #32]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d003      	beq.n	8016d7a <netif_set_link_down+0x4e>
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	6a1b      	ldr	r3, [r3, #32]
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 0;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 8016d7e:	f107 030c 	add.w	r3, r7, #12
 8016d82:	461a      	mov	r2, r3
 8016d84:	2104      	movs	r1, #4
 8016d86:	6878      	ldr	r0, [r7, #4]
 8016d88:	f000 f95a 	bl	8017040 <netif_invoke_ext_callback>
    }
#endif
  }
}
 8016d8c:	3718      	adds	r7, #24
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	08023104 	.word	0x08023104
 8016d98:	08023338 	.word	0x08023338
 8016d9c:	08023160 	.word	0x08023160

08016da0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016da0:	b480      	push	{r7}
 8016da2:	b083      	sub	sp, #12
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d002      	beq.n	8016db6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	683a      	ldr	r2, [r7, #0]
 8016db4:	621a      	str	r2, [r3, #32]
  }
}
 8016db6:	bf00      	nop
 8016db8:	370c      	adds	r7, #12
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc0:	4770      	bx	lr
	...

08016dc4 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b088      	sub	sp, #32
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
 8016dcc:	6039      	str	r1, [r7, #0]
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	76fb      	strb	r3, [r7, #27]
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d106      	bne.n	8016de6 <netif_loop_output+0x22>
 8016dd8:	4b35      	ldr	r3, [pc, #212]	; (8016eb0 <netif_loop_output+0xec>)
 8016dda:	f240 424b 	movw	r2, #1099	; 0x44b
 8016dde:	4935      	ldr	r1, [pc, #212]	; (8016eb4 <netif_loop_output+0xf0>)
 8016de0:	4835      	ldr	r0, [pc, #212]	; (8016eb8 <netif_loop_output+0xf4>)
 8016de2:	f009 fbb5 	bl	8020550 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d106      	bne.n	8016dfa <netif_loop_output+0x36>
 8016dec:	4b30      	ldr	r3, [pc, #192]	; (8016eb0 <netif_loop_output+0xec>)
 8016dee:	f240 424c 	movw	r2, #1100	; 0x44c
 8016df2:	4932      	ldr	r1, [pc, #200]	; (8016ebc <netif_loop_output+0xf8>)
 8016df4:	4830      	ldr	r0, [pc, #192]	; (8016eb8 <netif_loop_output+0xf4>)
 8016df6:	f009 fbab 	bl	8020550 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	891b      	ldrh	r3, [r3, #8]
 8016dfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e02:	4619      	mov	r1, r3
 8016e04:	200e      	movs	r0, #14
 8016e06:	f000 f9cd 	bl	80171a4 <pbuf_alloc>
 8016e0a:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8016e0c:	697b      	ldr	r3, [r7, #20]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d102      	bne.n	8016e18 <netif_loop_output+0x54>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 8016e12:	f04f 33ff 	mov.w	r3, #4294967295
 8016e16:	e046      	b.n	8016ea6 <netif_loop_output+0xe2>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 8016e18:	6839      	ldr	r1, [r7, #0]
 8016e1a:	6978      	ldr	r0, [r7, #20]
 8016e1c:	f000 fdda 	bl	80179d4 <pbuf_copy>
 8016e20:	4603      	mov	r3, r0
 8016e22:	74fb      	strb	r3, [r7, #19]
 8016e24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d005      	beq.n	8016e38 <netif_loop_output+0x74>
    pbuf_free(r);
 8016e2c:	6978      	ldr	r0, [r7, #20]
 8016e2e:	f000 fc9d 	bl	801776c <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 8016e32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e36:	e036      	b.n	8016ea6 <netif_loop_output+0xe2>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 8016e38:	697b      	ldr	r3, [r7, #20]
 8016e3a:	61fb      	str	r3, [r7, #28]
 8016e3c:	e002      	b.n	8016e44 <netif_loop_output+0x80>
 8016e3e:	69fb      	ldr	r3, [r7, #28]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	61fb      	str	r3, [r7, #28]
 8016e44:	69fb      	ldr	r3, [r7, #28]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d1f8      	bne.n	8016e3e <netif_loop_output+0x7a>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
 8016e4c:	f001 ffce 	bl	8018dec <sys_arch_protect>
 8016e50:	60f8      	str	r0, [r7, #12]
  if (netif->loop_first != NULL) {
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d012      	beq.n	8016e80 <netif_loop_output+0xbc>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d106      	bne.n	8016e70 <netif_loop_output+0xac>
 8016e62:	4b13      	ldr	r3, [pc, #76]	; (8016eb0 <netif_loop_output+0xec>)
 8016e64:	f240 4277 	movw	r2, #1143	; 0x477
 8016e68:	4915      	ldr	r1, [pc, #84]	; (8016ec0 <netif_loop_output+0xfc>)
 8016e6a:	4813      	ldr	r0, [pc, #76]	; (8016eb8 <netif_loop_output+0xf4>)
 8016e6c:	f009 fb70 	bl	8020550 <iprintf>
    netif->loop_last->next = r;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e74:	697a      	ldr	r2, [r7, #20]
 8016e76:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	69fa      	ldr	r2, [r7, #28]
 8016e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8016e7e:	e007      	b.n	8016e90 <netif_loop_output+0xcc>
  } else {
    netif->loop_first = r;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	697a      	ldr	r2, [r7, #20]
 8016e84:	63da      	str	r2, [r3, #60]	; 0x3c
    netif->loop_last = last;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	69fa      	ldr	r2, [r7, #28]
 8016e8a:	641a      	str	r2, [r3, #64]	; 0x40
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
    /* No existing packets queued, schedule poll */
    schedule_poll = 1;
 8016e8c:	2301      	movs	r3, #1
 8016e8e:	76fb      	strb	r3, [r7, #27]
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  }
  SYS_ARCH_UNPROTECT(lev);
 8016e90:	68f8      	ldr	r0, [r7, #12]
 8016e92:	f001 ffb9 	bl	8018e08 <sys_arch_unprotect>
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  if (schedule_poll) {
 8016e96:	7efb      	ldrb	r3, [r7, #27]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d003      	beq.n	8016ea4 <netif_loop_output+0xe0>
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
 8016e9c:	6879      	ldr	r1, [r7, #4]
 8016e9e:	4809      	ldr	r0, [pc, #36]	; (8016ec4 <netif_loop_output+0x100>)
 8016ea0:	f008 fa66 	bl	801f370 <tcpip_try_callback>
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 8016ea4:	2300      	movs	r3, #0
}
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	3720      	adds	r7, #32
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}
 8016eae:	bf00      	nop
 8016eb0:	08023104 	.word	0x08023104
 8016eb4:	0802335c 	.word	0x0802335c
 8016eb8:	08023160 	.word	0x08023160
 8016ebc:	08023380 	.word	0x08023380
 8016ec0:	080233a0 	.word	0x080233a0
 8016ec4:	08016ee9 	.word	0x08016ee9

08016ec8 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b084      	sub	sp, #16
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	60f8      	str	r0, [r7, #12]
 8016ed0:	60b9      	str	r1, [r7, #8]
 8016ed2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 8016ed4:	68b9      	ldr	r1, [r7, #8]
 8016ed6:	68f8      	ldr	r0, [r7, #12]
 8016ed8:	f7ff ff74 	bl	8016dc4 <netif_loop_output>
 8016edc:	4603      	mov	r3, r0
}
 8016ede:	4618      	mov	r0, r3
 8016ee0:	3710      	adds	r7, #16
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd80      	pop	{r7, pc}
	...

08016ee8 <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b086      	sub	sp, #24
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
  struct netif *stats_if = netif;
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_poll: invalid netif", netif != NULL);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d106      	bne.n	8016f04 <netif_poll+0x1c>
 8016ef6:	4b33      	ldr	r3, [pc, #204]	; (8016fc4 <netif_poll+0xdc>)
 8016ef8:	f240 42bb 	movw	r2, #1211	; 0x4bb
 8016efc:	4932      	ldr	r1, [pc, #200]	; (8016fc8 <netif_poll+0xe0>)
 8016efe:	4833      	ldr	r0, [pc, #204]	; (8016fcc <netif_poll+0xe4>)
 8016f00:	f009 fb26 	bl	8020550 <iprintf>

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
 8016f04:	f001 ff72 	bl	8018dec <sys_arch_protect>
 8016f08:	6178      	str	r0, [r7, #20]
  while (netif->loop_first != NULL) {
 8016f0a:	e04f      	b.n	8016fac <netif_poll+0xc4>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f10:	613b      	str	r3, [r7, #16]
 8016f12:	693b      	ldr	r3, [r7, #16]
 8016f14:	60fb      	str	r3, [r7, #12]
    while (in_end->len != in_end->tot_len) {
 8016f16:	e00d      	b.n	8016f34 <netif_poll+0x4c>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
 8016f18:	693b      	ldr	r3, [r7, #16]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d106      	bne.n	8016f2e <netif_poll+0x46>
 8016f20:	4b28      	ldr	r3, [pc, #160]	; (8016fc4 <netif_poll+0xdc>)
 8016f22:	f240 42c7 	movw	r2, #1223	; 0x4c7
 8016f26:	492a      	ldr	r1, [pc, #168]	; (8016fd0 <netif_poll+0xe8>)
 8016f28:	4828      	ldr	r0, [pc, #160]	; (8016fcc <netif_poll+0xe4>)
 8016f2a:	f009 fb11 	bl	8020550 <iprintf>
      in_end = in_end->next;
 8016f2e:	693b      	ldr	r3, [r7, #16]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	613b      	str	r3, [r7, #16]
    while (in_end->len != in_end->tot_len) {
 8016f34:	693b      	ldr	r3, [r7, #16]
 8016f36:	895a      	ldrh	r2, [r3, #10]
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	891b      	ldrh	r3, [r3, #8]
 8016f3c:	429a      	cmp	r2, r3
 8016f3e:	d1eb      	bne.n	8016f18 <netif_poll+0x30>
                ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current - clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f44:	693a      	ldr	r2, [r7, #16]
 8016f46:	429a      	cmp	r2, r3
 8016f48:	d107      	bne.n	8016f5a <netif_poll+0x72>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	641a      	str	r2, [r3, #64]	; 0x40
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	63da      	str	r2, [r3, #60]	; 0x3c
 8016f58:	e00e      	b.n	8016f78 <netif_poll+0x90>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
 8016f5a:	693b      	ldr	r3, [r7, #16]
 8016f5c:	681a      	ldr	r2, [r3, #0]
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	63da      	str	r2, [r3, #60]	; 0x3c
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d106      	bne.n	8016f78 <netif_poll+0x90>
 8016f6a:	4b16      	ldr	r3, [pc, #88]	; (8016fc4 <netif_poll+0xdc>)
 8016f6c:	f240 42db 	movw	r2, #1243	; 0x4db
 8016f70:	4918      	ldr	r1, [pc, #96]	; (8016fd4 <netif_poll+0xec>)
 8016f72:	4816      	ldr	r0, [pc, #88]	; (8016fcc <netif_poll+0xe4>)
 8016f74:	f009 faec 	bl	8020550 <iprintf>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
 8016f78:	693b      	ldr	r3, [r7, #16]
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	601a      	str	r2, [r3, #0]
    SYS_ARCH_UNPROTECT(lev);
 8016f7e:	6978      	ldr	r0, [r7, #20]
 8016f80:	f001 ff42 	bl	8018e08 <sys_arch_unprotect>

    in->if_idx = netif_get_index(netif);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016f8a:	3301      	adds	r3, #1
 8016f8c:	b2da      	uxtb	r2, r3
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	73da      	strb	r2, [r3, #15]

    LINK_STATS_INC(link.recv);
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
 8016f92:	6879      	ldr	r1, [r7, #4]
 8016f94:	68f8      	ldr	r0, [r7, #12]
 8016f96:	f7fd fb03 	bl	80145a0 <ip4_input>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d002      	beq.n	8016fa6 <netif_poll+0xbe>
      pbuf_free(in);
 8016fa0:	68f8      	ldr	r0, [r7, #12]
 8016fa2:	f000 fbe3 	bl	801776c <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
 8016fa6:	f001 ff21 	bl	8018dec <sys_arch_protect>
 8016faa:	6178      	str	r0, [r7, #20]
  while (netif->loop_first != NULL) {
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d1ab      	bne.n	8016f0c <netif_poll+0x24>
  }
  SYS_ARCH_UNPROTECT(lev);
 8016fb4:	6978      	ldr	r0, [r7, #20]
 8016fb6:	f001 ff27 	bl	8018e08 <sys_arch_unprotect>
}
 8016fba:	bf00      	nop
 8016fbc:	3718      	adds	r7, #24
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	08023104 	.word	0x08023104
 8016fc8:	080233cc 	.word	0x080233cc
 8016fcc:	08023160 	.word	0x08023160
 8016fd0:	080233e8 	.word	0x080233e8
 8016fd4:	08023418 	.word	0x08023418

08016fd8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8016fd8:	b480      	push	{r7}
 8016fda:	b085      	sub	sp, #20
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8016fe4:	f06f 030b 	mvn.w	r3, #11
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	3714      	adds	r7, #20
 8016fec:	46bd      	mov	sp, r7
 8016fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff2:	4770      	bx	lr

08016ff4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8016ff4:	b480      	push	{r7}
 8016ff6:	b085      	sub	sp, #20
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8016ffe:	79fb      	ldrb	r3, [r7, #7]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d013      	beq.n	801702c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8017004:	4b0d      	ldr	r3, [pc, #52]	; (801703c <netif_get_by_index+0x48>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	60fb      	str	r3, [r7, #12]
 801700a:	e00c      	b.n	8017026 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017012:	3301      	adds	r3, #1
 8017014:	b2db      	uxtb	r3, r3
 8017016:	79fa      	ldrb	r2, [r7, #7]
 8017018:	429a      	cmp	r2, r3
 801701a:	d101      	bne.n	8017020 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	e006      	b.n	801702e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	60fb      	str	r3, [r7, #12]
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d1ef      	bne.n	801700c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801702c:	2300      	movs	r3, #0
}
 801702e:	4618      	mov	r0, r3
 8017030:	3714      	adds	r7, #20
 8017032:	46bd      	mov	sp, r7
 8017034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017038:	4770      	bx	lr
 801703a:	bf00      	nop
 801703c:	2400d330 	.word	0x2400d330

08017040 <netif_invoke_ext_callback>:
 * @param reason change reason
 * @param args depends on reason, see reason description
 */
void
netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callback_args_t *args)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b086      	sub	sp, #24
 8017044:	af00      	add	r7, sp, #0
 8017046:	60f8      	str	r0, [r7, #12]
 8017048:	460b      	mov	r3, r1
 801704a:	607a      	str	r2, [r7, #4]
 801704c:	817b      	strh	r3, [r7, #10]
  netif_ext_callback_t *callback = ext_callback;
 801704e:	4b0f      	ldr	r3, [pc, #60]	; (801708c <netif_invoke_ext_callback+0x4c>)
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif must be != NULL", netif != NULL);
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d110      	bne.n	801707c <netif_invoke_ext_callback+0x3c>
 801705a:	4b0d      	ldr	r3, [pc, #52]	; (8017090 <netif_invoke_ext_callback+0x50>)
 801705c:	f240 62fc 	movw	r2, #1788	; 0x6fc
 8017060:	490c      	ldr	r1, [pc, #48]	; (8017094 <netif_invoke_ext_callback+0x54>)
 8017062:	480d      	ldr	r0, [pc, #52]	; (8017098 <netif_invoke_ext_callback+0x58>)
 8017064:	f009 fa74 	bl	8020550 <iprintf>

  while (callback != NULL) {
 8017068:	e008      	b.n	801707c <netif_invoke_ext_callback+0x3c>
    callback->callback_fn(netif, reason, args);
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	8979      	ldrh	r1, [r7, #10]
 8017070:	687a      	ldr	r2, [r7, #4]
 8017072:	68f8      	ldr	r0, [r7, #12]
 8017074:	4798      	blx	r3
    callback = callback->next;
 8017076:	697b      	ldr	r3, [r7, #20]
 8017078:	685b      	ldr	r3, [r3, #4]
 801707a:	617b      	str	r3, [r7, #20]
  while (callback != NULL) {
 801707c:	697b      	ldr	r3, [r7, #20]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d1f3      	bne.n	801706a <netif_invoke_ext_callback+0x2a>
  }
}
 8017082:	bf00      	nop
 8017084:	bf00      	nop
 8017086:	3718      	adds	r7, #24
 8017088:	46bd      	mov	sp, r7
 801708a:	bd80      	pop	{r7, pc}
 801708c:	2400d32c 	.word	0x2400d32c
 8017090:	08023104 	.word	0x08023104
 8017094:	08023480 	.word	0x08023480
 8017098:	08023160 	.word	0x08023160

0801709c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b082      	sub	sp, #8
 80170a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80170a2:	f001 fea3 	bl	8018dec <sys_arch_protect>
 80170a6:	6038      	str	r0, [r7, #0]
 80170a8:	4b0d      	ldr	r3, [pc, #52]	; (80170e0 <pbuf_free_ooseq+0x44>)
 80170aa:	2200      	movs	r2, #0
 80170ac:	701a      	strb	r2, [r3, #0]
 80170ae:	6838      	ldr	r0, [r7, #0]
 80170b0:	f001 feaa 	bl	8018e08 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80170b4:	4b0b      	ldr	r3, [pc, #44]	; (80170e4 <pbuf_free_ooseq+0x48>)
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	607b      	str	r3, [r7, #4]
 80170ba:	e00a      	b.n	80170d2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d003      	beq.n	80170cc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80170c4:	6878      	ldr	r0, [r7, #4]
 80170c6:	f003 fe31 	bl	801ad2c <tcp_free_ooseq>
      return;
 80170ca:	e005      	b.n	80170d8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	68db      	ldr	r3, [r3, #12]
 80170d0:	607b      	str	r3, [r7, #4]
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d1f1      	bne.n	80170bc <pbuf_free_ooseq+0x20>
    }
  }
}
 80170d8:	3708      	adds	r7, #8
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}
 80170de:	bf00      	nop
 80170e0:	2400d380 	.word	0x2400d380
 80170e4:	2400d3dc 	.word	0x2400d3dc

080170e8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80170f0:	f7ff ffd4 	bl	801709c <pbuf_free_ooseq>
}
 80170f4:	bf00      	nop
 80170f6:	3708      	adds	r7, #8
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}

080170fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b082      	sub	sp, #8
 8017100:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8017102:	f001 fe73 	bl	8018dec <sys_arch_protect>
 8017106:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8017108:	4b0f      	ldr	r3, [pc, #60]	; (8017148 <pbuf_pool_is_empty+0x4c>)
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801710e:	4b0e      	ldr	r3, [pc, #56]	; (8017148 <pbuf_pool_is_empty+0x4c>)
 8017110:	2201      	movs	r2, #1
 8017112:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f001 fe77 	bl	8018e08 <sys_arch_unprotect>

  if (!queued) {
 801711a:	78fb      	ldrb	r3, [r7, #3]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d10f      	bne.n	8017140 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8017120:	2100      	movs	r1, #0
 8017122:	480a      	ldr	r0, [pc, #40]	; (801714c <pbuf_pool_is_empty+0x50>)
 8017124:	f008 f924 	bl	801f370 <tcpip_try_callback>
 8017128:	4603      	mov	r3, r0
 801712a:	2b00      	cmp	r3, #0
 801712c:	d008      	beq.n	8017140 <pbuf_pool_is_empty+0x44>
 801712e:	f001 fe5d 	bl	8018dec <sys_arch_protect>
 8017132:	6078      	str	r0, [r7, #4]
 8017134:	4b04      	ldr	r3, [pc, #16]	; (8017148 <pbuf_pool_is_empty+0x4c>)
 8017136:	2200      	movs	r2, #0
 8017138:	701a      	strb	r2, [r3, #0]
 801713a:	6878      	ldr	r0, [r7, #4]
 801713c:	f001 fe64 	bl	8018e08 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8017140:	bf00      	nop
 8017142:	3708      	adds	r7, #8
 8017144:	46bd      	mov	sp, r7
 8017146:	bd80      	pop	{r7, pc}
 8017148:	2400d380 	.word	0x2400d380
 801714c:	080170e9 	.word	0x080170e9

08017150 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8017150:	b480      	push	{r7}
 8017152:	b085      	sub	sp, #20
 8017154:	af00      	add	r7, sp, #0
 8017156:	60f8      	str	r0, [r7, #12]
 8017158:	60b9      	str	r1, [r7, #8]
 801715a:	4611      	mov	r1, r2
 801715c:	461a      	mov	r2, r3
 801715e:	460b      	mov	r3, r1
 8017160:	80fb      	strh	r3, [r7, #6]
 8017162:	4613      	mov	r3, r2
 8017164:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	2200      	movs	r2, #0
 801716a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	68ba      	ldr	r2, [r7, #8]
 8017170:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	88fa      	ldrh	r2, [r7, #6]
 8017176:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	88ba      	ldrh	r2, [r7, #4]
 801717c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801717e:	8b3b      	ldrh	r3, [r7, #24]
 8017180:	b2da      	uxtb	r2, r3
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	7f3a      	ldrb	r2, [r7, #28]
 801718a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	2201      	movs	r2, #1
 8017190:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	2200      	movs	r2, #0
 8017196:	73da      	strb	r2, [r3, #15]
}
 8017198:	bf00      	nop
 801719a:	3714      	adds	r7, #20
 801719c:	46bd      	mov	sp, r7
 801719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a2:	4770      	bx	lr

080171a4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b08c      	sub	sp, #48	; 0x30
 80171a8:	af02      	add	r7, sp, #8
 80171aa:	4603      	mov	r3, r0
 80171ac:	71fb      	strb	r3, [r7, #7]
 80171ae:	460b      	mov	r3, r1
 80171b0:	80bb      	strh	r3, [r7, #4]
 80171b2:	4613      	mov	r3, r2
 80171b4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80171b6:	79fb      	ldrb	r3, [r7, #7]
 80171b8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80171ba:	887b      	ldrh	r3, [r7, #2]
 80171bc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80171c0:	d07f      	beq.n	80172c2 <pbuf_alloc+0x11e>
 80171c2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80171c6:	f300 80c8 	bgt.w	801735a <pbuf_alloc+0x1b6>
 80171ca:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80171ce:	d010      	beq.n	80171f2 <pbuf_alloc+0x4e>
 80171d0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80171d4:	f300 80c1 	bgt.w	801735a <pbuf_alloc+0x1b6>
 80171d8:	2b01      	cmp	r3, #1
 80171da:	d002      	beq.n	80171e2 <pbuf_alloc+0x3e>
 80171dc:	2b41      	cmp	r3, #65	; 0x41
 80171de:	f040 80bc 	bne.w	801735a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80171e2:	887a      	ldrh	r2, [r7, #2]
 80171e4:	88bb      	ldrh	r3, [r7, #4]
 80171e6:	4619      	mov	r1, r3
 80171e8:	2000      	movs	r0, #0
 80171ea:	f000 f8d1 	bl	8017390 <pbuf_alloc_reference>
 80171ee:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80171f0:	e0bd      	b.n	801736e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80171f2:	2300      	movs	r3, #0
 80171f4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80171f6:	2300      	movs	r3, #0
 80171f8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80171fa:	88bb      	ldrh	r3, [r7, #4]
 80171fc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80171fe:	200d      	movs	r0, #13
 8017200:	f7ff f8d2 	bl	80163a8 <memp_malloc>
 8017204:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8017206:	693b      	ldr	r3, [r7, #16]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d109      	bne.n	8017220 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801720c:	f7ff ff76 	bl	80170fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8017210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017212:	2b00      	cmp	r3, #0
 8017214:	d002      	beq.n	801721c <pbuf_alloc+0x78>
            pbuf_free(p);
 8017216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017218:	f000 faa8 	bl	801776c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801721c:	2300      	movs	r3, #0
 801721e:	e0a7      	b.n	8017370 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8017220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017222:	3303      	adds	r3, #3
 8017224:	b29b      	uxth	r3, r3
 8017226:	f023 0303 	bic.w	r3, r3, #3
 801722a:	b29b      	uxth	r3, r3
 801722c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8017230:	b29b      	uxth	r3, r3
 8017232:	8b7a      	ldrh	r2, [r7, #26]
 8017234:	4293      	cmp	r3, r2
 8017236:	bf28      	it	cs
 8017238:	4613      	movcs	r3, r2
 801723a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801723c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801723e:	3310      	adds	r3, #16
 8017240:	693a      	ldr	r2, [r7, #16]
 8017242:	4413      	add	r3, r2
 8017244:	3303      	adds	r3, #3
 8017246:	f023 0303 	bic.w	r3, r3, #3
 801724a:	4618      	mov	r0, r3
 801724c:	89f9      	ldrh	r1, [r7, #14]
 801724e:	8b7a      	ldrh	r2, [r7, #26]
 8017250:	2300      	movs	r3, #0
 8017252:	9301      	str	r3, [sp, #4]
 8017254:	887b      	ldrh	r3, [r7, #2]
 8017256:	9300      	str	r3, [sp, #0]
 8017258:	460b      	mov	r3, r1
 801725a:	4601      	mov	r1, r0
 801725c:	6938      	ldr	r0, [r7, #16]
 801725e:	f7ff ff77 	bl	8017150 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	685b      	ldr	r3, [r3, #4]
 8017266:	f003 0303 	and.w	r3, r3, #3
 801726a:	2b00      	cmp	r3, #0
 801726c:	d006      	beq.n	801727c <pbuf_alloc+0xd8>
 801726e:	4b42      	ldr	r3, [pc, #264]	; (8017378 <pbuf_alloc+0x1d4>)
 8017270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017274:	4941      	ldr	r1, [pc, #260]	; (801737c <pbuf_alloc+0x1d8>)
 8017276:	4842      	ldr	r0, [pc, #264]	; (8017380 <pbuf_alloc+0x1dc>)
 8017278:	f009 f96a 	bl	8020550 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801727c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801727e:	3303      	adds	r3, #3
 8017280:	f023 0303 	bic.w	r3, r3, #3
 8017284:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8017288:	d106      	bne.n	8017298 <pbuf_alloc+0xf4>
 801728a:	4b3b      	ldr	r3, [pc, #236]	; (8017378 <pbuf_alloc+0x1d4>)
 801728c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8017290:	493c      	ldr	r1, [pc, #240]	; (8017384 <pbuf_alloc+0x1e0>)
 8017292:	483b      	ldr	r0, [pc, #236]	; (8017380 <pbuf_alloc+0x1dc>)
 8017294:	f009 f95c 	bl	8020550 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8017298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801729a:	2b00      	cmp	r3, #0
 801729c:	d102      	bne.n	80172a4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801729e:	693b      	ldr	r3, [r7, #16]
 80172a0:	627b      	str	r3, [r7, #36]	; 0x24
 80172a2:	e002      	b.n	80172aa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80172a4:	69fb      	ldr	r3, [r7, #28]
 80172a6:	693a      	ldr	r2, [r7, #16]
 80172a8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80172ae:	8b7a      	ldrh	r2, [r7, #26]
 80172b0:	89fb      	ldrh	r3, [r7, #14]
 80172b2:	1ad3      	subs	r3, r2, r3
 80172b4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80172b6:	2300      	movs	r3, #0
 80172b8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80172ba:	8b7b      	ldrh	r3, [r7, #26]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d19e      	bne.n	80171fe <pbuf_alloc+0x5a>
      break;
 80172c0:	e055      	b.n	801736e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80172c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172c4:	3303      	adds	r3, #3
 80172c6:	b29b      	uxth	r3, r3
 80172c8:	f023 0303 	bic.w	r3, r3, #3
 80172cc:	b29a      	uxth	r2, r3
 80172ce:	88bb      	ldrh	r3, [r7, #4]
 80172d0:	3303      	adds	r3, #3
 80172d2:	b29b      	uxth	r3, r3
 80172d4:	f023 0303 	bic.w	r3, r3, #3
 80172d8:	b29b      	uxth	r3, r3
 80172da:	4413      	add	r3, r2
 80172dc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80172de:	8b3b      	ldrh	r3, [r7, #24]
 80172e0:	3310      	adds	r3, #16
 80172e2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80172e4:	8b3a      	ldrh	r2, [r7, #24]
 80172e6:	88bb      	ldrh	r3, [r7, #4]
 80172e8:	3303      	adds	r3, #3
 80172ea:	f023 0303 	bic.w	r3, r3, #3
 80172ee:	429a      	cmp	r2, r3
 80172f0:	d306      	bcc.n	8017300 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80172f2:	8afa      	ldrh	r2, [r7, #22]
 80172f4:	88bb      	ldrh	r3, [r7, #4]
 80172f6:	3303      	adds	r3, #3
 80172f8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d201      	bcs.n	8017304 <pbuf_alloc+0x160>
        return NULL;
 8017300:	2300      	movs	r3, #0
 8017302:	e035      	b.n	8017370 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8017304:	8afb      	ldrh	r3, [r7, #22]
 8017306:	4618      	mov	r0, r3
 8017308:	f7fe feaa 	bl	8016060 <mem_malloc>
 801730c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017310:	2b00      	cmp	r3, #0
 8017312:	d101      	bne.n	8017318 <pbuf_alloc+0x174>
        return NULL;
 8017314:	2300      	movs	r3, #0
 8017316:	e02b      	b.n	8017370 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801731a:	3310      	adds	r3, #16
 801731c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801731e:	4413      	add	r3, r2
 8017320:	3303      	adds	r3, #3
 8017322:	f023 0303 	bic.w	r3, r3, #3
 8017326:	4618      	mov	r0, r3
 8017328:	88b9      	ldrh	r1, [r7, #4]
 801732a:	88ba      	ldrh	r2, [r7, #4]
 801732c:	2300      	movs	r3, #0
 801732e:	9301      	str	r3, [sp, #4]
 8017330:	887b      	ldrh	r3, [r7, #2]
 8017332:	9300      	str	r3, [sp, #0]
 8017334:	460b      	mov	r3, r1
 8017336:	4601      	mov	r1, r0
 8017338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801733a:	f7ff ff09 	bl	8017150 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	f003 0303 	and.w	r3, r3, #3
 8017346:	2b00      	cmp	r3, #0
 8017348:	d010      	beq.n	801736c <pbuf_alloc+0x1c8>
 801734a:	4b0b      	ldr	r3, [pc, #44]	; (8017378 <pbuf_alloc+0x1d4>)
 801734c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8017350:	490d      	ldr	r1, [pc, #52]	; (8017388 <pbuf_alloc+0x1e4>)
 8017352:	480b      	ldr	r0, [pc, #44]	; (8017380 <pbuf_alloc+0x1dc>)
 8017354:	f009 f8fc 	bl	8020550 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8017358:	e008      	b.n	801736c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801735a:	4b07      	ldr	r3, [pc, #28]	; (8017378 <pbuf_alloc+0x1d4>)
 801735c:	f240 1227 	movw	r2, #295	; 0x127
 8017360:	490a      	ldr	r1, [pc, #40]	; (801738c <pbuf_alloc+0x1e8>)
 8017362:	4807      	ldr	r0, [pc, #28]	; (8017380 <pbuf_alloc+0x1dc>)
 8017364:	f009 f8f4 	bl	8020550 <iprintf>
      return NULL;
 8017368:	2300      	movs	r3, #0
 801736a:	e001      	b.n	8017370 <pbuf_alloc+0x1cc>
      break;
 801736c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017370:	4618      	mov	r0, r3
 8017372:	3728      	adds	r7, #40	; 0x28
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}
 8017378:	08023498 	.word	0x08023498
 801737c:	080234d0 	.word	0x080234d0
 8017380:	08023500 	.word	0x08023500
 8017384:	08023528 	.word	0x08023528
 8017388:	0802355c 	.word	0x0802355c
 801738c:	08023588 	.word	0x08023588

08017390 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b086      	sub	sp, #24
 8017394:	af02      	add	r7, sp, #8
 8017396:	6078      	str	r0, [r7, #4]
 8017398:	460b      	mov	r3, r1
 801739a:	807b      	strh	r3, [r7, #2]
 801739c:	4613      	mov	r3, r2
 801739e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80173a0:	883b      	ldrh	r3, [r7, #0]
 80173a2:	2b41      	cmp	r3, #65	; 0x41
 80173a4:	d009      	beq.n	80173ba <pbuf_alloc_reference+0x2a>
 80173a6:	883b      	ldrh	r3, [r7, #0]
 80173a8:	2b01      	cmp	r3, #1
 80173aa:	d006      	beq.n	80173ba <pbuf_alloc_reference+0x2a>
 80173ac:	4b0f      	ldr	r3, [pc, #60]	; (80173ec <pbuf_alloc_reference+0x5c>)
 80173ae:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80173b2:	490f      	ldr	r1, [pc, #60]	; (80173f0 <pbuf_alloc_reference+0x60>)
 80173b4:	480f      	ldr	r0, [pc, #60]	; (80173f4 <pbuf_alloc_reference+0x64>)
 80173b6:	f009 f8cb 	bl	8020550 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80173ba:	200c      	movs	r0, #12
 80173bc:	f7fe fff4 	bl	80163a8 <memp_malloc>
 80173c0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d101      	bne.n	80173cc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80173c8:	2300      	movs	r3, #0
 80173ca:	e00b      	b.n	80173e4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80173cc:	8879      	ldrh	r1, [r7, #2]
 80173ce:	887a      	ldrh	r2, [r7, #2]
 80173d0:	2300      	movs	r3, #0
 80173d2:	9301      	str	r3, [sp, #4]
 80173d4:	883b      	ldrh	r3, [r7, #0]
 80173d6:	9300      	str	r3, [sp, #0]
 80173d8:	460b      	mov	r3, r1
 80173da:	6879      	ldr	r1, [r7, #4]
 80173dc:	68f8      	ldr	r0, [r7, #12]
 80173de:	f7ff feb7 	bl	8017150 <pbuf_init_alloced_pbuf>
  return p;
 80173e2:	68fb      	ldr	r3, [r7, #12]
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	3710      	adds	r7, #16
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}
 80173ec:	08023498 	.word	0x08023498
 80173f0:	080235a4 	.word	0x080235a4
 80173f4:	08023500 	.word	0x08023500

080173f8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b088      	sub	sp, #32
 80173fc:	af02      	add	r7, sp, #8
 80173fe:	607b      	str	r3, [r7, #4]
 8017400:	4603      	mov	r3, r0
 8017402:	73fb      	strb	r3, [r7, #15]
 8017404:	460b      	mov	r3, r1
 8017406:	81bb      	strh	r3, [r7, #12]
 8017408:	4613      	mov	r3, r2
 801740a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801740c:	7bfb      	ldrb	r3, [r7, #15]
 801740e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8017410:	8a7b      	ldrh	r3, [r7, #18]
 8017412:	3303      	adds	r3, #3
 8017414:	f023 0203 	bic.w	r2, r3, #3
 8017418:	89bb      	ldrh	r3, [r7, #12]
 801741a:	441a      	add	r2, r3
 801741c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801741e:	429a      	cmp	r2, r3
 8017420:	d901      	bls.n	8017426 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8017422:	2300      	movs	r3, #0
 8017424:	e018      	b.n	8017458 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8017426:	6a3b      	ldr	r3, [r7, #32]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d007      	beq.n	801743c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801742c:	8a7b      	ldrh	r3, [r7, #18]
 801742e:	3303      	adds	r3, #3
 8017430:	f023 0303 	bic.w	r3, r3, #3
 8017434:	6a3a      	ldr	r2, [r7, #32]
 8017436:	4413      	add	r3, r2
 8017438:	617b      	str	r3, [r7, #20]
 801743a:	e001      	b.n	8017440 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801743c:	2300      	movs	r3, #0
 801743e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	89b9      	ldrh	r1, [r7, #12]
 8017444:	89ba      	ldrh	r2, [r7, #12]
 8017446:	2302      	movs	r3, #2
 8017448:	9301      	str	r3, [sp, #4]
 801744a:	897b      	ldrh	r3, [r7, #10]
 801744c:	9300      	str	r3, [sp, #0]
 801744e:	460b      	mov	r3, r1
 8017450:	6979      	ldr	r1, [r7, #20]
 8017452:	f7ff fe7d 	bl	8017150 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8017456:	687b      	ldr	r3, [r7, #4]
}
 8017458:	4618      	mov	r0, r3
 801745a:	3718      	adds	r7, #24
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}

08017460 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b084      	sub	sp, #16
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
 8017468:	460b      	mov	r3, r1
 801746a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d106      	bne.n	8017480 <pbuf_realloc+0x20>
 8017472:	4b3a      	ldr	r3, [pc, #232]	; (801755c <pbuf_realloc+0xfc>)
 8017474:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8017478:	4939      	ldr	r1, [pc, #228]	; (8017560 <pbuf_realloc+0x100>)
 801747a:	483a      	ldr	r0, [pc, #232]	; (8017564 <pbuf_realloc+0x104>)
 801747c:	f009 f868 	bl	8020550 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	891b      	ldrh	r3, [r3, #8]
 8017484:	887a      	ldrh	r2, [r7, #2]
 8017486:	429a      	cmp	r2, r3
 8017488:	d263      	bcs.n	8017552 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	891a      	ldrh	r2, [r3, #8]
 801748e:	887b      	ldrh	r3, [r7, #2]
 8017490:	1ad3      	subs	r3, r2, r3
 8017492:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8017494:	887b      	ldrh	r3, [r7, #2]
 8017496:	817b      	strh	r3, [r7, #10]
  q = p;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801749c:	e018      	b.n	80174d0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	895b      	ldrh	r3, [r3, #10]
 80174a2:	897a      	ldrh	r2, [r7, #10]
 80174a4:	1ad3      	subs	r3, r2, r3
 80174a6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	891a      	ldrh	r2, [r3, #8]
 80174ac:	893b      	ldrh	r3, [r7, #8]
 80174ae:	1ad3      	subs	r3, r2, r3
 80174b0:	b29a      	uxth	r2, r3
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d106      	bne.n	80174d0 <pbuf_realloc+0x70>
 80174c2:	4b26      	ldr	r3, [pc, #152]	; (801755c <pbuf_realloc+0xfc>)
 80174c4:	f240 12af 	movw	r2, #431	; 0x1af
 80174c8:	4927      	ldr	r1, [pc, #156]	; (8017568 <pbuf_realloc+0x108>)
 80174ca:	4826      	ldr	r0, [pc, #152]	; (8017564 <pbuf_realloc+0x104>)
 80174cc:	f009 f840 	bl	8020550 <iprintf>
  while (rem_len > q->len) {
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	895b      	ldrh	r3, [r3, #10]
 80174d4:	897a      	ldrh	r2, [r7, #10]
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d8e1      	bhi.n	801749e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	7b1b      	ldrb	r3, [r3, #12]
 80174de:	f003 030f 	and.w	r3, r3, #15
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d121      	bne.n	801752a <pbuf_realloc+0xca>
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	895b      	ldrh	r3, [r3, #10]
 80174ea:	897a      	ldrh	r2, [r7, #10]
 80174ec:	429a      	cmp	r2, r3
 80174ee:	d01c      	beq.n	801752a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	7b5b      	ldrb	r3, [r3, #13]
 80174f4:	f003 0302 	and.w	r3, r3, #2
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d116      	bne.n	801752a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	685a      	ldr	r2, [r3, #4]
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	1ad3      	subs	r3, r2, r3
 8017504:	b29a      	uxth	r2, r3
 8017506:	897b      	ldrh	r3, [r7, #10]
 8017508:	4413      	add	r3, r2
 801750a:	b29b      	uxth	r3, r3
 801750c:	4619      	mov	r1, r3
 801750e:	68f8      	ldr	r0, [r7, #12]
 8017510:	f7fe fc9c 	bl	8015e4c <mem_trim>
 8017514:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d106      	bne.n	801752a <pbuf_realloc+0xca>
 801751c:	4b0f      	ldr	r3, [pc, #60]	; (801755c <pbuf_realloc+0xfc>)
 801751e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8017522:	4912      	ldr	r1, [pc, #72]	; (801756c <pbuf_realloc+0x10c>)
 8017524:	480f      	ldr	r0, [pc, #60]	; (8017564 <pbuf_realloc+0x104>)
 8017526:	f009 f813 	bl	8020550 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	897a      	ldrh	r2, [r7, #10]
 801752e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	895a      	ldrh	r2, [r3, #10]
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d004      	beq.n	801754a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	4618      	mov	r0, r3
 8017546:	f000 f911 	bl	801776c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	2200      	movs	r2, #0
 801754e:	601a      	str	r2, [r3, #0]
 8017550:	e000      	b.n	8017554 <pbuf_realloc+0xf4>
    return;
 8017552:	bf00      	nop

}
 8017554:	3710      	adds	r7, #16
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop
 801755c:	08023498 	.word	0x08023498
 8017560:	080235b8 	.word	0x080235b8
 8017564:	08023500 	.word	0x08023500
 8017568:	080235d0 	.word	0x080235d0
 801756c:	080235e8 	.word	0x080235e8

08017570 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b086      	sub	sp, #24
 8017574:	af00      	add	r7, sp, #0
 8017576:	60f8      	str	r0, [r7, #12]
 8017578:	60b9      	str	r1, [r7, #8]
 801757a:	4613      	mov	r3, r2
 801757c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d106      	bne.n	8017592 <pbuf_add_header_impl+0x22>
 8017584:	4b2b      	ldr	r3, [pc, #172]	; (8017634 <pbuf_add_header_impl+0xc4>)
 8017586:	f240 12df 	movw	r2, #479	; 0x1df
 801758a:	492b      	ldr	r1, [pc, #172]	; (8017638 <pbuf_add_header_impl+0xc8>)
 801758c:	482b      	ldr	r0, [pc, #172]	; (801763c <pbuf_add_header_impl+0xcc>)
 801758e:	f008 ffdf 	bl	8020550 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d003      	beq.n	80175a0 <pbuf_add_header_impl+0x30>
 8017598:	68bb      	ldr	r3, [r7, #8]
 801759a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801759e:	d301      	bcc.n	80175a4 <pbuf_add_header_impl+0x34>
    return 1;
 80175a0:	2301      	movs	r3, #1
 80175a2:	e043      	b.n	801762c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d101      	bne.n	80175ae <pbuf_add_header_impl+0x3e>
    return 0;
 80175aa:	2300      	movs	r3, #0
 80175ac:	e03e      	b.n	801762c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	891a      	ldrh	r2, [r3, #8]
 80175b6:	8a7b      	ldrh	r3, [r7, #18]
 80175b8:	4413      	add	r3, r2
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	8a7a      	ldrh	r2, [r7, #18]
 80175be:	429a      	cmp	r2, r3
 80175c0:	d901      	bls.n	80175c6 <pbuf_add_header_impl+0x56>
    return 1;
 80175c2:	2301      	movs	r3, #1
 80175c4:	e032      	b.n	801762c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	7b1b      	ldrb	r3, [r3, #12]
 80175ca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80175cc:	8a3b      	ldrh	r3, [r7, #16]
 80175ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d00c      	beq.n	80175f0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	685a      	ldr	r2, [r3, #4]
 80175da:	68bb      	ldr	r3, [r7, #8]
 80175dc:	425b      	negs	r3, r3
 80175de:	4413      	add	r3, r2
 80175e0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	3310      	adds	r3, #16
 80175e6:	697a      	ldr	r2, [r7, #20]
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d20d      	bcs.n	8017608 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80175ec:	2301      	movs	r3, #1
 80175ee:	e01d      	b.n	801762c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80175f0:	79fb      	ldrb	r3, [r7, #7]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d006      	beq.n	8017604 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	685a      	ldr	r2, [r3, #4]
 80175fa:	68bb      	ldr	r3, [r7, #8]
 80175fc:	425b      	negs	r3, r3
 80175fe:	4413      	add	r3, r2
 8017600:	617b      	str	r3, [r7, #20]
 8017602:	e001      	b.n	8017608 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8017604:	2301      	movs	r3, #1
 8017606:	e011      	b.n	801762c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	697a      	ldr	r2, [r7, #20]
 801760c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	895a      	ldrh	r2, [r3, #10]
 8017612:	8a7b      	ldrh	r3, [r7, #18]
 8017614:	4413      	add	r3, r2
 8017616:	b29a      	uxth	r2, r3
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	891a      	ldrh	r2, [r3, #8]
 8017620:	8a7b      	ldrh	r3, [r7, #18]
 8017622:	4413      	add	r3, r2
 8017624:	b29a      	uxth	r2, r3
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	811a      	strh	r2, [r3, #8]


  return 0;
 801762a:	2300      	movs	r3, #0
}
 801762c:	4618      	mov	r0, r3
 801762e:	3718      	adds	r7, #24
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}
 8017634:	08023498 	.word	0x08023498
 8017638:	08023604 	.word	0x08023604
 801763c:	08023500 	.word	0x08023500

08017640 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b082      	sub	sp, #8
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801764a:	2200      	movs	r2, #0
 801764c:	6839      	ldr	r1, [r7, #0]
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f7ff ff8e 	bl	8017570 <pbuf_add_header_impl>
 8017654:	4603      	mov	r3, r0
}
 8017656:	4618      	mov	r0, r3
 8017658:	3708      	adds	r7, #8
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
	...

08017660 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b084      	sub	sp, #16
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
 8017668:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d106      	bne.n	801767e <pbuf_remove_header+0x1e>
 8017670:	4b20      	ldr	r3, [pc, #128]	; (80176f4 <pbuf_remove_header+0x94>)
 8017672:	f240 224b 	movw	r2, #587	; 0x24b
 8017676:	4920      	ldr	r1, [pc, #128]	; (80176f8 <pbuf_remove_header+0x98>)
 8017678:	4820      	ldr	r0, [pc, #128]	; (80176fc <pbuf_remove_header+0x9c>)
 801767a:	f008 ff69 	bl	8020550 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d003      	beq.n	801768c <pbuf_remove_header+0x2c>
 8017684:	683b      	ldr	r3, [r7, #0]
 8017686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801768a:	d301      	bcc.n	8017690 <pbuf_remove_header+0x30>
    return 1;
 801768c:	2301      	movs	r3, #1
 801768e:	e02c      	b.n	80176ea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8017690:	683b      	ldr	r3, [r7, #0]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d101      	bne.n	801769a <pbuf_remove_header+0x3a>
    return 0;
 8017696:	2300      	movs	r3, #0
 8017698:	e027      	b.n	80176ea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801769a:	683b      	ldr	r3, [r7, #0]
 801769c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	895b      	ldrh	r3, [r3, #10]
 80176a2:	89fa      	ldrh	r2, [r7, #14]
 80176a4:	429a      	cmp	r2, r3
 80176a6:	d908      	bls.n	80176ba <pbuf_remove_header+0x5a>
 80176a8:	4b12      	ldr	r3, [pc, #72]	; (80176f4 <pbuf_remove_header+0x94>)
 80176aa:	f240 2255 	movw	r2, #597	; 0x255
 80176ae:	4914      	ldr	r1, [pc, #80]	; (8017700 <pbuf_remove_header+0xa0>)
 80176b0:	4812      	ldr	r0, [pc, #72]	; (80176fc <pbuf_remove_header+0x9c>)
 80176b2:	f008 ff4d 	bl	8020550 <iprintf>
 80176b6:	2301      	movs	r3, #1
 80176b8:	e017      	b.n	80176ea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	685b      	ldr	r3, [r3, #4]
 80176be:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	685a      	ldr	r2, [r3, #4]
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	441a      	add	r2, r3
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	895a      	ldrh	r2, [r3, #10]
 80176d0:	89fb      	ldrh	r3, [r7, #14]
 80176d2:	1ad3      	subs	r3, r2, r3
 80176d4:	b29a      	uxth	r2, r3
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	891a      	ldrh	r2, [r3, #8]
 80176de:	89fb      	ldrh	r3, [r7, #14]
 80176e0:	1ad3      	subs	r3, r2, r3
 80176e2:	b29a      	uxth	r2, r3
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80176e8:	2300      	movs	r3, #0
}
 80176ea:	4618      	mov	r0, r3
 80176ec:	3710      	adds	r7, #16
 80176ee:	46bd      	mov	sp, r7
 80176f0:	bd80      	pop	{r7, pc}
 80176f2:	bf00      	nop
 80176f4:	08023498 	.word	0x08023498
 80176f8:	08023604 	.word	0x08023604
 80176fc:	08023500 	.word	0x08023500
 8017700:	08023610 	.word	0x08023610

08017704 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b082      	sub	sp, #8
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	460b      	mov	r3, r1
 801770e:	807b      	strh	r3, [r7, #2]
 8017710:	4613      	mov	r3, r2
 8017712:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8017714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017718:	2b00      	cmp	r3, #0
 801771a:	da08      	bge.n	801772e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801771c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017720:	425b      	negs	r3, r3
 8017722:	4619      	mov	r1, r3
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	f7ff ff9b 	bl	8017660 <pbuf_remove_header>
 801772a:	4603      	mov	r3, r0
 801772c:	e007      	b.n	801773e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801772e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017732:	787a      	ldrb	r2, [r7, #1]
 8017734:	4619      	mov	r1, r3
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f7ff ff1a 	bl	8017570 <pbuf_add_header_impl>
 801773c:	4603      	mov	r3, r0
  }
}
 801773e:	4618      	mov	r0, r3
 8017740:	3708      	adds	r7, #8
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}

08017746 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8017746:	b580      	push	{r7, lr}
 8017748:	b082      	sub	sp, #8
 801774a:	af00      	add	r7, sp, #0
 801774c:	6078      	str	r0, [r7, #4]
 801774e:	460b      	mov	r3, r1
 8017750:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8017752:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017756:	2201      	movs	r2, #1
 8017758:	4619      	mov	r1, r3
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f7ff ffd2 	bl	8017704 <pbuf_header_impl>
 8017760:	4603      	mov	r3, r0
}
 8017762:	4618      	mov	r0, r3
 8017764:	3708      	adds	r7, #8
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}
	...

0801776c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b088      	sub	sp, #32
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d10b      	bne.n	8017792 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d106      	bne.n	801778e <pbuf_free+0x22>
 8017780:	4b3b      	ldr	r3, [pc, #236]	; (8017870 <pbuf_free+0x104>)
 8017782:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8017786:	493b      	ldr	r1, [pc, #236]	; (8017874 <pbuf_free+0x108>)
 8017788:	483b      	ldr	r0, [pc, #236]	; (8017878 <pbuf_free+0x10c>)
 801778a:	f008 fee1 	bl	8020550 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801778e:	2300      	movs	r3, #0
 8017790:	e069      	b.n	8017866 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8017792:	2300      	movs	r3, #0
 8017794:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8017796:	e062      	b.n	801785e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8017798:	f001 fb28 	bl	8018dec <sys_arch_protect>
 801779c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	7b9b      	ldrb	r3, [r3, #14]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d106      	bne.n	80177b4 <pbuf_free+0x48>
 80177a6:	4b32      	ldr	r3, [pc, #200]	; (8017870 <pbuf_free+0x104>)
 80177a8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80177ac:	4933      	ldr	r1, [pc, #204]	; (801787c <pbuf_free+0x110>)
 80177ae:	4832      	ldr	r0, [pc, #200]	; (8017878 <pbuf_free+0x10c>)
 80177b0:	f008 fece 	bl	8020550 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	7b9b      	ldrb	r3, [r3, #14]
 80177b8:	3b01      	subs	r3, #1
 80177ba:	b2da      	uxtb	r2, r3
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	739a      	strb	r2, [r3, #14]
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	7b9b      	ldrb	r3, [r3, #14]
 80177c4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80177c6:	69b8      	ldr	r0, [r7, #24]
 80177c8:	f001 fb1e 	bl	8018e08 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80177cc:	7dfb      	ldrb	r3, [r7, #23]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d143      	bne.n	801785a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	7b1b      	ldrb	r3, [r3, #12]
 80177dc:	f003 030f 	and.w	r3, r3, #15
 80177e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	7b5b      	ldrb	r3, [r3, #13]
 80177e6:	f003 0302 	and.w	r3, r3, #2
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d011      	beq.n	8017812 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80177f2:	68bb      	ldr	r3, [r7, #8]
 80177f4:	691b      	ldr	r3, [r3, #16]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d106      	bne.n	8017808 <pbuf_free+0x9c>
 80177fa:	4b1d      	ldr	r3, [pc, #116]	; (8017870 <pbuf_free+0x104>)
 80177fc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8017800:	491f      	ldr	r1, [pc, #124]	; (8017880 <pbuf_free+0x114>)
 8017802:	481d      	ldr	r0, [pc, #116]	; (8017878 <pbuf_free+0x10c>)
 8017804:	f008 fea4 	bl	8020550 <iprintf>
        pc->custom_free_function(p);
 8017808:	68bb      	ldr	r3, [r7, #8]
 801780a:	691b      	ldr	r3, [r3, #16]
 801780c:	6878      	ldr	r0, [r7, #4]
 801780e:	4798      	blx	r3
 8017810:	e01d      	b.n	801784e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8017812:	7bfb      	ldrb	r3, [r7, #15]
 8017814:	2b02      	cmp	r3, #2
 8017816:	d104      	bne.n	8017822 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8017818:	6879      	ldr	r1, [r7, #4]
 801781a:	200d      	movs	r0, #13
 801781c:	f7fe fe3a 	bl	8016494 <memp_free>
 8017820:	e015      	b.n	801784e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8017822:	7bfb      	ldrb	r3, [r7, #15]
 8017824:	2b01      	cmp	r3, #1
 8017826:	d104      	bne.n	8017832 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8017828:	6879      	ldr	r1, [r7, #4]
 801782a:	200c      	movs	r0, #12
 801782c:	f7fe fe32 	bl	8016494 <memp_free>
 8017830:	e00d      	b.n	801784e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8017832:	7bfb      	ldrb	r3, [r7, #15]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d103      	bne.n	8017840 <pbuf_free+0xd4>
          mem_free(p);
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f7fe fa77 	bl	8015d2c <mem_free>
 801783e:	e006      	b.n	801784e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8017840:	4b0b      	ldr	r3, [pc, #44]	; (8017870 <pbuf_free+0x104>)
 8017842:	f240 320f 	movw	r2, #783	; 0x30f
 8017846:	490f      	ldr	r1, [pc, #60]	; (8017884 <pbuf_free+0x118>)
 8017848:	480b      	ldr	r0, [pc, #44]	; (8017878 <pbuf_free+0x10c>)
 801784a:	f008 fe81 	bl	8020550 <iprintf>
        }
      }
      count++;
 801784e:	7ffb      	ldrb	r3, [r7, #31]
 8017850:	3301      	adds	r3, #1
 8017852:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	607b      	str	r3, [r7, #4]
 8017858:	e001      	b.n	801785e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801785a:	2300      	movs	r3, #0
 801785c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d199      	bne.n	8017798 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8017864:	7ffb      	ldrb	r3, [r7, #31]
}
 8017866:	4618      	mov	r0, r3
 8017868:	3720      	adds	r7, #32
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}
 801786e:	bf00      	nop
 8017870:	08023498 	.word	0x08023498
 8017874:	08023604 	.word	0x08023604
 8017878:	08023500 	.word	0x08023500
 801787c:	08023630 	.word	0x08023630
 8017880:	08023648 	.word	0x08023648
 8017884:	0802366c 	.word	0x0802366c

08017888 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8017888:	b480      	push	{r7}
 801788a:	b085      	sub	sp, #20
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8017890:	2300      	movs	r3, #0
 8017892:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8017894:	e005      	b.n	80178a2 <pbuf_clen+0x1a>
    ++len;
 8017896:	89fb      	ldrh	r3, [r7, #14]
 8017898:	3301      	adds	r3, #1
 801789a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d1f6      	bne.n	8017896 <pbuf_clen+0xe>
  }
  return len;
 80178a8:	89fb      	ldrh	r3, [r7, #14]
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3714      	adds	r7, #20
 80178ae:	46bd      	mov	sp, r7
 80178b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b4:	4770      	bx	lr
	...

080178b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b084      	sub	sp, #16
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d016      	beq.n	80178f4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80178c6:	f001 fa91 	bl	8018dec <sys_arch_protect>
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	7b9b      	ldrb	r3, [r3, #14]
 80178d0:	3301      	adds	r3, #1
 80178d2:	b2da      	uxtb	r2, r3
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	739a      	strb	r2, [r3, #14]
 80178d8:	68f8      	ldr	r0, [r7, #12]
 80178da:	f001 fa95 	bl	8018e08 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	7b9b      	ldrb	r3, [r3, #14]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d106      	bne.n	80178f4 <pbuf_ref+0x3c>
 80178e6:	4b05      	ldr	r3, [pc, #20]	; (80178fc <pbuf_ref+0x44>)
 80178e8:	f240 3242 	movw	r2, #834	; 0x342
 80178ec:	4904      	ldr	r1, [pc, #16]	; (8017900 <pbuf_ref+0x48>)
 80178ee:	4805      	ldr	r0, [pc, #20]	; (8017904 <pbuf_ref+0x4c>)
 80178f0:	f008 fe2e 	bl	8020550 <iprintf>
  }
}
 80178f4:	bf00      	nop
 80178f6:	3710      	adds	r7, #16
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}
 80178fc:	08023498 	.word	0x08023498
 8017900:	08023680 	.word	0x08023680
 8017904:	08023500 	.word	0x08023500

08017908 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b084      	sub	sp, #16
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d002      	beq.n	801791e <pbuf_cat+0x16>
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d107      	bne.n	801792e <pbuf_cat+0x26>
 801791e:	4b20      	ldr	r3, [pc, #128]	; (80179a0 <pbuf_cat+0x98>)
 8017920:	f240 3259 	movw	r2, #857	; 0x359
 8017924:	491f      	ldr	r1, [pc, #124]	; (80179a4 <pbuf_cat+0x9c>)
 8017926:	4820      	ldr	r0, [pc, #128]	; (80179a8 <pbuf_cat+0xa0>)
 8017928:	f008 fe12 	bl	8020550 <iprintf>
 801792c:	e034      	b.n	8017998 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	60fb      	str	r3, [r7, #12]
 8017932:	e00a      	b.n	801794a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	891a      	ldrh	r2, [r3, #8]
 8017938:	683b      	ldr	r3, [r7, #0]
 801793a:	891b      	ldrh	r3, [r3, #8]
 801793c:	4413      	add	r3, r2
 801793e:	b29a      	uxth	r2, r3
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	60fb      	str	r3, [r7, #12]
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d1f0      	bne.n	8017934 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	891a      	ldrh	r2, [r3, #8]
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	895b      	ldrh	r3, [r3, #10]
 801795a:	429a      	cmp	r2, r3
 801795c:	d006      	beq.n	801796c <pbuf_cat+0x64>
 801795e:	4b10      	ldr	r3, [pc, #64]	; (80179a0 <pbuf_cat+0x98>)
 8017960:	f240 3262 	movw	r2, #866	; 0x362
 8017964:	4911      	ldr	r1, [pc, #68]	; (80179ac <pbuf_cat+0xa4>)
 8017966:	4810      	ldr	r0, [pc, #64]	; (80179a8 <pbuf_cat+0xa0>)
 8017968:	f008 fdf2 	bl	8020550 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d006      	beq.n	8017982 <pbuf_cat+0x7a>
 8017974:	4b0a      	ldr	r3, [pc, #40]	; (80179a0 <pbuf_cat+0x98>)
 8017976:	f240 3263 	movw	r2, #867	; 0x363
 801797a:	490d      	ldr	r1, [pc, #52]	; (80179b0 <pbuf_cat+0xa8>)
 801797c:	480a      	ldr	r0, [pc, #40]	; (80179a8 <pbuf_cat+0xa0>)
 801797e:	f008 fde7 	bl	8020550 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	891a      	ldrh	r2, [r3, #8]
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	891b      	ldrh	r3, [r3, #8]
 801798a:	4413      	add	r3, r2
 801798c:	b29a      	uxth	r2, r3
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	683a      	ldr	r2, [r7, #0]
 8017996:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8017998:	3710      	adds	r7, #16
 801799a:	46bd      	mov	sp, r7
 801799c:	bd80      	pop	{r7, pc}
 801799e:	bf00      	nop
 80179a0:	08023498 	.word	0x08023498
 80179a4:	08023694 	.word	0x08023694
 80179a8:	08023500 	.word	0x08023500
 80179ac:	080236cc 	.word	0x080236cc
 80179b0:	080236fc 	.word	0x080236fc

080179b4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b082      	sub	sp, #8
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
 80179bc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80179be:	6839      	ldr	r1, [r7, #0]
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f7ff ffa1 	bl	8017908 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80179c6:	6838      	ldr	r0, [r7, #0]
 80179c8:	f7ff ff76 	bl	80178b8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80179cc:	bf00      	nop
 80179ce:	3708      	adds	r7, #8
 80179d0:	46bd      	mov	sp, r7
 80179d2:	bd80      	pop	{r7, pc}

080179d4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b086      	sub	sp, #24
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
 80179dc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80179de:	2300      	movs	r3, #0
 80179e0:	617b      	str	r3, [r7, #20]
 80179e2:	2300      	movs	r3, #0
 80179e4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d008      	beq.n	80179fe <pbuf_copy+0x2a>
 80179ec:	683b      	ldr	r3, [r7, #0]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d005      	beq.n	80179fe <pbuf_copy+0x2a>
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	891a      	ldrh	r2, [r3, #8]
 80179f6:	683b      	ldr	r3, [r7, #0]
 80179f8:	891b      	ldrh	r3, [r3, #8]
 80179fa:	429a      	cmp	r2, r3
 80179fc:	d209      	bcs.n	8017a12 <pbuf_copy+0x3e>
 80179fe:	4b57      	ldr	r3, [pc, #348]	; (8017b5c <pbuf_copy+0x188>)
 8017a00:	f240 32c9 	movw	r2, #969	; 0x3c9
 8017a04:	4956      	ldr	r1, [pc, #344]	; (8017b60 <pbuf_copy+0x18c>)
 8017a06:	4857      	ldr	r0, [pc, #348]	; (8017b64 <pbuf_copy+0x190>)
 8017a08:	f008 fda2 	bl	8020550 <iprintf>
 8017a0c:	f06f 030f 	mvn.w	r3, #15
 8017a10:	e09f      	b.n	8017b52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	895b      	ldrh	r3, [r3, #10]
 8017a16:	461a      	mov	r2, r3
 8017a18:	697b      	ldr	r3, [r7, #20]
 8017a1a:	1ad2      	subs	r2, r2, r3
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	895b      	ldrh	r3, [r3, #10]
 8017a20:	4619      	mov	r1, r3
 8017a22:	693b      	ldr	r3, [r7, #16]
 8017a24:	1acb      	subs	r3, r1, r3
 8017a26:	429a      	cmp	r2, r3
 8017a28:	d306      	bcc.n	8017a38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	895b      	ldrh	r3, [r3, #10]
 8017a2e:	461a      	mov	r2, r3
 8017a30:	693b      	ldr	r3, [r7, #16]
 8017a32:	1ad3      	subs	r3, r2, r3
 8017a34:	60fb      	str	r3, [r7, #12]
 8017a36:	e005      	b.n	8017a44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	895b      	ldrh	r3, [r3, #10]
 8017a3c:	461a      	mov	r2, r3
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	1ad3      	subs	r3, r2, r3
 8017a42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	685a      	ldr	r2, [r3, #4]
 8017a48:	697b      	ldr	r3, [r7, #20]
 8017a4a:	18d0      	adds	r0, r2, r3
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	685a      	ldr	r2, [r3, #4]
 8017a50:	693b      	ldr	r3, [r7, #16]
 8017a52:	4413      	add	r3, r2
 8017a54:	68fa      	ldr	r2, [r7, #12]
 8017a56:	4619      	mov	r1, r3
 8017a58:	f008 fc84 	bl	8020364 <memcpy>
    offset_to += len;
 8017a5c:	697a      	ldr	r2, [r7, #20]
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	4413      	add	r3, r2
 8017a62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8017a64:	693a      	ldr	r2, [r7, #16]
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	4413      	add	r3, r2
 8017a6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	895b      	ldrh	r3, [r3, #10]
 8017a70:	461a      	mov	r2, r3
 8017a72:	697b      	ldr	r3, [r7, #20]
 8017a74:	4293      	cmp	r3, r2
 8017a76:	d906      	bls.n	8017a86 <pbuf_copy+0xb2>
 8017a78:	4b38      	ldr	r3, [pc, #224]	; (8017b5c <pbuf_copy+0x188>)
 8017a7a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8017a7e:	493a      	ldr	r1, [pc, #232]	; (8017b68 <pbuf_copy+0x194>)
 8017a80:	4838      	ldr	r0, [pc, #224]	; (8017b64 <pbuf_copy+0x190>)
 8017a82:	f008 fd65 	bl	8020550 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8017a86:	683b      	ldr	r3, [r7, #0]
 8017a88:	895b      	ldrh	r3, [r3, #10]
 8017a8a:	461a      	mov	r2, r3
 8017a8c:	693b      	ldr	r3, [r7, #16]
 8017a8e:	4293      	cmp	r3, r2
 8017a90:	d906      	bls.n	8017aa0 <pbuf_copy+0xcc>
 8017a92:	4b32      	ldr	r3, [pc, #200]	; (8017b5c <pbuf_copy+0x188>)
 8017a94:	f240 32da 	movw	r2, #986	; 0x3da
 8017a98:	4934      	ldr	r1, [pc, #208]	; (8017b6c <pbuf_copy+0x198>)
 8017a9a:	4832      	ldr	r0, [pc, #200]	; (8017b64 <pbuf_copy+0x190>)
 8017a9c:	f008 fd58 	bl	8020550 <iprintf>
    if (offset_from >= p_from->len) {
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	895b      	ldrh	r3, [r3, #10]
 8017aa4:	461a      	mov	r2, r3
 8017aa6:	693b      	ldr	r3, [r7, #16]
 8017aa8:	4293      	cmp	r3, r2
 8017aaa:	d304      	bcc.n	8017ab6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8017aac:	2300      	movs	r3, #0
 8017aae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	895b      	ldrh	r3, [r3, #10]
 8017aba:	461a      	mov	r2, r3
 8017abc:	697b      	ldr	r3, [r7, #20]
 8017abe:	4293      	cmp	r3, r2
 8017ac0:	d114      	bne.n	8017aec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d10c      	bne.n	8017aec <pbuf_copy+0x118>
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d009      	beq.n	8017aec <pbuf_copy+0x118>
 8017ad8:	4b20      	ldr	r3, [pc, #128]	; (8017b5c <pbuf_copy+0x188>)
 8017ada:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8017ade:	4924      	ldr	r1, [pc, #144]	; (8017b70 <pbuf_copy+0x19c>)
 8017ae0:	4820      	ldr	r0, [pc, #128]	; (8017b64 <pbuf_copy+0x190>)
 8017ae2:	f008 fd35 	bl	8020550 <iprintf>
 8017ae6:	f06f 030f 	mvn.w	r3, #15
 8017aea:	e032      	b.n	8017b52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d013      	beq.n	8017b1a <pbuf_copy+0x146>
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	895a      	ldrh	r2, [r3, #10]
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	891b      	ldrh	r3, [r3, #8]
 8017afa:	429a      	cmp	r2, r3
 8017afc:	d10d      	bne.n	8017b1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d009      	beq.n	8017b1a <pbuf_copy+0x146>
 8017b06:	4b15      	ldr	r3, [pc, #84]	; (8017b5c <pbuf_copy+0x188>)
 8017b08:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8017b0c:	4919      	ldr	r1, [pc, #100]	; (8017b74 <pbuf_copy+0x1a0>)
 8017b0e:	4815      	ldr	r0, [pc, #84]	; (8017b64 <pbuf_copy+0x190>)
 8017b10:	f008 fd1e 	bl	8020550 <iprintf>
 8017b14:	f06f 0305 	mvn.w	r3, #5
 8017b18:	e01b      	b.n	8017b52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d013      	beq.n	8017b48 <pbuf_copy+0x174>
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	895a      	ldrh	r2, [r3, #10]
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	891b      	ldrh	r3, [r3, #8]
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	d10d      	bne.n	8017b48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d009      	beq.n	8017b48 <pbuf_copy+0x174>
 8017b34:	4b09      	ldr	r3, [pc, #36]	; (8017b5c <pbuf_copy+0x188>)
 8017b36:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8017b3a:	490e      	ldr	r1, [pc, #56]	; (8017b74 <pbuf_copy+0x1a0>)
 8017b3c:	4809      	ldr	r0, [pc, #36]	; (8017b64 <pbuf_copy+0x190>)
 8017b3e:	f008 fd07 	bl	8020550 <iprintf>
 8017b42:	f06f 0305 	mvn.w	r3, #5
 8017b46:	e004      	b.n	8017b52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8017b48:	683b      	ldr	r3, [r7, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f47f af61 	bne.w	8017a12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8017b50:	2300      	movs	r3, #0
}
 8017b52:	4618      	mov	r0, r3
 8017b54:	3718      	adds	r7, #24
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}
 8017b5a:	bf00      	nop
 8017b5c:	08023498 	.word	0x08023498
 8017b60:	08023748 	.word	0x08023748
 8017b64:	08023500 	.word	0x08023500
 8017b68:	08023778 	.word	0x08023778
 8017b6c:	08023790 	.word	0x08023790
 8017b70:	080237ac 	.word	0x080237ac
 8017b74:	080237bc 	.word	0x080237bc

08017b78 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b088      	sub	sp, #32
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	60f8      	str	r0, [r7, #12]
 8017b80:	60b9      	str	r1, [r7, #8]
 8017b82:	4611      	mov	r1, r2
 8017b84:	461a      	mov	r2, r3
 8017b86:	460b      	mov	r3, r1
 8017b88:	80fb      	strh	r3, [r7, #6]
 8017b8a:	4613      	mov	r3, r2
 8017b8c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8017b92:	2300      	movs	r3, #0
 8017b94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d108      	bne.n	8017bae <pbuf_copy_partial+0x36>
 8017b9c:	4b2b      	ldr	r3, [pc, #172]	; (8017c4c <pbuf_copy_partial+0xd4>)
 8017b9e:	f240 420a 	movw	r2, #1034	; 0x40a
 8017ba2:	492b      	ldr	r1, [pc, #172]	; (8017c50 <pbuf_copy_partial+0xd8>)
 8017ba4:	482b      	ldr	r0, [pc, #172]	; (8017c54 <pbuf_copy_partial+0xdc>)
 8017ba6:	f008 fcd3 	bl	8020550 <iprintf>
 8017baa:	2300      	movs	r3, #0
 8017bac:	e04a      	b.n	8017c44 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8017bae:	68bb      	ldr	r3, [r7, #8]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d108      	bne.n	8017bc6 <pbuf_copy_partial+0x4e>
 8017bb4:	4b25      	ldr	r3, [pc, #148]	; (8017c4c <pbuf_copy_partial+0xd4>)
 8017bb6:	f240 420b 	movw	r2, #1035	; 0x40b
 8017bba:	4927      	ldr	r1, [pc, #156]	; (8017c58 <pbuf_copy_partial+0xe0>)
 8017bbc:	4825      	ldr	r0, [pc, #148]	; (8017c54 <pbuf_copy_partial+0xdc>)
 8017bbe:	f008 fcc7 	bl	8020550 <iprintf>
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	e03e      	b.n	8017c44 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	61fb      	str	r3, [r7, #28]
 8017bca:	e034      	b.n	8017c36 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8017bcc:	88bb      	ldrh	r3, [r7, #4]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d00a      	beq.n	8017be8 <pbuf_copy_partial+0x70>
 8017bd2:	69fb      	ldr	r3, [r7, #28]
 8017bd4:	895b      	ldrh	r3, [r3, #10]
 8017bd6:	88ba      	ldrh	r2, [r7, #4]
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d305      	bcc.n	8017be8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8017bdc:	69fb      	ldr	r3, [r7, #28]
 8017bde:	895b      	ldrh	r3, [r3, #10]
 8017be0:	88ba      	ldrh	r2, [r7, #4]
 8017be2:	1ad3      	subs	r3, r2, r3
 8017be4:	80bb      	strh	r3, [r7, #4]
 8017be6:	e023      	b.n	8017c30 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8017be8:	69fb      	ldr	r3, [r7, #28]
 8017bea:	895a      	ldrh	r2, [r3, #10]
 8017bec:	88bb      	ldrh	r3, [r7, #4]
 8017bee:	1ad3      	subs	r3, r2, r3
 8017bf0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8017bf2:	8b3a      	ldrh	r2, [r7, #24]
 8017bf4:	88fb      	ldrh	r3, [r7, #6]
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d901      	bls.n	8017bfe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8017bfa:	88fb      	ldrh	r3, [r7, #6]
 8017bfc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8017bfe:	8b7b      	ldrh	r3, [r7, #26]
 8017c00:	68ba      	ldr	r2, [r7, #8]
 8017c02:	18d0      	adds	r0, r2, r3
 8017c04:	69fb      	ldr	r3, [r7, #28]
 8017c06:	685a      	ldr	r2, [r3, #4]
 8017c08:	88bb      	ldrh	r3, [r7, #4]
 8017c0a:	4413      	add	r3, r2
 8017c0c:	8b3a      	ldrh	r2, [r7, #24]
 8017c0e:	4619      	mov	r1, r3
 8017c10:	f008 fba8 	bl	8020364 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8017c14:	8afa      	ldrh	r2, [r7, #22]
 8017c16:	8b3b      	ldrh	r3, [r7, #24]
 8017c18:	4413      	add	r3, r2
 8017c1a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8017c1c:	8b7a      	ldrh	r2, [r7, #26]
 8017c1e:	8b3b      	ldrh	r3, [r7, #24]
 8017c20:	4413      	add	r3, r2
 8017c22:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8017c24:	88fa      	ldrh	r2, [r7, #6]
 8017c26:	8b3b      	ldrh	r3, [r7, #24]
 8017c28:	1ad3      	subs	r3, r2, r3
 8017c2a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017c30:	69fb      	ldr	r3, [r7, #28]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	61fb      	str	r3, [r7, #28]
 8017c36:	88fb      	ldrh	r3, [r7, #6]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d002      	beq.n	8017c42 <pbuf_copy_partial+0xca>
 8017c3c:	69fb      	ldr	r3, [r7, #28]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d1c4      	bne.n	8017bcc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8017c42:	8afb      	ldrh	r3, [r7, #22]
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3720      	adds	r7, #32
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	08023498 	.word	0x08023498
 8017c50:	080237e8 	.word	0x080237e8
 8017c54:	08023500 	.word	0x08023500
 8017c58:	08023808 	.word	0x08023808

08017c5c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8017c5c:	b480      	push	{r7}
 8017c5e:	b087      	sub	sp, #28
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	60f8      	str	r0, [r7, #12]
 8017c64:	460b      	mov	r3, r1
 8017c66:	607a      	str	r2, [r7, #4]
 8017c68:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8017c6a:	897b      	ldrh	r3, [r7, #10]
 8017c6c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8017c72:	e007      	b.n	8017c84 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8017c74:	693b      	ldr	r3, [r7, #16]
 8017c76:	895b      	ldrh	r3, [r3, #10]
 8017c78:	8afa      	ldrh	r2, [r7, #22]
 8017c7a:	1ad3      	subs	r3, r2, r3
 8017c7c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8017c7e:	693b      	ldr	r3, [r7, #16]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8017c84:	693b      	ldr	r3, [r7, #16]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d004      	beq.n	8017c94 <pbuf_skip_const+0x38>
 8017c8a:	693b      	ldr	r3, [r7, #16]
 8017c8c:	895b      	ldrh	r3, [r3, #10]
 8017c8e:	8afa      	ldrh	r2, [r7, #22]
 8017c90:	429a      	cmp	r2, r3
 8017c92:	d2ef      	bcs.n	8017c74 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d002      	beq.n	8017ca0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	8afa      	ldrh	r2, [r7, #22]
 8017c9e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8017ca0:	693b      	ldr	r3, [r7, #16]
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	371c      	adds	r7, #28
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr

08017cae <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8017cae:	b580      	push	{r7, lr}
 8017cb0:	b086      	sub	sp, #24
 8017cb2:	af00      	add	r7, sp, #0
 8017cb4:	60f8      	str	r0, [r7, #12]
 8017cb6:	460b      	mov	r3, r1
 8017cb8:	607a      	str	r2, [r7, #4]
 8017cba:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8017cbc:	897b      	ldrh	r3, [r7, #10]
 8017cbe:	687a      	ldr	r2, [r7, #4]
 8017cc0:	4619      	mov	r1, r3
 8017cc2:	68f8      	ldr	r0, [r7, #12]
 8017cc4:	f7ff ffca 	bl	8017c5c <pbuf_skip_const>
 8017cc8:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8017cca:	697b      	ldr	r3, [r7, #20]
}
 8017ccc:	4618      	mov	r0, r3
 8017cce:	3718      	adds	r7, #24
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd80      	pop	{r7, pc}

08017cd4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b088      	sub	sp, #32
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	60f8      	str	r0, [r7, #12]
 8017cdc:	60b9      	str	r1, [r7, #8]
 8017cde:	4613      	mov	r3, r2
 8017ce0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8017ce2:	88fb      	ldrh	r3, [r7, #6]
 8017ce4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d109      	bne.n	8017d04 <pbuf_take+0x30>
 8017cf0:	4b3a      	ldr	r3, [pc, #232]	; (8017ddc <pbuf_take+0x108>)
 8017cf2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8017cf6:	493a      	ldr	r1, [pc, #232]	; (8017de0 <pbuf_take+0x10c>)
 8017cf8:	483a      	ldr	r0, [pc, #232]	; (8017de4 <pbuf_take+0x110>)
 8017cfa:	f008 fc29 	bl	8020550 <iprintf>
 8017cfe:	f06f 030f 	mvn.w	r3, #15
 8017d02:	e067      	b.n	8017dd4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d109      	bne.n	8017d1e <pbuf_take+0x4a>
 8017d0a:	4b34      	ldr	r3, [pc, #208]	; (8017ddc <pbuf_take+0x108>)
 8017d0c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8017d10:	4935      	ldr	r1, [pc, #212]	; (8017de8 <pbuf_take+0x114>)
 8017d12:	4834      	ldr	r0, [pc, #208]	; (8017de4 <pbuf_take+0x110>)
 8017d14:	f008 fc1c 	bl	8020550 <iprintf>
 8017d18:	f06f 030f 	mvn.w	r3, #15
 8017d1c:	e05a      	b.n	8017dd4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	891b      	ldrh	r3, [r3, #8]
 8017d22:	88fa      	ldrh	r2, [r7, #6]
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d909      	bls.n	8017d3c <pbuf_take+0x68>
 8017d28:	4b2c      	ldr	r3, [pc, #176]	; (8017ddc <pbuf_take+0x108>)
 8017d2a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8017d2e:	492f      	ldr	r1, [pc, #188]	; (8017dec <pbuf_take+0x118>)
 8017d30:	482c      	ldr	r0, [pc, #176]	; (8017de4 <pbuf_take+0x110>)
 8017d32:	f008 fc0d 	bl	8020550 <iprintf>
 8017d36:	f04f 33ff 	mov.w	r3, #4294967295
 8017d3a:	e04b      	b.n	8017dd4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d007      	beq.n	8017d52 <pbuf_take+0x7e>
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d004      	beq.n	8017d52 <pbuf_take+0x7e>
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	891b      	ldrh	r3, [r3, #8]
 8017d4c:	88fa      	ldrh	r2, [r7, #6]
 8017d4e:	429a      	cmp	r2, r3
 8017d50:	d902      	bls.n	8017d58 <pbuf_take+0x84>
    return ERR_ARG;
 8017d52:	f06f 030f 	mvn.w	r3, #15
 8017d56:	e03d      	b.n	8017dd4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	61fb      	str	r3, [r7, #28]
 8017d5c:	e028      	b.n	8017db0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8017d5e:	69fb      	ldr	r3, [r7, #28]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d106      	bne.n	8017d72 <pbuf_take+0x9e>
 8017d64:	4b1d      	ldr	r3, [pc, #116]	; (8017ddc <pbuf_take+0x108>)
 8017d66:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8017d6a:	4921      	ldr	r1, [pc, #132]	; (8017df0 <pbuf_take+0x11c>)
 8017d6c:	481d      	ldr	r0, [pc, #116]	; (8017de4 <pbuf_take+0x110>)
 8017d6e:	f008 fbef 	bl	8020550 <iprintf>
    buf_copy_len = total_copy_len;
 8017d72:	697b      	ldr	r3, [r7, #20]
 8017d74:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8017d76:	69fb      	ldr	r3, [r7, #28]
 8017d78:	895b      	ldrh	r3, [r3, #10]
 8017d7a:	461a      	mov	r2, r3
 8017d7c:	69bb      	ldr	r3, [r7, #24]
 8017d7e:	4293      	cmp	r3, r2
 8017d80:	d902      	bls.n	8017d88 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8017d82:	69fb      	ldr	r3, [r7, #28]
 8017d84:	895b      	ldrh	r3, [r3, #10]
 8017d86:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8017d88:	69fb      	ldr	r3, [r7, #28]
 8017d8a:	6858      	ldr	r0, [r3, #4]
 8017d8c:	68ba      	ldr	r2, [r7, #8]
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	4413      	add	r3, r2
 8017d92:	69ba      	ldr	r2, [r7, #24]
 8017d94:	4619      	mov	r1, r3
 8017d96:	f008 fae5 	bl	8020364 <memcpy>
    total_copy_len -= buf_copy_len;
 8017d9a:	697a      	ldr	r2, [r7, #20]
 8017d9c:	69bb      	ldr	r3, [r7, #24]
 8017d9e:	1ad3      	subs	r3, r2, r3
 8017da0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8017da2:	693a      	ldr	r2, [r7, #16]
 8017da4:	69bb      	ldr	r3, [r7, #24]
 8017da6:	4413      	add	r3, r2
 8017da8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8017daa:	69fb      	ldr	r3, [r7, #28]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	61fb      	str	r3, [r7, #28]
 8017db0:	697b      	ldr	r3, [r7, #20]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d1d3      	bne.n	8017d5e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d103      	bne.n	8017dc4 <pbuf_take+0xf0>
 8017dbc:	88fb      	ldrh	r3, [r7, #6]
 8017dbe:	693a      	ldr	r2, [r7, #16]
 8017dc0:	429a      	cmp	r2, r3
 8017dc2:	d006      	beq.n	8017dd2 <pbuf_take+0xfe>
 8017dc4:	4b05      	ldr	r3, [pc, #20]	; (8017ddc <pbuf_take+0x108>)
 8017dc6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8017dca:	490a      	ldr	r1, [pc, #40]	; (8017df4 <pbuf_take+0x120>)
 8017dcc:	4805      	ldr	r0, [pc, #20]	; (8017de4 <pbuf_take+0x110>)
 8017dce:	f008 fbbf 	bl	8020550 <iprintf>
  return ERR_OK;
 8017dd2:	2300      	movs	r3, #0
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	3720      	adds	r7, #32
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}
 8017ddc:	08023498 	.word	0x08023498
 8017de0:	08023878 	.word	0x08023878
 8017de4:	08023500 	.word	0x08023500
 8017de8:	08023890 	.word	0x08023890
 8017dec:	080238ac 	.word	0x080238ac
 8017df0:	080238cc 	.word	0x080238cc
 8017df4:	080238e4 	.word	0x080238e4

08017df8 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b088      	sub	sp, #32
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	60f8      	str	r0, [r7, #12]
 8017e00:	60b9      	str	r1, [r7, #8]
 8017e02:	4611      	mov	r1, r2
 8017e04:	461a      	mov	r2, r3
 8017e06:	460b      	mov	r3, r1
 8017e08:	80fb      	strh	r3, [r7, #6]
 8017e0a:	4613      	mov	r3, r2
 8017e0c:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8017e0e:	f107 0210 	add.w	r2, r7, #16
 8017e12:	88bb      	ldrh	r3, [r7, #4]
 8017e14:	4619      	mov	r1, r3
 8017e16:	68f8      	ldr	r0, [r7, #12]
 8017e18:	f7ff ff49 	bl	8017cae <pbuf_skip>
 8017e1c:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8017e1e:	69fb      	ldr	r3, [r7, #28]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d047      	beq.n	8017eb4 <pbuf_take_at+0xbc>
 8017e24:	69fb      	ldr	r3, [r7, #28]
 8017e26:	891b      	ldrh	r3, [r3, #8]
 8017e28:	461a      	mov	r2, r3
 8017e2a:	8a3b      	ldrh	r3, [r7, #16]
 8017e2c:	4619      	mov	r1, r3
 8017e2e:	88fb      	ldrh	r3, [r7, #6]
 8017e30:	440b      	add	r3, r1
 8017e32:	429a      	cmp	r2, r3
 8017e34:	db3e      	blt.n	8017eb4 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8017e36:	88fb      	ldrh	r3, [r7, #6]
 8017e38:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8017e3a:	68bb      	ldr	r3, [r7, #8]
 8017e3c:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8017e3e:	69fb      	ldr	r3, [r7, #28]
 8017e40:	895a      	ldrh	r2, [r3, #10]
 8017e42:	8a3b      	ldrh	r3, [r7, #16]
 8017e44:	429a      	cmp	r2, r3
 8017e46:	d806      	bhi.n	8017e56 <pbuf_take_at+0x5e>
 8017e48:	4b1d      	ldr	r3, [pc, #116]	; (8017ec0 <pbuf_take_at+0xc8>)
 8017e4a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017e4e:	491d      	ldr	r1, [pc, #116]	; (8017ec4 <pbuf_take_at+0xcc>)
 8017e50:	481d      	ldr	r0, [pc, #116]	; (8017ec8 <pbuf_take_at+0xd0>)
 8017e52:	f008 fb7d 	bl	8020550 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8017e56:	69fb      	ldr	r3, [r7, #28]
 8017e58:	895b      	ldrh	r3, [r3, #10]
 8017e5a:	461a      	mov	r2, r3
 8017e5c:	8a3b      	ldrh	r3, [r7, #16]
 8017e5e:	1ad2      	subs	r2, r2, r3
 8017e60:	88fb      	ldrh	r3, [r7, #6]
 8017e62:	429a      	cmp	r2, r3
 8017e64:	da05      	bge.n	8017e72 <pbuf_take_at+0x7a>
 8017e66:	69fb      	ldr	r3, [r7, #28]
 8017e68:	895a      	ldrh	r2, [r3, #10]
 8017e6a:	8a3b      	ldrh	r3, [r7, #16]
 8017e6c:	1ad3      	subs	r3, r2, r3
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	e000      	b.n	8017e74 <pbuf_take_at+0x7c>
 8017e72:	88fb      	ldrh	r3, [r7, #6]
 8017e74:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8017e76:	69fb      	ldr	r3, [r7, #28]
 8017e78:	685b      	ldr	r3, [r3, #4]
 8017e7a:	8a3a      	ldrh	r2, [r7, #16]
 8017e7c:	4413      	add	r3, r2
 8017e7e:	8a7a      	ldrh	r2, [r7, #18]
 8017e80:	68b9      	ldr	r1, [r7, #8]
 8017e82:	4618      	mov	r0, r3
 8017e84:	f008 fa6e 	bl	8020364 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8017e88:	8b7a      	ldrh	r2, [r7, #26]
 8017e8a:	8a7b      	ldrh	r3, [r7, #18]
 8017e8c:	1ad3      	subs	r3, r2, r3
 8017e8e:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8017e90:	8a7b      	ldrh	r3, [r7, #18]
 8017e92:	697a      	ldr	r2, [r7, #20]
 8017e94:	4413      	add	r3, r2
 8017e96:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8017e98:	8b7b      	ldrh	r3, [r7, #26]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d008      	beq.n	8017eb0 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8017e9e:	69fb      	ldr	r3, [r7, #28]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	8b7a      	ldrh	r2, [r7, #26]
 8017ea4:	6979      	ldr	r1, [r7, #20]
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f7ff ff14 	bl	8017cd4 <pbuf_take>
 8017eac:	4603      	mov	r3, r0
 8017eae:	e003      	b.n	8017eb8 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	e001      	b.n	8017eb8 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8017eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017eb8:	4618      	mov	r0, r3
 8017eba:	3720      	adds	r7, #32
 8017ebc:	46bd      	mov	sp, r7
 8017ebe:	bd80      	pop	{r7, pc}
 8017ec0:	08023498 	.word	0x08023498
 8017ec4:	080238fc 	.word	0x080238fc
 8017ec8:	08023500 	.word	0x08023500

08017ecc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b084      	sub	sp, #16
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	603a      	str	r2, [r7, #0]
 8017ed6:	71fb      	strb	r3, [r7, #7]
 8017ed8:	460b      	mov	r3, r1
 8017eda:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8017edc:	683b      	ldr	r3, [r7, #0]
 8017ede:	8919      	ldrh	r1, [r3, #8]
 8017ee0:	88ba      	ldrh	r2, [r7, #4]
 8017ee2:	79fb      	ldrb	r3, [r7, #7]
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7ff f95d 	bl	80171a4 <pbuf_alloc>
 8017eea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d101      	bne.n	8017ef6 <pbuf_clone+0x2a>
    return NULL;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	e011      	b.n	8017f1a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8017ef6:	6839      	ldr	r1, [r7, #0]
 8017ef8:	68f8      	ldr	r0, [r7, #12]
 8017efa:	f7ff fd6b 	bl	80179d4 <pbuf_copy>
 8017efe:	4603      	mov	r3, r0
 8017f00:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017f02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d006      	beq.n	8017f18 <pbuf_clone+0x4c>
 8017f0a:	4b06      	ldr	r3, [pc, #24]	; (8017f24 <pbuf_clone+0x58>)
 8017f0c:	f240 5224 	movw	r2, #1316	; 0x524
 8017f10:	4905      	ldr	r1, [pc, #20]	; (8017f28 <pbuf_clone+0x5c>)
 8017f12:	4806      	ldr	r0, [pc, #24]	; (8017f2c <pbuf_clone+0x60>)
 8017f14:	f008 fb1c 	bl	8020550 <iprintf>
  return q;
 8017f18:	68fb      	ldr	r3, [r7, #12]
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3710      	adds	r7, #16
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}
 8017f22:	bf00      	nop
 8017f24:	08023498 	.word	0x08023498
 8017f28:	08023914 	.word	0x08023914
 8017f2c:	08023500 	.word	0x08023500

08017f30 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b084      	sub	sp, #16
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
 8017f38:	460b      	mov	r3, r1
 8017f3a:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8017f3c:	887b      	ldrh	r3, [r7, #2]
 8017f3e:	4619      	mov	r1, r3
 8017f40:	6878      	ldr	r0, [r7, #4]
 8017f42:	f000 f80c 	bl	8017f5e <pbuf_try_get_at>
 8017f46:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	db02      	blt.n	8017f54 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	b2db      	uxtb	r3, r3
 8017f52:	e000      	b.n	8017f56 <pbuf_get_at+0x26>
  }
  return 0;
 8017f54:	2300      	movs	r3, #0
}
 8017f56:	4618      	mov	r0, r3
 8017f58:	3710      	adds	r7, #16
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}

08017f5e <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8017f5e:	b580      	push	{r7, lr}
 8017f60:	b084      	sub	sp, #16
 8017f62:	af00      	add	r7, sp, #0
 8017f64:	6078      	str	r0, [r7, #4]
 8017f66:	460b      	mov	r3, r1
 8017f68:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8017f6a:	f107 020a 	add.w	r2, r7, #10
 8017f6e:	887b      	ldrh	r3, [r7, #2]
 8017f70:	4619      	mov	r1, r3
 8017f72:	6878      	ldr	r0, [r7, #4]
 8017f74:	f7ff fe72 	bl	8017c5c <pbuf_skip_const>
 8017f78:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d00a      	beq.n	8017f96 <pbuf_try_get_at+0x38>
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	895a      	ldrh	r2, [r3, #10]
 8017f84:	897b      	ldrh	r3, [r7, #10]
 8017f86:	429a      	cmp	r2, r3
 8017f88:	d905      	bls.n	8017f96 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	685b      	ldr	r3, [r3, #4]
 8017f8e:	897a      	ldrh	r2, [r7, #10]
 8017f90:	4413      	add	r3, r2
 8017f92:	781b      	ldrb	r3, [r3, #0]
 8017f94:	e001      	b.n	8017f9a <pbuf_try_get_at+0x3c>
  }
  return -1;
 8017f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	3710      	adds	r7, #16
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bd80      	pop	{r7, pc}

08017fa2 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8017fa2:	b580      	push	{r7, lr}
 8017fa4:	b084      	sub	sp, #16
 8017fa6:	af00      	add	r7, sp, #0
 8017fa8:	6078      	str	r0, [r7, #4]
 8017faa:	460b      	mov	r3, r1
 8017fac:	807b      	strh	r3, [r7, #2]
 8017fae:	4613      	mov	r3, r2
 8017fb0:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8017fb2:	f107 020a 	add.w	r2, r7, #10
 8017fb6:	887b      	ldrh	r3, [r7, #2]
 8017fb8:	4619      	mov	r1, r3
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f7ff fe77 	bl	8017cae <pbuf_skip>
 8017fc0:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d00a      	beq.n	8017fde <pbuf_put_at+0x3c>
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	895a      	ldrh	r2, [r3, #10]
 8017fcc:	897b      	ldrh	r3, [r7, #10]
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d905      	bls.n	8017fde <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	685b      	ldr	r3, [r3, #4]
 8017fd6:	897a      	ldrh	r2, [r7, #10]
 8017fd8:	4413      	add	r3, r2
 8017fda:	787a      	ldrb	r2, [r7, #1]
 8017fdc:	701a      	strb	r2, [r3, #0]
  }
}
 8017fde:	bf00      	nop
 8017fe0:	3710      	adds	r7, #16
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	bd80      	pop	{r7, pc}

08017fe6 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 8017fe6:	b580      	push	{r7, lr}
 8017fe8:	b088      	sub	sp, #32
 8017fea:	af00      	add	r7, sp, #0
 8017fec:	60f8      	str	r0, [r7, #12]
 8017fee:	607a      	str	r2, [r7, #4]
 8017ff0:	461a      	mov	r2, r3
 8017ff2:	460b      	mov	r3, r1
 8017ff4:	817b      	strh	r3, [r7, #10]
 8017ff6:	4613      	mov	r3, r2
 8017ff8:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 8017ffa:	897b      	ldrh	r3, [r7, #10]
 8017ffc:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	891b      	ldrh	r3, [r3, #8]
 8018006:	4619      	mov	r1, r3
 8018008:	897a      	ldrh	r2, [r7, #10]
 801800a:	893b      	ldrh	r3, [r7, #8]
 801800c:	4413      	add	r3, r2
 801800e:	4299      	cmp	r1, r3
 8018010:	da0a      	bge.n	8018028 <pbuf_memcmp+0x42>
    return 0xffff;
 8018012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018016:	e037      	b.n	8018088 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 8018018:	69bb      	ldr	r3, [r7, #24]
 801801a:	895b      	ldrh	r3, [r3, #10]
 801801c:	8bfa      	ldrh	r2, [r7, #30]
 801801e:	1ad3      	subs	r3, r2, r3
 8018020:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 8018022:	69bb      	ldr	r3, [r7, #24]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 8018028:	69bb      	ldr	r3, [r7, #24]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d004      	beq.n	8018038 <pbuf_memcmp+0x52>
 801802e:	69bb      	ldr	r3, [r7, #24]
 8018030:	895b      	ldrh	r3, [r3, #10]
 8018032:	8bfa      	ldrh	r2, [r7, #30]
 8018034:	429a      	cmp	r2, r3
 8018036:	d2ef      	bcs.n	8018018 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8018038:	2300      	movs	r3, #0
 801803a:	82fb      	strh	r3, [r7, #22]
 801803c:	e01f      	b.n	801807e <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801803e:	8bfa      	ldrh	r2, [r7, #30]
 8018040:	8afb      	ldrh	r3, [r7, #22]
 8018042:	4413      	add	r3, r2
 8018044:	b29b      	uxth	r3, r3
 8018046:	4619      	mov	r1, r3
 8018048:	69b8      	ldr	r0, [r7, #24]
 801804a:	f7ff ff71 	bl	8017f30 <pbuf_get_at>
 801804e:	4603      	mov	r3, r0
 8018050:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8018052:	8afb      	ldrh	r3, [r7, #22]
 8018054:	687a      	ldr	r2, [r7, #4]
 8018056:	4413      	add	r3, r2
 8018058:	781b      	ldrb	r3, [r3, #0]
 801805a:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 801805c:	7d7a      	ldrb	r2, [r7, #21]
 801805e:	7d3b      	ldrb	r3, [r7, #20]
 8018060:	429a      	cmp	r2, r3
 8018062:	d009      	beq.n	8018078 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8018064:	8afb      	ldrh	r3, [r7, #22]
 8018066:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801806a:	4293      	cmp	r3, r2
 801806c:	bf28      	it	cs
 801806e:	4613      	movcs	r3, r2
 8018070:	b29b      	uxth	r3, r3
 8018072:	3301      	adds	r3, #1
 8018074:	b29b      	uxth	r3, r3
 8018076:	e007      	b.n	8018088 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 8018078:	8afb      	ldrh	r3, [r7, #22]
 801807a:	3301      	adds	r3, #1
 801807c:	82fb      	strh	r3, [r7, #22]
 801807e:	8afa      	ldrh	r2, [r7, #22]
 8018080:	893b      	ldrh	r3, [r7, #8]
 8018082:	429a      	cmp	r2, r3
 8018084:	d3db      	bcc.n	801803e <pbuf_memcmp+0x58>
    }
  }
  return 0;
 8018086:	2300      	movs	r3, #0
}
 8018088:	4618      	mov	r0, r3
 801808a:	3720      	adds	r7, #32
 801808c:	46bd      	mov	sp, r7
 801808e:	bd80      	pop	{r7, pc}

08018090 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8018090:	b480      	push	{r7}
 8018092:	b085      	sub	sp, #20
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	db02      	blt.n	80180a8 <tryget_socket_unconn_nouse+0x18>
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	2b03      	cmp	r3, #3
 80180a6:	dd01      	ble.n	80180ac <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 80180a8:	2300      	movs	r3, #0
 80180aa:	e003      	b.n	80180b4 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	011b      	lsls	r3, r3, #4
 80180b0:	4a03      	ldr	r2, [pc, #12]	; (80180c0 <tryget_socket_unconn_nouse+0x30>)
 80180b2:	4413      	add	r3, r2
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	3714      	adds	r7, #20
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr
 80180c0:	2400d384 	.word	0x2400d384

080180c4 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b084      	sub	sp, #16
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 80180cc:	6878      	ldr	r0, [r7, #4]
 80180ce:	f7ff ffdf 	bl	8018090 <tryget_socket_unconn_nouse>
 80180d2:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 80180d4:	68fb      	ldr	r3, [r7, #12]
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3710      	adds	r7, #16
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}

080180de <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80180de:	b580      	push	{r7, lr}
 80180e0:	b084      	sub	sp, #16
 80180e2:	af00      	add	r7, sp, #0
 80180e4:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80180e6:	6878      	ldr	r0, [r7, #4]
 80180e8:	f7ff ffec 	bl	80180c4 <tryget_socket_unconn>
 80180ec:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d005      	beq.n	8018100 <tryget_socket+0x22>
    if (sock->conn) {
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d001      	beq.n	8018100 <tryget_socket+0x22>
      return sock;
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	e000      	b.n	8018102 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8018100:	2300      	movs	r3, #0
}
 8018102:	4618      	mov	r0, r3
 8018104:	3710      	adds	r7, #16
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}
	...

0801810c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b084      	sub	sp, #16
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f7ff ffe2 	bl	80180de <tryget_socket>
 801811a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	2b00      	cmp	r3, #0
 8018120:	d104      	bne.n	801812c <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8018122:	4b05      	ldr	r3, [pc, #20]	; (8018138 <get_socket+0x2c>)
 8018124:	2209      	movs	r2, #9
 8018126:	601a      	str	r2, [r3, #0]
    return NULL;
 8018128:	2300      	movs	r3, #0
 801812a:	e000      	b.n	801812e <get_socket+0x22>
  }
  return sock;
 801812c:	68fb      	ldr	r3, [r7, #12]
}
 801812e:	4618      	mov	r0, r3
 8018130:	3710      	adds	r7, #16
 8018132:	46bd      	mov	sp, r7
 8018134:	bd80      	pop	{r7, pc}
 8018136:	bf00      	nop
 8018138:	2400d3c8 	.word	0x2400d3c8

0801813c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b084      	sub	sp, #16
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
 8018144:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8018146:	2300      	movs	r3, #0
 8018148:	60fb      	str	r3, [r7, #12]
 801814a:	e052      	b.n	80181f2 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 801814c:	f000 fe4e 	bl	8018dec <sys_arch_protect>
 8018150:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8018152:	4a2c      	ldr	r2, [pc, #176]	; (8018204 <alloc_socket+0xc8>)
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	011b      	lsls	r3, r3, #4
 8018158:	4413      	add	r3, r2
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d142      	bne.n	80181e6 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8018160:	4a28      	ldr	r2, [pc, #160]	; (8018204 <alloc_socket+0xc8>)
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	011b      	lsls	r3, r3, #4
 8018166:	4413      	add	r3, r2
 8018168:	687a      	ldr	r2, [r7, #4]
 801816a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 801816c:	68b8      	ldr	r0, [r7, #8]
 801816e:	f000 fe4b 	bl	8018e08 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8018172:	4a24      	ldr	r2, [pc, #144]	; (8018204 <alloc_socket+0xc8>)
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	011b      	lsls	r3, r3, #4
 8018178:	4413      	add	r3, r2
 801817a:	3304      	adds	r3, #4
 801817c:	2200      	movs	r2, #0
 801817e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8018180:	4a20      	ldr	r2, [pc, #128]	; (8018204 <alloc_socket+0xc8>)
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	011b      	lsls	r3, r3, #4
 8018186:	4413      	add	r3, r2
 8018188:	330e      	adds	r3, #14
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d006      	beq.n	801819e <alloc_socket+0x62>
 8018190:	4b1d      	ldr	r3, [pc, #116]	; (8018208 <alloc_socket+0xcc>)
 8018192:	f240 220e 	movw	r2, #526	; 0x20e
 8018196:	491d      	ldr	r1, [pc, #116]	; (801820c <alloc_socket+0xd0>)
 8018198:	481d      	ldr	r0, [pc, #116]	; (8018210 <alloc_socket+0xd4>)
 801819a:	f008 f9d9 	bl	8020550 <iprintf>
      sockets[i].rcvevent   = 0;
 801819e:	4a19      	ldr	r2, [pc, #100]	; (8018204 <alloc_socket+0xc8>)
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	011b      	lsls	r3, r3, #4
 80181a4:	4413      	add	r3, r2
 80181a6:	3308      	adds	r3, #8
 80181a8:	2200      	movs	r2, #0
 80181aa:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	781b      	ldrb	r3, [r3, #0]
 80181b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80181b4:	2b10      	cmp	r3, #16
 80181b6:	d102      	bne.n	80181be <alloc_socket+0x82>
 80181b8:	683b      	ldr	r3, [r7, #0]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d001      	beq.n	80181c2 <alloc_socket+0x86>
 80181be:	2301      	movs	r3, #1
 80181c0:	e000      	b.n	80181c4 <alloc_socket+0x88>
 80181c2:	2300      	movs	r3, #0
 80181c4:	b299      	uxth	r1, r3
 80181c6:	4a0f      	ldr	r2, [pc, #60]	; (8018204 <alloc_socket+0xc8>)
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	011b      	lsls	r3, r3, #4
 80181cc:	4413      	add	r3, r2
 80181ce:	330a      	adds	r3, #10
 80181d0:	460a      	mov	r2, r1
 80181d2:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80181d4:	4a0b      	ldr	r2, [pc, #44]	; (8018204 <alloc_socket+0xc8>)
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	011b      	lsls	r3, r3, #4
 80181da:	4413      	add	r3, r2
 80181dc:	330c      	adds	r3, #12
 80181de:	2200      	movs	r2, #0
 80181e0:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	e00a      	b.n	80181fc <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80181e6:	68b8      	ldr	r0, [r7, #8]
 80181e8:	f000 fe0e 	bl	8018e08 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	3301      	adds	r3, #1
 80181f0:	60fb      	str	r3, [r7, #12]
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	2b03      	cmp	r3, #3
 80181f6:	dda9      	ble.n	801814c <alloc_socket+0x10>
  }
  return -1;
 80181f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	3710      	adds	r7, #16
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}
 8018204:	2400d384 	.word	0x2400d384
 8018208:	08023928 	.word	0x08023928
 801820c:	08023964 	.word	0x08023964
 8018210:	08023984 	.word	0x08023984

08018214 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8018214:	b480      	push	{r7}
 8018216:	b085      	sub	sp, #20
 8018218:	af00      	add	r7, sp, #0
 801821a:	60f8      	str	r0, [r7, #12]
 801821c:	60b9      	str	r1, [r7, #8]
 801821e:	607a      	str	r2, [r7, #4]
 8018220:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8018222:	683b      	ldr	r3, [r7, #0]
 8018224:	68fa      	ldr	r2, [r7, #12]
 8018226:	6852      	ldr	r2, [r2, #4]
 8018228:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	2200      	movs	r2, #0
 801822e:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	681a      	ldr	r2, [r3, #0]
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	2200      	movs	r2, #0
 801823c:	601a      	str	r2, [r3, #0]
  return 1;
 801823e:	2301      	movs	r3, #1
}
 8018240:	4618      	mov	r0, r3
 8018242:	3714      	adds	r7, #20
 8018244:	46bd      	mov	sp, r7
 8018246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824a:	4770      	bx	lr

0801824c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b084      	sub	sp, #16
 8018250:	af00      	add	r7, sp, #0
 8018252:	60f8      	str	r0, [r7, #12]
 8018254:	60b9      	str	r1, [r7, #8]
 8018256:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d00d      	beq.n	801827c <free_socket_free_elements+0x30>
    if (is_tcp) {
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d005      	beq.n	8018272 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	4618      	mov	r0, r3
 801826c:	f7ff fa7e 	bl	801776c <pbuf_free>
 8018270:	e004      	b.n	801827c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	4618      	mov	r0, r3
 8018278:	f7fe f936 	bl	80164e8 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 801827c:	68bb      	ldr	r3, [r7, #8]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d002      	beq.n	8018288 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8018282:	68b8      	ldr	r0, [r7, #8]
 8018284:	f7f6 ff4a 	bl	800f11c <netconn_delete>
  }
}
 8018288:	bf00      	nop
 801828a:	3710      	adds	r7, #16
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}

08018290 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b086      	sub	sp, #24
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
 8018298:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 801829a:	f000 fda7 	bl	8018dec <sys_arch_protect>
 801829e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 80182a0:	f107 0308 	add.w	r3, r7, #8
 80182a4:	f107 020c 	add.w	r2, r7, #12
 80182a8:	6839      	ldr	r1, [r7, #0]
 80182aa:	6878      	ldr	r0, [r7, #4]
 80182ac:	f7ff ffb2 	bl	8018214 <free_socket_locked>
 80182b0:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 80182b2:	6978      	ldr	r0, [r7, #20]
 80182b4:	f000 fda8 	bl	8018e08 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 80182b8:	693b      	ldr	r3, [r7, #16]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d006      	beq.n	80182cc <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	f107 0208 	add.w	r2, r7, #8
 80182c4:	4619      	mov	r1, r3
 80182c6:	6838      	ldr	r0, [r7, #0]
 80182c8:	f7ff ffc0 	bl	801824c <free_socket_free_elements>
  }
}
 80182cc:	bf00      	nop
 80182ce:	3718      	adds	r7, #24
 80182d0:	46bd      	mov	sp, r7
 80182d2:	bd80      	pop	{r7, pc}

080182d4 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b086      	sub	sp, #24
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 80182dc:	2300      	movs	r3, #0
 80182de:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 80182e0:	6878      	ldr	r0, [r7, #4]
 80182e2:	f7ff ff13 	bl	801810c <get_socket>
 80182e6:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80182e8:	693b      	ldr	r3, [r7, #16]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d102      	bne.n	80182f4 <lwip_close+0x20>
    return -1;
 80182ee:	f04f 33ff 	mov.w	r3, #4294967295
 80182f2:	e039      	b.n	8018368 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 80182f4:	693b      	ldr	r3, [r7, #16]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d00b      	beq.n	8018314 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80182fc:	693b      	ldr	r3, [r7, #16]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	781b      	ldrb	r3, [r3, #0]
 8018302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018306:	2b10      	cmp	r3, #16
 8018308:	bf0c      	ite	eq
 801830a:	2301      	moveq	r3, #1
 801830c:	2300      	movne	r3, #0
 801830e:	b2db      	uxtb	r3, r3
 8018310:	617b      	str	r3, [r7, #20]
 8018312:	e00a      	b.n	801832a <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8018314:	693b      	ldr	r3, [r7, #16]
 8018316:	685b      	ldr	r3, [r3, #4]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d006      	beq.n	801832a <lwip_close+0x56>
 801831c:	4b14      	ldr	r3, [pc, #80]	; (8018370 <lwip_close+0x9c>)
 801831e:	f44f 7245 	mov.w	r2, #788	; 0x314
 8018322:	4914      	ldr	r1, [pc, #80]	; (8018374 <lwip_close+0xa0>)
 8018324:	4814      	ldr	r0, [pc, #80]	; (8018378 <lwip_close+0xa4>)
 8018326:	f008 f913 	bl	8020550 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	4618      	mov	r0, r3
 8018330:	f7f6 fed0 	bl	800f0d4 <netconn_prepare_delete>
 8018334:	4603      	mov	r3, r0
 8018336:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801833c:	2b00      	cmp	r3, #0
 801833e:	d00e      	beq.n	801835e <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8018340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018344:	4618      	mov	r0, r3
 8018346:	f7fa fdc3 	bl	8012ed0 <err_to_errno>
 801834a:	60b8      	str	r0, [r7, #8]
 801834c:	68bb      	ldr	r3, [r7, #8]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d002      	beq.n	8018358 <lwip_close+0x84>
 8018352:	4a0a      	ldr	r2, [pc, #40]	; (801837c <lwip_close+0xa8>)
 8018354:	68bb      	ldr	r3, [r7, #8]
 8018356:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8018358:	f04f 33ff 	mov.w	r3, #4294967295
 801835c:	e004      	b.n	8018368 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 801835e:	6979      	ldr	r1, [r7, #20]
 8018360:	6938      	ldr	r0, [r7, #16]
 8018362:	f7ff ff95 	bl	8018290 <free_socket>
  set_errno(0);
  return 0;
 8018366:	2300      	movs	r3, #0
}
 8018368:	4618      	mov	r0, r3
 801836a:	3718      	adds	r7, #24
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}
 8018370:	08023928 	.word	0x08023928
 8018374:	080239f0 	.word	0x080239f0
 8018378:	08023984 	.word	0x08023984
 801837c:	2400d3c8 	.word	0x2400d3c8

08018380 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8018380:	b580      	push	{r7, lr}
 8018382:	b08c      	sub	sp, #48	; 0x30
 8018384:	af00      	add	r7, sp, #0
 8018386:	60f8      	str	r0, [r7, #12]
 8018388:	60b9      	str	r1, [r7, #8]
 801838a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 801838c:	68f8      	ldr	r0, [r7, #12]
 801838e:	f7ff febd 	bl	801810c <get_socket>
 8018392:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8018394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018396:	2b00      	cmp	r3, #0
 8018398:	d102      	bne.n	80183a0 <lwip_connect+0x20>
    return -1;
 801839a:	f04f 33ff 	mov.w	r3, #4294967295
 801839e:	e062      	b.n	8018466 <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 80183a0:	68bb      	ldr	r3, [r7, #8]
 80183a2:	785b      	ldrb	r3, [r3, #1]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d108      	bne.n	80183ba <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 80183a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	4618      	mov	r0, r3
 80183ae:	f7f6 ff09 	bl	800f1c4 <netconn_disconnect>
 80183b2:	4603      	mov	r3, r0
 80183b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80183b8:	e039      	b.n	801842e <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	2b10      	cmp	r3, #16
 80183be:	d10c      	bne.n	80183da <lwip_connect+0x5a>
 80183c0:	68bb      	ldr	r3, [r7, #8]
 80183c2:	785b      	ldrb	r3, [r3, #1]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d003      	beq.n	80183d0 <lwip_connect+0x50>
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	785b      	ldrb	r3, [r3, #1]
 80183cc:	2b02      	cmp	r3, #2
 80183ce:	d104      	bne.n	80183da <lwip_connect+0x5a>
 80183d0:	68bb      	ldr	r3, [r7, #8]
 80183d2:	f003 0303 	and.w	r3, r3, #3
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d014      	beq.n	8018404 <lwip_connect+0x84>
 80183da:	4b25      	ldr	r3, [pc, #148]	; (8018470 <lwip_connect+0xf0>)
 80183dc:	f240 3247 	movw	r2, #839	; 0x347
 80183e0:	4924      	ldr	r1, [pc, #144]	; (8018474 <lwip_connect+0xf4>)
 80183e2:	4825      	ldr	r0, [pc, #148]	; (8018478 <lwip_connect+0xf8>)
 80183e4:	f008 f8b4 	bl	8020550 <iprintf>
 80183e8:	f06f 000f 	mvn.w	r0, #15
 80183ec:	f7fa fd70 	bl	8012ed0 <err_to_errno>
 80183f0:	6238      	str	r0, [r7, #32]
 80183f2:	6a3b      	ldr	r3, [r7, #32]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d002      	beq.n	80183fe <lwip_connect+0x7e>
 80183f8:	4a20      	ldr	r2, [pc, #128]	; (801847c <lwip_connect+0xfc>)
 80183fa:	6a3b      	ldr	r3, [r7, #32]
 80183fc:	6013      	str	r3, [r2, #0]
 80183fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018402:	e030      	b.n	8018466 <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	685b      	ldr	r3, [r3, #4]
 8018408:	617b      	str	r3, [r7, #20]
 801840a:	68bb      	ldr	r3, [r7, #8]
 801840c:	885b      	ldrh	r3, [r3, #2]
 801840e:	4618      	mov	r0, r3
 8018410:	f7f8 fb5e 	bl	8010ad0 <lwip_htons>
 8018414:	4603      	mov	r3, r0
 8018416:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8018418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801841e:	f107 0114 	add.w	r1, r7, #20
 8018422:	4618      	mov	r0, r3
 8018424:	f7f6 fe96 	bl	800f154 <netconn_connect>
 8018428:	4603      	mov	r3, r0
 801842a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 801842e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8018432:	2b00      	cmp	r3, #0
 8018434:	d00e      	beq.n	8018454 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8018436:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801843a:	4618      	mov	r0, r3
 801843c:	f7fa fd48 	bl	8012ed0 <err_to_errno>
 8018440:	61b8      	str	r0, [r7, #24]
 8018442:	69bb      	ldr	r3, [r7, #24]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d002      	beq.n	801844e <lwip_connect+0xce>
 8018448:	4a0c      	ldr	r2, [pc, #48]	; (801847c <lwip_connect+0xfc>)
 801844a:	69bb      	ldr	r3, [r7, #24]
 801844c:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801844e:	f04f 33ff 	mov.w	r3, #4294967295
 8018452:	e008      	b.n	8018466 <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8018454:	2300      	movs	r3, #0
 8018456:	61fb      	str	r3, [r7, #28]
 8018458:	69fb      	ldr	r3, [r7, #28]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d002      	beq.n	8018464 <lwip_connect+0xe4>
 801845e:	4a07      	ldr	r2, [pc, #28]	; (801847c <lwip_connect+0xfc>)
 8018460:	69fb      	ldr	r3, [r7, #28]
 8018462:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8018464:	2300      	movs	r3, #0
}
 8018466:	4618      	mov	r0, r3
 8018468:	3730      	adds	r7, #48	; 0x30
 801846a:	46bd      	mov	sp, r7
 801846c:	bd80      	pop	{r7, pc}
 801846e:	bf00      	nop
 8018470:	08023928 	.word	0x08023928
 8018474:	08023a08 	.word	0x08023a08
 8018478:	08023984 	.word	0x08023984
 801847c:	2400d3c8 	.word	0x2400d3c8

08018480 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b08a      	sub	sp, #40	; 0x28
 8018484:	af02      	add	r7, sp, #8
 8018486:	60f8      	str	r0, [r7, #12]
 8018488:	60b9      	str	r1, [r7, #8]
 801848a:	607a      	str	r2, [r7, #4]
 801848c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 801848e:	68f8      	ldr	r0, [r7, #12]
 8018490:	f7ff fe3c 	bl	801810c <get_socket>
 8018494:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8018496:	69fb      	ldr	r3, [r7, #28]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d102      	bne.n	80184a2 <lwip_send+0x22>
    return -1;
 801849c:	f04f 33ff 	mov.w	r3, #4294967295
 80184a0:	e046      	b.n	8018530 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80184a2:	69fb      	ldr	r3, [r7, #28]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80184ac:	2b10      	cmp	r3, #16
 80184ae:	d00b      	beq.n	80184c8 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80184b0:	2300      	movs	r3, #0
 80184b2:	9301      	str	r3, [sp, #4]
 80184b4:	2300      	movs	r3, #0
 80184b6:	9300      	str	r3, [sp, #0]
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	687a      	ldr	r2, [r7, #4]
 80184bc:	68b9      	ldr	r1, [r7, #8]
 80184be:	68f8      	ldr	r0, [r7, #12]
 80184c0:	f000 f83c 	bl	801853c <lwip_sendto>
 80184c4:	4603      	mov	r3, r0
 80184c6:	e033      	b.n	8018530 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d001      	beq.n	80184d6 <lwip_send+0x56>
 80184d2:	2203      	movs	r2, #3
 80184d4:	e000      	b.n	80184d8 <lwip_send+0x58>
 80184d6:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80184d8:	683b      	ldr	r3, [r7, #0]
 80184da:	105b      	asrs	r3, r3, #1
 80184dc:	b25b      	sxtb	r3, r3
 80184de:	f003 0304 	and.w	r3, r3, #4
 80184e2:	b25b      	sxtb	r3, r3
 80184e4:	4313      	orrs	r3, r2
 80184e6:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 80184e8:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 80184ea:	2300      	movs	r3, #0
 80184ec:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80184ee:	69fb      	ldr	r3, [r7, #28]
 80184f0:	6818      	ldr	r0, [r3, #0]
 80184f2:	7efa      	ldrb	r2, [r7, #27]
 80184f4:	f107 0310 	add.w	r3, r7, #16
 80184f8:	9300      	str	r3, [sp, #0]
 80184fa:	4613      	mov	r3, r2
 80184fc:	687a      	ldr	r2, [r7, #4]
 80184fe:	68b9      	ldr	r1, [r7, #8]
 8018500:	f7f6 feb8 	bl	800f274 <netconn_write_partly>
 8018504:	4603      	mov	r3, r0
 8018506:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8018508:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801850c:	4618      	mov	r0, r3
 801850e:	f7fa fcdf 	bl	8012ed0 <err_to_errno>
 8018512:	6178      	str	r0, [r7, #20]
 8018514:	697b      	ldr	r3, [r7, #20]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d002      	beq.n	8018520 <lwip_send+0xa0>
 801851a:	4a07      	ldr	r2, [pc, #28]	; (8018538 <lwip_send+0xb8>)
 801851c:	697b      	ldr	r3, [r7, #20]
 801851e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8018520:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d101      	bne.n	801852c <lwip_send+0xac>
 8018528:	693b      	ldr	r3, [r7, #16]
 801852a:	e001      	b.n	8018530 <lwip_send+0xb0>
 801852c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018530:	4618      	mov	r0, r3
 8018532:	3720      	adds	r7, #32
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}
 8018538:	2400d3c8 	.word	0x2400d3c8

0801853c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b08e      	sub	sp, #56	; 0x38
 8018540:	af00      	add	r7, sp, #0
 8018542:	60f8      	str	r0, [r7, #12]
 8018544:	60b9      	str	r1, [r7, #8]
 8018546:	607a      	str	r2, [r7, #4]
 8018548:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 801854a:	68f8      	ldr	r0, [r7, #12]
 801854c:	f7ff fdde 	bl	801810c <get_socket>
 8018550:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8018552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018554:	2b00      	cmp	r3, #0
 8018556:	d102      	bne.n	801855e <lwip_sendto+0x22>
    return -1;
 8018558:	f04f 33ff 	mov.w	r3, #4294967295
 801855c:	e093      	b.n	8018686 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018568:	2b10      	cmp	r3, #16
 801856a:	d107      	bne.n	801857c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	687a      	ldr	r2, [r7, #4]
 8018570:	68b9      	ldr	r1, [r7, #8]
 8018572:	68f8      	ldr	r0, [r7, #12]
 8018574:	f7ff ff84 	bl	8018480 <lwip_send>
 8018578:	4603      	mov	r3, r0
 801857a:	e084      	b.n	8018686 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018582:	d30a      	bcc.n	801859a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8018584:	235a      	movs	r3, #90	; 0x5a
 8018586:	623b      	str	r3, [r7, #32]
 8018588:	6a3b      	ldr	r3, [r7, #32]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d002      	beq.n	8018594 <lwip_sendto+0x58>
 801858e:	4a40      	ldr	r2, [pc, #256]	; (8018690 <lwip_sendto+0x154>)
 8018590:	6a3b      	ldr	r3, [r7, #32]
 8018592:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8018594:	f04f 33ff 	mov.w	r3, #4294967295
 8018598:	e075      	b.n	8018686 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 801859e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d102      	bne.n	80185aa <lwip_sendto+0x6e>
 80185a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d023      	beq.n	80185f2 <lwip_sendto+0xb6>
 80185aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185ac:	2b10      	cmp	r3, #16
 80185ae:	d10b      	bne.n	80185c8 <lwip_sendto+0x8c>
 80185b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d008      	beq.n	80185c8 <lwip_sendto+0x8c>
 80185b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185b8:	785b      	ldrb	r3, [r3, #1]
 80185ba:	2b02      	cmp	r3, #2
 80185bc:	d104      	bne.n	80185c8 <lwip_sendto+0x8c>
 80185be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185c0:	f003 0303 	and.w	r3, r3, #3
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d014      	beq.n	80185f2 <lwip_sendto+0xb6>
 80185c8:	4b32      	ldr	r3, [pc, #200]	; (8018694 <lwip_sendto+0x158>)
 80185ca:	f240 6252 	movw	r2, #1618	; 0x652
 80185ce:	4932      	ldr	r1, [pc, #200]	; (8018698 <lwip_sendto+0x15c>)
 80185d0:	4832      	ldr	r0, [pc, #200]	; (801869c <lwip_sendto+0x160>)
 80185d2:	f007 ffbd 	bl	8020550 <iprintf>
 80185d6:	f06f 000f 	mvn.w	r0, #15
 80185da:	f7fa fc79 	bl	8012ed0 <err_to_errno>
 80185de:	62b8      	str	r0, [r7, #40]	; 0x28
 80185e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d002      	beq.n	80185ec <lwip_sendto+0xb0>
 80185e6:	4a2a      	ldr	r2, [pc, #168]	; (8018690 <lwip_sendto+0x154>)
 80185e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ea:	6013      	str	r3, [r2, #0]
 80185ec:	f04f 33ff 	mov.w	r3, #4294967295
 80185f0:	e049      	b.n	8018686 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 80185f2:	2300      	movs	r3, #0
 80185f4:	617b      	str	r3, [r7, #20]
 80185f6:	697b      	ldr	r3, [r7, #20]
 80185f8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 80185fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d00a      	beq.n	8018616 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8018600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	61bb      	str	r3, [r7, #24]
 8018606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018608:	885b      	ldrh	r3, [r3, #2]
 801860a:	4618      	mov	r0, r3
 801860c:	f7f8 fa60 	bl	8010ad0 <lwip_htons>
 8018610:	4603      	mov	r3, r0
 8018612:	86bb      	strh	r3, [r7, #52]	; 0x34
 8018614:	e003      	b.n	801861e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8018616:	2300      	movs	r3, #0
 8018618:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 801861a:	2300      	movs	r3, #0
 801861c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 801861e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018620:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8018622:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018624:	f107 0310 	add.w	r3, r7, #16
 8018628:	68b9      	ldr	r1, [r7, #8]
 801862a:	4618      	mov	r0, r3
 801862c:	f7fd ffa4 	bl	8016578 <netbuf_ref>
 8018630:	4603      	mov	r3, r0
 8018632:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8018636:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801863a:	2b00      	cmp	r3, #0
 801863c:	d10a      	bne.n	8018654 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 801863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	f107 0210 	add.w	r2, r7, #16
 8018646:	4611      	mov	r1, r2
 8018648:	4618      	mov	r0, r3
 801864a:	f7f6 fde5 	bl	800f218 <netconn_send>
 801864e:	4603      	mov	r3, r0
 8018650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8018654:	f107 0310 	add.w	r3, r7, #16
 8018658:	4618      	mov	r0, r3
 801865a:	f7fd ff65 	bl	8016528 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 801865e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8018662:	4618      	mov	r0, r3
 8018664:	f7fa fc34 	bl	8012ed0 <err_to_errno>
 8018668:	6278      	str	r0, [r7, #36]	; 0x24
 801866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801866c:	2b00      	cmp	r3, #0
 801866e:	d002      	beq.n	8018676 <lwip_sendto+0x13a>
 8018670:	4a07      	ldr	r2, [pc, #28]	; (8018690 <lwip_sendto+0x154>)
 8018672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018674:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8018676:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801867a:	2b00      	cmp	r3, #0
 801867c:	d101      	bne.n	8018682 <lwip_sendto+0x146>
 801867e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018680:	e001      	b.n	8018686 <lwip_sendto+0x14a>
 8018682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018686:	4618      	mov	r0, r3
 8018688:	3738      	adds	r7, #56	; 0x38
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	2400d3c8 	.word	0x2400d3c8
 8018694:	08023928 	.word	0x08023928
 8018698:	08023c10 	.word	0x08023c10
 801869c:	08023984 	.word	0x08023984

080186a0 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b086      	sub	sp, #24
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	60f8      	str	r0, [r7, #12]
 80186a8:	60b9      	str	r1, [r7, #8]
 80186aa:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 80186ac:	68bb      	ldr	r3, [r7, #8]
 80186ae:	2b03      	cmp	r3, #3
 80186b0:	d009      	beq.n	80186c6 <lwip_socket+0x26>
 80186b2:	68bb      	ldr	r3, [r7, #8]
 80186b4:	2b03      	cmp	r3, #3
 80186b6:	dc23      	bgt.n	8018700 <lwip_socket+0x60>
 80186b8:	68bb      	ldr	r3, [r7, #8]
 80186ba:	2b01      	cmp	r3, #1
 80186bc:	d019      	beq.n	80186f2 <lwip_socket+0x52>
 80186be:	68bb      	ldr	r3, [r7, #8]
 80186c0:	2b02      	cmp	r3, #2
 80186c2:	d009      	beq.n	80186d8 <lwip_socket+0x38>
 80186c4:	e01c      	b.n	8018700 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	b2db      	uxtb	r3, r3
 80186ca:	4a22      	ldr	r2, [pc, #136]	; (8018754 <lwip_socket+0xb4>)
 80186cc:	4619      	mov	r1, r3
 80186ce:	2040      	movs	r0, #64	; 0x40
 80186d0:	f7f6 fc86 	bl	800efe0 <netconn_new_with_proto_and_callback>
 80186d4:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80186d6:	e019      	b.n	801870c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	2b88      	cmp	r3, #136	; 0x88
 80186dc:	d101      	bne.n	80186e2 <lwip_socket+0x42>
 80186de:	2321      	movs	r3, #33	; 0x21
 80186e0:	e000      	b.n	80186e4 <lwip_socket+0x44>
 80186e2:	2320      	movs	r3, #32
 80186e4:	4a1b      	ldr	r2, [pc, #108]	; (8018754 <lwip_socket+0xb4>)
 80186e6:	2100      	movs	r1, #0
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7f6 fc79 	bl	800efe0 <netconn_new_with_proto_and_callback>
 80186ee:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80186f0:	e00c      	b.n	801870c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 80186f2:	4a18      	ldr	r2, [pc, #96]	; (8018754 <lwip_socket+0xb4>)
 80186f4:	2100      	movs	r1, #0
 80186f6:	2010      	movs	r0, #16
 80186f8:	f7f6 fc72 	bl	800efe0 <netconn_new_with_proto_and_callback>
 80186fc:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80186fe:	e005      	b.n	801870c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8018700:	4b15      	ldr	r3, [pc, #84]	; (8018758 <lwip_socket+0xb8>)
 8018702:	2216      	movs	r2, #22
 8018704:	601a      	str	r2, [r3, #0]
      return -1;
 8018706:	f04f 33ff 	mov.w	r3, #4294967295
 801870a:	e01e      	b.n	801874a <lwip_socket+0xaa>
  }

  if (!conn) {
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d105      	bne.n	801871e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8018712:	4b11      	ldr	r3, [pc, #68]	; (8018758 <lwip_socket+0xb8>)
 8018714:	2269      	movs	r2, #105	; 0x69
 8018716:	601a      	str	r2, [r3, #0]
    return -1;
 8018718:	f04f 33ff 	mov.w	r3, #4294967295
 801871c:	e015      	b.n	801874a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 801871e:	2100      	movs	r1, #0
 8018720:	6978      	ldr	r0, [r7, #20]
 8018722:	f7ff fd0b 	bl	801813c <alloc_socket>
 8018726:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801872e:	d108      	bne.n	8018742 <lwip_socket+0xa2>
    netconn_delete(conn);
 8018730:	6978      	ldr	r0, [r7, #20]
 8018732:	f7f6 fcf3 	bl	800f11c <netconn_delete>
    set_errno(ENFILE);
 8018736:	4b08      	ldr	r3, [pc, #32]	; (8018758 <lwip_socket+0xb8>)
 8018738:	2217      	movs	r2, #23
 801873a:	601a      	str	r2, [r3, #0]
    return -1;
 801873c:	f04f 33ff 	mov.w	r3, #4294967295
 8018740:	e003      	b.n	801874a <lwip_socket+0xaa>
  }
  conn->socket = i;
 8018742:	697b      	ldr	r3, [r7, #20]
 8018744:	693a      	ldr	r2, [r7, #16]
 8018746:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8018748:	693b      	ldr	r3, [r7, #16]
}
 801874a:	4618      	mov	r0, r3
 801874c:	3718      	adds	r7, #24
 801874e:	46bd      	mov	sp, r7
 8018750:	bd80      	pop	{r7, pc}
 8018752:	bf00      	nop
 8018754:	08018805 	.word	0x08018805
 8018758:	2400d3c8 	.word	0x2400d3c8

0801875c <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b084      	sub	sp, #16
 8018760:	af00      	add	r7, sp, #0
 8018762:	60f8      	str	r0, [r7, #12]
 8018764:	60b9      	str	r1, [r7, #8]
 8018766:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 8018768:	2300      	movs	r3, #0
 801876a:	687a      	ldr	r2, [r7, #4]
 801876c:	68b9      	ldr	r1, [r7, #8]
 801876e:	68f8      	ldr	r0, [r7, #12]
 8018770:	f7ff fe86 	bl	8018480 <lwip_send>
 8018774:	4603      	mov	r3, r0
}
 8018776:	4618      	mov	r0, r3
 8018778:	3710      	adds	r7, #16
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}

0801877e <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 801877e:	b480      	push	{r7}
 8018780:	b087      	sub	sp, #28
 8018782:	af00      	add	r7, sp, #0
 8018784:	60f8      	str	r0, [r7, #12]
 8018786:	60b9      	str	r1, [r7, #8]
 8018788:	607a      	str	r2, [r7, #4]
 801878a:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 801878c:	2300      	movs	r3, #0
 801878e:	617b      	str	r3, [r7, #20]
 8018790:	e02c      	b.n	80187ec <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	695a      	ldr	r2, [r3, #20]
 8018796:	697b      	ldr	r3, [r7, #20]
 8018798:	00db      	lsls	r3, r3, #3
 801879a:	4413      	add	r3, r2
 801879c:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 801879e:	693b      	ldr	r3, [r7, #16]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	68ba      	ldr	r2, [r7, #8]
 80187a4:	429a      	cmp	r2, r3
 80187a6:	d11e      	bne.n	80187e6 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d009      	beq.n	80187c2 <lwip_poll_should_wake+0x44>
 80187ae:	693b      	ldr	r3, [r7, #16]
 80187b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80187b4:	b29b      	uxth	r3, r3
 80187b6:	f003 0301 	and.w	r3, r3, #1
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d001      	beq.n	80187c2 <lwip_poll_should_wake+0x44>
        return 1;
 80187be:	2301      	movs	r3, #1
 80187c0:	e01a      	b.n	80187f8 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80187c2:	683b      	ldr	r3, [r7, #0]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d009      	beq.n	80187dc <lwip_poll_should_wake+0x5e>
 80187c8:	693b      	ldr	r3, [r7, #16]
 80187ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80187ce:	b29b      	uxth	r3, r3
 80187d0:	f003 0302 	and.w	r3, r3, #2
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d001      	beq.n	80187dc <lwip_poll_should_wake+0x5e>
        return 1;
 80187d8:	2301      	movs	r3, #1
 80187da:	e00d      	b.n	80187f8 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 80187dc:	6a3b      	ldr	r3, [r7, #32]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d001      	beq.n	80187e6 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 80187e2:	2301      	movs	r3, #1
 80187e4:	e008      	b.n	80187f8 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80187e6:	697b      	ldr	r3, [r7, #20]
 80187e8:	3301      	adds	r3, #1
 80187ea:	617b      	str	r3, [r7, #20]
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	699b      	ldr	r3, [r3, #24]
 80187f0:	697a      	ldr	r2, [r7, #20]
 80187f2:	429a      	cmp	r2, r3
 80187f4:	d3cd      	bcc.n	8018792 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 80187f6:	2300      	movs	r3, #0
}
 80187f8:	4618      	mov	r0, r3
 80187fa:	371c      	adds	r7, #28
 80187fc:	46bd      	mov	sp, r7
 80187fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018802:	4770      	bx	lr

08018804 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b08a      	sub	sp, #40	; 0x28
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
 801880c:	460b      	mov	r3, r1
 801880e:	70fb      	strb	r3, [r7, #3]
 8018810:	4613      	mov	r3, r2
 8018812:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	2b00      	cmp	r3, #0
 8018818:	f000 80a4 	beq.w	8018964 <event_callback+0x160>
    s = conn->socket;
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	699b      	ldr	r3, [r3, #24]
 8018820:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 8018822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018824:	2b00      	cmp	r3, #0
 8018826:	da18      	bge.n	801885a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8018828:	f000 fae0 	bl	8018dec <sys_arch_protect>
 801882c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	699b      	ldr	r3, [r3, #24]
 8018832:	2b00      	cmp	r3, #0
 8018834:	da0b      	bge.n	801884e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8018836:	78fb      	ldrb	r3, [r7, #3]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d104      	bne.n	8018846 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	699b      	ldr	r3, [r3, #24]
 8018840:	1e5a      	subs	r2, r3, #1
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8018846:	69f8      	ldr	r0, [r7, #28]
 8018848:	f000 fade 	bl	8018e08 <sys_arch_unprotect>
        return;
 801884c:	e08d      	b.n	801896a <event_callback+0x166>
      }
      s = conn->socket;
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	699b      	ldr	r3, [r3, #24]
 8018852:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8018854:	69f8      	ldr	r0, [r7, #28]
 8018856:	f000 fad7 	bl	8018e08 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 801885a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801885c:	f7ff fc56 	bl	801810c <get_socket>
 8018860:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8018862:	69bb      	ldr	r3, [r7, #24]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d07f      	beq.n	8018968 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8018868:	2301      	movs	r3, #1
 801886a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 801886c:	f000 fabe 	bl	8018dec <sys_arch_protect>
 8018870:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8018872:	78fb      	ldrb	r3, [r7, #3]
 8018874:	2b04      	cmp	r3, #4
 8018876:	d83e      	bhi.n	80188f6 <event_callback+0xf2>
 8018878:	a201      	add	r2, pc, #4	; (adr r2, 8018880 <event_callback+0x7c>)
 801887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801887e:	bf00      	nop
 8018880:	08018895 	.word	0x08018895
 8018884:	080188b7 	.word	0x080188b7
 8018888:	080188cf 	.word	0x080188cf
 801888c:	080188e3 	.word	0x080188e3
 8018890:	080188ef 	.word	0x080188ef
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8018894:	69bb      	ldr	r3, [r7, #24]
 8018896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801889a:	b29b      	uxth	r3, r3
 801889c:	3301      	adds	r3, #1
 801889e:	b29b      	uxth	r3, r3
 80188a0:	b21a      	sxth	r2, r3
 80188a2:	69bb      	ldr	r3, [r7, #24]
 80188a4:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80188a6:	69bb      	ldr	r3, [r7, #24]
 80188a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80188ac:	2b01      	cmp	r3, #1
 80188ae:	dd2a      	ble.n	8018906 <event_callback+0x102>
        check_waiters = 0;
 80188b0:	2300      	movs	r3, #0
 80188b2:	623b      	str	r3, [r7, #32]
      }
      break;
 80188b4:	e027      	b.n	8018906 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80188b6:	69bb      	ldr	r3, [r7, #24]
 80188b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80188bc:	b29b      	uxth	r3, r3
 80188be:	3b01      	subs	r3, #1
 80188c0:	b29b      	uxth	r3, r3
 80188c2:	b21a      	sxth	r2, r3
 80188c4:	69bb      	ldr	r3, [r7, #24]
 80188c6:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 80188c8:	2300      	movs	r3, #0
 80188ca:	623b      	str	r3, [r7, #32]
      break;
 80188cc:	e01c      	b.n	8018908 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 80188ce:	69bb      	ldr	r3, [r7, #24]
 80188d0:	895b      	ldrh	r3, [r3, #10]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d001      	beq.n	80188da <event_callback+0xd6>
        check_waiters = 0;
 80188d6:	2300      	movs	r3, #0
 80188d8:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 80188da:	69bb      	ldr	r3, [r7, #24]
 80188dc:	2201      	movs	r2, #1
 80188de:	815a      	strh	r2, [r3, #10]
      break;
 80188e0:	e012      	b.n	8018908 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 80188e2:	69bb      	ldr	r3, [r7, #24]
 80188e4:	2200      	movs	r2, #0
 80188e6:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 80188e8:	2300      	movs	r3, #0
 80188ea:	623b      	str	r3, [r7, #32]
      break;
 80188ec:	e00c      	b.n	8018908 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 80188ee:	69bb      	ldr	r3, [r7, #24]
 80188f0:	2201      	movs	r2, #1
 80188f2:	819a      	strh	r2, [r3, #12]
      break;
 80188f4:	e008      	b.n	8018908 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 80188f6:	4b1e      	ldr	r3, [pc, #120]	; (8018970 <event_callback+0x16c>)
 80188f8:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 80188fc:	491d      	ldr	r1, [pc, #116]	; (8018974 <event_callback+0x170>)
 80188fe:	481e      	ldr	r0, [pc, #120]	; (8018978 <event_callback+0x174>)
 8018900:	f007 fe26 	bl	8020550 <iprintf>
      break;
 8018904:	e000      	b.n	8018908 <event_callback+0x104>
      break;
 8018906:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8018908:	69bb      	ldr	r3, [r7, #24]
 801890a:	7b9b      	ldrb	r3, [r3, #14]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d025      	beq.n	801895c <event_callback+0x158>
 8018910:	6a3b      	ldr	r3, [r7, #32]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d022      	beq.n	801895c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8018916:	69bb      	ldr	r3, [r7, #24]
 8018918:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801891c:	2b00      	cmp	r3, #0
 801891e:	bfcc      	ite	gt
 8018920:	2301      	movgt	r3, #1
 8018922:	2300      	movle	r3, #0
 8018924:	b2db      	uxtb	r3, r3
 8018926:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8018928:	69bb      	ldr	r3, [r7, #24]
 801892a:	895b      	ldrh	r3, [r3, #10]
 801892c:	2b00      	cmp	r3, #0
 801892e:	bf14      	ite	ne
 8018930:	2301      	movne	r3, #1
 8018932:	2300      	moveq	r3, #0
 8018934:	b2db      	uxtb	r3, r3
 8018936:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8018938:	69bb      	ldr	r3, [r7, #24]
 801893a:	899b      	ldrh	r3, [r3, #12]
 801893c:	2b00      	cmp	r3, #0
 801893e:	bf14      	ite	ne
 8018940:	2301      	movne	r3, #1
 8018942:	2300      	moveq	r3, #0
 8018944:	b2db      	uxtb	r3, r3
 8018946:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8018948:	69f8      	ldr	r0, [r7, #28]
 801894a:	f000 fa5d 	bl	8018e08 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	693a      	ldr	r2, [r7, #16]
 8018952:	6979      	ldr	r1, [r7, #20]
 8018954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018956:	f000 f811 	bl	801897c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 801895a:	e006      	b.n	801896a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 801895c:	69f8      	ldr	r0, [r7, #28]
 801895e:	f000 fa53 	bl	8018e08 <sys_arch_unprotect>
 8018962:	e002      	b.n	801896a <event_callback+0x166>
    return;
 8018964:	bf00      	nop
 8018966:	e000      	b.n	801896a <event_callback+0x166>
      return;
 8018968:	bf00      	nop
  }
  done_socket(sock);
}
 801896a:	3728      	adds	r7, #40	; 0x28
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}
 8018970:	08023928 	.word	0x08023928
 8018974:	08023cac 	.word	0x08023cac
 8018978:	08023984 	.word	0x08023984

0801897c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b088      	sub	sp, #32
 8018980:	af02      	add	r7, sp, #8
 8018982:	60f8      	str	r0, [r7, #12]
 8018984:	60b9      	str	r1, [r7, #8]
 8018986:	607a      	str	r2, [r7, #4]
 8018988:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 801898a:	4b4b      	ldr	r3, [pc, #300]	; (8018ab8 <select_check_waiters+0x13c>)
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	617b      	str	r3, [r7, #20]
 8018990:	e088      	b.n	8018aa4 <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 8018992:	697b      	ldr	r3, [r7, #20]
 8018994:	69db      	ldr	r3, [r3, #28]
 8018996:	2b00      	cmp	r3, #0
 8018998:	f040 8081 	bne.w	8018a9e <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 801899c:	2300      	movs	r3, #0
 801899e:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80189a0:	697b      	ldr	r3, [r7, #20]
 80189a2:	695b      	ldr	r3, [r3, #20]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d009      	beq.n	80189bc <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	9300      	str	r3, [sp, #0]
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	68ba      	ldr	r2, [r7, #8]
 80189b0:	68f9      	ldr	r1, [r7, #12]
 80189b2:	6978      	ldr	r0, [r7, #20]
 80189b4:	f7ff fee3 	bl	801877e <lwip_poll_should_wake>
 80189b8:	6138      	str	r0, [r7, #16]
 80189ba:	e065      	b.n	8018a88 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d01c      	beq.n	80189fc <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80189c2:	697b      	ldr	r3, [r7, #20]
 80189c4:	689b      	ldr	r3, [r3, #8]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d018      	beq.n	80189fc <select_check_waiters+0x80>
 80189ca:	697b      	ldr	r3, [r7, #20]
 80189cc:	689a      	ldr	r2, [r3, #8]
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	da00      	bge.n	80189d6 <select_check_waiters+0x5a>
 80189d4:	331f      	adds	r3, #31
 80189d6:	115b      	asrs	r3, r3, #5
 80189d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	4259      	negs	r1, r3
 80189e0:	f003 031f 	and.w	r3, r3, #31
 80189e4:	f001 011f 	and.w	r1, r1, #31
 80189e8:	bf58      	it	pl
 80189ea:	424b      	negpl	r3, r1
 80189ec:	fa22 f303 	lsr.w	r3, r2, r3
 80189f0:	f003 0301 	and.w	r3, r3, #1
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d001      	beq.n	80189fc <select_check_waiters+0x80>
            do_signal = 1;
 80189f8:	2301      	movs	r3, #1
 80189fa:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d01f      	beq.n	8018a42 <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8018a02:	693b      	ldr	r3, [r7, #16]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d11c      	bne.n	8018a42 <select_check_waiters+0xc6>
 8018a08:	697b      	ldr	r3, [r7, #20]
 8018a0a:	68db      	ldr	r3, [r3, #12]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d018      	beq.n	8018a42 <select_check_waiters+0xc6>
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	68da      	ldr	r2, [r3, #12]
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	da00      	bge.n	8018a1c <select_check_waiters+0xa0>
 8018a1a:	331f      	adds	r3, #31
 8018a1c:	115b      	asrs	r3, r3, #5
 8018a1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	4259      	negs	r1, r3
 8018a26:	f003 031f 	and.w	r3, r3, #31
 8018a2a:	f001 011f 	and.w	r1, r1, #31
 8018a2e:	bf58      	it	pl
 8018a30:	424b      	negpl	r3, r1
 8018a32:	fa22 f303 	lsr.w	r3, r2, r3
 8018a36:	f003 0301 	and.w	r3, r3, #1
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d001      	beq.n	8018a42 <select_check_waiters+0xc6>
            do_signal = 1;
 8018a3e:	2301      	movs	r3, #1
 8018a40:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8018a42:	683b      	ldr	r3, [r7, #0]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d01f      	beq.n	8018a88 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8018a48:	693b      	ldr	r3, [r7, #16]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d11c      	bne.n	8018a88 <select_check_waiters+0x10c>
 8018a4e:	697b      	ldr	r3, [r7, #20]
 8018a50:	691b      	ldr	r3, [r3, #16]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d018      	beq.n	8018a88 <select_check_waiters+0x10c>
 8018a56:	697b      	ldr	r3, [r7, #20]
 8018a58:	691a      	ldr	r2, [r3, #16]
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	da00      	bge.n	8018a62 <select_check_waiters+0xe6>
 8018a60:	331f      	adds	r3, #31
 8018a62:	115b      	asrs	r3, r3, #5
 8018a64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	4259      	negs	r1, r3
 8018a6c:	f003 031f 	and.w	r3, r3, #31
 8018a70:	f001 011f 	and.w	r1, r1, #31
 8018a74:	bf58      	it	pl
 8018a76:	424b      	negpl	r3, r1
 8018a78:	fa22 f303 	lsr.w	r3, r2, r3
 8018a7c:	f003 0301 	and.w	r3, r3, #1
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d001      	beq.n	8018a88 <select_check_waiters+0x10c>
            do_signal = 1;
 8018a84:	2301      	movs	r3, #1
 8018a86:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8018a88:	693b      	ldr	r3, [r7, #16]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d007      	beq.n	8018a9e <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 8018a8e:	697b      	ldr	r3, [r7, #20]
 8018a90:	2201      	movs	r2, #1
 8018a92:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	3320      	adds	r3, #32
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f000 f911 	bl	8018cc0 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8018a9e:	697b      	ldr	r3, [r7, #20]
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	617b      	str	r3, [r7, #20]
 8018aa4:	697b      	ldr	r3, [r7, #20]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	f47f af73 	bne.w	8018992 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8018aac:	bf00      	nop
 8018aae:	bf00      	nop
 8018ab0:	3718      	adds	r7, #24
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd80      	pop	{r7, pc}
 8018ab6:	bf00      	nop
 8018ab8:	2400d3c4 	.word	0x2400d3c4

08018abc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
 8018ac4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018ac6:	683b      	ldr	r3, [r7, #0]
 8018ac8:	2200      	movs	r2, #0
 8018aca:	2104      	movs	r1, #4
 8018acc:	4618      	mov	r0, r3
 8018ace:	f7f2 ff47 	bl	800b960 <osMessageQueueNew>
 8018ad2:	4602      	mov	r2, r0
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d102      	bne.n	8018ae6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ae4:	e000      	b.n	8018ae8 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018ae6:	2300      	movs	r3, #0
}
 8018ae8:	4618      	mov	r0, r3
 8018aea:	3708      	adds	r7, #8
 8018aec:	46bd      	mov	sp, r7
 8018aee:	bd80      	pop	{r7, pc}

08018af0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b082      	sub	sp, #8
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7f3 f861 	bl	800bbc4 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	4618      	mov	r0, r3
 8018b08:	f7f3 f87c 	bl	800bc04 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018b0c:	bf00      	nop
 8018b0e:	3708      	adds	r7, #8
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}

08018b14 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b084      	sub	sp, #16
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
 8018b1c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	6818      	ldr	r0, [r3, #0]
 8018b22:	4639      	mov	r1, r7
 8018b24:	2300      	movs	r3, #0
 8018b26:	2200      	movs	r2, #0
 8018b28:	f7f2 ff8e 	bl	800ba48 <osMessageQueuePut>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d102      	bne.n	8018b38 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018b32:	2300      	movs	r3, #0
 8018b34:	73fb      	strb	r3, [r7, #15]
 8018b36:	e001      	b.n	8018b3c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018b38:	23ff      	movs	r3, #255	; 0xff
 8018b3a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	3710      	adds	r7, #16
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}

08018b48 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b086      	sub	sp, #24
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	60f8      	str	r0, [r7, #12]
 8018b50:	60b9      	str	r1, [r7, #8]
 8018b52:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018b54:	f7f2 fbf0 	bl	800b338 <osKernelGetTickCount>
 8018b58:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d013      	beq.n	8018b88 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	6818      	ldr	r0, [r3, #0]
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2200      	movs	r2, #0
 8018b68:	68b9      	ldr	r1, [r7, #8]
 8018b6a:	f7f2 ffcd 	bl	800bb08 <osMessageQueueGet>
 8018b6e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018b70:	693b      	ldr	r3, [r7, #16]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d105      	bne.n	8018b82 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018b76:	f7f2 fbdf 	bl	800b338 <osKernelGetTickCount>
 8018b7a:	4602      	mov	r2, r0
 8018b7c:	697b      	ldr	r3, [r7, #20]
 8018b7e:	1ad3      	subs	r3, r2, r3
 8018b80:	e00f      	b.n	8018ba2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018b82:	f04f 33ff 	mov.w	r3, #4294967295
 8018b86:	e00c      	b.n	8018ba2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	6818      	ldr	r0, [r3, #0]
 8018b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b90:	2200      	movs	r2, #0
 8018b92:	68b9      	ldr	r1, [r7, #8]
 8018b94:	f7f2 ffb8 	bl	800bb08 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018b98:	f7f2 fbce 	bl	800b338 <osKernelGetTickCount>
 8018b9c:	4602      	mov	r2, r0
 8018b9e:	697b      	ldr	r3, [r7, #20]
 8018ba0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3718      	adds	r7, #24
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}

08018baa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018baa:	b580      	push	{r7, lr}
 8018bac:	b082      	sub	sp, #8
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	6078      	str	r0, [r7, #4]
 8018bb2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	6818      	ldr	r0, [r3, #0]
 8018bb8:	2300      	movs	r3, #0
 8018bba:	2200      	movs	r2, #0
 8018bbc:	6839      	ldr	r1, [r7, #0]
 8018bbe:	f7f2 ffa3 	bl	800bb08 <osMessageQueueGet>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d101      	bne.n	8018bcc <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018bc8:	2300      	movs	r3, #0
 8018bca:	e001      	b.n	8018bd0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018bcc:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	3708      	adds	r7, #8
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}

08018bd8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018bd8:	b480      	push	{r7}
 8018bda:	b083      	sub	sp, #12
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d101      	bne.n	8018bec <sys_mbox_valid+0x14>
    return 0;
 8018be8:	2300      	movs	r3, #0
 8018bea:	e000      	b.n	8018bee <sys_mbox_valid+0x16>
  else
    return 1;
 8018bec:	2301      	movs	r3, #1
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	370c      	adds	r7, #12
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf8:	4770      	bx	lr

08018bfa <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018bfa:	b480      	push	{r7}
 8018bfc:	b083      	sub	sp, #12
 8018bfe:	af00      	add	r7, sp, #0
 8018c00:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	2200      	movs	r2, #0
 8018c06:	601a      	str	r2, [r3, #0]
}
 8018c08:	bf00      	nop
 8018c0a:	370c      	adds	r7, #12
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c12:	4770      	bx	lr

08018c14 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b082      	sub	sp, #8
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	6078      	str	r0, [r7, #4]
 8018c1c:	460b      	mov	r3, r1
 8018c1e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8018c20:	78fb      	ldrb	r3, [r7, #3]
 8018c22:	2200      	movs	r2, #0
 8018c24:	4619      	mov	r1, r3
 8018c26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018c2a:	f7f2 fd55 	bl	800b6d8 <osSemaphoreNew>
 8018c2e:	4602      	mov	r2, r0
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d102      	bne.n	8018c42 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8018c40:	e009      	b.n	8018c56 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8018c42:	78fb      	ldrb	r3, [r7, #3]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d105      	bne.n	8018c54 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	2100      	movs	r1, #0
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f7f2 fdcc 	bl	800b7ec <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018c54:	2300      	movs	r3, #0
}
 8018c56:	4618      	mov	r0, r3
 8018c58:	3708      	adds	r7, #8
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}

08018c5e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018c5e:	b580      	push	{r7, lr}
 8018c60:	b084      	sub	sp, #16
 8018c62:	af00      	add	r7, sp, #0
 8018c64:	6078      	str	r0, [r7, #4]
 8018c66:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8018c68:	f7f2 fb66 	bl	800b338 <osKernelGetTickCount>
 8018c6c:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8018c6e:	683b      	ldr	r3, [r7, #0]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d011      	beq.n	8018c98 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	6839      	ldr	r1, [r7, #0]
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f7f2 fdb6 	bl	800b7ec <osSemaphoreAcquire>
 8018c80:	4603      	mov	r3, r0
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d105      	bne.n	8018c92 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8018c86:	f7f2 fb57 	bl	800b338 <osKernelGetTickCount>
 8018c8a:	4602      	mov	r2, r0
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	1ad3      	subs	r3, r2, r3
 8018c90:	e012      	b.n	8018cb8 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018c92:	f04f 33ff 	mov.w	r3, #4294967295
 8018c96:	e00f      	b.n	8018cb8 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018c98:	bf00      	nop
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f7f2 fda2 	bl	800b7ec <osSemaphoreAcquire>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d1f5      	bne.n	8018c9a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8018cae:	f7f2 fb43 	bl	800b338 <osKernelGetTickCount>
 8018cb2:	4602      	mov	r2, r0
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3710      	adds	r7, #16
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}

08018cc0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b082      	sub	sp, #8
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f7f2 fddf 	bl	800b890 <osSemaphoreRelease>
}
 8018cd2:	bf00      	nop
 8018cd4:	3708      	adds	r7, #8
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}

08018cda <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018cda:	b580      	push	{r7, lr}
 8018cdc:	b082      	sub	sp, #8
 8018cde:	af00      	add	r7, sp, #0
 8018ce0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	f7f2 fe16 	bl	800b918 <osSemaphoreDelete>
}
 8018cec:	bf00      	nop
 8018cee:	3708      	adds	r7, #8
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	bd80      	pop	{r7, pc}

08018cf4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018cf4:	b480      	push	{r7}
 8018cf6:	b083      	sub	sp, #12
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d101      	bne.n	8018d08 <sys_sem_valid+0x14>
    return 0;
 8018d04:	2300      	movs	r3, #0
 8018d06:	e000      	b.n	8018d0a <sys_sem_valid+0x16>
  else
    return 1;
 8018d08:	2301      	movs	r3, #1
}
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	370c      	adds	r7, #12
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d14:	4770      	bx	lr

08018d16 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018d16:	b480      	push	{r7}
 8018d18:	b083      	sub	sp, #12
 8018d1a:	af00      	add	r7, sp, #0
 8018d1c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	2200      	movs	r2, #0
 8018d22:	601a      	str	r2, [r3, #0]
}
 8018d24:	bf00      	nop
 8018d26:	370c      	adds	r7, #12
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2e:	4770      	bx	lr

08018d30 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018d34:	2000      	movs	r0, #0
 8018d36:	f7f2 fbc1 	bl	800b4bc <osMutexNew>
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	4a01      	ldr	r2, [pc, #4]	; (8018d44 <sys_init+0x14>)
 8018d3e:	6013      	str	r3, [r2, #0]
#endif
}
 8018d40:	bf00      	nop
 8018d42:	bd80      	pop	{r7, pc}
 8018d44:	2400d3cc 	.word	0x2400d3cc

08018d48 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b082      	sub	sp, #8
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018d50:	2000      	movs	r0, #0
 8018d52:	f7f2 fbb3 	bl	800b4bc <osMutexNew>
 8018d56:	4602      	mov	r2, r0
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d102      	bne.n	8018d6a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018d64:	f04f 33ff 	mov.w	r3, #4294967295
 8018d68:	e000      	b.n	8018d6c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018d6a:	2300      	movs	r3, #0
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	3708      	adds	r7, #8
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd80      	pop	{r7, pc}

08018d74 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b082      	sub	sp, #8
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	f04f 31ff 	mov.w	r1, #4294967295
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7f2 fc1f 	bl	800b5c8 <osMutexAcquire>
#endif
}
 8018d8a:	bf00      	nop
 8018d8c:	3708      	adds	r7, #8
 8018d8e:	46bd      	mov	sp, r7
 8018d90:	bd80      	pop	{r7, pc}

08018d92 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018d92:	b580      	push	{r7, lr}
 8018d94:	b082      	sub	sp, #8
 8018d96:	af00      	add	r7, sp, #0
 8018d98:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	4618      	mov	r0, r3
 8018da0:	f7f2 fc5d 	bl	800b65e <osMutexRelease>
}
 8018da4:	bf00      	nop
 8018da6:	3708      	adds	r7, #8
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd80      	pop	{r7, pc}

08018dac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b08e      	sub	sp, #56	; 0x38
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	60f8      	str	r0, [r7, #12]
 8018db4:	60b9      	str	r1, [r7, #8]
 8018db6:	607a      	str	r2, [r7, #4]
 8018db8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018dba:	f107 0314 	add.w	r3, r7, #20
 8018dbe:	2224      	movs	r2, #36	; 0x24
 8018dc0:	2100      	movs	r1, #0
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f007 fadc 	bl	8020380 <memset>
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	617b      	str	r3, [r7, #20]
 8018dcc:	683b      	ldr	r3, [r7, #0]
 8018dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8018dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018dd4:	f107 0314 	add.w	r3, r7, #20
 8018dd8:	461a      	mov	r2, r3
 8018dda:	6879      	ldr	r1, [r7, #4]
 8018ddc:	68b8      	ldr	r0, [r7, #8]
 8018dde:	f7f2 fac0 	bl	800b362 <osThreadNew>
 8018de2:	4603      	mov	r3, r0
#endif
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	3738      	adds	r7, #56	; 0x38
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}

08018dec <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018df0:	4b04      	ldr	r3, [pc, #16]	; (8018e04 <sys_arch_protect+0x18>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	f04f 31ff 	mov.w	r1, #4294967295
 8018df8:	4618      	mov	r0, r3
 8018dfa:	f7f2 fbe5 	bl	800b5c8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018dfe:	2301      	movs	r3, #1
}
 8018e00:	4618      	mov	r0, r3
 8018e02:	bd80      	pop	{r7, pc}
 8018e04:	2400d3cc 	.word	0x2400d3cc

08018e08 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b082      	sub	sp, #8
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018e10:	4b04      	ldr	r3, [pc, #16]	; (8018e24 <sys_arch_unprotect+0x1c>)
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	4618      	mov	r0, r3
 8018e16:	f7f2 fc22 	bl	800b65e <osMutexRelease>
}
 8018e1a:	bf00      	nop
 8018e1c:	3708      	adds	r7, #8
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}
 8018e22:	bf00      	nop
 8018e24:	2400d3cc 	.word	0x2400d3cc

08018e28 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018e2c:	f007 fba8 	bl	8020580 <rand>
 8018e30:	4603      	mov	r3, r0
 8018e32:	b29b      	uxth	r3, r3
 8018e34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018e38:	b29b      	uxth	r3, r3
 8018e3a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018e3e:	b29a      	uxth	r2, r3
 8018e40:	4b01      	ldr	r3, [pc, #4]	; (8018e48 <tcp_init+0x20>)
 8018e42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018e44:	bf00      	nop
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	24000034 	.word	0x24000034

08018e4c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b082      	sub	sp, #8
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	7d1b      	ldrb	r3, [r3, #20]
 8018e58:	2b01      	cmp	r3, #1
 8018e5a:	d105      	bne.n	8018e68 <tcp_free+0x1c>
 8018e5c:	4b06      	ldr	r3, [pc, #24]	; (8018e78 <tcp_free+0x2c>)
 8018e5e:	22d4      	movs	r2, #212	; 0xd4
 8018e60:	4906      	ldr	r1, [pc, #24]	; (8018e7c <tcp_free+0x30>)
 8018e62:	4807      	ldr	r0, [pc, #28]	; (8018e80 <tcp_free+0x34>)
 8018e64:	f007 fb74 	bl	8020550 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8018e68:	6879      	ldr	r1, [r7, #4]
 8018e6a:	2001      	movs	r0, #1
 8018e6c:	f7fd fb12 	bl	8016494 <memp_free>
}
 8018e70:	bf00      	nop
 8018e72:	3708      	adds	r7, #8
 8018e74:	46bd      	mov	sp, r7
 8018e76:	bd80      	pop	{r7, pc}
 8018e78:	08023d78 	.word	0x08023d78
 8018e7c:	08023db0 	.word	0x08023db0
 8018e80:	08023dc4 	.word	0x08023dc4

08018e84 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b082      	sub	sp, #8
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	7d1b      	ldrb	r3, [r3, #20]
 8018e90:	2b01      	cmp	r3, #1
 8018e92:	d105      	bne.n	8018ea0 <tcp_free_listen+0x1c>
 8018e94:	4b06      	ldr	r3, [pc, #24]	; (8018eb0 <tcp_free_listen+0x2c>)
 8018e96:	22df      	movs	r2, #223	; 0xdf
 8018e98:	4906      	ldr	r1, [pc, #24]	; (8018eb4 <tcp_free_listen+0x30>)
 8018e9a:	4807      	ldr	r0, [pc, #28]	; (8018eb8 <tcp_free_listen+0x34>)
 8018e9c:	f007 fb58 	bl	8020550 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8018ea0:	6879      	ldr	r1, [r7, #4]
 8018ea2:	2002      	movs	r0, #2
 8018ea4:	f7fd faf6 	bl	8016494 <memp_free>
}
 8018ea8:	bf00      	nop
 8018eaa:	3708      	adds	r7, #8
 8018eac:	46bd      	mov	sp, r7
 8018eae:	bd80      	pop	{r7, pc}
 8018eb0:	08023d78 	.word	0x08023d78
 8018eb4:	08023dec 	.word	0x08023dec
 8018eb8:	08023dc4 	.word	0x08023dc4

08018ebc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8018ec0:	f001 f9d0 	bl	801a264 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8018ec4:	4b07      	ldr	r3, [pc, #28]	; (8018ee4 <tcp_tmr+0x28>)
 8018ec6:	781b      	ldrb	r3, [r3, #0]
 8018ec8:	3301      	adds	r3, #1
 8018eca:	b2da      	uxtb	r2, r3
 8018ecc:	4b05      	ldr	r3, [pc, #20]	; (8018ee4 <tcp_tmr+0x28>)
 8018ece:	701a      	strb	r2, [r3, #0]
 8018ed0:	4b04      	ldr	r3, [pc, #16]	; (8018ee4 <tcp_tmr+0x28>)
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	f003 0301 	and.w	r3, r3, #1
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d001      	beq.n	8018ee0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8018edc:	f000 fe82 	bl	8019be4 <tcp_slowtmr>
  }
}
 8018ee0:	bf00      	nop
 8018ee2:	bd80      	pop	{r7, pc}
 8018ee4:	2400d3e5 	.word	0x2400d3e5

08018ee8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b084      	sub	sp, #16
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
 8018ef0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018ef2:	683b      	ldr	r3, [r7, #0]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d105      	bne.n	8018f04 <tcp_remove_listener+0x1c>
 8018ef8:	4b0d      	ldr	r3, [pc, #52]	; (8018f30 <tcp_remove_listener+0x48>)
 8018efa:	22ff      	movs	r2, #255	; 0xff
 8018efc:	490d      	ldr	r1, [pc, #52]	; (8018f34 <tcp_remove_listener+0x4c>)
 8018efe:	480e      	ldr	r0, [pc, #56]	; (8018f38 <tcp_remove_listener+0x50>)
 8018f00:	f007 fb26 	bl	8020550 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	60fb      	str	r3, [r7, #12]
 8018f08:	e00a      	b.n	8018f20 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018f0e:	683a      	ldr	r2, [r7, #0]
 8018f10:	429a      	cmp	r2, r3
 8018f12:	d102      	bne.n	8018f1a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	2200      	movs	r2, #0
 8018f18:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	68db      	ldr	r3, [r3, #12]
 8018f1e:	60fb      	str	r3, [r7, #12]
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d1f1      	bne.n	8018f0a <tcp_remove_listener+0x22>
    }
  }
}
 8018f26:	bf00      	nop
 8018f28:	bf00      	nop
 8018f2a:	3710      	adds	r7, #16
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	bd80      	pop	{r7, pc}
 8018f30:	08023d78 	.word	0x08023d78
 8018f34:	08023e08 	.word	0x08023e08
 8018f38:	08023dc4 	.word	0x08023dc4

08018f3c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b084      	sub	sp, #16
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d106      	bne.n	8018f58 <tcp_listen_closed+0x1c>
 8018f4a:	4b14      	ldr	r3, [pc, #80]	; (8018f9c <tcp_listen_closed+0x60>)
 8018f4c:	f240 1211 	movw	r2, #273	; 0x111
 8018f50:	4913      	ldr	r1, [pc, #76]	; (8018fa0 <tcp_listen_closed+0x64>)
 8018f52:	4814      	ldr	r0, [pc, #80]	; (8018fa4 <tcp_listen_closed+0x68>)
 8018f54:	f007 fafc 	bl	8020550 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	7d1b      	ldrb	r3, [r3, #20]
 8018f5c:	2b01      	cmp	r3, #1
 8018f5e:	d006      	beq.n	8018f6e <tcp_listen_closed+0x32>
 8018f60:	4b0e      	ldr	r3, [pc, #56]	; (8018f9c <tcp_listen_closed+0x60>)
 8018f62:	f44f 7289 	mov.w	r2, #274	; 0x112
 8018f66:	4910      	ldr	r1, [pc, #64]	; (8018fa8 <tcp_listen_closed+0x6c>)
 8018f68:	480e      	ldr	r0, [pc, #56]	; (8018fa4 <tcp_listen_closed+0x68>)
 8018f6a:	f007 faf1 	bl	8020550 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018f6e:	2301      	movs	r3, #1
 8018f70:	60fb      	str	r3, [r7, #12]
 8018f72:	e00b      	b.n	8018f8c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8018f74:	4a0d      	ldr	r2, [pc, #52]	; (8018fac <tcp_listen_closed+0x70>)
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	6879      	ldr	r1, [r7, #4]
 8018f80:	4618      	mov	r0, r3
 8018f82:	f7ff ffb1 	bl	8018ee8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	3301      	adds	r3, #1
 8018f8a:	60fb      	str	r3, [r7, #12]
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	2b03      	cmp	r3, #3
 8018f90:	d9f0      	bls.n	8018f74 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8018f92:	bf00      	nop
 8018f94:	bf00      	nop
 8018f96:	3710      	adds	r7, #16
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd80      	pop	{r7, pc}
 8018f9c:	08023d78 	.word	0x08023d78
 8018fa0:	08023e30 	.word	0x08023e30
 8018fa4:	08023dc4 	.word	0x08023dc4
 8018fa8:	08023e3c 	.word	0x08023e3c
 8018fac:	08025ee8 	.word	0x08025ee8

08018fb0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018fb0:	b5b0      	push	{r4, r5, r7, lr}
 8018fb2:	b088      	sub	sp, #32
 8018fb4:	af04      	add	r7, sp, #16
 8018fb6:	6078      	str	r0, [r7, #4]
 8018fb8:	460b      	mov	r3, r1
 8018fba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d106      	bne.n	8018fd0 <tcp_close_shutdown+0x20>
 8018fc2:	4b63      	ldr	r3, [pc, #396]	; (8019150 <tcp_close_shutdown+0x1a0>)
 8018fc4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8018fc8:	4962      	ldr	r1, [pc, #392]	; (8019154 <tcp_close_shutdown+0x1a4>)
 8018fca:	4863      	ldr	r0, [pc, #396]	; (8019158 <tcp_close_shutdown+0x1a8>)
 8018fcc:	f007 fac0 	bl	8020550 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018fd0:	78fb      	ldrb	r3, [r7, #3]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d066      	beq.n	80190a4 <tcp_close_shutdown+0xf4>
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	7d1b      	ldrb	r3, [r3, #20]
 8018fda:	2b04      	cmp	r3, #4
 8018fdc:	d003      	beq.n	8018fe6 <tcp_close_shutdown+0x36>
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	7d1b      	ldrb	r3, [r3, #20]
 8018fe2:	2b07      	cmp	r3, #7
 8018fe4:	d15e      	bne.n	80190a4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d104      	bne.n	8018ff8 <tcp_close_shutdown+0x48>
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ff2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018ff6:	d055      	beq.n	80190a4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	8b5b      	ldrh	r3, [r3, #26]
 8018ffc:	f003 0310 	and.w	r3, r3, #16
 8019000:	2b00      	cmp	r3, #0
 8019002:	d106      	bne.n	8019012 <tcp_close_shutdown+0x62>
 8019004:	4b52      	ldr	r3, [pc, #328]	; (8019150 <tcp_close_shutdown+0x1a0>)
 8019006:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801900a:	4954      	ldr	r1, [pc, #336]	; (801915c <tcp_close_shutdown+0x1ac>)
 801900c:	4852      	ldr	r0, [pc, #328]	; (8019158 <tcp_close_shutdown+0x1a8>)
 801900e:	f007 fa9f 	bl	8020550 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801901a:	687d      	ldr	r5, [r7, #4]
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	3304      	adds	r3, #4
 8019020:	687a      	ldr	r2, [r7, #4]
 8019022:	8ad2      	ldrh	r2, [r2, #22]
 8019024:	6879      	ldr	r1, [r7, #4]
 8019026:	8b09      	ldrh	r1, [r1, #24]
 8019028:	9102      	str	r1, [sp, #8]
 801902a:	9201      	str	r2, [sp, #4]
 801902c:	9300      	str	r3, [sp, #0]
 801902e:	462b      	mov	r3, r5
 8019030:	4622      	mov	r2, r4
 8019032:	4601      	mov	r1, r0
 8019034:	6878      	ldr	r0, [r7, #4]
 8019036:	f005 fee5 	bl	801ee04 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801903a:	6878      	ldr	r0, [r7, #4]
 801903c:	f001 fcc2 	bl	801a9c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019040:	4b47      	ldr	r3, [pc, #284]	; (8019160 <tcp_close_shutdown+0x1b0>)
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	687a      	ldr	r2, [r7, #4]
 8019046:	429a      	cmp	r2, r3
 8019048:	d105      	bne.n	8019056 <tcp_close_shutdown+0xa6>
 801904a:	4b45      	ldr	r3, [pc, #276]	; (8019160 <tcp_close_shutdown+0x1b0>)
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	68db      	ldr	r3, [r3, #12]
 8019050:	4a43      	ldr	r2, [pc, #268]	; (8019160 <tcp_close_shutdown+0x1b0>)
 8019052:	6013      	str	r3, [r2, #0]
 8019054:	e013      	b.n	801907e <tcp_close_shutdown+0xce>
 8019056:	4b42      	ldr	r3, [pc, #264]	; (8019160 <tcp_close_shutdown+0x1b0>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	60fb      	str	r3, [r7, #12]
 801905c:	e00c      	b.n	8019078 <tcp_close_shutdown+0xc8>
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	68db      	ldr	r3, [r3, #12]
 8019062:	687a      	ldr	r2, [r7, #4]
 8019064:	429a      	cmp	r2, r3
 8019066:	d104      	bne.n	8019072 <tcp_close_shutdown+0xc2>
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	68da      	ldr	r2, [r3, #12]
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	60da      	str	r2, [r3, #12]
 8019070:	e005      	b.n	801907e <tcp_close_shutdown+0xce>
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	68db      	ldr	r3, [r3, #12]
 8019076:	60fb      	str	r3, [r7, #12]
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d1ef      	bne.n	801905e <tcp_close_shutdown+0xae>
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	2200      	movs	r2, #0
 8019082:	60da      	str	r2, [r3, #12]
 8019084:	4b37      	ldr	r3, [pc, #220]	; (8019164 <tcp_close_shutdown+0x1b4>)
 8019086:	2201      	movs	r2, #1
 8019088:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801908a:	4b37      	ldr	r3, [pc, #220]	; (8019168 <tcp_close_shutdown+0x1b8>)
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	687a      	ldr	r2, [r7, #4]
 8019090:	429a      	cmp	r2, r3
 8019092:	d102      	bne.n	801909a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8019094:	f004 f95a 	bl	801d34c <tcp_trigger_input_pcb_close>
 8019098:	e002      	b.n	80190a0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801909a:	6878      	ldr	r0, [r7, #4]
 801909c:	f7ff fed6 	bl	8018e4c <tcp_free>
      }
      return ERR_OK;
 80190a0:	2300      	movs	r3, #0
 80190a2:	e050      	b.n	8019146 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	7d1b      	ldrb	r3, [r3, #20]
 80190a8:	2b02      	cmp	r3, #2
 80190aa:	d03b      	beq.n	8019124 <tcp_close_shutdown+0x174>
 80190ac:	2b02      	cmp	r3, #2
 80190ae:	dc44      	bgt.n	801913a <tcp_close_shutdown+0x18a>
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d002      	beq.n	80190ba <tcp_close_shutdown+0x10a>
 80190b4:	2b01      	cmp	r3, #1
 80190b6:	d02a      	beq.n	801910e <tcp_close_shutdown+0x15e>
 80190b8:	e03f      	b.n	801913a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	8adb      	ldrh	r3, [r3, #22]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d021      	beq.n	8019106 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80190c2:	4b2a      	ldr	r3, [pc, #168]	; (801916c <tcp_close_shutdown+0x1bc>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	687a      	ldr	r2, [r7, #4]
 80190c8:	429a      	cmp	r2, r3
 80190ca:	d105      	bne.n	80190d8 <tcp_close_shutdown+0x128>
 80190cc:	4b27      	ldr	r3, [pc, #156]	; (801916c <tcp_close_shutdown+0x1bc>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	68db      	ldr	r3, [r3, #12]
 80190d2:	4a26      	ldr	r2, [pc, #152]	; (801916c <tcp_close_shutdown+0x1bc>)
 80190d4:	6013      	str	r3, [r2, #0]
 80190d6:	e013      	b.n	8019100 <tcp_close_shutdown+0x150>
 80190d8:	4b24      	ldr	r3, [pc, #144]	; (801916c <tcp_close_shutdown+0x1bc>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	60bb      	str	r3, [r7, #8]
 80190de:	e00c      	b.n	80190fa <tcp_close_shutdown+0x14a>
 80190e0:	68bb      	ldr	r3, [r7, #8]
 80190e2:	68db      	ldr	r3, [r3, #12]
 80190e4:	687a      	ldr	r2, [r7, #4]
 80190e6:	429a      	cmp	r2, r3
 80190e8:	d104      	bne.n	80190f4 <tcp_close_shutdown+0x144>
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	68da      	ldr	r2, [r3, #12]
 80190ee:	68bb      	ldr	r3, [r7, #8]
 80190f0:	60da      	str	r2, [r3, #12]
 80190f2:	e005      	b.n	8019100 <tcp_close_shutdown+0x150>
 80190f4:	68bb      	ldr	r3, [r7, #8]
 80190f6:	68db      	ldr	r3, [r3, #12]
 80190f8:	60bb      	str	r3, [r7, #8]
 80190fa:	68bb      	ldr	r3, [r7, #8]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d1ef      	bne.n	80190e0 <tcp_close_shutdown+0x130>
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	2200      	movs	r2, #0
 8019104:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8019106:	6878      	ldr	r0, [r7, #4]
 8019108:	f7ff fea0 	bl	8018e4c <tcp_free>
      break;
 801910c:	e01a      	b.n	8019144 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f7ff ff14 	bl	8018f3c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019114:	6879      	ldr	r1, [r7, #4]
 8019116:	4816      	ldr	r0, [pc, #88]	; (8019170 <tcp_close_shutdown+0x1c0>)
 8019118:	f001 fca4 	bl	801aa64 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f7ff feb1 	bl	8018e84 <tcp_free_listen>
      break;
 8019122:	e00f      	b.n	8019144 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019124:	6879      	ldr	r1, [r7, #4]
 8019126:	480e      	ldr	r0, [pc, #56]	; (8019160 <tcp_close_shutdown+0x1b0>)
 8019128:	f001 fc9c 	bl	801aa64 <tcp_pcb_remove>
 801912c:	4b0d      	ldr	r3, [pc, #52]	; (8019164 <tcp_close_shutdown+0x1b4>)
 801912e:	2201      	movs	r2, #1
 8019130:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8019132:	6878      	ldr	r0, [r7, #4]
 8019134:	f7ff fe8a 	bl	8018e4c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8019138:	e004      	b.n	8019144 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	f000 f81a 	bl	8019174 <tcp_close_shutdown_fin>
 8019140:	4603      	mov	r3, r0
 8019142:	e000      	b.n	8019146 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8019144:	2300      	movs	r3, #0
}
 8019146:	4618      	mov	r0, r3
 8019148:	3710      	adds	r7, #16
 801914a:	46bd      	mov	sp, r7
 801914c:	bdb0      	pop	{r4, r5, r7, pc}
 801914e:	bf00      	nop
 8019150:	08023d78 	.word	0x08023d78
 8019154:	08023e54 	.word	0x08023e54
 8019158:	08023dc4 	.word	0x08023dc4
 801915c:	08023e74 	.word	0x08023e74
 8019160:	2400d3dc 	.word	0x2400d3dc
 8019164:	2400d3e4 	.word	0x2400d3e4
 8019168:	2400d41c 	.word	0x2400d41c
 801916c:	2400d3d4 	.word	0x2400d3d4
 8019170:	2400d3d8 	.word	0x2400d3d8

08019174 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019174:	b580      	push	{r7, lr}
 8019176:	b084      	sub	sp, #16
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d106      	bne.n	8019190 <tcp_close_shutdown_fin+0x1c>
 8019182:	4b2e      	ldr	r3, [pc, #184]	; (801923c <tcp_close_shutdown_fin+0xc8>)
 8019184:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019188:	492d      	ldr	r1, [pc, #180]	; (8019240 <tcp_close_shutdown_fin+0xcc>)
 801918a:	482e      	ldr	r0, [pc, #184]	; (8019244 <tcp_close_shutdown_fin+0xd0>)
 801918c:	f007 f9e0 	bl	8020550 <iprintf>

  switch (pcb->state) {
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	7d1b      	ldrb	r3, [r3, #20]
 8019194:	2b07      	cmp	r3, #7
 8019196:	d020      	beq.n	80191da <tcp_close_shutdown_fin+0x66>
 8019198:	2b07      	cmp	r3, #7
 801919a:	dc2b      	bgt.n	80191f4 <tcp_close_shutdown_fin+0x80>
 801919c:	2b03      	cmp	r3, #3
 801919e:	d002      	beq.n	80191a6 <tcp_close_shutdown_fin+0x32>
 80191a0:	2b04      	cmp	r3, #4
 80191a2:	d00d      	beq.n	80191c0 <tcp_close_shutdown_fin+0x4c>
 80191a4:	e026      	b.n	80191f4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f004 ff3a 	bl	801e020 <tcp_send_fin>
 80191ac:	4603      	mov	r3, r0
 80191ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80191b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d11f      	bne.n	80191f8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	2205      	movs	r2, #5
 80191bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80191be:	e01b      	b.n	80191f8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80191c0:	6878      	ldr	r0, [r7, #4]
 80191c2:	f004 ff2d 	bl	801e020 <tcp_send_fin>
 80191c6:	4603      	mov	r3, r0
 80191c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80191ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d114      	bne.n	80191fc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	2205      	movs	r2, #5
 80191d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80191d8:	e010      	b.n	80191fc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80191da:	6878      	ldr	r0, [r7, #4]
 80191dc:	f004 ff20 	bl	801e020 <tcp_send_fin>
 80191e0:	4603      	mov	r3, r0
 80191e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80191e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d109      	bne.n	8019200 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	2209      	movs	r2, #9
 80191f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80191f2:	e005      	b.n	8019200 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80191f4:	2300      	movs	r3, #0
 80191f6:	e01c      	b.n	8019232 <tcp_close_shutdown_fin+0xbe>
      break;
 80191f8:	bf00      	nop
 80191fa:	e002      	b.n	8019202 <tcp_close_shutdown_fin+0x8e>
      break;
 80191fc:	bf00      	nop
 80191fe:	e000      	b.n	8019202 <tcp_close_shutdown_fin+0x8e>
      break;
 8019200:	bf00      	nop
  }

  if (err == ERR_OK) {
 8019202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d103      	bne.n	8019212 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801920a:	6878      	ldr	r0, [r7, #4]
 801920c:	f005 f846 	bl	801e29c <tcp_output>
 8019210:	e00d      	b.n	801922e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8019212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801921a:	d108      	bne.n	801922e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	8b5b      	ldrh	r3, [r3, #26]
 8019220:	f043 0308 	orr.w	r3, r3, #8
 8019224:	b29a      	uxth	r2, r3
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801922a:	2300      	movs	r3, #0
 801922c:	e001      	b.n	8019232 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801922e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019232:	4618      	mov	r0, r3
 8019234:	3710      	adds	r7, #16
 8019236:	46bd      	mov	sp, r7
 8019238:	bd80      	pop	{r7, pc}
 801923a:	bf00      	nop
 801923c:	08023d78 	.word	0x08023d78
 8019240:	08023e30 	.word	0x08023e30
 8019244:	08023dc4 	.word	0x08023dc4

08019248 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b082      	sub	sp, #8
 801924c:	af00      	add	r7, sp, #0
 801924e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d109      	bne.n	801926a <tcp_close+0x22>
 8019256:	4b0f      	ldr	r3, [pc, #60]	; (8019294 <tcp_close+0x4c>)
 8019258:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801925c:	490e      	ldr	r1, [pc, #56]	; (8019298 <tcp_close+0x50>)
 801925e:	480f      	ldr	r0, [pc, #60]	; (801929c <tcp_close+0x54>)
 8019260:	f007 f976 	bl	8020550 <iprintf>
 8019264:	f06f 030f 	mvn.w	r3, #15
 8019268:	e00f      	b.n	801928a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	7d1b      	ldrb	r3, [r3, #20]
 801926e:	2b01      	cmp	r3, #1
 8019270:	d006      	beq.n	8019280 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	8b5b      	ldrh	r3, [r3, #26]
 8019276:	f043 0310 	orr.w	r3, r3, #16
 801927a:	b29a      	uxth	r2, r3
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8019280:	2101      	movs	r1, #1
 8019282:	6878      	ldr	r0, [r7, #4]
 8019284:	f7ff fe94 	bl	8018fb0 <tcp_close_shutdown>
 8019288:	4603      	mov	r3, r0
}
 801928a:	4618      	mov	r0, r3
 801928c:	3708      	adds	r7, #8
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}
 8019292:	bf00      	nop
 8019294:	08023d78 	.word	0x08023d78
 8019298:	08023e90 	.word	0x08023e90
 801929c:	08023dc4 	.word	0x08023dc4

080192a0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b084      	sub	sp, #16
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	60f8      	str	r0, [r7, #12]
 80192a8:	60b9      	str	r1, [r7, #8]
 80192aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d109      	bne.n	80192c6 <tcp_shutdown+0x26>
 80192b2:	4b26      	ldr	r3, [pc, #152]	; (801934c <tcp_shutdown+0xac>)
 80192b4:	f240 2207 	movw	r2, #519	; 0x207
 80192b8:	4925      	ldr	r1, [pc, #148]	; (8019350 <tcp_shutdown+0xb0>)
 80192ba:	4826      	ldr	r0, [pc, #152]	; (8019354 <tcp_shutdown+0xb4>)
 80192bc:	f007 f948 	bl	8020550 <iprintf>
 80192c0:	f06f 030f 	mvn.w	r3, #15
 80192c4:	e03d      	b.n	8019342 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	7d1b      	ldrb	r3, [r3, #20]
 80192ca:	2b01      	cmp	r3, #1
 80192cc:	d102      	bne.n	80192d4 <tcp_shutdown+0x34>
    return ERR_CONN;
 80192ce:	f06f 030a 	mvn.w	r3, #10
 80192d2:	e036      	b.n	8019342 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80192d4:	68bb      	ldr	r3, [r7, #8]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d01b      	beq.n	8019312 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	8b5b      	ldrh	r3, [r3, #26]
 80192de:	f043 0310 	orr.w	r3, r3, #16
 80192e2:	b29a      	uxth	r2, r3
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d005      	beq.n	80192fa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80192ee:	2101      	movs	r1, #1
 80192f0:	68f8      	ldr	r0, [r7, #12]
 80192f2:	f7ff fe5d 	bl	8018fb0 <tcp_close_shutdown>
 80192f6:	4603      	mov	r3, r0
 80192f8:	e023      	b.n	8019342 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d007      	beq.n	8019312 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019306:	4618      	mov	r0, r3
 8019308:	f7fe fa30 	bl	801776c <pbuf_free>
      pcb->refused_data = NULL;
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	2200      	movs	r2, #0
 8019310:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d013      	beq.n	8019340 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	7d1b      	ldrb	r3, [r3, #20]
 801931c:	2b04      	cmp	r3, #4
 801931e:	dc02      	bgt.n	8019326 <tcp_shutdown+0x86>
 8019320:	2b03      	cmp	r3, #3
 8019322:	da02      	bge.n	801932a <tcp_shutdown+0x8a>
 8019324:	e009      	b.n	801933a <tcp_shutdown+0x9a>
 8019326:	2b07      	cmp	r3, #7
 8019328:	d107      	bne.n	801933a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801932a:	68bb      	ldr	r3, [r7, #8]
 801932c:	b2db      	uxtb	r3, r3
 801932e:	4619      	mov	r1, r3
 8019330:	68f8      	ldr	r0, [r7, #12]
 8019332:	f7ff fe3d 	bl	8018fb0 <tcp_close_shutdown>
 8019336:	4603      	mov	r3, r0
 8019338:	e003      	b.n	8019342 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801933a:	f06f 030a 	mvn.w	r3, #10
 801933e:	e000      	b.n	8019342 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8019340:	2300      	movs	r3, #0
}
 8019342:	4618      	mov	r0, r3
 8019344:	3710      	adds	r7, #16
 8019346:	46bd      	mov	sp, r7
 8019348:	bd80      	pop	{r7, pc}
 801934a:	bf00      	nop
 801934c:	08023d78 	.word	0x08023d78
 8019350:	08023ea8 	.word	0x08023ea8
 8019354:	08023dc4 	.word	0x08023dc4

08019358 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019358:	b580      	push	{r7, lr}
 801935a:	b08e      	sub	sp, #56	; 0x38
 801935c:	af04      	add	r7, sp, #16
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	2b00      	cmp	r3, #0
 8019366:	d107      	bne.n	8019378 <tcp_abandon+0x20>
 8019368:	4b52      	ldr	r3, [pc, #328]	; (80194b4 <tcp_abandon+0x15c>)
 801936a:	f240 223d 	movw	r2, #573	; 0x23d
 801936e:	4952      	ldr	r1, [pc, #328]	; (80194b8 <tcp_abandon+0x160>)
 8019370:	4852      	ldr	r0, [pc, #328]	; (80194bc <tcp_abandon+0x164>)
 8019372:	f007 f8ed 	bl	8020550 <iprintf>
 8019376:	e099      	b.n	80194ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	7d1b      	ldrb	r3, [r3, #20]
 801937c:	2b01      	cmp	r3, #1
 801937e:	d106      	bne.n	801938e <tcp_abandon+0x36>
 8019380:	4b4c      	ldr	r3, [pc, #304]	; (80194b4 <tcp_abandon+0x15c>)
 8019382:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019386:	494e      	ldr	r1, [pc, #312]	; (80194c0 <tcp_abandon+0x168>)
 8019388:	484c      	ldr	r0, [pc, #304]	; (80194bc <tcp_abandon+0x164>)
 801938a:	f007 f8e1 	bl	8020550 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	7d1b      	ldrb	r3, [r3, #20]
 8019392:	2b0a      	cmp	r3, #10
 8019394:	d107      	bne.n	80193a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019396:	6879      	ldr	r1, [r7, #4]
 8019398:	484a      	ldr	r0, [pc, #296]	; (80194c4 <tcp_abandon+0x16c>)
 801939a:	f001 fb63 	bl	801aa64 <tcp_pcb_remove>
    tcp_free(pcb);
 801939e:	6878      	ldr	r0, [r7, #4]
 80193a0:	f7ff fd54 	bl	8018e4c <tcp_free>
 80193a4:	e082      	b.n	80194ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80193a6:	2300      	movs	r3, #0
 80193a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80193aa:	2300      	movs	r3, #0
 80193ac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80193c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	691b      	ldr	r3, [r3, #16]
 80193c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	7d1b      	ldrb	r3, [r3, #20]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d126      	bne.n	801941e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	8adb      	ldrh	r3, [r3, #22]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d02e      	beq.n	8019436 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80193d8:	4b3b      	ldr	r3, [pc, #236]	; (80194c8 <tcp_abandon+0x170>)
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	687a      	ldr	r2, [r7, #4]
 80193de:	429a      	cmp	r2, r3
 80193e0:	d105      	bne.n	80193ee <tcp_abandon+0x96>
 80193e2:	4b39      	ldr	r3, [pc, #228]	; (80194c8 <tcp_abandon+0x170>)
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	68db      	ldr	r3, [r3, #12]
 80193e8:	4a37      	ldr	r2, [pc, #220]	; (80194c8 <tcp_abandon+0x170>)
 80193ea:	6013      	str	r3, [r2, #0]
 80193ec:	e013      	b.n	8019416 <tcp_abandon+0xbe>
 80193ee:	4b36      	ldr	r3, [pc, #216]	; (80194c8 <tcp_abandon+0x170>)
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	61fb      	str	r3, [r7, #28]
 80193f4:	e00c      	b.n	8019410 <tcp_abandon+0xb8>
 80193f6:	69fb      	ldr	r3, [r7, #28]
 80193f8:	68db      	ldr	r3, [r3, #12]
 80193fa:	687a      	ldr	r2, [r7, #4]
 80193fc:	429a      	cmp	r2, r3
 80193fe:	d104      	bne.n	801940a <tcp_abandon+0xb2>
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	68da      	ldr	r2, [r3, #12]
 8019404:	69fb      	ldr	r3, [r7, #28]
 8019406:	60da      	str	r2, [r3, #12]
 8019408:	e005      	b.n	8019416 <tcp_abandon+0xbe>
 801940a:	69fb      	ldr	r3, [r7, #28]
 801940c:	68db      	ldr	r3, [r3, #12]
 801940e:	61fb      	str	r3, [r7, #28]
 8019410:	69fb      	ldr	r3, [r7, #28]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d1ef      	bne.n	80193f6 <tcp_abandon+0x9e>
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	2200      	movs	r2, #0
 801941a:	60da      	str	r2, [r3, #12]
 801941c:	e00b      	b.n	8019436 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801941e:	683b      	ldr	r3, [r7, #0]
 8019420:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	8adb      	ldrh	r3, [r3, #22]
 8019426:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019428:	6879      	ldr	r1, [r7, #4]
 801942a:	4828      	ldr	r0, [pc, #160]	; (80194cc <tcp_abandon+0x174>)
 801942c:	f001 fb1a 	bl	801aa64 <tcp_pcb_remove>
 8019430:	4b27      	ldr	r3, [pc, #156]	; (80194d0 <tcp_abandon+0x178>)
 8019432:	2201      	movs	r2, #1
 8019434:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801943a:	2b00      	cmp	r3, #0
 801943c:	d004      	beq.n	8019448 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019442:	4618      	mov	r0, r3
 8019444:	f000 ffee 	bl	801a424 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801944c:	2b00      	cmp	r3, #0
 801944e:	d004      	beq.n	801945a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019454:	4618      	mov	r0, r3
 8019456:	f000 ffe5 	bl	801a424 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801945e:	2b00      	cmp	r3, #0
 8019460:	d004      	beq.n	801946c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019466:	4618      	mov	r0, r3
 8019468:	f000 ffdc 	bl	801a424 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801946e:	2b00      	cmp	r3, #0
 8019470:	d00e      	beq.n	8019490 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8019472:	6879      	ldr	r1, [r7, #4]
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	3304      	adds	r3, #4
 8019478:	687a      	ldr	r2, [r7, #4]
 801947a:	8b12      	ldrh	r2, [r2, #24]
 801947c:	9202      	str	r2, [sp, #8]
 801947e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019480:	9201      	str	r2, [sp, #4]
 8019482:	9300      	str	r3, [sp, #0]
 8019484:	460b      	mov	r3, r1
 8019486:	697a      	ldr	r2, [r7, #20]
 8019488:	69b9      	ldr	r1, [r7, #24]
 801948a:	6878      	ldr	r0, [r7, #4]
 801948c:	f005 fcba 	bl	801ee04 <tcp_rst>
    }
    last_state = pcb->state;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	7d1b      	ldrb	r3, [r3, #20]
 8019494:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8019496:	6878      	ldr	r0, [r7, #4]
 8019498:	f7ff fcd8 	bl	8018e4c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801949c:	693b      	ldr	r3, [r7, #16]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d004      	beq.n	80194ac <tcp_abandon+0x154>
 80194a2:	693b      	ldr	r3, [r7, #16]
 80194a4:	f06f 010c 	mvn.w	r1, #12
 80194a8:	68f8      	ldr	r0, [r7, #12]
 80194aa:	4798      	blx	r3
  }
}
 80194ac:	3728      	adds	r7, #40	; 0x28
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	08023d78 	.word	0x08023d78
 80194b8:	08023ec4 	.word	0x08023ec4
 80194bc:	08023dc4 	.word	0x08023dc4
 80194c0:	08023ee0 	.word	0x08023ee0
 80194c4:	2400d3e0 	.word	0x2400d3e0
 80194c8:	2400d3d4 	.word	0x2400d3d4
 80194cc:	2400d3dc 	.word	0x2400d3dc
 80194d0:	2400d3e4 	.word	0x2400d3e4

080194d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b082      	sub	sp, #8
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80194dc:	2101      	movs	r1, #1
 80194de:	6878      	ldr	r0, [r7, #4]
 80194e0:	f7ff ff3a 	bl	8019358 <tcp_abandon>
}
 80194e4:	bf00      	nop
 80194e6:	3708      	adds	r7, #8
 80194e8:	46bd      	mov	sp, r7
 80194ea:	bd80      	pop	{r7, pc}

080194ec <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b088      	sub	sp, #32
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	60f8      	str	r0, [r7, #12]
 80194f4:	60b9      	str	r1, [r7, #8]
 80194f6:	4613      	mov	r3, r2
 80194f8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80194fa:	2304      	movs	r3, #4
 80194fc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80194fe:	68bb      	ldr	r3, [r7, #8]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d101      	bne.n	8019508 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8019504:	4b3e      	ldr	r3, [pc, #248]	; (8019600 <tcp_bind+0x114>)
 8019506:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d109      	bne.n	8019522 <tcp_bind+0x36>
 801950e:	4b3d      	ldr	r3, [pc, #244]	; (8019604 <tcp_bind+0x118>)
 8019510:	f240 22a9 	movw	r2, #681	; 0x2a9
 8019514:	493c      	ldr	r1, [pc, #240]	; (8019608 <tcp_bind+0x11c>)
 8019516:	483d      	ldr	r0, [pc, #244]	; (801960c <tcp_bind+0x120>)
 8019518:	f007 f81a 	bl	8020550 <iprintf>
 801951c:	f06f 030f 	mvn.w	r3, #15
 8019520:	e06a      	b.n	80195f8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	7d1b      	ldrb	r3, [r3, #20]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d009      	beq.n	801953e <tcp_bind+0x52>
 801952a:	4b36      	ldr	r3, [pc, #216]	; (8019604 <tcp_bind+0x118>)
 801952c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019530:	4937      	ldr	r1, [pc, #220]	; (8019610 <tcp_bind+0x124>)
 8019532:	4836      	ldr	r0, [pc, #216]	; (801960c <tcp_bind+0x120>)
 8019534:	f007 f80c 	bl	8020550 <iprintf>
 8019538:	f06f 0305 	mvn.w	r3, #5
 801953c:	e05c      	b.n	80195f8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801953e:	88fb      	ldrh	r3, [r7, #6]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d109      	bne.n	8019558 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019544:	f000 f9f0 	bl	8019928 <tcp_new_port>
 8019548:	4603      	mov	r3, r0
 801954a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801954c:	88fb      	ldrh	r3, [r7, #6]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d135      	bne.n	80195be <tcp_bind+0xd2>
      return ERR_BUF;
 8019552:	f06f 0301 	mvn.w	r3, #1
 8019556:	e04f      	b.n	80195f8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019558:	2300      	movs	r3, #0
 801955a:	61fb      	str	r3, [r7, #28]
 801955c:	e02b      	b.n	80195b6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801955e:	4a2d      	ldr	r2, [pc, #180]	; (8019614 <tcp_bind+0x128>)
 8019560:	69fb      	ldr	r3, [r7, #28]
 8019562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	61bb      	str	r3, [r7, #24]
 801956a:	e01e      	b.n	80195aa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801956c:	69bb      	ldr	r3, [r7, #24]
 801956e:	8adb      	ldrh	r3, [r3, #22]
 8019570:	88fa      	ldrh	r2, [r7, #6]
 8019572:	429a      	cmp	r2, r3
 8019574:	d116      	bne.n	80195a4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8019576:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019578:	2b00      	cmp	r3, #0
 801957a:	d010      	beq.n	801959e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801957c:	69bb      	ldr	r3, [r7, #24]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d00c      	beq.n	801959e <tcp_bind+0xb2>
 8019584:	68bb      	ldr	r3, [r7, #8]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d009      	beq.n	801959e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801958a:	68bb      	ldr	r3, [r7, #8]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d005      	beq.n	801959e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8019592:	69bb      	ldr	r3, [r7, #24]
 8019594:	681a      	ldr	r2, [r3, #0]
 8019596:	68bb      	ldr	r3, [r7, #8]
 8019598:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801959a:	429a      	cmp	r2, r3
 801959c:	d102      	bne.n	80195a4 <tcp_bind+0xb8>
              return ERR_USE;
 801959e:	f06f 0307 	mvn.w	r3, #7
 80195a2:	e029      	b.n	80195f8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80195a4:	69bb      	ldr	r3, [r7, #24]
 80195a6:	68db      	ldr	r3, [r3, #12]
 80195a8:	61bb      	str	r3, [r7, #24]
 80195aa:	69bb      	ldr	r3, [r7, #24]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d1dd      	bne.n	801956c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80195b0:	69fb      	ldr	r3, [r7, #28]
 80195b2:	3301      	adds	r3, #1
 80195b4:	61fb      	str	r3, [r7, #28]
 80195b6:	69fa      	ldr	r2, [r7, #28]
 80195b8:	697b      	ldr	r3, [r7, #20]
 80195ba:	429a      	cmp	r2, r3
 80195bc:	dbcf      	blt.n	801955e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80195be:	68bb      	ldr	r3, [r7, #8]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d00c      	beq.n	80195de <tcp_bind+0xf2>
 80195c4:	68bb      	ldr	r3, [r7, #8]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d008      	beq.n	80195de <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80195cc:	68bb      	ldr	r3, [r7, #8]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d002      	beq.n	80195d8 <tcp_bind+0xec>
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	e000      	b.n	80195da <tcp_bind+0xee>
 80195d8:	2300      	movs	r3, #0
 80195da:	68fa      	ldr	r2, [r7, #12]
 80195dc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	88fa      	ldrh	r2, [r7, #6]
 80195e2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80195e4:	4b0c      	ldr	r3, [pc, #48]	; (8019618 <tcp_bind+0x12c>)
 80195e6:	681a      	ldr	r2, [r3, #0]
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	60da      	str	r2, [r3, #12]
 80195ec:	4a0a      	ldr	r2, [pc, #40]	; (8019618 <tcp_bind+0x12c>)
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	6013      	str	r3, [r2, #0]
 80195f2:	f005 ff81 	bl	801f4f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80195f6:	2300      	movs	r3, #0
}
 80195f8:	4618      	mov	r0, r3
 80195fa:	3720      	adds	r7, #32
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}
 8019600:	08025de8 	.word	0x08025de8
 8019604:	08023d78 	.word	0x08023d78
 8019608:	08023f14 	.word	0x08023f14
 801960c:	08023dc4 	.word	0x08023dc4
 8019610:	08023f2c 	.word	0x08023f2c
 8019614:	08025ee8 	.word	0x08025ee8
 8019618:	2400d3d4 	.word	0x2400d3d4

0801961c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b084      	sub	sp, #16
 8019620:	af00      	add	r7, sp, #0
 8019622:	60f8      	str	r0, [r7, #12]
 8019624:	60b9      	str	r1, [r7, #8]
 8019626:	4613      	mov	r3, r2
 8019628:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801962a:	68bb      	ldr	r3, [r7, #8]
 801962c:	2b00      	cmp	r3, #0
 801962e:	d106      	bne.n	801963e <tcp_accept_null+0x22>
 8019630:	4b07      	ldr	r3, [pc, #28]	; (8019650 <tcp_accept_null+0x34>)
 8019632:	f240 320f 	movw	r2, #783	; 0x30f
 8019636:	4907      	ldr	r1, [pc, #28]	; (8019654 <tcp_accept_null+0x38>)
 8019638:	4807      	ldr	r0, [pc, #28]	; (8019658 <tcp_accept_null+0x3c>)
 801963a:	f006 ff89 	bl	8020550 <iprintf>

  tcp_abort(pcb);
 801963e:	68b8      	ldr	r0, [r7, #8]
 8019640:	f7ff ff48 	bl	80194d4 <tcp_abort>

  return ERR_ABRT;
 8019644:	f06f 030c 	mvn.w	r3, #12
}
 8019648:	4618      	mov	r0, r3
 801964a:	3710      	adds	r7, #16
 801964c:	46bd      	mov	sp, r7
 801964e:	bd80      	pop	{r7, pc}
 8019650:	08023d78 	.word	0x08023d78
 8019654:	08023f54 	.word	0x08023f54
 8019658:	08023dc4 	.word	0x08023dc4

0801965c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b082      	sub	sp, #8
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
 8019664:	460b      	mov	r3, r1
 8019666:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8019668:	78fb      	ldrb	r3, [r7, #3]
 801966a:	2200      	movs	r2, #0
 801966c:	4619      	mov	r1, r3
 801966e:	6878      	ldr	r0, [r7, #4]
 8019670:	f000 f806 	bl	8019680 <tcp_listen_with_backlog_and_err>
 8019674:	4603      	mov	r3, r0
}
 8019676:	4618      	mov	r0, r3
 8019678:	3708      	adds	r7, #8
 801967a:	46bd      	mov	sp, r7
 801967c:	bd80      	pop	{r7, pc}
	...

08019680 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b088      	sub	sp, #32
 8019684:	af00      	add	r7, sp, #0
 8019686:	60f8      	str	r0, [r7, #12]
 8019688:	460b      	mov	r3, r1
 801968a:	607a      	str	r2, [r7, #4]
 801968c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801968e:	2300      	movs	r3, #0
 8019690:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d109      	bne.n	80196ac <tcp_listen_with_backlog_and_err+0x2c>
 8019698:	4b47      	ldr	r3, [pc, #284]	; (80197b8 <tcp_listen_with_backlog_and_err+0x138>)
 801969a:	f240 3259 	movw	r2, #857	; 0x359
 801969e:	4947      	ldr	r1, [pc, #284]	; (80197bc <tcp_listen_with_backlog_and_err+0x13c>)
 80196a0:	4847      	ldr	r0, [pc, #284]	; (80197c0 <tcp_listen_with_backlog_and_err+0x140>)
 80196a2:	f006 ff55 	bl	8020550 <iprintf>
 80196a6:	23f0      	movs	r3, #240	; 0xf0
 80196a8:	76fb      	strb	r3, [r7, #27]
 80196aa:	e079      	b.n	80197a0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	7d1b      	ldrb	r3, [r3, #20]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d009      	beq.n	80196c8 <tcp_listen_with_backlog_and_err+0x48>
 80196b4:	4b40      	ldr	r3, [pc, #256]	; (80197b8 <tcp_listen_with_backlog_and_err+0x138>)
 80196b6:	f240 325a 	movw	r2, #858	; 0x35a
 80196ba:	4942      	ldr	r1, [pc, #264]	; (80197c4 <tcp_listen_with_backlog_and_err+0x144>)
 80196bc:	4840      	ldr	r0, [pc, #256]	; (80197c0 <tcp_listen_with_backlog_and_err+0x140>)
 80196be:	f006 ff47 	bl	8020550 <iprintf>
 80196c2:	23f1      	movs	r3, #241	; 0xf1
 80196c4:	76fb      	strb	r3, [r7, #27]
 80196c6:	e06b      	b.n	80197a0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	7d1b      	ldrb	r3, [r3, #20]
 80196cc:	2b01      	cmp	r3, #1
 80196ce:	d104      	bne.n	80196da <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80196d4:	23f7      	movs	r3, #247	; 0xf7
 80196d6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80196d8:	e062      	b.n	80197a0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80196da:	2002      	movs	r0, #2
 80196dc:	f7fc fe64 	bl	80163a8 <memp_malloc>
 80196e0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80196e2:	69fb      	ldr	r3, [r7, #28]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d102      	bne.n	80196ee <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80196e8:	23ff      	movs	r3, #255	; 0xff
 80196ea:	76fb      	strb	r3, [r7, #27]
    goto done;
 80196ec:	e058      	b.n	80197a0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	691a      	ldr	r2, [r3, #16]
 80196f2:	69fb      	ldr	r3, [r7, #28]
 80196f4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	8ada      	ldrh	r2, [r3, #22]
 80196fa:	69fb      	ldr	r3, [r7, #28]
 80196fc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80196fe:	69fb      	ldr	r3, [r7, #28]
 8019700:	2201      	movs	r2, #1
 8019702:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	7d5a      	ldrb	r2, [r3, #21]
 8019708:	69fb      	ldr	r3, [r7, #28]
 801970a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	7a5a      	ldrb	r2, [r3, #9]
 8019710:	69fb      	ldr	r3, [r7, #28]
 8019712:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8019714:	69fb      	ldr	r3, [r7, #28]
 8019716:	2200      	movs	r2, #0
 8019718:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	7ada      	ldrb	r2, [r3, #11]
 801971e:	69fb      	ldr	r3, [r7, #28]
 8019720:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	7a9a      	ldrb	r2, [r3, #10]
 8019726:	69fb      	ldr	r3, [r7, #28]
 8019728:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	681a      	ldr	r2, [r3, #0]
 801972e:	69fb      	ldr	r3, [r7, #28]
 8019730:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	8adb      	ldrh	r3, [r3, #22]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d021      	beq.n	801977e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801973a:	4b23      	ldr	r3, [pc, #140]	; (80197c8 <tcp_listen_with_backlog_and_err+0x148>)
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	68fa      	ldr	r2, [r7, #12]
 8019740:	429a      	cmp	r2, r3
 8019742:	d105      	bne.n	8019750 <tcp_listen_with_backlog_and_err+0xd0>
 8019744:	4b20      	ldr	r3, [pc, #128]	; (80197c8 <tcp_listen_with_backlog_and_err+0x148>)
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	68db      	ldr	r3, [r3, #12]
 801974a:	4a1f      	ldr	r2, [pc, #124]	; (80197c8 <tcp_listen_with_backlog_and_err+0x148>)
 801974c:	6013      	str	r3, [r2, #0]
 801974e:	e013      	b.n	8019778 <tcp_listen_with_backlog_and_err+0xf8>
 8019750:	4b1d      	ldr	r3, [pc, #116]	; (80197c8 <tcp_listen_with_backlog_and_err+0x148>)
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	617b      	str	r3, [r7, #20]
 8019756:	e00c      	b.n	8019772 <tcp_listen_with_backlog_and_err+0xf2>
 8019758:	697b      	ldr	r3, [r7, #20]
 801975a:	68db      	ldr	r3, [r3, #12]
 801975c:	68fa      	ldr	r2, [r7, #12]
 801975e:	429a      	cmp	r2, r3
 8019760:	d104      	bne.n	801976c <tcp_listen_with_backlog_and_err+0xec>
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	68da      	ldr	r2, [r3, #12]
 8019766:	697b      	ldr	r3, [r7, #20]
 8019768:	60da      	str	r2, [r3, #12]
 801976a:	e005      	b.n	8019778 <tcp_listen_with_backlog_and_err+0xf8>
 801976c:	697b      	ldr	r3, [r7, #20]
 801976e:	68db      	ldr	r3, [r3, #12]
 8019770:	617b      	str	r3, [r7, #20]
 8019772:	697b      	ldr	r3, [r7, #20]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d1ef      	bne.n	8019758 <tcp_listen_with_backlog_and_err+0xd8>
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	2200      	movs	r2, #0
 801977c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801977e:	68f8      	ldr	r0, [r7, #12]
 8019780:	f7ff fb64 	bl	8018e4c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8019784:	69fb      	ldr	r3, [r7, #28]
 8019786:	4a11      	ldr	r2, [pc, #68]	; (80197cc <tcp_listen_with_backlog_and_err+0x14c>)
 8019788:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801978a:	4b11      	ldr	r3, [pc, #68]	; (80197d0 <tcp_listen_with_backlog_and_err+0x150>)
 801978c:	681a      	ldr	r2, [r3, #0]
 801978e:	69fb      	ldr	r3, [r7, #28]
 8019790:	60da      	str	r2, [r3, #12]
 8019792:	4a0f      	ldr	r2, [pc, #60]	; (80197d0 <tcp_listen_with_backlog_and_err+0x150>)
 8019794:	69fb      	ldr	r3, [r7, #28]
 8019796:	6013      	str	r3, [r2, #0]
 8019798:	f005 feae 	bl	801f4f8 <tcp_timer_needed>
  res = ERR_OK;
 801979c:	2300      	movs	r3, #0
 801979e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d002      	beq.n	80197ac <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	7efa      	ldrb	r2, [r7, #27]
 80197aa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80197ac:	69fb      	ldr	r3, [r7, #28]
}
 80197ae:	4618      	mov	r0, r3
 80197b0:	3720      	adds	r7, #32
 80197b2:	46bd      	mov	sp, r7
 80197b4:	bd80      	pop	{r7, pc}
 80197b6:	bf00      	nop
 80197b8:	08023d78 	.word	0x08023d78
 80197bc:	08023f74 	.word	0x08023f74
 80197c0:	08023dc4 	.word	0x08023dc4
 80197c4:	08023fa4 	.word	0x08023fa4
 80197c8:	2400d3d4 	.word	0x2400d3d4
 80197cc:	0801961d 	.word	0x0801961d
 80197d0:	2400d3d8 	.word	0x2400d3d8

080197d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b084      	sub	sp, #16
 80197d8:	af00      	add	r7, sp, #0
 80197da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d106      	bne.n	80197f0 <tcp_update_rcv_ann_wnd+0x1c>
 80197e2:	4b25      	ldr	r3, [pc, #148]	; (8019878 <tcp_update_rcv_ann_wnd+0xa4>)
 80197e4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80197e8:	4924      	ldr	r1, [pc, #144]	; (801987c <tcp_update_rcv_ann_wnd+0xa8>)
 80197ea:	4825      	ldr	r0, [pc, #148]	; (8019880 <tcp_update_rcv_ann_wnd+0xac>)
 80197ec:	f006 feb0 	bl	8020550 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197f4:	687a      	ldr	r2, [r7, #4]
 80197f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80197f8:	4413      	add	r3, r2
 80197fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019800:	687a      	ldr	r2, [r7, #4]
 8019802:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8019804:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8019808:	bf28      	it	cs
 801980a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801980e:	b292      	uxth	r2, r2
 8019810:	4413      	add	r3, r2
 8019812:	68fa      	ldr	r2, [r7, #12]
 8019814:	1ad3      	subs	r3, r2, r3
 8019816:	2b00      	cmp	r3, #0
 8019818:	db08      	blt.n	801982c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019826:	68fa      	ldr	r2, [r7, #12]
 8019828:	1ad3      	subs	r3, r2, r3
 801982a:	e020      	b.n	801986e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019834:	1ad3      	subs	r3, r2, r3
 8019836:	2b00      	cmp	r3, #0
 8019838:	dd03      	ble.n	8019842 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	2200      	movs	r2, #0
 801983e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019840:	e014      	b.n	801986c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801984a:	1ad3      	subs	r3, r2, r3
 801984c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801984e:	68bb      	ldr	r3, [r7, #8]
 8019850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019854:	d306      	bcc.n	8019864 <tcp_update_rcv_ann_wnd+0x90>
 8019856:	4b08      	ldr	r3, [pc, #32]	; (8019878 <tcp_update_rcv_ann_wnd+0xa4>)
 8019858:	f240 32b6 	movw	r2, #950	; 0x3b6
 801985c:	4909      	ldr	r1, [pc, #36]	; (8019884 <tcp_update_rcv_ann_wnd+0xb0>)
 801985e:	4808      	ldr	r0, [pc, #32]	; (8019880 <tcp_update_rcv_ann_wnd+0xac>)
 8019860:	f006 fe76 	bl	8020550 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019864:	68bb      	ldr	r3, [r7, #8]
 8019866:	b29a      	uxth	r2, r3
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801986c:	2300      	movs	r3, #0
  }
}
 801986e:	4618      	mov	r0, r3
 8019870:	3710      	adds	r7, #16
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
 8019876:	bf00      	nop
 8019878:	08023d78 	.word	0x08023d78
 801987c:	08023fdc 	.word	0x08023fdc
 8019880:	08023dc4 	.word	0x08023dc4
 8019884:	08024000 	.word	0x08024000

08019888 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019888:	b580      	push	{r7, lr}
 801988a:	b084      	sub	sp, #16
 801988c:	af00      	add	r7, sp, #0
 801988e:	6078      	str	r0, [r7, #4]
 8019890:	460b      	mov	r3, r1
 8019892:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d107      	bne.n	80198aa <tcp_recved+0x22>
 801989a:	4b1f      	ldr	r3, [pc, #124]	; (8019918 <tcp_recved+0x90>)
 801989c:	f240 32cf 	movw	r2, #975	; 0x3cf
 80198a0:	491e      	ldr	r1, [pc, #120]	; (801991c <tcp_recved+0x94>)
 80198a2:	481f      	ldr	r0, [pc, #124]	; (8019920 <tcp_recved+0x98>)
 80198a4:	f006 fe54 	bl	8020550 <iprintf>
 80198a8:	e032      	b.n	8019910 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	7d1b      	ldrb	r3, [r3, #20]
 80198ae:	2b01      	cmp	r3, #1
 80198b0:	d106      	bne.n	80198c0 <tcp_recved+0x38>
 80198b2:	4b19      	ldr	r3, [pc, #100]	; (8019918 <tcp_recved+0x90>)
 80198b4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80198b8:	491a      	ldr	r1, [pc, #104]	; (8019924 <tcp_recved+0x9c>)
 80198ba:	4819      	ldr	r0, [pc, #100]	; (8019920 <tcp_recved+0x98>)
 80198bc:	f006 fe48 	bl	8020550 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80198c4:	887b      	ldrh	r3, [r7, #2]
 80198c6:	4413      	add	r3, r2
 80198c8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80198ca:	89fb      	ldrh	r3, [r7, #14]
 80198cc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80198d0:	d804      	bhi.n	80198dc <tcp_recved+0x54>
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198d6:	89fa      	ldrh	r2, [r7, #14]
 80198d8:	429a      	cmp	r2, r3
 80198da:	d204      	bcs.n	80198e6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80198e2:	851a      	strh	r2, [r3, #40]	; 0x28
 80198e4:	e002      	b.n	80198ec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	89fa      	ldrh	r2, [r7, #14]
 80198ea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80198ec:	6878      	ldr	r0, [r7, #4]
 80198ee:	f7ff ff71 	bl	80197d4 <tcp_update_rcv_ann_wnd>
 80198f2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80198f4:	68bb      	ldr	r3, [r7, #8]
 80198f6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80198fa:	d309      	bcc.n	8019910 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	8b5b      	ldrh	r3, [r3, #26]
 8019900:	f043 0302 	orr.w	r3, r3, #2
 8019904:	b29a      	uxth	r2, r3
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801990a:	6878      	ldr	r0, [r7, #4]
 801990c:	f004 fcc6 	bl	801e29c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8019910:	3710      	adds	r7, #16
 8019912:	46bd      	mov	sp, r7
 8019914:	bd80      	pop	{r7, pc}
 8019916:	bf00      	nop
 8019918:	08023d78 	.word	0x08023d78
 801991c:	0802401c 	.word	0x0802401c
 8019920:	08023dc4 	.word	0x08023dc4
 8019924:	08024034 	.word	0x08024034

08019928 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8019928:	b480      	push	{r7}
 801992a:	b083      	sub	sp, #12
 801992c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801992e:	2300      	movs	r3, #0
 8019930:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8019932:	4b1e      	ldr	r3, [pc, #120]	; (80199ac <tcp_new_port+0x84>)
 8019934:	881b      	ldrh	r3, [r3, #0]
 8019936:	3301      	adds	r3, #1
 8019938:	b29a      	uxth	r2, r3
 801993a:	4b1c      	ldr	r3, [pc, #112]	; (80199ac <tcp_new_port+0x84>)
 801993c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801993e:	4b1b      	ldr	r3, [pc, #108]	; (80199ac <tcp_new_port+0x84>)
 8019940:	881b      	ldrh	r3, [r3, #0]
 8019942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019946:	4293      	cmp	r3, r2
 8019948:	d103      	bne.n	8019952 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801994a:	4b18      	ldr	r3, [pc, #96]	; (80199ac <tcp_new_port+0x84>)
 801994c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019950:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019952:	2300      	movs	r3, #0
 8019954:	71fb      	strb	r3, [r7, #7]
 8019956:	e01e      	b.n	8019996 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019958:	79fb      	ldrb	r3, [r7, #7]
 801995a:	4a15      	ldr	r2, [pc, #84]	; (80199b0 <tcp_new_port+0x88>)
 801995c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	603b      	str	r3, [r7, #0]
 8019964:	e011      	b.n	801998a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8019966:	683b      	ldr	r3, [r7, #0]
 8019968:	8ada      	ldrh	r2, [r3, #22]
 801996a:	4b10      	ldr	r3, [pc, #64]	; (80199ac <tcp_new_port+0x84>)
 801996c:	881b      	ldrh	r3, [r3, #0]
 801996e:	429a      	cmp	r2, r3
 8019970:	d108      	bne.n	8019984 <tcp_new_port+0x5c>
        n++;
 8019972:	88bb      	ldrh	r3, [r7, #4]
 8019974:	3301      	adds	r3, #1
 8019976:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019978:	88bb      	ldrh	r3, [r7, #4]
 801997a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801997e:	d3d8      	bcc.n	8019932 <tcp_new_port+0xa>
          return 0;
 8019980:	2300      	movs	r3, #0
 8019982:	e00d      	b.n	80199a0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	603b      	str	r3, [r7, #0]
 801998a:	683b      	ldr	r3, [r7, #0]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d1ea      	bne.n	8019966 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019990:	79fb      	ldrb	r3, [r7, #7]
 8019992:	3301      	adds	r3, #1
 8019994:	71fb      	strb	r3, [r7, #7]
 8019996:	79fb      	ldrb	r3, [r7, #7]
 8019998:	2b03      	cmp	r3, #3
 801999a:	d9dd      	bls.n	8019958 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801999c:	4b03      	ldr	r3, [pc, #12]	; (80199ac <tcp_new_port+0x84>)
 801999e:	881b      	ldrh	r3, [r3, #0]
}
 80199a0:	4618      	mov	r0, r3
 80199a2:	370c      	adds	r7, #12
 80199a4:	46bd      	mov	sp, r7
 80199a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199aa:	4770      	bx	lr
 80199ac:	24000034 	.word	0x24000034
 80199b0:	08025ee8 	.word	0x08025ee8

080199b4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b08a      	sub	sp, #40	; 0x28
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	60f8      	str	r0, [r7, #12]
 80199bc:	60b9      	str	r1, [r7, #8]
 80199be:	603b      	str	r3, [r7, #0]
 80199c0:	4613      	mov	r3, r2
 80199c2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80199c4:	2300      	movs	r3, #0
 80199c6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d109      	bne.n	80199e2 <tcp_connect+0x2e>
 80199ce:	4b7d      	ldr	r3, [pc, #500]	; (8019bc4 <tcp_connect+0x210>)
 80199d0:	f240 4235 	movw	r2, #1077	; 0x435
 80199d4:	497c      	ldr	r1, [pc, #496]	; (8019bc8 <tcp_connect+0x214>)
 80199d6:	487d      	ldr	r0, [pc, #500]	; (8019bcc <tcp_connect+0x218>)
 80199d8:	f006 fdba 	bl	8020550 <iprintf>
 80199dc:	f06f 030f 	mvn.w	r3, #15
 80199e0:	e0ec      	b.n	8019bbc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80199e2:	68bb      	ldr	r3, [r7, #8]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d109      	bne.n	80199fc <tcp_connect+0x48>
 80199e8:	4b76      	ldr	r3, [pc, #472]	; (8019bc4 <tcp_connect+0x210>)
 80199ea:	f240 4236 	movw	r2, #1078	; 0x436
 80199ee:	4978      	ldr	r1, [pc, #480]	; (8019bd0 <tcp_connect+0x21c>)
 80199f0:	4876      	ldr	r0, [pc, #472]	; (8019bcc <tcp_connect+0x218>)
 80199f2:	f006 fdad 	bl	8020550 <iprintf>
 80199f6:	f06f 030f 	mvn.w	r3, #15
 80199fa:	e0df      	b.n	8019bbc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	7d1b      	ldrb	r3, [r3, #20]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d009      	beq.n	8019a18 <tcp_connect+0x64>
 8019a04:	4b6f      	ldr	r3, [pc, #444]	; (8019bc4 <tcp_connect+0x210>)
 8019a06:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8019a0a:	4972      	ldr	r1, [pc, #456]	; (8019bd4 <tcp_connect+0x220>)
 8019a0c:	486f      	ldr	r0, [pc, #444]	; (8019bcc <tcp_connect+0x218>)
 8019a0e:	f006 fd9f 	bl	8020550 <iprintf>
 8019a12:	f06f 0309 	mvn.w	r3, #9
 8019a16:	e0d1      	b.n	8019bbc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8019a18:	68bb      	ldr	r3, [r7, #8]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d002      	beq.n	8019a24 <tcp_connect+0x70>
 8019a1e:	68bb      	ldr	r3, [r7, #8]
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	e000      	b.n	8019a26 <tcp_connect+0x72>
 8019a24:	2300      	movs	r3, #0
 8019a26:	68fa      	ldr	r2, [r7, #12]
 8019a28:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	88fa      	ldrh	r2, [r7, #6]
 8019a2e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	7a1b      	ldrb	r3, [r3, #8]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d006      	beq.n	8019a46 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	7a1b      	ldrb	r3, [r3, #8]
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	f7fd fad9 	bl	8016ff4 <netif_get_by_index>
 8019a42:	6278      	str	r0, [r7, #36]	; 0x24
 8019a44:	e005      	b.n	8019a52 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	3304      	adds	r3, #4
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	f7fa fd0e 	bl	801446c <ip4_route>
 8019a50:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8019a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d102      	bne.n	8019a5e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8019a58:	f06f 0303 	mvn.w	r3, #3
 8019a5c:	e0ae      	b.n	8019bbc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d003      	beq.n	8019a6c <tcp_connect+0xb8>
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d111      	bne.n	8019a90 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8019a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d002      	beq.n	8019a78 <tcp_connect+0xc4>
 8019a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a74:	3304      	adds	r3, #4
 8019a76:	e000      	b.n	8019a7a <tcp_connect+0xc6>
 8019a78:	2300      	movs	r3, #0
 8019a7a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8019a7c:	69fb      	ldr	r3, [r7, #28]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d102      	bne.n	8019a88 <tcp_connect+0xd4>
      return ERR_RTE;
 8019a82:	f06f 0303 	mvn.w	r3, #3
 8019a86:	e099      	b.n	8019bbc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019a88:	69fb      	ldr	r3, [r7, #28]
 8019a8a:	681a      	ldr	r2, [r3, #0]
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	8adb      	ldrh	r3, [r3, #22]
 8019a94:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	8adb      	ldrh	r3, [r3, #22]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d10c      	bne.n	8019ab8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8019a9e:	f7ff ff43 	bl	8019928 <tcp_new_port>
 8019aa2:	4603      	mov	r3, r0
 8019aa4:	461a      	mov	r2, r3
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	8adb      	ldrh	r3, [r3, #22]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d102      	bne.n	8019ab8 <tcp_connect+0x104>
      return ERR_BUF;
 8019ab2:	f06f 0301 	mvn.w	r3, #1
 8019ab6:	e081      	b.n	8019bbc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8019ab8:	68f8      	ldr	r0, [r7, #12]
 8019aba:	f001 f867 	bl	801ab8c <tcp_next_iss>
 8019abe:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	697a      	ldr	r2, [r7, #20]
 8019aca:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8019acc:	697b      	ldr	r3, [r7, #20]
 8019ace:	1e5a      	subs	r2, r3, #1
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8019ad4:	697b      	ldr	r3, [r7, #20]
 8019ad6:	1e5a      	subs	r2, r3, #1
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8019adc:	697b      	ldr	r3, [r7, #20]
 8019ade:	1e5a      	subs	r2, r3, #1
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019aea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019b02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019b0c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	3304      	adds	r3, #4
 8019b16:	461a      	mov	r2, r3
 8019b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b1a:	f001 f85d 	bl	801abd8 <tcp_eff_send_mss_netif>
 8019b1e:	4603      	mov	r3, r0
 8019b20:	461a      	mov	r2, r3
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	2201      	movs	r2, #1
 8019b2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	683a      	ldr	r2, [r7, #0]
 8019b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8019b36:	2102      	movs	r1, #2
 8019b38:	68f8      	ldr	r0, [r7, #12]
 8019b3a:	f004 fac1 	bl	801e0c0 <tcp_enqueue_flags>
 8019b3e:	4603      	mov	r3, r0
 8019b40:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8019b42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d136      	bne.n	8019bb8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	2202      	movs	r2, #2
 8019b4e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8019b50:	8b7b      	ldrh	r3, [r7, #26]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d021      	beq.n	8019b9a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019b56:	4b20      	ldr	r3, [pc, #128]	; (8019bd8 <tcp_connect+0x224>)
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	68fa      	ldr	r2, [r7, #12]
 8019b5c:	429a      	cmp	r2, r3
 8019b5e:	d105      	bne.n	8019b6c <tcp_connect+0x1b8>
 8019b60:	4b1d      	ldr	r3, [pc, #116]	; (8019bd8 <tcp_connect+0x224>)
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	68db      	ldr	r3, [r3, #12]
 8019b66:	4a1c      	ldr	r2, [pc, #112]	; (8019bd8 <tcp_connect+0x224>)
 8019b68:	6013      	str	r3, [r2, #0]
 8019b6a:	e013      	b.n	8019b94 <tcp_connect+0x1e0>
 8019b6c:	4b1a      	ldr	r3, [pc, #104]	; (8019bd8 <tcp_connect+0x224>)
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	623b      	str	r3, [r7, #32]
 8019b72:	e00c      	b.n	8019b8e <tcp_connect+0x1da>
 8019b74:	6a3b      	ldr	r3, [r7, #32]
 8019b76:	68db      	ldr	r3, [r3, #12]
 8019b78:	68fa      	ldr	r2, [r7, #12]
 8019b7a:	429a      	cmp	r2, r3
 8019b7c:	d104      	bne.n	8019b88 <tcp_connect+0x1d4>
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	68da      	ldr	r2, [r3, #12]
 8019b82:	6a3b      	ldr	r3, [r7, #32]
 8019b84:	60da      	str	r2, [r3, #12]
 8019b86:	e005      	b.n	8019b94 <tcp_connect+0x1e0>
 8019b88:	6a3b      	ldr	r3, [r7, #32]
 8019b8a:	68db      	ldr	r3, [r3, #12]
 8019b8c:	623b      	str	r3, [r7, #32]
 8019b8e:	6a3b      	ldr	r3, [r7, #32]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d1ef      	bne.n	8019b74 <tcp_connect+0x1c0>
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	2200      	movs	r2, #0
 8019b98:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8019b9a:	4b10      	ldr	r3, [pc, #64]	; (8019bdc <tcp_connect+0x228>)
 8019b9c:	681a      	ldr	r2, [r3, #0]
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	60da      	str	r2, [r3, #12]
 8019ba2:	4a0e      	ldr	r2, [pc, #56]	; (8019bdc <tcp_connect+0x228>)
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	6013      	str	r3, [r2, #0]
 8019ba8:	f005 fca6 	bl	801f4f8 <tcp_timer_needed>
 8019bac:	4b0c      	ldr	r3, [pc, #48]	; (8019be0 <tcp_connect+0x22c>)
 8019bae:	2201      	movs	r2, #1
 8019bb0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8019bb2:	68f8      	ldr	r0, [r7, #12]
 8019bb4:	f004 fb72 	bl	801e29c <tcp_output>
  }
  return ret;
 8019bb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	3728      	adds	r7, #40	; 0x28
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	bd80      	pop	{r7, pc}
 8019bc4:	08023d78 	.word	0x08023d78
 8019bc8:	0802405c 	.word	0x0802405c
 8019bcc:	08023dc4 	.word	0x08023dc4
 8019bd0:	08024078 	.word	0x08024078
 8019bd4:	08024094 	.word	0x08024094
 8019bd8:	2400d3d4 	.word	0x2400d3d4
 8019bdc:	2400d3dc 	.word	0x2400d3dc
 8019be0:	2400d3e4 	.word	0x2400d3e4

08019be4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8019be4:	b5b0      	push	{r4, r5, r7, lr}
 8019be6:	b090      	sub	sp, #64	; 0x40
 8019be8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8019bea:	2300      	movs	r3, #0
 8019bec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8019bf0:	4b94      	ldr	r3, [pc, #592]	; (8019e44 <tcp_slowtmr+0x260>)
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	3301      	adds	r3, #1
 8019bf6:	4a93      	ldr	r2, [pc, #588]	; (8019e44 <tcp_slowtmr+0x260>)
 8019bf8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8019bfa:	4b93      	ldr	r3, [pc, #588]	; (8019e48 <tcp_slowtmr+0x264>)
 8019bfc:	781b      	ldrb	r3, [r3, #0]
 8019bfe:	3301      	adds	r3, #1
 8019c00:	b2da      	uxtb	r2, r3
 8019c02:	4b91      	ldr	r3, [pc, #580]	; (8019e48 <tcp_slowtmr+0x264>)
 8019c04:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8019c06:	2300      	movs	r3, #0
 8019c08:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8019c0a:	4b90      	ldr	r3, [pc, #576]	; (8019e4c <tcp_slowtmr+0x268>)
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8019c10:	e29d      	b.n	801a14e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c14:	7d1b      	ldrb	r3, [r3, #20]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d106      	bne.n	8019c28 <tcp_slowtmr+0x44>
 8019c1a:	4b8d      	ldr	r3, [pc, #564]	; (8019e50 <tcp_slowtmr+0x26c>)
 8019c1c:	f240 42be 	movw	r2, #1214	; 0x4be
 8019c20:	498c      	ldr	r1, [pc, #560]	; (8019e54 <tcp_slowtmr+0x270>)
 8019c22:	488d      	ldr	r0, [pc, #564]	; (8019e58 <tcp_slowtmr+0x274>)
 8019c24:	f006 fc94 	bl	8020550 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c2a:	7d1b      	ldrb	r3, [r3, #20]
 8019c2c:	2b01      	cmp	r3, #1
 8019c2e:	d106      	bne.n	8019c3e <tcp_slowtmr+0x5a>
 8019c30:	4b87      	ldr	r3, [pc, #540]	; (8019e50 <tcp_slowtmr+0x26c>)
 8019c32:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019c36:	4989      	ldr	r1, [pc, #548]	; (8019e5c <tcp_slowtmr+0x278>)
 8019c38:	4887      	ldr	r0, [pc, #540]	; (8019e58 <tcp_slowtmr+0x274>)
 8019c3a:	f006 fc89 	bl	8020550 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8019c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c40:	7d1b      	ldrb	r3, [r3, #20]
 8019c42:	2b0a      	cmp	r3, #10
 8019c44:	d106      	bne.n	8019c54 <tcp_slowtmr+0x70>
 8019c46:	4b82      	ldr	r3, [pc, #520]	; (8019e50 <tcp_slowtmr+0x26c>)
 8019c48:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019c4c:	4984      	ldr	r1, [pc, #528]	; (8019e60 <tcp_slowtmr+0x27c>)
 8019c4e:	4882      	ldr	r0, [pc, #520]	; (8019e58 <tcp_slowtmr+0x274>)
 8019c50:	f006 fc7e 	bl	8020550 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c56:	7f9a      	ldrb	r2, [r3, #30]
 8019c58:	4b7b      	ldr	r3, [pc, #492]	; (8019e48 <tcp_slowtmr+0x264>)
 8019c5a:	781b      	ldrb	r3, [r3, #0]
 8019c5c:	429a      	cmp	r2, r3
 8019c5e:	d105      	bne.n	8019c6c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8019c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c62:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c66:	68db      	ldr	r3, [r3, #12]
 8019c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8019c6a:	e270      	b.n	801a14e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8019c6c:	4b76      	ldr	r3, [pc, #472]	; (8019e48 <tcp_slowtmr+0x264>)
 8019c6e:	781a      	ldrb	r2, [r3, #0]
 8019c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c72:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8019c74:	2300      	movs	r3, #0
 8019c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c82:	7d1b      	ldrb	r3, [r3, #20]
 8019c84:	2b02      	cmp	r3, #2
 8019c86:	d10a      	bne.n	8019c9e <tcp_slowtmr+0xba>
 8019c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019c8e:	2b05      	cmp	r3, #5
 8019c90:	d905      	bls.n	8019c9e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8019c92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c96:	3301      	adds	r3, #1
 8019c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019c9c:	e11e      	b.n	8019edc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8019c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019ca4:	2b0b      	cmp	r3, #11
 8019ca6:	d905      	bls.n	8019cb4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8019ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cac:	3301      	adds	r3, #1
 8019cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019cb2:	e113      	b.n	8019edc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8019cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d075      	beq.n	8019daa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8019cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d006      	beq.n	8019cd4 <tcp_slowtmr+0xf0>
 8019cc6:	4b62      	ldr	r3, [pc, #392]	; (8019e50 <tcp_slowtmr+0x26c>)
 8019cc8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019ccc:	4965      	ldr	r1, [pc, #404]	; (8019e64 <tcp_slowtmr+0x280>)
 8019cce:	4862      	ldr	r0, [pc, #392]	; (8019e58 <tcp_slowtmr+0x274>)
 8019cd0:	f006 fc3e 	bl	8020550 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8019cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d106      	bne.n	8019cea <tcp_slowtmr+0x106>
 8019cdc:	4b5c      	ldr	r3, [pc, #368]	; (8019e50 <tcp_slowtmr+0x26c>)
 8019cde:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8019ce2:	4961      	ldr	r1, [pc, #388]	; (8019e68 <tcp_slowtmr+0x284>)
 8019ce4:	485c      	ldr	r0, [pc, #368]	; (8019e58 <tcp_slowtmr+0x274>)
 8019ce6:	f006 fc33 	bl	8020550 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019cf0:	2b0b      	cmp	r3, #11
 8019cf2:	d905      	bls.n	8019d00 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8019cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cf8:	3301      	adds	r3, #1
 8019cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019cfe:	e0ed      	b.n	8019edc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8019d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019d06:	3b01      	subs	r3, #1
 8019d08:	4a58      	ldr	r2, [pc, #352]	; (8019e6c <tcp_slowtmr+0x288>)
 8019d0a:	5cd3      	ldrb	r3, [r2, r3]
 8019d0c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8019d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019d14:	7c7a      	ldrb	r2, [r7, #17]
 8019d16:	429a      	cmp	r2, r3
 8019d18:	d907      	bls.n	8019d2a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8019d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019d20:	3301      	adds	r3, #1
 8019d22:	b2da      	uxtb	r2, r3
 8019d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d26:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8019d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019d30:	7c7a      	ldrb	r2, [r7, #17]
 8019d32:	429a      	cmp	r2, r3
 8019d34:	f200 80d2 	bhi.w	8019edc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8019d38:	2301      	movs	r3, #1
 8019d3a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8019d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d108      	bne.n	8019d58 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8019d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d48:	f005 f950 	bl	801efec <tcp_zero_window_probe>
 8019d4c:	4603      	mov	r3, r0
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d014      	beq.n	8019d7c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8019d52:	2300      	movs	r3, #0
 8019d54:	623b      	str	r3, [r7, #32]
 8019d56:	e011      	b.n	8019d7c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8019d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d5e:	4619      	mov	r1, r3
 8019d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d62:	f004 f815 	bl	801dd90 <tcp_split_unsent_seg>
 8019d66:	4603      	mov	r3, r0
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d107      	bne.n	8019d7c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8019d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d6e:	f004 fa95 	bl	801e29c <tcp_output>
 8019d72:	4603      	mov	r3, r0
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d101      	bne.n	8019d7c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8019d78:	2300      	movs	r3, #0
 8019d7a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8019d7c:	6a3b      	ldr	r3, [r7, #32]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	f000 80ac 	beq.w	8019edc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8019d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d86:	2200      	movs	r2, #0
 8019d88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019d92:	2b06      	cmp	r3, #6
 8019d94:	f200 80a2 	bhi.w	8019edc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8019d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019d9e:	3301      	adds	r3, #1
 8019da0:	b2da      	uxtb	r2, r3
 8019da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019da4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8019da8:	e098      	b.n	8019edc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	db0f      	blt.n	8019dd4 <tcp_slowtmr+0x1f0>
 8019db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019db6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019dba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019dbe:	4293      	cmp	r3, r2
 8019dc0:	d008      	beq.n	8019dd4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8019dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dc4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019dc8:	b29b      	uxth	r3, r3
 8019dca:	3301      	adds	r3, #1
 8019dcc:	b29b      	uxth	r3, r3
 8019dce:	b21a      	sxth	r2, r3
 8019dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8019dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8019dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ddc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019de0:	429a      	cmp	r2, r3
 8019de2:	db7b      	blt.n	8019edc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8019de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019de6:	f004 fd4b 	bl	801e880 <tcp_rexmit_rto_prepare>
 8019dea:	4603      	mov	r3, r0
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d007      	beq.n	8019e00 <tcp_slowtmr+0x21c>
 8019df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d171      	bne.n	8019edc <tcp_slowtmr+0x2f8>
 8019df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d06d      	beq.n	8019edc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8019e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e02:	7d1b      	ldrb	r3, [r3, #20]
 8019e04:	2b02      	cmp	r3, #2
 8019e06:	d03a      	beq.n	8019e7e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8019e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019e0e:	2b0c      	cmp	r3, #12
 8019e10:	bf28      	it	cs
 8019e12:	230c      	movcs	r3, #12
 8019e14:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8019e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019e1c:	10db      	asrs	r3, r3, #3
 8019e1e:	b21b      	sxth	r3, r3
 8019e20:	461a      	mov	r2, r3
 8019e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019e28:	4413      	add	r3, r2
 8019e2a:	7efa      	ldrb	r2, [r7, #27]
 8019e2c:	4910      	ldr	r1, [pc, #64]	; (8019e70 <tcp_slowtmr+0x28c>)
 8019e2e:	5c8a      	ldrb	r2, [r1, r2]
 8019e30:	4093      	lsls	r3, r2
 8019e32:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019e34:	697b      	ldr	r3, [r7, #20]
 8019e36:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8019e3a:	4293      	cmp	r3, r2
 8019e3c:	dc1a      	bgt.n	8019e74 <tcp_slowtmr+0x290>
 8019e3e:	697b      	ldr	r3, [r7, #20]
 8019e40:	b21a      	sxth	r2, r3
 8019e42:	e019      	b.n	8019e78 <tcp_slowtmr+0x294>
 8019e44:	2400d3d0 	.word	0x2400d3d0
 8019e48:	2400d3e6 	.word	0x2400d3e6
 8019e4c:	2400d3dc 	.word	0x2400d3dc
 8019e50:	08023d78 	.word	0x08023d78
 8019e54:	080240c4 	.word	0x080240c4
 8019e58:	08023dc4 	.word	0x08023dc4
 8019e5c:	080240f0 	.word	0x080240f0
 8019e60:	0802411c 	.word	0x0802411c
 8019e64:	0802414c 	.word	0x0802414c
 8019e68:	08024180 	.word	0x08024180
 8019e6c:	08025ee0 	.word	0x08025ee0
 8019e70:	08025ed0 	.word	0x08025ed0
 8019e74:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8019e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e80:	2200      	movs	r2, #0
 8019e82:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8019e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019e90:	4293      	cmp	r3, r2
 8019e92:	bf28      	it	cs
 8019e94:	4613      	movcs	r3, r2
 8019e96:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8019e98:	8a7b      	ldrh	r3, [r7, #18]
 8019e9a:	085b      	lsrs	r3, r3, #1
 8019e9c:	b29a      	uxth	r2, r3
 8019e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8019ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019eae:	005b      	lsls	r3, r3, #1
 8019eb0:	b29b      	uxth	r3, r3
 8019eb2:	429a      	cmp	r2, r3
 8019eb4:	d206      	bcs.n	8019ec4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8019eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019eba:	005b      	lsls	r3, r3, #1
 8019ebc:	b29a      	uxth	r2, r3
 8019ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8019ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8019ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8019ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8019ed6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019ed8:	f004 fd42 	bl	801e960 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8019edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ede:	7d1b      	ldrb	r3, [r3, #20]
 8019ee0:	2b06      	cmp	r3, #6
 8019ee2:	d111      	bne.n	8019f08 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8019ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee6:	8b5b      	ldrh	r3, [r3, #26]
 8019ee8:	f003 0310 	and.w	r3, r3, #16
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d00b      	beq.n	8019f08 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019ef0:	4b9c      	ldr	r3, [pc, #624]	; (801a164 <tcp_slowtmr+0x580>)
 8019ef2:	681a      	ldr	r2, [r3, #0]
 8019ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef6:	6a1b      	ldr	r3, [r3, #32]
 8019ef8:	1ad3      	subs	r3, r2, r3
 8019efa:	2b28      	cmp	r3, #40	; 0x28
 8019efc:	d904      	bls.n	8019f08 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8019efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f02:	3301      	adds	r3, #1
 8019f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f0a:	7a5b      	ldrb	r3, [r3, #9]
 8019f0c:	f003 0308 	and.w	r3, r3, #8
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d04a      	beq.n	8019faa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8019f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f16:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019f18:	2b04      	cmp	r3, #4
 8019f1a:	d003      	beq.n	8019f24 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8019f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8019f20:	2b07      	cmp	r3, #7
 8019f22:	d142      	bne.n	8019faa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f24:	4b8f      	ldr	r3, [pc, #572]	; (801a164 <tcp_slowtmr+0x580>)
 8019f26:	681a      	ldr	r2, [r3, #0]
 8019f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f2a:	6a1b      	ldr	r3, [r3, #32]
 8019f2c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f30:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019f34:	4b8c      	ldr	r3, [pc, #560]	; (801a168 <tcp_slowtmr+0x584>)
 8019f36:	440b      	add	r3, r1
 8019f38:	498c      	ldr	r1, [pc, #560]	; (801a16c <tcp_slowtmr+0x588>)
 8019f3a:	fba1 1303 	umull	r1, r3, r1, r3
 8019f3e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f40:	429a      	cmp	r2, r3
 8019f42:	d90a      	bls.n	8019f5a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8019f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f48:	3301      	adds	r3, #1
 8019f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8019f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f52:	3301      	adds	r3, #1
 8019f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019f58:	e027      	b.n	8019faa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f5a:	4b82      	ldr	r3, [pc, #520]	; (801a164 <tcp_slowtmr+0x580>)
 8019f5c:	681a      	ldr	r2, [r3, #0]
 8019f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f60:	6a1b      	ldr	r3, [r3, #32]
 8019f62:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8019f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f66:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019f70:	4618      	mov	r0, r3
 8019f72:	4b7f      	ldr	r3, [pc, #508]	; (801a170 <tcp_slowtmr+0x58c>)
 8019f74:	fb00 f303 	mul.w	r3, r0, r3
 8019f78:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8019f7a:	497c      	ldr	r1, [pc, #496]	; (801a16c <tcp_slowtmr+0x588>)
 8019f7c:	fba1 1303 	umull	r1, r3, r1, r3
 8019f80:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f82:	429a      	cmp	r2, r3
 8019f84:	d911      	bls.n	8019faa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8019f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019f88:	f004 fff0 	bl	801ef6c <tcp_keepalive>
 8019f8c:	4603      	mov	r3, r0
 8019f8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8019f92:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d107      	bne.n	8019faa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8019f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019fa0:	3301      	adds	r3, #1
 8019fa2:	b2da      	uxtb	r2, r3
 8019fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fa6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8019faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d011      	beq.n	8019fd6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8019fb2:	4b6c      	ldr	r3, [pc, #432]	; (801a164 <tcp_slowtmr+0x580>)
 8019fb4:	681a      	ldr	r2, [r3, #0]
 8019fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fb8:	6a1b      	ldr	r3, [r3, #32]
 8019fba:	1ad2      	subs	r2, r2, r3
 8019fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fbe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019fc2:	4619      	mov	r1, r3
 8019fc4:	460b      	mov	r3, r1
 8019fc6:	005b      	lsls	r3, r3, #1
 8019fc8:	440b      	add	r3, r1
 8019fca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8019fcc:	429a      	cmp	r2, r3
 8019fce:	d302      	bcc.n	8019fd6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8019fd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019fd2:	f000 feab 	bl	801ad2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8019fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fd8:	7d1b      	ldrb	r3, [r3, #20]
 8019fda:	2b03      	cmp	r3, #3
 8019fdc:	d10b      	bne.n	8019ff6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019fde:	4b61      	ldr	r3, [pc, #388]	; (801a164 <tcp_slowtmr+0x580>)
 8019fe0:	681a      	ldr	r2, [r3, #0]
 8019fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fe4:	6a1b      	ldr	r3, [r3, #32]
 8019fe6:	1ad3      	subs	r3, r2, r3
 8019fe8:	2b28      	cmp	r3, #40	; 0x28
 8019fea:	d904      	bls.n	8019ff6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8019fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ff0:	3301      	adds	r3, #1
 8019ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8019ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ff8:	7d1b      	ldrb	r3, [r3, #20]
 8019ffa:	2b09      	cmp	r3, #9
 8019ffc:	d10b      	bne.n	801a016 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019ffe:	4b59      	ldr	r3, [pc, #356]	; (801a164 <tcp_slowtmr+0x580>)
 801a000:	681a      	ldr	r2, [r3, #0]
 801a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a004:	6a1b      	ldr	r3, [r3, #32]
 801a006:	1ad3      	subs	r3, r2, r3
 801a008:	2bf0      	cmp	r3, #240	; 0xf0
 801a00a:	d904      	bls.n	801a016 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801a00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a010:	3301      	adds	r3, #1
 801a012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d060      	beq.n	801a0e0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a024:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a028:	f000 fccc 	bl	801a9c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d010      	beq.n	801a054 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a032:	4b50      	ldr	r3, [pc, #320]	; (801a174 <tcp_slowtmr+0x590>)
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a038:	429a      	cmp	r2, r3
 801a03a:	d106      	bne.n	801a04a <tcp_slowtmr+0x466>
 801a03c:	4b4e      	ldr	r3, [pc, #312]	; (801a178 <tcp_slowtmr+0x594>)
 801a03e:	f240 526d 	movw	r2, #1389	; 0x56d
 801a042:	494e      	ldr	r1, [pc, #312]	; (801a17c <tcp_slowtmr+0x598>)
 801a044:	484e      	ldr	r0, [pc, #312]	; (801a180 <tcp_slowtmr+0x59c>)
 801a046:	f006 fa83 	bl	8020550 <iprintf>
        prev->next = pcb->next;
 801a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a04c:	68da      	ldr	r2, [r3, #12]
 801a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a050:	60da      	str	r2, [r3, #12]
 801a052:	e00f      	b.n	801a074 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a054:	4b47      	ldr	r3, [pc, #284]	; (801a174 <tcp_slowtmr+0x590>)
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d006      	beq.n	801a06c <tcp_slowtmr+0x488>
 801a05e:	4b46      	ldr	r3, [pc, #280]	; (801a178 <tcp_slowtmr+0x594>)
 801a060:	f240 5271 	movw	r2, #1393	; 0x571
 801a064:	4947      	ldr	r1, [pc, #284]	; (801a184 <tcp_slowtmr+0x5a0>)
 801a066:	4846      	ldr	r0, [pc, #280]	; (801a180 <tcp_slowtmr+0x59c>)
 801a068:	f006 fa72 	bl	8020550 <iprintf>
        tcp_active_pcbs = pcb->next;
 801a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a06e:	68db      	ldr	r3, [r3, #12]
 801a070:	4a40      	ldr	r2, [pc, #256]	; (801a174 <tcp_slowtmr+0x590>)
 801a072:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a074:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d013      	beq.n	801a0a4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a07e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a082:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a084:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a088:	3304      	adds	r3, #4
 801a08a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a08c:	8ad2      	ldrh	r2, [r2, #22]
 801a08e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a090:	8b09      	ldrh	r1, [r1, #24]
 801a092:	9102      	str	r1, [sp, #8]
 801a094:	9201      	str	r2, [sp, #4]
 801a096:	9300      	str	r3, [sp, #0]
 801a098:	462b      	mov	r3, r5
 801a09a:	4622      	mov	r2, r4
 801a09c:	4601      	mov	r1, r0
 801a09e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a0a0:	f004 feb0 	bl	801ee04 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a6:	691b      	ldr	r3, [r3, #16]
 801a0a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ac:	7d1b      	ldrb	r3, [r3, #20]
 801a0ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0b6:	68db      	ldr	r3, [r3, #12]
 801a0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a0ba:	6838      	ldr	r0, [r7, #0]
 801a0bc:	f7fe fec6 	bl	8018e4c <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a0c0:	4b31      	ldr	r3, [pc, #196]	; (801a188 <tcp_slowtmr+0x5a4>)
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d004      	beq.n	801a0d6 <tcp_slowtmr+0x4f2>
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	f06f 010c 	mvn.w	r1, #12
 801a0d2:	68b8      	ldr	r0, [r7, #8]
 801a0d4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801a0d6:	4b2c      	ldr	r3, [pc, #176]	; (801a188 <tcp_slowtmr+0x5a4>)
 801a0d8:	781b      	ldrb	r3, [r3, #0]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d037      	beq.n	801a14e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801a0de:	e592      	b.n	8019c06 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801a0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e6:	68db      	ldr	r3, [r3, #12]
 801a0e8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0ec:	7f1b      	ldrb	r3, [r3, #28]
 801a0ee:	3301      	adds	r3, #1
 801a0f0:	b2da      	uxtb	r2, r3
 801a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f8:	7f1a      	ldrb	r2, [r3, #28]
 801a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0fc:	7f5b      	ldrb	r3, [r3, #29]
 801a0fe:	429a      	cmp	r2, r3
 801a100:	d325      	bcc.n	801a14e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a104:	2200      	movs	r2, #0
 801a106:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801a108:	4b1f      	ldr	r3, [pc, #124]	; (801a188 <tcp_slowtmr+0x5a4>)
 801a10a:	2200      	movs	r2, #0
 801a10c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a114:	2b00      	cmp	r3, #0
 801a116:	d00b      	beq.n	801a130 <tcp_slowtmr+0x54c>
 801a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a11e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a120:	6912      	ldr	r2, [r2, #16]
 801a122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a124:	4610      	mov	r0, r2
 801a126:	4798      	blx	r3
 801a128:	4603      	mov	r3, r0
 801a12a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a12e:	e002      	b.n	801a136 <tcp_slowtmr+0x552>
 801a130:	2300      	movs	r3, #0
 801a132:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801a136:	4b14      	ldr	r3, [pc, #80]	; (801a188 <tcp_slowtmr+0x5a4>)
 801a138:	781b      	ldrb	r3, [r3, #0]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d000      	beq.n	801a140 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801a13e:	e562      	b.n	8019c06 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801a140:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a144:	2b00      	cmp	r3, #0
 801a146:	d102      	bne.n	801a14e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801a148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a14a:	f004 f8a7 	bl	801e29c <tcp_output>
  while (pcb != NULL) {
 801a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a150:	2b00      	cmp	r3, #0
 801a152:	f47f ad5e 	bne.w	8019c12 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a156:	2300      	movs	r3, #0
 801a158:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801a15a:	4b0c      	ldr	r3, [pc, #48]	; (801a18c <tcp_slowtmr+0x5a8>)
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a160:	e069      	b.n	801a236 <tcp_slowtmr+0x652>
 801a162:	bf00      	nop
 801a164:	2400d3d0 	.word	0x2400d3d0
 801a168:	000a4cb8 	.word	0x000a4cb8
 801a16c:	10624dd3 	.word	0x10624dd3
 801a170:	000124f8 	.word	0x000124f8
 801a174:	2400d3dc 	.word	0x2400d3dc
 801a178:	08023d78 	.word	0x08023d78
 801a17c:	080241b8 	.word	0x080241b8
 801a180:	08023dc4 	.word	0x08023dc4
 801a184:	080241e4 	.word	0x080241e4
 801a188:	2400d3e4 	.word	0x2400d3e4
 801a18c:	2400d3e0 	.word	0x2400d3e0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a192:	7d1b      	ldrb	r3, [r3, #20]
 801a194:	2b0a      	cmp	r3, #10
 801a196:	d006      	beq.n	801a1a6 <tcp_slowtmr+0x5c2>
 801a198:	4b2b      	ldr	r3, [pc, #172]	; (801a248 <tcp_slowtmr+0x664>)
 801a19a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801a19e:	492b      	ldr	r1, [pc, #172]	; (801a24c <tcp_slowtmr+0x668>)
 801a1a0:	482b      	ldr	r0, [pc, #172]	; (801a250 <tcp_slowtmr+0x66c>)
 801a1a2:	f006 f9d5 	bl	8020550 <iprintf>
    pcb_remove = 0;
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a1ac:	4b29      	ldr	r3, [pc, #164]	; (801a254 <tcp_slowtmr+0x670>)
 801a1ae:	681a      	ldr	r2, [r3, #0]
 801a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b2:	6a1b      	ldr	r3, [r3, #32]
 801a1b4:	1ad3      	subs	r3, r2, r3
 801a1b6:	2bf0      	cmp	r3, #240	; 0xf0
 801a1b8:	d904      	bls.n	801a1c4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801a1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1be:	3301      	adds	r3, #1
 801a1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d02f      	beq.n	801a22c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a1cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a1ce:	f000 fbf9 	bl	801a9c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d010      	beq.n	801a1fa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a1d8:	4b1f      	ldr	r3, [pc, #124]	; (801a258 <tcp_slowtmr+0x674>)
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1de:	429a      	cmp	r2, r3
 801a1e0:	d106      	bne.n	801a1f0 <tcp_slowtmr+0x60c>
 801a1e2:	4b19      	ldr	r3, [pc, #100]	; (801a248 <tcp_slowtmr+0x664>)
 801a1e4:	f240 52af 	movw	r2, #1455	; 0x5af
 801a1e8:	491c      	ldr	r1, [pc, #112]	; (801a25c <tcp_slowtmr+0x678>)
 801a1ea:	4819      	ldr	r0, [pc, #100]	; (801a250 <tcp_slowtmr+0x66c>)
 801a1ec:	f006 f9b0 	bl	8020550 <iprintf>
        prev->next = pcb->next;
 801a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1f2:	68da      	ldr	r2, [r3, #12]
 801a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1f6:	60da      	str	r2, [r3, #12]
 801a1f8:	e00f      	b.n	801a21a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a1fa:	4b17      	ldr	r3, [pc, #92]	; (801a258 <tcp_slowtmr+0x674>)
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a200:	429a      	cmp	r2, r3
 801a202:	d006      	beq.n	801a212 <tcp_slowtmr+0x62e>
 801a204:	4b10      	ldr	r3, [pc, #64]	; (801a248 <tcp_slowtmr+0x664>)
 801a206:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a20a:	4915      	ldr	r1, [pc, #84]	; (801a260 <tcp_slowtmr+0x67c>)
 801a20c:	4810      	ldr	r0, [pc, #64]	; (801a250 <tcp_slowtmr+0x66c>)
 801a20e:	f006 f99f 	bl	8020550 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a214:	68db      	ldr	r3, [r3, #12]
 801a216:	4a10      	ldr	r2, [pc, #64]	; (801a258 <tcp_slowtmr+0x674>)
 801a218:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a21c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a220:	68db      	ldr	r3, [r3, #12]
 801a222:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a224:	69f8      	ldr	r0, [r7, #28]
 801a226:	f7fe fe11 	bl	8018e4c <tcp_free>
 801a22a:	e004      	b.n	801a236 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a22e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a232:	68db      	ldr	r3, [r3, #12]
 801a234:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d1a9      	bne.n	801a190 <tcp_slowtmr+0x5ac>
    }
  }
}
 801a23c:	bf00      	nop
 801a23e:	bf00      	nop
 801a240:	3730      	adds	r7, #48	; 0x30
 801a242:	46bd      	mov	sp, r7
 801a244:	bdb0      	pop	{r4, r5, r7, pc}
 801a246:	bf00      	nop
 801a248:	08023d78 	.word	0x08023d78
 801a24c:	08024210 	.word	0x08024210
 801a250:	08023dc4 	.word	0x08023dc4
 801a254:	2400d3d0 	.word	0x2400d3d0
 801a258:	2400d3e0 	.word	0x2400d3e0
 801a25c:	08024240 	.word	0x08024240
 801a260:	08024268 	.word	0x08024268

0801a264 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a264:	b580      	push	{r7, lr}
 801a266:	b082      	sub	sp, #8
 801a268:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a26a:	4b2d      	ldr	r3, [pc, #180]	; (801a320 <tcp_fasttmr+0xbc>)
 801a26c:	781b      	ldrb	r3, [r3, #0]
 801a26e:	3301      	adds	r3, #1
 801a270:	b2da      	uxtb	r2, r3
 801a272:	4b2b      	ldr	r3, [pc, #172]	; (801a320 <tcp_fasttmr+0xbc>)
 801a274:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a276:	4b2b      	ldr	r3, [pc, #172]	; (801a324 <tcp_fasttmr+0xc0>)
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a27c:	e048      	b.n	801a310 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	7f9a      	ldrb	r2, [r3, #30]
 801a282:	4b27      	ldr	r3, [pc, #156]	; (801a320 <tcp_fasttmr+0xbc>)
 801a284:	781b      	ldrb	r3, [r3, #0]
 801a286:	429a      	cmp	r2, r3
 801a288:	d03f      	beq.n	801a30a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a28a:	4b25      	ldr	r3, [pc, #148]	; (801a320 <tcp_fasttmr+0xbc>)
 801a28c:	781a      	ldrb	r2, [r3, #0]
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	8b5b      	ldrh	r3, [r3, #26]
 801a296:	f003 0301 	and.w	r3, r3, #1
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d010      	beq.n	801a2c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	8b5b      	ldrh	r3, [r3, #26]
 801a2a2:	f043 0302 	orr.w	r3, r3, #2
 801a2a6:	b29a      	uxth	r2, r3
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a2ac:	6878      	ldr	r0, [r7, #4]
 801a2ae:	f003 fff5 	bl	801e29c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	8b5b      	ldrh	r3, [r3, #26]
 801a2b6:	f023 0303 	bic.w	r3, r3, #3
 801a2ba:	b29a      	uxth	r2, r3
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	8b5b      	ldrh	r3, [r3, #26]
 801a2c4:	f003 0308 	and.w	r3, r3, #8
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d009      	beq.n	801a2e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	8b5b      	ldrh	r3, [r3, #26]
 801a2d0:	f023 0308 	bic.w	r3, r3, #8
 801a2d4:	b29a      	uxth	r2, r3
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a2da:	6878      	ldr	r0, [r7, #4]
 801a2dc:	f7fe ff4a 	bl	8019174 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	68db      	ldr	r3, [r3, #12]
 801a2e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d00a      	beq.n	801a304 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a2ee:	4b0e      	ldr	r3, [pc, #56]	; (801a328 <tcp_fasttmr+0xc4>)
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a2f4:	6878      	ldr	r0, [r7, #4]
 801a2f6:	f000 f819 	bl	801a32c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a2fa:	4b0b      	ldr	r3, [pc, #44]	; (801a328 <tcp_fasttmr+0xc4>)
 801a2fc:	781b      	ldrb	r3, [r3, #0]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d000      	beq.n	801a304 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a302:	e7b8      	b.n	801a276 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	607b      	str	r3, [r7, #4]
 801a308:	e002      	b.n	801a310 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	68db      	ldr	r3, [r3, #12]
 801a30e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	2b00      	cmp	r3, #0
 801a314:	d1b3      	bne.n	801a27e <tcp_fasttmr+0x1a>
    }
  }
}
 801a316:	bf00      	nop
 801a318:	bf00      	nop
 801a31a:	3708      	adds	r7, #8
 801a31c:	46bd      	mov	sp, r7
 801a31e:	bd80      	pop	{r7, pc}
 801a320:	2400d3e6 	.word	0x2400d3e6
 801a324:	2400d3dc 	.word	0x2400d3dc
 801a328:	2400d3e4 	.word	0x2400d3e4

0801a32c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801a32c:	b590      	push	{r4, r7, lr}
 801a32e:	b085      	sub	sp, #20
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d109      	bne.n	801a34e <tcp_process_refused_data+0x22>
 801a33a:	4b37      	ldr	r3, [pc, #220]	; (801a418 <tcp_process_refused_data+0xec>)
 801a33c:	f240 6209 	movw	r2, #1545	; 0x609
 801a340:	4936      	ldr	r1, [pc, #216]	; (801a41c <tcp_process_refused_data+0xf0>)
 801a342:	4837      	ldr	r0, [pc, #220]	; (801a420 <tcp_process_refused_data+0xf4>)
 801a344:	f006 f904 	bl	8020550 <iprintf>
 801a348:	f06f 030f 	mvn.w	r3, #15
 801a34c:	e060      	b.n	801a410 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a352:	7b5b      	ldrb	r3, [r3, #13]
 801a354:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a35a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	2200      	movs	r2, #0
 801a360:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d00b      	beq.n	801a384 <tcp_process_refused_data+0x58>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	6918      	ldr	r0, [r3, #16]
 801a376:	2300      	movs	r3, #0
 801a378:	68ba      	ldr	r2, [r7, #8]
 801a37a:	6879      	ldr	r1, [r7, #4]
 801a37c:	47a0      	blx	r4
 801a37e:	4603      	mov	r3, r0
 801a380:	73fb      	strb	r3, [r7, #15]
 801a382:	e007      	b.n	801a394 <tcp_process_refused_data+0x68>
 801a384:	2300      	movs	r3, #0
 801a386:	68ba      	ldr	r2, [r7, #8]
 801a388:	6879      	ldr	r1, [r7, #4]
 801a38a:	2000      	movs	r0, #0
 801a38c:	f000 f8a4 	bl	801a4d8 <tcp_recv_null>
 801a390:	4603      	mov	r3, r0
 801a392:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801a394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d12a      	bne.n	801a3f2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a39c:	7bbb      	ldrb	r3, [r7, #14]
 801a39e:	f003 0320 	and.w	r3, r3, #32
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d033      	beq.n	801a40e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a3aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a3ae:	d005      	beq.n	801a3bc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a3b4:	3301      	adds	r3, #1
 801a3b6:	b29a      	uxth	r2, r3
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d00b      	beq.n	801a3de <tcp_process_refused_data+0xb2>
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	6918      	ldr	r0, [r3, #16]
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	2200      	movs	r2, #0
 801a3d4:	6879      	ldr	r1, [r7, #4]
 801a3d6:	47a0      	blx	r4
 801a3d8:	4603      	mov	r3, r0
 801a3da:	73fb      	strb	r3, [r7, #15]
 801a3dc:	e001      	b.n	801a3e2 <tcp_process_refused_data+0xb6>
 801a3de:	2300      	movs	r3, #0
 801a3e0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801a3e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3e6:	f113 0f0d 	cmn.w	r3, #13
 801a3ea:	d110      	bne.n	801a40e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801a3ec:	f06f 030c 	mvn.w	r3, #12
 801a3f0:	e00e      	b.n	801a410 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801a3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3f6:	f113 0f0d 	cmn.w	r3, #13
 801a3fa:	d102      	bne.n	801a402 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801a3fc:	f06f 030c 	mvn.w	r3, #12
 801a400:	e006      	b.n	801a410 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	68ba      	ldr	r2, [r7, #8]
 801a406:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801a408:	f06f 0304 	mvn.w	r3, #4
 801a40c:	e000      	b.n	801a410 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801a40e:	2300      	movs	r3, #0
}
 801a410:	4618      	mov	r0, r3
 801a412:	3714      	adds	r7, #20
 801a414:	46bd      	mov	sp, r7
 801a416:	bd90      	pop	{r4, r7, pc}
 801a418:	08023d78 	.word	0x08023d78
 801a41c:	08024290 	.word	0x08024290
 801a420:	08023dc4 	.word	0x08023dc4

0801a424 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801a424:	b580      	push	{r7, lr}
 801a426:	b084      	sub	sp, #16
 801a428:	af00      	add	r7, sp, #0
 801a42a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801a42c:	e007      	b.n	801a43e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801a434:	6878      	ldr	r0, [r7, #4]
 801a436:	f000 f80a 	bl	801a44e <tcp_seg_free>
    seg = next;
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d1f4      	bne.n	801a42e <tcp_segs_free+0xa>
  }
}
 801a444:	bf00      	nop
 801a446:	bf00      	nop
 801a448:	3710      	adds	r7, #16
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}

0801a44e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801a44e:	b580      	push	{r7, lr}
 801a450:	b082      	sub	sp, #8
 801a452:	af00      	add	r7, sp, #0
 801a454:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d00c      	beq.n	801a476 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	685b      	ldr	r3, [r3, #4]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d004      	beq.n	801a46e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	685b      	ldr	r3, [r3, #4]
 801a468:	4618      	mov	r0, r3
 801a46a:	f7fd f97f 	bl	801776c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801a46e:	6879      	ldr	r1, [r7, #4]
 801a470:	2003      	movs	r0, #3
 801a472:	f7fc f80f 	bl	8016494 <memp_free>
  }
}
 801a476:	bf00      	nop
 801a478:	3708      	adds	r7, #8
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}
	...

0801a480 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801a480:	b580      	push	{r7, lr}
 801a482:	b084      	sub	sp, #16
 801a484:	af00      	add	r7, sp, #0
 801a486:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d106      	bne.n	801a49c <tcp_seg_copy+0x1c>
 801a48e:	4b0f      	ldr	r3, [pc, #60]	; (801a4cc <tcp_seg_copy+0x4c>)
 801a490:	f240 6282 	movw	r2, #1666	; 0x682
 801a494:	490e      	ldr	r1, [pc, #56]	; (801a4d0 <tcp_seg_copy+0x50>)
 801a496:	480f      	ldr	r0, [pc, #60]	; (801a4d4 <tcp_seg_copy+0x54>)
 801a498:	f006 f85a 	bl	8020550 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801a49c:	2003      	movs	r0, #3
 801a49e:	f7fb ff83 	bl	80163a8 <memp_malloc>
 801a4a2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d101      	bne.n	801a4ae <tcp_seg_copy+0x2e>
    return NULL;
 801a4aa:	2300      	movs	r3, #0
 801a4ac:	e00a      	b.n	801a4c4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801a4ae:	2210      	movs	r2, #16
 801a4b0:	6879      	ldr	r1, [r7, #4]
 801a4b2:	68f8      	ldr	r0, [r7, #12]
 801a4b4:	f005 ff56 	bl	8020364 <memcpy>
  pbuf_ref(cseg->p);
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	4618      	mov	r0, r3
 801a4be:	f7fd f9fb 	bl	80178b8 <pbuf_ref>
  return cseg;
 801a4c2:	68fb      	ldr	r3, [r7, #12]
}
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	3710      	adds	r7, #16
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}
 801a4cc:	08023d78 	.word	0x08023d78
 801a4d0:	080242d4 	.word	0x080242d4
 801a4d4:	08023dc4 	.word	0x08023dc4

0801a4d8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b084      	sub	sp, #16
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	60f8      	str	r0, [r7, #12]
 801a4e0:	60b9      	str	r1, [r7, #8]
 801a4e2:	607a      	str	r2, [r7, #4]
 801a4e4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801a4e6:	68bb      	ldr	r3, [r7, #8]
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d109      	bne.n	801a500 <tcp_recv_null+0x28>
 801a4ec:	4b12      	ldr	r3, [pc, #72]	; (801a538 <tcp_recv_null+0x60>)
 801a4ee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a4f2:	4912      	ldr	r1, [pc, #72]	; (801a53c <tcp_recv_null+0x64>)
 801a4f4:	4812      	ldr	r0, [pc, #72]	; (801a540 <tcp_recv_null+0x68>)
 801a4f6:	f006 f82b 	bl	8020550 <iprintf>
 801a4fa:	f06f 030f 	mvn.w	r3, #15
 801a4fe:	e016      	b.n	801a52e <tcp_recv_null+0x56>

  if (p != NULL) {
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d009      	beq.n	801a51a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	891b      	ldrh	r3, [r3, #8]
 801a50a:	4619      	mov	r1, r3
 801a50c:	68b8      	ldr	r0, [r7, #8]
 801a50e:	f7ff f9bb 	bl	8019888 <tcp_recved>
    pbuf_free(p);
 801a512:	6878      	ldr	r0, [r7, #4]
 801a514:	f7fd f92a 	bl	801776c <pbuf_free>
 801a518:	e008      	b.n	801a52c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801a51a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d104      	bne.n	801a52c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801a522:	68b8      	ldr	r0, [r7, #8]
 801a524:	f7fe fe90 	bl	8019248 <tcp_close>
 801a528:	4603      	mov	r3, r0
 801a52a:	e000      	b.n	801a52e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801a52c:	2300      	movs	r3, #0
}
 801a52e:	4618      	mov	r0, r3
 801a530:	3710      	adds	r7, #16
 801a532:	46bd      	mov	sp, r7
 801a534:	bd80      	pop	{r7, pc}
 801a536:	bf00      	nop
 801a538:	08023d78 	.word	0x08023d78
 801a53c:	080242f0 	.word	0x080242f0
 801a540:	08023dc4 	.word	0x08023dc4

0801a544 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801a544:	b580      	push	{r7, lr}
 801a546:	b086      	sub	sp, #24
 801a548:	af00      	add	r7, sp, #0
 801a54a:	4603      	mov	r3, r0
 801a54c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801a54e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a552:	2b00      	cmp	r3, #0
 801a554:	db01      	blt.n	801a55a <tcp_kill_prio+0x16>
 801a556:	79fb      	ldrb	r3, [r7, #7]
 801a558:	e000      	b.n	801a55c <tcp_kill_prio+0x18>
 801a55a:	237f      	movs	r3, #127	; 0x7f
 801a55c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801a55e:	7afb      	ldrb	r3, [r7, #11]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d034      	beq.n	801a5ce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801a564:	7afb      	ldrb	r3, [r7, #11]
 801a566:	3b01      	subs	r3, #1
 801a568:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801a56a:	2300      	movs	r3, #0
 801a56c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a56e:	2300      	movs	r3, #0
 801a570:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a572:	4b19      	ldr	r3, [pc, #100]	; (801a5d8 <tcp_kill_prio+0x94>)
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	617b      	str	r3, [r7, #20]
 801a578:	e01f      	b.n	801a5ba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801a57a:	697b      	ldr	r3, [r7, #20]
 801a57c:	7d5b      	ldrb	r3, [r3, #21]
 801a57e:	7afa      	ldrb	r2, [r7, #11]
 801a580:	429a      	cmp	r2, r3
 801a582:	d80c      	bhi.n	801a59e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a584:	697b      	ldr	r3, [r7, #20]
 801a586:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801a588:	7afa      	ldrb	r2, [r7, #11]
 801a58a:	429a      	cmp	r2, r3
 801a58c:	d112      	bne.n	801a5b4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a58e:	4b13      	ldr	r3, [pc, #76]	; (801a5dc <tcp_kill_prio+0x98>)
 801a590:	681a      	ldr	r2, [r3, #0]
 801a592:	697b      	ldr	r3, [r7, #20]
 801a594:	6a1b      	ldr	r3, [r3, #32]
 801a596:	1ad3      	subs	r3, r2, r3
 801a598:	68fa      	ldr	r2, [r7, #12]
 801a59a:	429a      	cmp	r2, r3
 801a59c:	d80a      	bhi.n	801a5b4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801a59e:	4b0f      	ldr	r3, [pc, #60]	; (801a5dc <tcp_kill_prio+0x98>)
 801a5a0:	681a      	ldr	r2, [r3, #0]
 801a5a2:	697b      	ldr	r3, [r7, #20]
 801a5a4:	6a1b      	ldr	r3, [r3, #32]
 801a5a6:	1ad3      	subs	r3, r2, r3
 801a5a8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801a5aa:	697b      	ldr	r3, [r7, #20]
 801a5ac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801a5ae:	697b      	ldr	r3, [r7, #20]
 801a5b0:	7d5b      	ldrb	r3, [r3, #21]
 801a5b2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a5b4:	697b      	ldr	r3, [r7, #20]
 801a5b6:	68db      	ldr	r3, [r3, #12]
 801a5b8:	617b      	str	r3, [r7, #20]
 801a5ba:	697b      	ldr	r3, [r7, #20]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d1dc      	bne.n	801a57a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801a5c0:	693b      	ldr	r3, [r7, #16]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d004      	beq.n	801a5d0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a5c6:	6938      	ldr	r0, [r7, #16]
 801a5c8:	f7fe ff84 	bl	80194d4 <tcp_abort>
 801a5cc:	e000      	b.n	801a5d0 <tcp_kill_prio+0x8c>
    return;
 801a5ce:	bf00      	nop
  }
}
 801a5d0:	3718      	adds	r7, #24
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	bd80      	pop	{r7, pc}
 801a5d6:	bf00      	nop
 801a5d8:	2400d3dc 	.word	0x2400d3dc
 801a5dc:	2400d3d0 	.word	0x2400d3d0

0801a5e0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801a5e0:	b580      	push	{r7, lr}
 801a5e2:	b086      	sub	sp, #24
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801a5ea:	79fb      	ldrb	r3, [r7, #7]
 801a5ec:	2b08      	cmp	r3, #8
 801a5ee:	d009      	beq.n	801a604 <tcp_kill_state+0x24>
 801a5f0:	79fb      	ldrb	r3, [r7, #7]
 801a5f2:	2b09      	cmp	r3, #9
 801a5f4:	d006      	beq.n	801a604 <tcp_kill_state+0x24>
 801a5f6:	4b1a      	ldr	r3, [pc, #104]	; (801a660 <tcp_kill_state+0x80>)
 801a5f8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801a5fc:	4919      	ldr	r1, [pc, #100]	; (801a664 <tcp_kill_state+0x84>)
 801a5fe:	481a      	ldr	r0, [pc, #104]	; (801a668 <tcp_kill_state+0x88>)
 801a600:	f005 ffa6 	bl	8020550 <iprintf>

  inactivity = 0;
 801a604:	2300      	movs	r3, #0
 801a606:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a608:	2300      	movs	r3, #0
 801a60a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a60c:	4b17      	ldr	r3, [pc, #92]	; (801a66c <tcp_kill_state+0x8c>)
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	617b      	str	r3, [r7, #20]
 801a612:	e017      	b.n	801a644 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801a614:	697b      	ldr	r3, [r7, #20]
 801a616:	7d1b      	ldrb	r3, [r3, #20]
 801a618:	79fa      	ldrb	r2, [r7, #7]
 801a61a:	429a      	cmp	r2, r3
 801a61c:	d10f      	bne.n	801a63e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a61e:	4b14      	ldr	r3, [pc, #80]	; (801a670 <tcp_kill_state+0x90>)
 801a620:	681a      	ldr	r2, [r3, #0]
 801a622:	697b      	ldr	r3, [r7, #20]
 801a624:	6a1b      	ldr	r3, [r3, #32]
 801a626:	1ad3      	subs	r3, r2, r3
 801a628:	68fa      	ldr	r2, [r7, #12]
 801a62a:	429a      	cmp	r2, r3
 801a62c:	d807      	bhi.n	801a63e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801a62e:	4b10      	ldr	r3, [pc, #64]	; (801a670 <tcp_kill_state+0x90>)
 801a630:	681a      	ldr	r2, [r3, #0]
 801a632:	697b      	ldr	r3, [r7, #20]
 801a634:	6a1b      	ldr	r3, [r3, #32]
 801a636:	1ad3      	subs	r3, r2, r3
 801a638:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801a63a:	697b      	ldr	r3, [r7, #20]
 801a63c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	68db      	ldr	r3, [r3, #12]
 801a642:	617b      	str	r3, [r7, #20]
 801a644:	697b      	ldr	r3, [r7, #20]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d1e4      	bne.n	801a614 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801a64a:	693b      	ldr	r3, [r7, #16]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d003      	beq.n	801a658 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801a650:	2100      	movs	r1, #0
 801a652:	6938      	ldr	r0, [r7, #16]
 801a654:	f7fe fe80 	bl	8019358 <tcp_abandon>
  }
}
 801a658:	bf00      	nop
 801a65a:	3718      	adds	r7, #24
 801a65c:	46bd      	mov	sp, r7
 801a65e:	bd80      	pop	{r7, pc}
 801a660:	08023d78 	.word	0x08023d78
 801a664:	0802430c 	.word	0x0802430c
 801a668:	08023dc4 	.word	0x08023dc4
 801a66c:	2400d3dc 	.word	0x2400d3dc
 801a670:	2400d3d0 	.word	0x2400d3d0

0801a674 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801a674:	b580      	push	{r7, lr}
 801a676:	b084      	sub	sp, #16
 801a678:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801a67a:	2300      	movs	r3, #0
 801a67c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801a67e:	2300      	movs	r3, #0
 801a680:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a682:	4b12      	ldr	r3, [pc, #72]	; (801a6cc <tcp_kill_timewait+0x58>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	60fb      	str	r3, [r7, #12]
 801a688:	e012      	b.n	801a6b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a68a:	4b11      	ldr	r3, [pc, #68]	; (801a6d0 <tcp_kill_timewait+0x5c>)
 801a68c:	681a      	ldr	r2, [r3, #0]
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	6a1b      	ldr	r3, [r3, #32]
 801a692:	1ad3      	subs	r3, r2, r3
 801a694:	687a      	ldr	r2, [r7, #4]
 801a696:	429a      	cmp	r2, r3
 801a698:	d807      	bhi.n	801a6aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801a69a:	4b0d      	ldr	r3, [pc, #52]	; (801a6d0 <tcp_kill_timewait+0x5c>)
 801a69c:	681a      	ldr	r2, [r3, #0]
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	6a1b      	ldr	r3, [r3, #32]
 801a6a2:	1ad3      	subs	r3, r2, r3
 801a6a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	68db      	ldr	r3, [r3, #12]
 801a6ae:	60fb      	str	r3, [r7, #12]
 801a6b0:	68fb      	ldr	r3, [r7, #12]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d1e9      	bne.n	801a68a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d002      	beq.n	801a6c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a6bc:	68b8      	ldr	r0, [r7, #8]
 801a6be:	f7fe ff09 	bl	80194d4 <tcp_abort>
  }
}
 801a6c2:	bf00      	nop
 801a6c4:	3710      	adds	r7, #16
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	bd80      	pop	{r7, pc}
 801a6ca:	bf00      	nop
 801a6cc:	2400d3e0 	.word	0x2400d3e0
 801a6d0:	2400d3d0 	.word	0x2400d3d0

0801a6d4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b082      	sub	sp, #8
 801a6d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801a6da:	4b10      	ldr	r3, [pc, #64]	; (801a71c <tcp_handle_closepend+0x48>)
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a6e0:	e014      	b.n	801a70c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	68db      	ldr	r3, [r3, #12]
 801a6e6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	8b5b      	ldrh	r3, [r3, #26]
 801a6ec:	f003 0308 	and.w	r3, r3, #8
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d009      	beq.n	801a708 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	8b5b      	ldrh	r3, [r3, #26]
 801a6f8:	f023 0308 	bic.w	r3, r3, #8
 801a6fc:	b29a      	uxth	r2, r3
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801a702:	6878      	ldr	r0, [r7, #4]
 801a704:	f7fe fd36 	bl	8019174 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801a708:	683b      	ldr	r3, [r7, #0]
 801a70a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d1e7      	bne.n	801a6e2 <tcp_handle_closepend+0xe>
  }
}
 801a712:	bf00      	nop
 801a714:	bf00      	nop
 801a716:	3708      	adds	r7, #8
 801a718:	46bd      	mov	sp, r7
 801a71a:	bd80      	pop	{r7, pc}
 801a71c:	2400d3dc 	.word	0x2400d3dc

0801a720 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b084      	sub	sp, #16
 801a724:	af00      	add	r7, sp, #0
 801a726:	4603      	mov	r3, r0
 801a728:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a72a:	2001      	movs	r0, #1
 801a72c:	f7fb fe3c 	bl	80163a8 <memp_malloc>
 801a730:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d126      	bne.n	801a786 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801a738:	f7ff ffcc 	bl	801a6d4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801a73c:	f7ff ff9a 	bl	801a674 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a740:	2001      	movs	r0, #1
 801a742:	f7fb fe31 	bl	80163a8 <memp_malloc>
 801a746:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d11b      	bne.n	801a786 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801a74e:	2009      	movs	r0, #9
 801a750:	f7ff ff46 	bl	801a5e0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a754:	2001      	movs	r0, #1
 801a756:	f7fb fe27 	bl	80163a8 <memp_malloc>
 801a75a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d111      	bne.n	801a786 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801a762:	2008      	movs	r0, #8
 801a764:	f7ff ff3c 	bl	801a5e0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a768:	2001      	movs	r0, #1
 801a76a:	f7fb fe1d 	bl	80163a8 <memp_malloc>
 801a76e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d107      	bne.n	801a786 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801a776:	79fb      	ldrb	r3, [r7, #7]
 801a778:	4618      	mov	r0, r3
 801a77a:	f7ff fee3 	bl	801a544 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a77e:	2001      	movs	r0, #1
 801a780:	f7fb fe12 	bl	80163a8 <memp_malloc>
 801a784:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d03f      	beq.n	801a80c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a78c:	229c      	movs	r2, #156	; 0x9c
 801a78e:	2100      	movs	r1, #0
 801a790:	68f8      	ldr	r0, [r7, #12]
 801a792:	f005 fdf5 	bl	8020380 <memset>
    pcb->prio = prio;
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	79fa      	ldrb	r2, [r7, #7]
 801a79a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a7a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a7ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	22ff      	movs	r2, #255	; 0xff
 801a7ba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a7c2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	2206      	movs	r2, #6
 801a7c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	2206      	movs	r2, #6
 801a7d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a7d8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	2201      	movs	r2, #1
 801a7de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801a7e2:	4b0d      	ldr	r3, [pc, #52]	; (801a818 <tcp_alloc+0xf8>)
 801a7e4:	681a      	ldr	r2, [r3, #0]
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801a7ea:	4b0c      	ldr	r3, [pc, #48]	; (801a81c <tcp_alloc+0xfc>)
 801a7ec:	781a      	ldrb	r2, [r3, #0]
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a7f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	4a08      	ldr	r2, [pc, #32]	; (801a820 <tcp_alloc+0x100>)
 801a800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	4a07      	ldr	r2, [pc, #28]	; (801a824 <tcp_alloc+0x104>)
 801a808:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801a80c:	68fb      	ldr	r3, [r7, #12]
}
 801a80e:	4618      	mov	r0, r3
 801a810:	3710      	adds	r7, #16
 801a812:	46bd      	mov	sp, r7
 801a814:	bd80      	pop	{r7, pc}
 801a816:	bf00      	nop
 801a818:	2400d3d0 	.word	0x2400d3d0
 801a81c:	2400d3e6 	.word	0x2400d3e6
 801a820:	0801a4d9 	.word	0x0801a4d9
 801a824:	006ddd00 	.word	0x006ddd00

0801a828 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b084      	sub	sp, #16
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	4603      	mov	r3, r0
 801a830:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801a832:	2040      	movs	r0, #64	; 0x40
 801a834:	f7ff ff74 	bl	801a720 <tcp_alloc>
 801a838:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a83a:	68fb      	ldr	r3, [r7, #12]
}
 801a83c:	4618      	mov	r0, r3
 801a83e:	3710      	adds	r7, #16
 801a840:	46bd      	mov	sp, r7
 801a842:	bd80      	pop	{r7, pc}

0801a844 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801a844:	b480      	push	{r7}
 801a846:	b083      	sub	sp, #12
 801a848:	af00      	add	r7, sp, #0
 801a84a:	6078      	str	r0, [r7, #4]
 801a84c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d002      	beq.n	801a85a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	683a      	ldr	r2, [r7, #0]
 801a858:	611a      	str	r2, [r3, #16]
  }
}
 801a85a:	bf00      	nop
 801a85c:	370c      	adds	r7, #12
 801a85e:	46bd      	mov	sp, r7
 801a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a864:	4770      	bx	lr
	...

0801a868 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801a868:	b580      	push	{r7, lr}
 801a86a:	b082      	sub	sp, #8
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	6078      	str	r0, [r7, #4]
 801a870:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d00e      	beq.n	801a896 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	7d1b      	ldrb	r3, [r3, #20]
 801a87c:	2b01      	cmp	r3, #1
 801a87e:	d106      	bne.n	801a88e <tcp_recv+0x26>
 801a880:	4b07      	ldr	r3, [pc, #28]	; (801a8a0 <tcp_recv+0x38>)
 801a882:	f240 72df 	movw	r2, #2015	; 0x7df
 801a886:	4907      	ldr	r1, [pc, #28]	; (801a8a4 <tcp_recv+0x3c>)
 801a888:	4807      	ldr	r0, [pc, #28]	; (801a8a8 <tcp_recv+0x40>)
 801a88a:	f005 fe61 	bl	8020550 <iprintf>
    pcb->recv = recv;
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	683a      	ldr	r2, [r7, #0]
 801a892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801a896:	bf00      	nop
 801a898:	3708      	adds	r7, #8
 801a89a:	46bd      	mov	sp, r7
 801a89c:	bd80      	pop	{r7, pc}
 801a89e:	bf00      	nop
 801a8a0:	08023d78 	.word	0x08023d78
 801a8a4:	0802431c 	.word	0x0802431c
 801a8a8:	08023dc4 	.word	0x08023dc4

0801a8ac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b082      	sub	sp, #8
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
 801a8b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d00e      	beq.n	801a8da <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	7d1b      	ldrb	r3, [r3, #20]
 801a8c0:	2b01      	cmp	r3, #1
 801a8c2:	d106      	bne.n	801a8d2 <tcp_sent+0x26>
 801a8c4:	4b07      	ldr	r3, [pc, #28]	; (801a8e4 <tcp_sent+0x38>)
 801a8c6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801a8ca:	4907      	ldr	r1, [pc, #28]	; (801a8e8 <tcp_sent+0x3c>)
 801a8cc:	4807      	ldr	r0, [pc, #28]	; (801a8ec <tcp_sent+0x40>)
 801a8ce:	f005 fe3f 	bl	8020550 <iprintf>
    pcb->sent = sent;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	683a      	ldr	r2, [r7, #0]
 801a8d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801a8da:	bf00      	nop
 801a8dc:	3708      	adds	r7, #8
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	bd80      	pop	{r7, pc}
 801a8e2:	bf00      	nop
 801a8e4:	08023d78 	.word	0x08023d78
 801a8e8:	08024344 	.word	0x08024344
 801a8ec:	08023dc4 	.word	0x08023dc4

0801a8f0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b082      	sub	sp, #8
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
 801a8f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d00e      	beq.n	801a91e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	7d1b      	ldrb	r3, [r3, #20]
 801a904:	2b01      	cmp	r3, #1
 801a906:	d106      	bne.n	801a916 <tcp_err+0x26>
 801a908:	4b07      	ldr	r3, [pc, #28]	; (801a928 <tcp_err+0x38>)
 801a90a:	f640 020d 	movw	r2, #2061	; 0x80d
 801a90e:	4907      	ldr	r1, [pc, #28]	; (801a92c <tcp_err+0x3c>)
 801a910:	4807      	ldr	r0, [pc, #28]	; (801a930 <tcp_err+0x40>)
 801a912:	f005 fe1d 	bl	8020550 <iprintf>
    pcb->errf = err;
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	683a      	ldr	r2, [r7, #0]
 801a91a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801a91e:	bf00      	nop
 801a920:	3708      	adds	r7, #8
 801a922:	46bd      	mov	sp, r7
 801a924:	bd80      	pop	{r7, pc}
 801a926:	bf00      	nop
 801a928:	08023d78 	.word	0x08023d78
 801a92c:	0802436c 	.word	0x0802436c
 801a930:	08023dc4 	.word	0x08023dc4

0801a934 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801a934:	b480      	push	{r7}
 801a936:	b085      	sub	sp, #20
 801a938:	af00      	add	r7, sp, #0
 801a93a:	6078      	str	r0, [r7, #4]
 801a93c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d008      	beq.n	801a956 <tcp_accept+0x22>
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	7d1b      	ldrb	r3, [r3, #20]
 801a948:	2b01      	cmp	r3, #1
 801a94a:	d104      	bne.n	801a956 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	683a      	ldr	r2, [r7, #0]
 801a954:	619a      	str	r2, [r3, #24]
  }
}
 801a956:	bf00      	nop
 801a958:	3714      	adds	r7, #20
 801a95a:	46bd      	mov	sp, r7
 801a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a960:	4770      	bx	lr
	...

0801a964 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b084      	sub	sp, #16
 801a968:	af00      	add	r7, sp, #0
 801a96a:	60f8      	str	r0, [r7, #12]
 801a96c:	60b9      	str	r1, [r7, #8]
 801a96e:	4613      	mov	r3, r2
 801a970:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	2b00      	cmp	r3, #0
 801a976:	d107      	bne.n	801a988 <tcp_poll+0x24>
 801a978:	4b0e      	ldr	r3, [pc, #56]	; (801a9b4 <tcp_poll+0x50>)
 801a97a:	f640 023d 	movw	r2, #2109	; 0x83d
 801a97e:	490e      	ldr	r1, [pc, #56]	; (801a9b8 <tcp_poll+0x54>)
 801a980:	480e      	ldr	r0, [pc, #56]	; (801a9bc <tcp_poll+0x58>)
 801a982:	f005 fde5 	bl	8020550 <iprintf>
 801a986:	e011      	b.n	801a9ac <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	7d1b      	ldrb	r3, [r3, #20]
 801a98c:	2b01      	cmp	r3, #1
 801a98e:	d106      	bne.n	801a99e <tcp_poll+0x3a>
 801a990:	4b08      	ldr	r3, [pc, #32]	; (801a9b4 <tcp_poll+0x50>)
 801a992:	f640 023e 	movw	r2, #2110	; 0x83e
 801a996:	490a      	ldr	r1, [pc, #40]	; (801a9c0 <tcp_poll+0x5c>)
 801a998:	4808      	ldr	r0, [pc, #32]	; (801a9bc <tcp_poll+0x58>)
 801a99a:	f005 fdd9 	bl	8020550 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	68ba      	ldr	r2, [r7, #8]
 801a9a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	79fa      	ldrb	r2, [r7, #7]
 801a9aa:	775a      	strb	r2, [r3, #29]
}
 801a9ac:	3710      	adds	r7, #16
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	bd80      	pop	{r7, pc}
 801a9b2:	bf00      	nop
 801a9b4:	08023d78 	.word	0x08023d78
 801a9b8:	08024394 	.word	0x08024394
 801a9bc:	08023dc4 	.word	0x08023dc4
 801a9c0:	080243ac 	.word	0x080243ac

0801a9c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b082      	sub	sp, #8
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d107      	bne.n	801a9e2 <tcp_pcb_purge+0x1e>
 801a9d2:	4b21      	ldr	r3, [pc, #132]	; (801aa58 <tcp_pcb_purge+0x94>)
 801a9d4:	f640 0251 	movw	r2, #2129	; 0x851
 801a9d8:	4920      	ldr	r1, [pc, #128]	; (801aa5c <tcp_pcb_purge+0x98>)
 801a9da:	4821      	ldr	r0, [pc, #132]	; (801aa60 <tcp_pcb_purge+0x9c>)
 801a9dc:	f005 fdb8 	bl	8020550 <iprintf>
 801a9e0:	e037      	b.n	801aa52 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	7d1b      	ldrb	r3, [r3, #20]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d033      	beq.n	801aa52 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801a9ee:	2b0a      	cmp	r3, #10
 801a9f0:	d02f      	beq.n	801aa52 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801a9f6:	2b01      	cmp	r3, #1
 801a9f8:	d02b      	beq.n	801aa52 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d007      	beq.n	801aa12 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa06:	4618      	mov	r0, r3
 801aa08:	f7fc feb0 	bl	801776c <pbuf_free>
      pcb->refused_data = NULL;
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	2200      	movs	r2, #0
 801aa10:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d002      	beq.n	801aa20 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801aa1a:	6878      	ldr	r0, [r7, #4]
 801aa1c:	f000 f986 	bl	801ad2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa26:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	f7ff fcf9 	bl	801a424 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa36:	4618      	mov	r0, r3
 801aa38:	f7ff fcf4 	bl	801a424 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2200      	movs	r2, #0
 801aa40:	66da      	str	r2, [r3, #108]	; 0x6c
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	2200      	movs	r2, #0
 801aa4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801aa52:	3708      	adds	r7, #8
 801aa54:	46bd      	mov	sp, r7
 801aa56:	bd80      	pop	{r7, pc}
 801aa58:	08023d78 	.word	0x08023d78
 801aa5c:	080243cc 	.word	0x080243cc
 801aa60:	08023dc4 	.word	0x08023dc4

0801aa64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b084      	sub	sp, #16
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
 801aa6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801aa6e:	683b      	ldr	r3, [r7, #0]
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d106      	bne.n	801aa82 <tcp_pcb_remove+0x1e>
 801aa74:	4b3e      	ldr	r3, [pc, #248]	; (801ab70 <tcp_pcb_remove+0x10c>)
 801aa76:	f640 0283 	movw	r2, #2179	; 0x883
 801aa7a:	493e      	ldr	r1, [pc, #248]	; (801ab74 <tcp_pcb_remove+0x110>)
 801aa7c:	483e      	ldr	r0, [pc, #248]	; (801ab78 <tcp_pcb_remove+0x114>)
 801aa7e:	f005 fd67 	bl	8020550 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d106      	bne.n	801aa96 <tcp_pcb_remove+0x32>
 801aa88:	4b39      	ldr	r3, [pc, #228]	; (801ab70 <tcp_pcb_remove+0x10c>)
 801aa8a:	f640 0284 	movw	r2, #2180	; 0x884
 801aa8e:	493b      	ldr	r1, [pc, #236]	; (801ab7c <tcp_pcb_remove+0x118>)
 801aa90:	4839      	ldr	r0, [pc, #228]	; (801ab78 <tcp_pcb_remove+0x114>)
 801aa92:	f005 fd5d 	bl	8020550 <iprintf>

  TCP_RMV(pcblist, pcb);
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	683a      	ldr	r2, [r7, #0]
 801aa9c:	429a      	cmp	r2, r3
 801aa9e:	d105      	bne.n	801aaac <tcp_pcb_remove+0x48>
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	68da      	ldr	r2, [r3, #12]
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	601a      	str	r2, [r3, #0]
 801aaaa:	e013      	b.n	801aad4 <tcp_pcb_remove+0x70>
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	60fb      	str	r3, [r7, #12]
 801aab2:	e00c      	b.n	801aace <tcp_pcb_remove+0x6a>
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	68db      	ldr	r3, [r3, #12]
 801aab8:	683a      	ldr	r2, [r7, #0]
 801aaba:	429a      	cmp	r2, r3
 801aabc:	d104      	bne.n	801aac8 <tcp_pcb_remove+0x64>
 801aabe:	683b      	ldr	r3, [r7, #0]
 801aac0:	68da      	ldr	r2, [r3, #12]
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	60da      	str	r2, [r3, #12]
 801aac6:	e005      	b.n	801aad4 <tcp_pcb_remove+0x70>
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	68db      	ldr	r3, [r3, #12]
 801aacc:	60fb      	str	r3, [r7, #12]
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d1ef      	bne.n	801aab4 <tcp_pcb_remove+0x50>
 801aad4:	683b      	ldr	r3, [r7, #0]
 801aad6:	2200      	movs	r2, #0
 801aad8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801aada:	6838      	ldr	r0, [r7, #0]
 801aadc:	f7ff ff72 	bl	801a9c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801aae0:	683b      	ldr	r3, [r7, #0]
 801aae2:	7d1b      	ldrb	r3, [r3, #20]
 801aae4:	2b0a      	cmp	r3, #10
 801aae6:	d013      	beq.n	801ab10 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801aae8:	683b      	ldr	r3, [r7, #0]
 801aaea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801aaec:	2b01      	cmp	r3, #1
 801aaee:	d00f      	beq.n	801ab10 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801aaf0:	683b      	ldr	r3, [r7, #0]
 801aaf2:	8b5b      	ldrh	r3, [r3, #26]
 801aaf4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d009      	beq.n	801ab10 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801aafc:	683b      	ldr	r3, [r7, #0]
 801aafe:	8b5b      	ldrh	r3, [r3, #26]
 801ab00:	f043 0302 	orr.w	r3, r3, #2
 801ab04:	b29a      	uxth	r2, r3
 801ab06:	683b      	ldr	r3, [r7, #0]
 801ab08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801ab0a:	6838      	ldr	r0, [r7, #0]
 801ab0c:	f003 fbc6 	bl	801e29c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801ab10:	683b      	ldr	r3, [r7, #0]
 801ab12:	7d1b      	ldrb	r3, [r3, #20]
 801ab14:	2b01      	cmp	r3, #1
 801ab16:	d020      	beq.n	801ab5a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801ab18:	683b      	ldr	r3, [r7, #0]
 801ab1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d006      	beq.n	801ab2e <tcp_pcb_remove+0xca>
 801ab20:	4b13      	ldr	r3, [pc, #76]	; (801ab70 <tcp_pcb_remove+0x10c>)
 801ab22:	f640 0293 	movw	r2, #2195	; 0x893
 801ab26:	4916      	ldr	r1, [pc, #88]	; (801ab80 <tcp_pcb_remove+0x11c>)
 801ab28:	4813      	ldr	r0, [pc, #76]	; (801ab78 <tcp_pcb_remove+0x114>)
 801ab2a:	f005 fd11 	bl	8020550 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801ab2e:	683b      	ldr	r3, [r7, #0]
 801ab30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d006      	beq.n	801ab44 <tcp_pcb_remove+0xe0>
 801ab36:	4b0e      	ldr	r3, [pc, #56]	; (801ab70 <tcp_pcb_remove+0x10c>)
 801ab38:	f640 0294 	movw	r2, #2196	; 0x894
 801ab3c:	4911      	ldr	r1, [pc, #68]	; (801ab84 <tcp_pcb_remove+0x120>)
 801ab3e:	480e      	ldr	r0, [pc, #56]	; (801ab78 <tcp_pcb_remove+0x114>)
 801ab40:	f005 fd06 	bl	8020550 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801ab44:	683b      	ldr	r3, [r7, #0]
 801ab46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d006      	beq.n	801ab5a <tcp_pcb_remove+0xf6>
 801ab4c:	4b08      	ldr	r3, [pc, #32]	; (801ab70 <tcp_pcb_remove+0x10c>)
 801ab4e:	f640 0296 	movw	r2, #2198	; 0x896
 801ab52:	490d      	ldr	r1, [pc, #52]	; (801ab88 <tcp_pcb_remove+0x124>)
 801ab54:	4808      	ldr	r0, [pc, #32]	; (801ab78 <tcp_pcb_remove+0x114>)
 801ab56:	f005 fcfb 	bl	8020550 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801ab5a:	683b      	ldr	r3, [r7, #0]
 801ab5c:	2200      	movs	r2, #0
 801ab5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801ab60:	683b      	ldr	r3, [r7, #0]
 801ab62:	2200      	movs	r2, #0
 801ab64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801ab66:	bf00      	nop
 801ab68:	3710      	adds	r7, #16
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	bd80      	pop	{r7, pc}
 801ab6e:	bf00      	nop
 801ab70:	08023d78 	.word	0x08023d78
 801ab74:	080243e8 	.word	0x080243e8
 801ab78:	08023dc4 	.word	0x08023dc4
 801ab7c:	08024404 	.word	0x08024404
 801ab80:	08024424 	.word	0x08024424
 801ab84:	0802443c 	.word	0x0802443c
 801ab88:	08024458 	.word	0x08024458

0801ab8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b082      	sub	sp, #8
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d106      	bne.n	801aba8 <tcp_next_iss+0x1c>
 801ab9a:	4b0a      	ldr	r3, [pc, #40]	; (801abc4 <tcp_next_iss+0x38>)
 801ab9c:	f640 02af 	movw	r2, #2223	; 0x8af
 801aba0:	4909      	ldr	r1, [pc, #36]	; (801abc8 <tcp_next_iss+0x3c>)
 801aba2:	480a      	ldr	r0, [pc, #40]	; (801abcc <tcp_next_iss+0x40>)
 801aba4:	f005 fcd4 	bl	8020550 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801aba8:	4b09      	ldr	r3, [pc, #36]	; (801abd0 <tcp_next_iss+0x44>)
 801abaa:	681a      	ldr	r2, [r3, #0]
 801abac:	4b09      	ldr	r3, [pc, #36]	; (801abd4 <tcp_next_iss+0x48>)
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	4413      	add	r3, r2
 801abb2:	4a07      	ldr	r2, [pc, #28]	; (801abd0 <tcp_next_iss+0x44>)
 801abb4:	6013      	str	r3, [r2, #0]
  return iss;
 801abb6:	4b06      	ldr	r3, [pc, #24]	; (801abd0 <tcp_next_iss+0x44>)
 801abb8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801abba:	4618      	mov	r0, r3
 801abbc:	3708      	adds	r7, #8
 801abbe:	46bd      	mov	sp, r7
 801abc0:	bd80      	pop	{r7, pc}
 801abc2:	bf00      	nop
 801abc4:	08023d78 	.word	0x08023d78
 801abc8:	08024470 	.word	0x08024470
 801abcc:	08023dc4 	.word	0x08023dc4
 801abd0:	24000038 	.word	0x24000038
 801abd4:	2400d3d0 	.word	0x2400d3d0

0801abd8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b086      	sub	sp, #24
 801abdc:	af00      	add	r7, sp, #0
 801abde:	4603      	mov	r3, r0
 801abe0:	60b9      	str	r1, [r7, #8]
 801abe2:	607a      	str	r2, [r7, #4]
 801abe4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d106      	bne.n	801abfa <tcp_eff_send_mss_netif+0x22>
 801abec:	4b14      	ldr	r3, [pc, #80]	; (801ac40 <tcp_eff_send_mss_netif+0x68>)
 801abee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801abf2:	4914      	ldr	r1, [pc, #80]	; (801ac44 <tcp_eff_send_mss_netif+0x6c>)
 801abf4:	4814      	ldr	r0, [pc, #80]	; (801ac48 <tcp_eff_send_mss_netif+0x70>)
 801abf6:	f005 fcab 	bl	8020550 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d101      	bne.n	801ac04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801ac00:	89fb      	ldrh	r3, [r7, #14]
 801ac02:	e019      	b.n	801ac38 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801ac04:	68bb      	ldr	r3, [r7, #8]
 801ac06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801ac08:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801ac0a:	8afb      	ldrh	r3, [r7, #22]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d012      	beq.n	801ac36 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801ac10:	2328      	movs	r3, #40	; 0x28
 801ac12:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801ac14:	8afa      	ldrh	r2, [r7, #22]
 801ac16:	8abb      	ldrh	r3, [r7, #20]
 801ac18:	429a      	cmp	r2, r3
 801ac1a:	d904      	bls.n	801ac26 <tcp_eff_send_mss_netif+0x4e>
 801ac1c:	8afa      	ldrh	r2, [r7, #22]
 801ac1e:	8abb      	ldrh	r3, [r7, #20]
 801ac20:	1ad3      	subs	r3, r2, r3
 801ac22:	b29b      	uxth	r3, r3
 801ac24:	e000      	b.n	801ac28 <tcp_eff_send_mss_netif+0x50>
 801ac26:	2300      	movs	r3, #0
 801ac28:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801ac2a:	8a7a      	ldrh	r2, [r7, #18]
 801ac2c:	89fb      	ldrh	r3, [r7, #14]
 801ac2e:	4293      	cmp	r3, r2
 801ac30:	bf28      	it	cs
 801ac32:	4613      	movcs	r3, r2
 801ac34:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801ac36:	89fb      	ldrh	r3, [r7, #14]
}
 801ac38:	4618      	mov	r0, r3
 801ac3a:	3718      	adds	r7, #24
 801ac3c:	46bd      	mov	sp, r7
 801ac3e:	bd80      	pop	{r7, pc}
 801ac40:	08023d78 	.word	0x08023d78
 801ac44:	0802448c 	.word	0x0802448c
 801ac48:	08023dc4 	.word	0x08023dc4

0801ac4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801ac4c:	b580      	push	{r7, lr}
 801ac4e:	b084      	sub	sp, #16
 801ac50:	af00      	add	r7, sp, #0
 801ac52:	6078      	str	r0, [r7, #4]
 801ac54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801ac56:	683b      	ldr	r3, [r7, #0]
 801ac58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d119      	bne.n	801ac94 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801ac60:	4b10      	ldr	r3, [pc, #64]	; (801aca4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801ac62:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801ac66:	4910      	ldr	r1, [pc, #64]	; (801aca8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801ac68:	4810      	ldr	r0, [pc, #64]	; (801acac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801ac6a:	f005 fc71 	bl	8020550 <iprintf>

  while (pcb != NULL) {
 801ac6e:	e011      	b.n	801ac94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	681a      	ldr	r2, [r3, #0]
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	429a      	cmp	r2, r3
 801ac7a:	d108      	bne.n	801ac8e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	68db      	ldr	r3, [r3, #12]
 801ac80:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801ac82:	68f8      	ldr	r0, [r7, #12]
 801ac84:	f7fe fc26 	bl	80194d4 <tcp_abort>
      pcb = next;
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	60fb      	str	r3, [r7, #12]
 801ac8c:	e002      	b.n	801ac94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	68db      	ldr	r3, [r3, #12]
 801ac92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d1ea      	bne.n	801ac70 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801ac9a:	bf00      	nop
 801ac9c:	bf00      	nop
 801ac9e:	3710      	adds	r7, #16
 801aca0:	46bd      	mov	sp, r7
 801aca2:	bd80      	pop	{r7, pc}
 801aca4:	08023d78 	.word	0x08023d78
 801aca8:	080244b4 	.word	0x080244b4
 801acac:	08023dc4 	.word	0x08023dc4

0801acb0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b084      	sub	sp, #16
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	6078      	str	r0, [r7, #4]
 801acb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d02a      	beq.n	801ad16 <tcp_netif_ip_addr_changed+0x66>
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d026      	beq.n	801ad16 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801acc8:	4b15      	ldr	r3, [pc, #84]	; (801ad20 <tcp_netif_ip_addr_changed+0x70>)
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	4619      	mov	r1, r3
 801acce:	6878      	ldr	r0, [r7, #4]
 801acd0:	f7ff ffbc 	bl	801ac4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801acd4:	4b13      	ldr	r3, [pc, #76]	; (801ad24 <tcp_netif_ip_addr_changed+0x74>)
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	4619      	mov	r1, r3
 801acda:	6878      	ldr	r0, [r7, #4]
 801acdc:	f7ff ffb6 	bl	801ac4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801ace0:	683b      	ldr	r3, [r7, #0]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d017      	beq.n	801ad16 <tcp_netif_ip_addr_changed+0x66>
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	2b00      	cmp	r3, #0
 801acec:	d013      	beq.n	801ad16 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801acee:	4b0e      	ldr	r3, [pc, #56]	; (801ad28 <tcp_netif_ip_addr_changed+0x78>)
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	60fb      	str	r3, [r7, #12]
 801acf4:	e00c      	b.n	801ad10 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	681a      	ldr	r2, [r3, #0]
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	429a      	cmp	r2, r3
 801ad00:	d103      	bne.n	801ad0a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801ad02:	683b      	ldr	r3, [r7, #0]
 801ad04:	681a      	ldr	r2, [r3, #0]
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	68db      	ldr	r3, [r3, #12]
 801ad0e:	60fb      	str	r3, [r7, #12]
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d1ef      	bne.n	801acf6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801ad16:	bf00      	nop
 801ad18:	3710      	adds	r7, #16
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	bd80      	pop	{r7, pc}
 801ad1e:	bf00      	nop
 801ad20:	2400d3dc 	.word	0x2400d3dc
 801ad24:	2400d3d4 	.word	0x2400d3d4
 801ad28:	2400d3d8 	.word	0x2400d3d8

0801ad2c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b082      	sub	sp, #8
 801ad30:	af00      	add	r7, sp, #0
 801ad32:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d007      	beq.n	801ad4c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad40:	4618      	mov	r0, r3
 801ad42:	f7ff fb6f 	bl	801a424 <tcp_segs_free>
    pcb->ooseq = NULL;
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	2200      	movs	r2, #0
 801ad4a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801ad4c:	bf00      	nop
 801ad4e:	3708      	adds	r7, #8
 801ad50:	46bd      	mov	sp, r7
 801ad52:	bd80      	pop	{r7, pc}

0801ad54 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801ad54:	b590      	push	{r4, r7, lr}
 801ad56:	b08d      	sub	sp, #52	; 0x34
 801ad58:	af04      	add	r7, sp, #16
 801ad5a:	6078      	str	r0, [r7, #4]
 801ad5c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d105      	bne.n	801ad70 <tcp_input+0x1c>
 801ad64:	4b9b      	ldr	r3, [pc, #620]	; (801afd4 <tcp_input+0x280>)
 801ad66:	2283      	movs	r2, #131	; 0x83
 801ad68:	499b      	ldr	r1, [pc, #620]	; (801afd8 <tcp_input+0x284>)
 801ad6a:	489c      	ldr	r0, [pc, #624]	; (801afdc <tcp_input+0x288>)
 801ad6c:	f005 fbf0 	bl	8020550 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	685b      	ldr	r3, [r3, #4]
 801ad74:	4a9a      	ldr	r2, [pc, #616]	; (801afe0 <tcp_input+0x28c>)
 801ad76:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	895b      	ldrh	r3, [r3, #10]
 801ad7c:	2b13      	cmp	r3, #19
 801ad7e:	f240 83d1 	bls.w	801b524 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ad82:	4b98      	ldr	r3, [pc, #608]	; (801afe4 <tcp_input+0x290>)
 801ad84:	695b      	ldr	r3, [r3, #20]
 801ad86:	4a97      	ldr	r2, [pc, #604]	; (801afe4 <tcp_input+0x290>)
 801ad88:	6812      	ldr	r2, [r2, #0]
 801ad8a:	4611      	mov	r1, r2
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	f7f9 fe2f 	bl	80149f0 <ip4_addr_isbroadcast_u32>
 801ad92:	4603      	mov	r3, r0
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	f040 83c7 	bne.w	801b528 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ad9a:	4b92      	ldr	r3, [pc, #584]	; (801afe4 <tcp_input+0x290>)
 801ad9c:	695b      	ldr	r3, [r3, #20]
 801ad9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ada2:	2be0      	cmp	r3, #224	; 0xe0
 801ada4:	f000 83c0 	beq.w	801b528 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801ada8:	4b8d      	ldr	r3, [pc, #564]	; (801afe0 <tcp_input+0x28c>)
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	899b      	ldrh	r3, [r3, #12]
 801adae:	b29b      	uxth	r3, r3
 801adb0:	4618      	mov	r0, r3
 801adb2:	f7f5 fe8d 	bl	8010ad0 <lwip_htons>
 801adb6:	4603      	mov	r3, r0
 801adb8:	0b1b      	lsrs	r3, r3, #12
 801adba:	b29b      	uxth	r3, r3
 801adbc:	b2db      	uxtb	r3, r3
 801adbe:	009b      	lsls	r3, r3, #2
 801adc0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801adc2:	7cbb      	ldrb	r3, [r7, #18]
 801adc4:	2b13      	cmp	r3, #19
 801adc6:	f240 83b1 	bls.w	801b52c <tcp_input+0x7d8>
 801adca:	7cbb      	ldrb	r3, [r7, #18]
 801adcc:	b29a      	uxth	r2, r3
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	891b      	ldrh	r3, [r3, #8]
 801add2:	429a      	cmp	r2, r3
 801add4:	f200 83aa 	bhi.w	801b52c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801add8:	7cbb      	ldrb	r3, [r7, #18]
 801adda:	b29b      	uxth	r3, r3
 801addc:	3b14      	subs	r3, #20
 801adde:	b29a      	uxth	r2, r3
 801ade0:	4b81      	ldr	r3, [pc, #516]	; (801afe8 <tcp_input+0x294>)
 801ade2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801ade4:	4b81      	ldr	r3, [pc, #516]	; (801afec <tcp_input+0x298>)
 801ade6:	2200      	movs	r2, #0
 801ade8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	895a      	ldrh	r2, [r3, #10]
 801adee:	7cbb      	ldrb	r3, [r7, #18]
 801adf0:	b29b      	uxth	r3, r3
 801adf2:	429a      	cmp	r2, r3
 801adf4:	d309      	bcc.n	801ae0a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801adf6:	4b7c      	ldr	r3, [pc, #496]	; (801afe8 <tcp_input+0x294>)
 801adf8:	881a      	ldrh	r2, [r3, #0]
 801adfa:	4b7d      	ldr	r3, [pc, #500]	; (801aff0 <tcp_input+0x29c>)
 801adfc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801adfe:	7cbb      	ldrb	r3, [r7, #18]
 801ae00:	4619      	mov	r1, r3
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7fc fc2c 	bl	8017660 <pbuf_remove_header>
 801ae08:	e04e      	b.n	801aea8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d105      	bne.n	801ae1e <tcp_input+0xca>
 801ae12:	4b70      	ldr	r3, [pc, #448]	; (801afd4 <tcp_input+0x280>)
 801ae14:	22c2      	movs	r2, #194	; 0xc2
 801ae16:	4977      	ldr	r1, [pc, #476]	; (801aff4 <tcp_input+0x2a0>)
 801ae18:	4870      	ldr	r0, [pc, #448]	; (801afdc <tcp_input+0x288>)
 801ae1a:	f005 fb99 	bl	8020550 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801ae1e:	2114      	movs	r1, #20
 801ae20:	6878      	ldr	r0, [r7, #4]
 801ae22:	f7fc fc1d 	bl	8017660 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	895a      	ldrh	r2, [r3, #10]
 801ae2a:	4b71      	ldr	r3, [pc, #452]	; (801aff0 <tcp_input+0x29c>)
 801ae2c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ae2e:	4b6e      	ldr	r3, [pc, #440]	; (801afe8 <tcp_input+0x294>)
 801ae30:	881a      	ldrh	r2, [r3, #0]
 801ae32:	4b6f      	ldr	r3, [pc, #444]	; (801aff0 <tcp_input+0x29c>)
 801ae34:	881b      	ldrh	r3, [r3, #0]
 801ae36:	1ad3      	subs	r3, r2, r3
 801ae38:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801ae3a:	4b6d      	ldr	r3, [pc, #436]	; (801aff0 <tcp_input+0x29c>)
 801ae3c:	881b      	ldrh	r3, [r3, #0]
 801ae3e:	4619      	mov	r1, r3
 801ae40:	6878      	ldr	r0, [r7, #4]
 801ae42:	f7fc fc0d 	bl	8017660 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	895b      	ldrh	r3, [r3, #10]
 801ae4c:	8a3a      	ldrh	r2, [r7, #16]
 801ae4e:	429a      	cmp	r2, r3
 801ae50:	f200 836e 	bhi.w	801b530 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	685b      	ldr	r3, [r3, #4]
 801ae5a:	4a64      	ldr	r2, [pc, #400]	; (801afec <tcp_input+0x298>)
 801ae5c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	8a3a      	ldrh	r2, [r7, #16]
 801ae64:	4611      	mov	r1, r2
 801ae66:	4618      	mov	r0, r3
 801ae68:	f7fc fbfa 	bl	8017660 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	891a      	ldrh	r2, [r3, #8]
 801ae70:	8a3b      	ldrh	r3, [r7, #16]
 801ae72:	1ad3      	subs	r3, r2, r3
 801ae74:	b29a      	uxth	r2, r3
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	895b      	ldrh	r3, [r3, #10]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d005      	beq.n	801ae8e <tcp_input+0x13a>
 801ae82:	4b54      	ldr	r3, [pc, #336]	; (801afd4 <tcp_input+0x280>)
 801ae84:	22df      	movs	r2, #223	; 0xdf
 801ae86:	495c      	ldr	r1, [pc, #368]	; (801aff8 <tcp_input+0x2a4>)
 801ae88:	4854      	ldr	r0, [pc, #336]	; (801afdc <tcp_input+0x288>)
 801ae8a:	f005 fb61 	bl	8020550 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	891a      	ldrh	r2, [r3, #8]
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	891b      	ldrh	r3, [r3, #8]
 801ae98:	429a      	cmp	r2, r3
 801ae9a:	d005      	beq.n	801aea8 <tcp_input+0x154>
 801ae9c:	4b4d      	ldr	r3, [pc, #308]	; (801afd4 <tcp_input+0x280>)
 801ae9e:	22e0      	movs	r2, #224	; 0xe0
 801aea0:	4956      	ldr	r1, [pc, #344]	; (801affc <tcp_input+0x2a8>)
 801aea2:	484e      	ldr	r0, [pc, #312]	; (801afdc <tcp_input+0x288>)
 801aea4:	f005 fb54 	bl	8020550 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801aea8:	4b4d      	ldr	r3, [pc, #308]	; (801afe0 <tcp_input+0x28c>)
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	881b      	ldrh	r3, [r3, #0]
 801aeae:	b29b      	uxth	r3, r3
 801aeb0:	4a4b      	ldr	r2, [pc, #300]	; (801afe0 <tcp_input+0x28c>)
 801aeb2:	6814      	ldr	r4, [r2, #0]
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	f7f5 fe0b 	bl	8010ad0 <lwip_htons>
 801aeba:	4603      	mov	r3, r0
 801aebc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801aebe:	4b48      	ldr	r3, [pc, #288]	; (801afe0 <tcp_input+0x28c>)
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	885b      	ldrh	r3, [r3, #2]
 801aec4:	b29b      	uxth	r3, r3
 801aec6:	4a46      	ldr	r2, [pc, #280]	; (801afe0 <tcp_input+0x28c>)
 801aec8:	6814      	ldr	r4, [r2, #0]
 801aeca:	4618      	mov	r0, r3
 801aecc:	f7f5 fe00 	bl	8010ad0 <lwip_htons>
 801aed0:	4603      	mov	r3, r0
 801aed2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801aed4:	4b42      	ldr	r3, [pc, #264]	; (801afe0 <tcp_input+0x28c>)
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	685b      	ldr	r3, [r3, #4]
 801aeda:	4a41      	ldr	r2, [pc, #260]	; (801afe0 <tcp_input+0x28c>)
 801aedc:	6814      	ldr	r4, [r2, #0]
 801aede:	4618      	mov	r0, r3
 801aee0:	f7f5 fe0b 	bl	8010afa <lwip_htonl>
 801aee4:	4603      	mov	r3, r0
 801aee6:	6063      	str	r3, [r4, #4]
 801aee8:	6863      	ldr	r3, [r4, #4]
 801aeea:	4a45      	ldr	r2, [pc, #276]	; (801b000 <tcp_input+0x2ac>)
 801aeec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801aeee:	4b3c      	ldr	r3, [pc, #240]	; (801afe0 <tcp_input+0x28c>)
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	689b      	ldr	r3, [r3, #8]
 801aef4:	4a3a      	ldr	r2, [pc, #232]	; (801afe0 <tcp_input+0x28c>)
 801aef6:	6814      	ldr	r4, [r2, #0]
 801aef8:	4618      	mov	r0, r3
 801aefa:	f7f5 fdfe 	bl	8010afa <lwip_htonl>
 801aefe:	4603      	mov	r3, r0
 801af00:	60a3      	str	r3, [r4, #8]
 801af02:	68a3      	ldr	r3, [r4, #8]
 801af04:	4a3f      	ldr	r2, [pc, #252]	; (801b004 <tcp_input+0x2b0>)
 801af06:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801af08:	4b35      	ldr	r3, [pc, #212]	; (801afe0 <tcp_input+0x28c>)
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	89db      	ldrh	r3, [r3, #14]
 801af0e:	b29b      	uxth	r3, r3
 801af10:	4a33      	ldr	r2, [pc, #204]	; (801afe0 <tcp_input+0x28c>)
 801af12:	6814      	ldr	r4, [r2, #0]
 801af14:	4618      	mov	r0, r3
 801af16:	f7f5 fddb 	bl	8010ad0 <lwip_htons>
 801af1a:	4603      	mov	r3, r0
 801af1c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801af1e:	4b30      	ldr	r3, [pc, #192]	; (801afe0 <tcp_input+0x28c>)
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	899b      	ldrh	r3, [r3, #12]
 801af24:	b29b      	uxth	r3, r3
 801af26:	4618      	mov	r0, r3
 801af28:	f7f5 fdd2 	bl	8010ad0 <lwip_htons>
 801af2c:	4603      	mov	r3, r0
 801af2e:	b2db      	uxtb	r3, r3
 801af30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801af34:	b2da      	uxtb	r2, r3
 801af36:	4b34      	ldr	r3, [pc, #208]	; (801b008 <tcp_input+0x2b4>)
 801af38:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	891a      	ldrh	r2, [r3, #8]
 801af3e:	4b33      	ldr	r3, [pc, #204]	; (801b00c <tcp_input+0x2b8>)
 801af40:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801af42:	4b31      	ldr	r3, [pc, #196]	; (801b008 <tcp_input+0x2b4>)
 801af44:	781b      	ldrb	r3, [r3, #0]
 801af46:	f003 0303 	and.w	r3, r3, #3
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d00c      	beq.n	801af68 <tcp_input+0x214>
    tcplen++;
 801af4e:	4b2f      	ldr	r3, [pc, #188]	; (801b00c <tcp_input+0x2b8>)
 801af50:	881b      	ldrh	r3, [r3, #0]
 801af52:	3301      	adds	r3, #1
 801af54:	b29a      	uxth	r2, r3
 801af56:	4b2d      	ldr	r3, [pc, #180]	; (801b00c <tcp_input+0x2b8>)
 801af58:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	891a      	ldrh	r2, [r3, #8]
 801af5e:	4b2b      	ldr	r3, [pc, #172]	; (801b00c <tcp_input+0x2b8>)
 801af60:	881b      	ldrh	r3, [r3, #0]
 801af62:	429a      	cmp	r2, r3
 801af64:	f200 82e6 	bhi.w	801b534 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801af68:	2300      	movs	r3, #0
 801af6a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801af6c:	4b28      	ldr	r3, [pc, #160]	; (801b010 <tcp_input+0x2bc>)
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	61fb      	str	r3, [r7, #28]
 801af72:	e09d      	b.n	801b0b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801af74:	69fb      	ldr	r3, [r7, #28]
 801af76:	7d1b      	ldrb	r3, [r3, #20]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d105      	bne.n	801af88 <tcp_input+0x234>
 801af7c:	4b15      	ldr	r3, [pc, #84]	; (801afd4 <tcp_input+0x280>)
 801af7e:	22fb      	movs	r2, #251	; 0xfb
 801af80:	4924      	ldr	r1, [pc, #144]	; (801b014 <tcp_input+0x2c0>)
 801af82:	4816      	ldr	r0, [pc, #88]	; (801afdc <tcp_input+0x288>)
 801af84:	f005 fae4 	bl	8020550 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801af88:	69fb      	ldr	r3, [r7, #28]
 801af8a:	7d1b      	ldrb	r3, [r3, #20]
 801af8c:	2b0a      	cmp	r3, #10
 801af8e:	d105      	bne.n	801af9c <tcp_input+0x248>
 801af90:	4b10      	ldr	r3, [pc, #64]	; (801afd4 <tcp_input+0x280>)
 801af92:	22fc      	movs	r2, #252	; 0xfc
 801af94:	4920      	ldr	r1, [pc, #128]	; (801b018 <tcp_input+0x2c4>)
 801af96:	4811      	ldr	r0, [pc, #68]	; (801afdc <tcp_input+0x288>)
 801af98:	f005 fada 	bl	8020550 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801af9c:	69fb      	ldr	r3, [r7, #28]
 801af9e:	7d1b      	ldrb	r3, [r3, #20]
 801afa0:	2b01      	cmp	r3, #1
 801afa2:	d105      	bne.n	801afb0 <tcp_input+0x25c>
 801afa4:	4b0b      	ldr	r3, [pc, #44]	; (801afd4 <tcp_input+0x280>)
 801afa6:	22fd      	movs	r2, #253	; 0xfd
 801afa8:	491c      	ldr	r1, [pc, #112]	; (801b01c <tcp_input+0x2c8>)
 801afaa:	480c      	ldr	r0, [pc, #48]	; (801afdc <tcp_input+0x288>)
 801afac:	f005 fad0 	bl	8020550 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801afb0:	69fb      	ldr	r3, [r7, #28]
 801afb2:	7a1b      	ldrb	r3, [r3, #8]
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d033      	beq.n	801b020 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801afb8:	69fb      	ldr	r3, [r7, #28]
 801afba:	7a1a      	ldrb	r2, [r3, #8]
 801afbc:	4b09      	ldr	r3, [pc, #36]	; (801afe4 <tcp_input+0x290>)
 801afbe:	685b      	ldr	r3, [r3, #4]
 801afc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801afc4:	3301      	adds	r3, #1
 801afc6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801afc8:	429a      	cmp	r2, r3
 801afca:	d029      	beq.n	801b020 <tcp_input+0x2cc>
      prev = pcb;
 801afcc:	69fb      	ldr	r3, [r7, #28]
 801afce:	61bb      	str	r3, [r7, #24]
      continue;
 801afd0:	e06b      	b.n	801b0aa <tcp_input+0x356>
 801afd2:	bf00      	nop
 801afd4:	080244e8 	.word	0x080244e8
 801afd8:	08024524 	.word	0x08024524
 801afdc:	0802453c 	.word	0x0802453c
 801afe0:	2400d3f8 	.word	0x2400d3f8
 801afe4:	2400a0b0 	.word	0x2400a0b0
 801afe8:	2400d3fc 	.word	0x2400d3fc
 801afec:	2400d400 	.word	0x2400d400
 801aff0:	2400d3fe 	.word	0x2400d3fe
 801aff4:	08024564 	.word	0x08024564
 801aff8:	08024574 	.word	0x08024574
 801affc:	08024580 	.word	0x08024580
 801b000:	2400d408 	.word	0x2400d408
 801b004:	2400d40c 	.word	0x2400d40c
 801b008:	2400d414 	.word	0x2400d414
 801b00c:	2400d412 	.word	0x2400d412
 801b010:	2400d3dc 	.word	0x2400d3dc
 801b014:	080245a0 	.word	0x080245a0
 801b018:	080245c8 	.word	0x080245c8
 801b01c:	080245f4 	.word	0x080245f4
    }

    if (pcb->remote_port == tcphdr->src &&
 801b020:	69fb      	ldr	r3, [r7, #28]
 801b022:	8b1a      	ldrh	r2, [r3, #24]
 801b024:	4b72      	ldr	r3, [pc, #456]	; (801b1f0 <tcp_input+0x49c>)
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	881b      	ldrh	r3, [r3, #0]
 801b02a:	b29b      	uxth	r3, r3
 801b02c:	429a      	cmp	r2, r3
 801b02e:	d13a      	bne.n	801b0a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801b030:	69fb      	ldr	r3, [r7, #28]
 801b032:	8ada      	ldrh	r2, [r3, #22]
 801b034:	4b6e      	ldr	r3, [pc, #440]	; (801b1f0 <tcp_input+0x49c>)
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	885b      	ldrh	r3, [r3, #2]
 801b03a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801b03c:	429a      	cmp	r2, r3
 801b03e:	d132      	bne.n	801b0a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b040:	69fb      	ldr	r3, [r7, #28]
 801b042:	685a      	ldr	r2, [r3, #4]
 801b044:	4b6b      	ldr	r3, [pc, #428]	; (801b1f4 <tcp_input+0x4a0>)
 801b046:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b048:	429a      	cmp	r2, r3
 801b04a:	d12c      	bne.n	801b0a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b04c:	69fb      	ldr	r3, [r7, #28]
 801b04e:	681a      	ldr	r2, [r3, #0]
 801b050:	4b68      	ldr	r3, [pc, #416]	; (801b1f4 <tcp_input+0x4a0>)
 801b052:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b054:	429a      	cmp	r2, r3
 801b056:	d126      	bne.n	801b0a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b058:	69fb      	ldr	r3, [r7, #28]
 801b05a:	68db      	ldr	r3, [r3, #12]
 801b05c:	69fa      	ldr	r2, [r7, #28]
 801b05e:	429a      	cmp	r2, r3
 801b060:	d106      	bne.n	801b070 <tcp_input+0x31c>
 801b062:	4b65      	ldr	r3, [pc, #404]	; (801b1f8 <tcp_input+0x4a4>)
 801b064:	f240 120d 	movw	r2, #269	; 0x10d
 801b068:	4964      	ldr	r1, [pc, #400]	; (801b1fc <tcp_input+0x4a8>)
 801b06a:	4865      	ldr	r0, [pc, #404]	; (801b200 <tcp_input+0x4ac>)
 801b06c:	f005 fa70 	bl	8020550 <iprintf>
      if (prev != NULL) {
 801b070:	69bb      	ldr	r3, [r7, #24]
 801b072:	2b00      	cmp	r3, #0
 801b074:	d00a      	beq.n	801b08c <tcp_input+0x338>
        prev->next = pcb->next;
 801b076:	69fb      	ldr	r3, [r7, #28]
 801b078:	68da      	ldr	r2, [r3, #12]
 801b07a:	69bb      	ldr	r3, [r7, #24]
 801b07c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801b07e:	4b61      	ldr	r3, [pc, #388]	; (801b204 <tcp_input+0x4b0>)
 801b080:	681a      	ldr	r2, [r3, #0]
 801b082:	69fb      	ldr	r3, [r7, #28]
 801b084:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801b086:	4a5f      	ldr	r2, [pc, #380]	; (801b204 <tcp_input+0x4b0>)
 801b088:	69fb      	ldr	r3, [r7, #28]
 801b08a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b08c:	69fb      	ldr	r3, [r7, #28]
 801b08e:	68db      	ldr	r3, [r3, #12]
 801b090:	69fa      	ldr	r2, [r7, #28]
 801b092:	429a      	cmp	r2, r3
 801b094:	d111      	bne.n	801b0ba <tcp_input+0x366>
 801b096:	4b58      	ldr	r3, [pc, #352]	; (801b1f8 <tcp_input+0x4a4>)
 801b098:	f240 1215 	movw	r2, #277	; 0x115
 801b09c:	495a      	ldr	r1, [pc, #360]	; (801b208 <tcp_input+0x4b4>)
 801b09e:	4858      	ldr	r0, [pc, #352]	; (801b200 <tcp_input+0x4ac>)
 801b0a0:	f005 fa56 	bl	8020550 <iprintf>
      break;
 801b0a4:	e009      	b.n	801b0ba <tcp_input+0x366>
    }
    prev = pcb;
 801b0a6:	69fb      	ldr	r3, [r7, #28]
 801b0a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b0aa:	69fb      	ldr	r3, [r7, #28]
 801b0ac:	68db      	ldr	r3, [r3, #12]
 801b0ae:	61fb      	str	r3, [r7, #28]
 801b0b0:	69fb      	ldr	r3, [r7, #28]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	f47f af5e 	bne.w	801af74 <tcp_input+0x220>
 801b0b8:	e000      	b.n	801b0bc <tcp_input+0x368>
      break;
 801b0ba:	bf00      	nop
  }

  if (pcb == NULL) {
 801b0bc:	69fb      	ldr	r3, [r7, #28]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	f040 80aa 	bne.w	801b218 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b0c4:	4b51      	ldr	r3, [pc, #324]	; (801b20c <tcp_input+0x4b8>)
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	61fb      	str	r3, [r7, #28]
 801b0ca:	e03f      	b.n	801b14c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b0cc:	69fb      	ldr	r3, [r7, #28]
 801b0ce:	7d1b      	ldrb	r3, [r3, #20]
 801b0d0:	2b0a      	cmp	r3, #10
 801b0d2:	d006      	beq.n	801b0e2 <tcp_input+0x38e>
 801b0d4:	4b48      	ldr	r3, [pc, #288]	; (801b1f8 <tcp_input+0x4a4>)
 801b0d6:	f240 121f 	movw	r2, #287	; 0x11f
 801b0da:	494d      	ldr	r1, [pc, #308]	; (801b210 <tcp_input+0x4bc>)
 801b0dc:	4848      	ldr	r0, [pc, #288]	; (801b200 <tcp_input+0x4ac>)
 801b0de:	f005 fa37 	bl	8020550 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b0e2:	69fb      	ldr	r3, [r7, #28]
 801b0e4:	7a1b      	ldrb	r3, [r3, #8]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d009      	beq.n	801b0fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b0ea:	69fb      	ldr	r3, [r7, #28]
 801b0ec:	7a1a      	ldrb	r2, [r3, #8]
 801b0ee:	4b41      	ldr	r3, [pc, #260]	; (801b1f4 <tcp_input+0x4a0>)
 801b0f0:	685b      	ldr	r3, [r3, #4]
 801b0f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b0f6:	3301      	adds	r3, #1
 801b0f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b0fa:	429a      	cmp	r2, r3
 801b0fc:	d122      	bne.n	801b144 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801b0fe:	69fb      	ldr	r3, [r7, #28]
 801b100:	8b1a      	ldrh	r2, [r3, #24]
 801b102:	4b3b      	ldr	r3, [pc, #236]	; (801b1f0 <tcp_input+0x49c>)
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	881b      	ldrh	r3, [r3, #0]
 801b108:	b29b      	uxth	r3, r3
 801b10a:	429a      	cmp	r2, r3
 801b10c:	d11b      	bne.n	801b146 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801b10e:	69fb      	ldr	r3, [r7, #28]
 801b110:	8ada      	ldrh	r2, [r3, #22]
 801b112:	4b37      	ldr	r3, [pc, #220]	; (801b1f0 <tcp_input+0x49c>)
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	885b      	ldrh	r3, [r3, #2]
 801b118:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801b11a:	429a      	cmp	r2, r3
 801b11c:	d113      	bne.n	801b146 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b11e:	69fb      	ldr	r3, [r7, #28]
 801b120:	685a      	ldr	r2, [r3, #4]
 801b122:	4b34      	ldr	r3, [pc, #208]	; (801b1f4 <tcp_input+0x4a0>)
 801b124:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b126:	429a      	cmp	r2, r3
 801b128:	d10d      	bne.n	801b146 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b12a:	69fb      	ldr	r3, [r7, #28]
 801b12c:	681a      	ldr	r2, [r3, #0]
 801b12e:	4b31      	ldr	r3, [pc, #196]	; (801b1f4 <tcp_input+0x4a0>)
 801b130:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b132:	429a      	cmp	r2, r3
 801b134:	d107      	bne.n	801b146 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801b136:	69f8      	ldr	r0, [r7, #28]
 801b138:	f000 fb56 	bl	801b7e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801b13c:	6878      	ldr	r0, [r7, #4]
 801b13e:	f7fc fb15 	bl	801776c <pbuf_free>
        return;
 801b142:	e1fd      	b.n	801b540 <tcp_input+0x7ec>
        continue;
 801b144:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b146:	69fb      	ldr	r3, [r7, #28]
 801b148:	68db      	ldr	r3, [r3, #12]
 801b14a:	61fb      	str	r3, [r7, #28]
 801b14c:	69fb      	ldr	r3, [r7, #28]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d1bc      	bne.n	801b0cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801b152:	2300      	movs	r3, #0
 801b154:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b156:	4b2f      	ldr	r3, [pc, #188]	; (801b214 <tcp_input+0x4c0>)
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	617b      	str	r3, [r7, #20]
 801b15c:	e02a      	b.n	801b1b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b15e:	697b      	ldr	r3, [r7, #20]
 801b160:	7a1b      	ldrb	r3, [r3, #8]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d00c      	beq.n	801b180 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b166:	697b      	ldr	r3, [r7, #20]
 801b168:	7a1a      	ldrb	r2, [r3, #8]
 801b16a:	4b22      	ldr	r3, [pc, #136]	; (801b1f4 <tcp_input+0x4a0>)
 801b16c:	685b      	ldr	r3, [r3, #4]
 801b16e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b172:	3301      	adds	r3, #1
 801b174:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b176:	429a      	cmp	r2, r3
 801b178:	d002      	beq.n	801b180 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801b17a:	697b      	ldr	r3, [r7, #20]
 801b17c:	61bb      	str	r3, [r7, #24]
        continue;
 801b17e:	e016      	b.n	801b1ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b180:	697b      	ldr	r3, [r7, #20]
 801b182:	8ada      	ldrh	r2, [r3, #22]
 801b184:	4b1a      	ldr	r3, [pc, #104]	; (801b1f0 <tcp_input+0x49c>)
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	885b      	ldrh	r3, [r3, #2]
 801b18a:	b29b      	uxth	r3, r3
 801b18c:	429a      	cmp	r2, r3
 801b18e:	d10c      	bne.n	801b1aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b190:	697b      	ldr	r3, [r7, #20]
 801b192:	681a      	ldr	r2, [r3, #0]
 801b194:	4b17      	ldr	r3, [pc, #92]	; (801b1f4 <tcp_input+0x4a0>)
 801b196:	695b      	ldr	r3, [r3, #20]
 801b198:	429a      	cmp	r2, r3
 801b19a:	d00f      	beq.n	801b1bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b19c:	697b      	ldr	r3, [r7, #20]
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d00d      	beq.n	801b1be <tcp_input+0x46a>
 801b1a2:	697b      	ldr	r3, [r7, #20]
 801b1a4:	681b      	ldr	r3, [r3, #0]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d009      	beq.n	801b1be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b1aa:	697b      	ldr	r3, [r7, #20]
 801b1ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b1ae:	697b      	ldr	r3, [r7, #20]
 801b1b0:	68db      	ldr	r3, [r3, #12]
 801b1b2:	617b      	str	r3, [r7, #20]
 801b1b4:	697b      	ldr	r3, [r7, #20]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d1d1      	bne.n	801b15e <tcp_input+0x40a>
 801b1ba:	e000      	b.n	801b1be <tcp_input+0x46a>
            break;
 801b1bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b1be:	697b      	ldr	r3, [r7, #20]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d029      	beq.n	801b218 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b1c4:	69bb      	ldr	r3, [r7, #24]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d00a      	beq.n	801b1e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b1ca:	697b      	ldr	r3, [r7, #20]
 801b1cc:	68da      	ldr	r2, [r3, #12]
 801b1ce:	69bb      	ldr	r3, [r7, #24]
 801b1d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b1d2:	4b10      	ldr	r3, [pc, #64]	; (801b214 <tcp_input+0x4c0>)
 801b1d4:	681a      	ldr	r2, [r3, #0]
 801b1d6:	697b      	ldr	r3, [r7, #20]
 801b1d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b1da:	4a0e      	ldr	r2, [pc, #56]	; (801b214 <tcp_input+0x4c0>)
 801b1dc:	697b      	ldr	r3, [r7, #20]
 801b1de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b1e0:	6978      	ldr	r0, [r7, #20]
 801b1e2:	f000 fa03 	bl	801b5ec <tcp_listen_input>
      }
      pbuf_free(p);
 801b1e6:	6878      	ldr	r0, [r7, #4]
 801b1e8:	f7fc fac0 	bl	801776c <pbuf_free>
      return;
 801b1ec:	e1a8      	b.n	801b540 <tcp_input+0x7ec>
 801b1ee:	bf00      	nop
 801b1f0:	2400d3f8 	.word	0x2400d3f8
 801b1f4:	2400a0b0 	.word	0x2400a0b0
 801b1f8:	080244e8 	.word	0x080244e8
 801b1fc:	0802461c 	.word	0x0802461c
 801b200:	0802453c 	.word	0x0802453c
 801b204:	2400d3dc 	.word	0x2400d3dc
 801b208:	08024648 	.word	0x08024648
 801b20c:	2400d3e0 	.word	0x2400d3e0
 801b210:	08024674 	.word	0x08024674
 801b214:	2400d3d8 	.word	0x2400d3d8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b218:	69fb      	ldr	r3, [r7, #28]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	f000 8158 	beq.w	801b4d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b220:	4b95      	ldr	r3, [pc, #596]	; (801b478 <tcp_input+0x724>)
 801b222:	2200      	movs	r2, #0
 801b224:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	891a      	ldrh	r2, [r3, #8]
 801b22a:	4b93      	ldr	r3, [pc, #588]	; (801b478 <tcp_input+0x724>)
 801b22c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b22e:	4a92      	ldr	r2, [pc, #584]	; (801b478 <tcp_input+0x724>)
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b234:	4b91      	ldr	r3, [pc, #580]	; (801b47c <tcp_input+0x728>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	4a8f      	ldr	r2, [pc, #572]	; (801b478 <tcp_input+0x724>)
 801b23a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b23c:	4b90      	ldr	r3, [pc, #576]	; (801b480 <tcp_input+0x72c>)
 801b23e:	2200      	movs	r2, #0
 801b240:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b242:	4b90      	ldr	r3, [pc, #576]	; (801b484 <tcp_input+0x730>)
 801b244:	2200      	movs	r2, #0
 801b246:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b248:	4b8f      	ldr	r3, [pc, #572]	; (801b488 <tcp_input+0x734>)
 801b24a:	2200      	movs	r2, #0
 801b24c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b24e:	4b8f      	ldr	r3, [pc, #572]	; (801b48c <tcp_input+0x738>)
 801b250:	781b      	ldrb	r3, [r3, #0]
 801b252:	f003 0308 	and.w	r3, r3, #8
 801b256:	2b00      	cmp	r3, #0
 801b258:	d006      	beq.n	801b268 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	7b5b      	ldrb	r3, [r3, #13]
 801b25e:	f043 0301 	orr.w	r3, r3, #1
 801b262:	b2da      	uxtb	r2, r3
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b268:	69fb      	ldr	r3, [r7, #28]
 801b26a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d017      	beq.n	801b2a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b270:	69f8      	ldr	r0, [r7, #28]
 801b272:	f7ff f85b 	bl	801a32c <tcp_process_refused_data>
 801b276:	4603      	mov	r3, r0
 801b278:	f113 0f0d 	cmn.w	r3, #13
 801b27c:	d007      	beq.n	801b28e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b27e:	69fb      	ldr	r3, [r7, #28]
 801b280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b282:	2b00      	cmp	r3, #0
 801b284:	d00c      	beq.n	801b2a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b286:	4b82      	ldr	r3, [pc, #520]	; (801b490 <tcp_input+0x73c>)
 801b288:	881b      	ldrh	r3, [r3, #0]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d008      	beq.n	801b2a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b28e:	69fb      	ldr	r3, [r7, #28]
 801b290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b292:	2b00      	cmp	r3, #0
 801b294:	f040 80e3 	bne.w	801b45e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b298:	69f8      	ldr	r0, [r7, #28]
 801b29a:	f003 fe05 	bl	801eea8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b29e:	e0de      	b.n	801b45e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801b2a0:	4a7c      	ldr	r2, [pc, #496]	; (801b494 <tcp_input+0x740>)
 801b2a2:	69fb      	ldr	r3, [r7, #28]
 801b2a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b2a6:	69f8      	ldr	r0, [r7, #28]
 801b2a8:	f000 fb18 	bl	801b8dc <tcp_process>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b2b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b2b4:	f113 0f0d 	cmn.w	r3, #13
 801b2b8:	f000 80d3 	beq.w	801b462 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801b2bc:	4b71      	ldr	r3, [pc, #452]	; (801b484 <tcp_input+0x730>)
 801b2be:	781b      	ldrb	r3, [r3, #0]
 801b2c0:	f003 0308 	and.w	r3, r3, #8
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d015      	beq.n	801b2f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b2c8:	69fb      	ldr	r3, [r7, #28]
 801b2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d008      	beq.n	801b2e4 <tcp_input+0x590>
 801b2d2:	69fb      	ldr	r3, [r7, #28]
 801b2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b2d8:	69fa      	ldr	r2, [r7, #28]
 801b2da:	6912      	ldr	r2, [r2, #16]
 801b2dc:	f06f 010d 	mvn.w	r1, #13
 801b2e0:	4610      	mov	r0, r2
 801b2e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b2e4:	69f9      	ldr	r1, [r7, #28]
 801b2e6:	486c      	ldr	r0, [pc, #432]	; (801b498 <tcp_input+0x744>)
 801b2e8:	f7ff fbbc 	bl	801aa64 <tcp_pcb_remove>
        tcp_free(pcb);
 801b2ec:	69f8      	ldr	r0, [r7, #28]
 801b2ee:	f7fd fdad 	bl	8018e4c <tcp_free>
 801b2f2:	e0da      	b.n	801b4aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b2f8:	4b63      	ldr	r3, [pc, #396]	; (801b488 <tcp_input+0x734>)
 801b2fa:	881b      	ldrh	r3, [r3, #0]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d01d      	beq.n	801b33c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b300:	4b61      	ldr	r3, [pc, #388]	; (801b488 <tcp_input+0x734>)
 801b302:	881b      	ldrh	r3, [r3, #0]
 801b304:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b306:	69fb      	ldr	r3, [r7, #28]
 801b308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d00a      	beq.n	801b326 <tcp_input+0x5d2>
 801b310:	69fb      	ldr	r3, [r7, #28]
 801b312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b316:	69fa      	ldr	r2, [r7, #28]
 801b318:	6910      	ldr	r0, [r2, #16]
 801b31a:	89fa      	ldrh	r2, [r7, #14]
 801b31c:	69f9      	ldr	r1, [r7, #28]
 801b31e:	4798      	blx	r3
 801b320:	4603      	mov	r3, r0
 801b322:	74fb      	strb	r3, [r7, #19]
 801b324:	e001      	b.n	801b32a <tcp_input+0x5d6>
 801b326:	2300      	movs	r3, #0
 801b328:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b32a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b32e:	f113 0f0d 	cmn.w	r3, #13
 801b332:	f000 8098 	beq.w	801b466 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b336:	4b54      	ldr	r3, [pc, #336]	; (801b488 <tcp_input+0x734>)
 801b338:	2200      	movs	r2, #0
 801b33a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b33c:	69f8      	ldr	r0, [r7, #28]
 801b33e:	f000 f915 	bl	801b56c <tcp_input_delayed_close>
 801b342:	4603      	mov	r3, r0
 801b344:	2b00      	cmp	r3, #0
 801b346:	f040 8090 	bne.w	801b46a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b34a:	4b4d      	ldr	r3, [pc, #308]	; (801b480 <tcp_input+0x72c>)
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d041      	beq.n	801b3d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b352:	69fb      	ldr	r3, [r7, #28]
 801b354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b356:	2b00      	cmp	r3, #0
 801b358:	d006      	beq.n	801b368 <tcp_input+0x614>
 801b35a:	4b50      	ldr	r3, [pc, #320]	; (801b49c <tcp_input+0x748>)
 801b35c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b360:	494f      	ldr	r1, [pc, #316]	; (801b4a0 <tcp_input+0x74c>)
 801b362:	4850      	ldr	r0, [pc, #320]	; (801b4a4 <tcp_input+0x750>)
 801b364:	f005 f8f4 	bl	8020550 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b368:	69fb      	ldr	r3, [r7, #28]
 801b36a:	8b5b      	ldrh	r3, [r3, #26]
 801b36c:	f003 0310 	and.w	r3, r3, #16
 801b370:	2b00      	cmp	r3, #0
 801b372:	d008      	beq.n	801b386 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b374:	4b42      	ldr	r3, [pc, #264]	; (801b480 <tcp_input+0x72c>)
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	4618      	mov	r0, r3
 801b37a:	f7fc f9f7 	bl	801776c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b37e:	69f8      	ldr	r0, [r7, #28]
 801b380:	f7fe f8a8 	bl	80194d4 <tcp_abort>
            goto aborted;
 801b384:	e091      	b.n	801b4aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b386:	69fb      	ldr	r3, [r7, #28]
 801b388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d00c      	beq.n	801b3aa <tcp_input+0x656>
 801b390:	69fb      	ldr	r3, [r7, #28]
 801b392:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b396:	69fb      	ldr	r3, [r7, #28]
 801b398:	6918      	ldr	r0, [r3, #16]
 801b39a:	4b39      	ldr	r3, [pc, #228]	; (801b480 <tcp_input+0x72c>)
 801b39c:	681a      	ldr	r2, [r3, #0]
 801b39e:	2300      	movs	r3, #0
 801b3a0:	69f9      	ldr	r1, [r7, #28]
 801b3a2:	47a0      	blx	r4
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	74fb      	strb	r3, [r7, #19]
 801b3a8:	e008      	b.n	801b3bc <tcp_input+0x668>
 801b3aa:	4b35      	ldr	r3, [pc, #212]	; (801b480 <tcp_input+0x72c>)
 801b3ac:	681a      	ldr	r2, [r3, #0]
 801b3ae:	2300      	movs	r3, #0
 801b3b0:	69f9      	ldr	r1, [r7, #28]
 801b3b2:	2000      	movs	r0, #0
 801b3b4:	f7ff f890 	bl	801a4d8 <tcp_recv_null>
 801b3b8:	4603      	mov	r3, r0
 801b3ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b3bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b3c0:	f113 0f0d 	cmn.w	r3, #13
 801b3c4:	d053      	beq.n	801b46e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b3c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d003      	beq.n	801b3d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b3ce:	4b2c      	ldr	r3, [pc, #176]	; (801b480 <tcp_input+0x72c>)
 801b3d0:	681a      	ldr	r2, [r3, #0]
 801b3d2:	69fb      	ldr	r3, [r7, #28]
 801b3d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b3d6:	4b2b      	ldr	r3, [pc, #172]	; (801b484 <tcp_input+0x730>)
 801b3d8:	781b      	ldrb	r3, [r3, #0]
 801b3da:	f003 0320 	and.w	r3, r3, #32
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d030      	beq.n	801b444 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801b3e2:	69fb      	ldr	r3, [r7, #28]
 801b3e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d009      	beq.n	801b3fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b3ea:	69fb      	ldr	r3, [r7, #28]
 801b3ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b3ee:	7b5a      	ldrb	r2, [r3, #13]
 801b3f0:	69fb      	ldr	r3, [r7, #28]
 801b3f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b3f4:	f042 0220 	orr.w	r2, r2, #32
 801b3f8:	b2d2      	uxtb	r2, r2
 801b3fa:	735a      	strb	r2, [r3, #13]
 801b3fc:	e022      	b.n	801b444 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b3fe:	69fb      	ldr	r3, [r7, #28]
 801b400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b402:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b406:	d005      	beq.n	801b414 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801b408:	69fb      	ldr	r3, [r7, #28]
 801b40a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b40c:	3301      	adds	r3, #1
 801b40e:	b29a      	uxth	r2, r3
 801b410:	69fb      	ldr	r3, [r7, #28]
 801b412:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801b414:	69fb      	ldr	r3, [r7, #28]
 801b416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d00b      	beq.n	801b436 <tcp_input+0x6e2>
 801b41e:	69fb      	ldr	r3, [r7, #28]
 801b420:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b424:	69fb      	ldr	r3, [r7, #28]
 801b426:	6918      	ldr	r0, [r3, #16]
 801b428:	2300      	movs	r3, #0
 801b42a:	2200      	movs	r2, #0
 801b42c:	69f9      	ldr	r1, [r7, #28]
 801b42e:	47a0      	blx	r4
 801b430:	4603      	mov	r3, r0
 801b432:	74fb      	strb	r3, [r7, #19]
 801b434:	e001      	b.n	801b43a <tcp_input+0x6e6>
 801b436:	2300      	movs	r3, #0
 801b438:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b43a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b43e:	f113 0f0d 	cmn.w	r3, #13
 801b442:	d016      	beq.n	801b472 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801b444:	4b13      	ldr	r3, [pc, #76]	; (801b494 <tcp_input+0x740>)
 801b446:	2200      	movs	r2, #0
 801b448:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b44a:	69f8      	ldr	r0, [r7, #28]
 801b44c:	f000 f88e 	bl	801b56c <tcp_input_delayed_close>
 801b450:	4603      	mov	r3, r0
 801b452:	2b00      	cmp	r3, #0
 801b454:	d128      	bne.n	801b4a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801b456:	69f8      	ldr	r0, [r7, #28]
 801b458:	f002 ff20 	bl	801e29c <tcp_output>
 801b45c:	e025      	b.n	801b4aa <tcp_input+0x756>
        goto aborted;
 801b45e:	bf00      	nop
 801b460:	e023      	b.n	801b4aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801b462:	bf00      	nop
 801b464:	e021      	b.n	801b4aa <tcp_input+0x756>
              goto aborted;
 801b466:	bf00      	nop
 801b468:	e01f      	b.n	801b4aa <tcp_input+0x756>
          goto aborted;
 801b46a:	bf00      	nop
 801b46c:	e01d      	b.n	801b4aa <tcp_input+0x756>
            goto aborted;
 801b46e:	bf00      	nop
 801b470:	e01b      	b.n	801b4aa <tcp_input+0x756>
              goto aborted;
 801b472:	bf00      	nop
 801b474:	e019      	b.n	801b4aa <tcp_input+0x756>
 801b476:	bf00      	nop
 801b478:	2400d3e8 	.word	0x2400d3e8
 801b47c:	2400d3f8 	.word	0x2400d3f8
 801b480:	2400d418 	.word	0x2400d418
 801b484:	2400d415 	.word	0x2400d415
 801b488:	2400d410 	.word	0x2400d410
 801b48c:	2400d414 	.word	0x2400d414
 801b490:	2400d412 	.word	0x2400d412
 801b494:	2400d41c 	.word	0x2400d41c
 801b498:	2400d3dc 	.word	0x2400d3dc
 801b49c:	080244e8 	.word	0x080244e8
 801b4a0:	080246a4 	.word	0x080246a4
 801b4a4:	0802453c 	.word	0x0802453c
          goto aborted;
 801b4a8:	bf00      	nop
    tcp_input_pcb = NULL;
 801b4aa:	4b27      	ldr	r3, [pc, #156]	; (801b548 <tcp_input+0x7f4>)
 801b4ac:	2200      	movs	r2, #0
 801b4ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801b4b0:	4b26      	ldr	r3, [pc, #152]	; (801b54c <tcp_input+0x7f8>)
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801b4b6:	4b26      	ldr	r3, [pc, #152]	; (801b550 <tcp_input+0x7fc>)
 801b4b8:	685b      	ldr	r3, [r3, #4]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d03f      	beq.n	801b53e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801b4be:	4b24      	ldr	r3, [pc, #144]	; (801b550 <tcp_input+0x7fc>)
 801b4c0:	685b      	ldr	r3, [r3, #4]
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	f7fc f952 	bl	801776c <pbuf_free>
      inseg.p = NULL;
 801b4c8:	4b21      	ldr	r3, [pc, #132]	; (801b550 <tcp_input+0x7fc>)
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801b4ce:	e036      	b.n	801b53e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b4d0:	4b20      	ldr	r3, [pc, #128]	; (801b554 <tcp_input+0x800>)
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	899b      	ldrh	r3, [r3, #12]
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	4618      	mov	r0, r3
 801b4da:	f7f5 faf9 	bl	8010ad0 <lwip_htons>
 801b4de:	4603      	mov	r3, r0
 801b4e0:	b2db      	uxtb	r3, r3
 801b4e2:	f003 0304 	and.w	r3, r3, #4
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d118      	bne.n	801b51c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4ea:	4b1b      	ldr	r3, [pc, #108]	; (801b558 <tcp_input+0x804>)
 801b4ec:	6819      	ldr	r1, [r3, #0]
 801b4ee:	4b1b      	ldr	r3, [pc, #108]	; (801b55c <tcp_input+0x808>)
 801b4f0:	881b      	ldrh	r3, [r3, #0]
 801b4f2:	461a      	mov	r2, r3
 801b4f4:	4b1a      	ldr	r3, [pc, #104]	; (801b560 <tcp_input+0x80c>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b4fa:	4b16      	ldr	r3, [pc, #88]	; (801b554 <tcp_input+0x800>)
 801b4fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4fe:	885b      	ldrh	r3, [r3, #2]
 801b500:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b502:	4a14      	ldr	r2, [pc, #80]	; (801b554 <tcp_input+0x800>)
 801b504:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b506:	8812      	ldrh	r2, [r2, #0]
 801b508:	b292      	uxth	r2, r2
 801b50a:	9202      	str	r2, [sp, #8]
 801b50c:	9301      	str	r3, [sp, #4]
 801b50e:	4b15      	ldr	r3, [pc, #84]	; (801b564 <tcp_input+0x810>)
 801b510:	9300      	str	r3, [sp, #0]
 801b512:	4b15      	ldr	r3, [pc, #84]	; (801b568 <tcp_input+0x814>)
 801b514:	4602      	mov	r2, r0
 801b516:	2000      	movs	r0, #0
 801b518:	f003 fc74 	bl	801ee04 <tcp_rst>
    pbuf_free(p);
 801b51c:	6878      	ldr	r0, [r7, #4]
 801b51e:	f7fc f925 	bl	801776c <pbuf_free>
  return;
 801b522:	e00c      	b.n	801b53e <tcp_input+0x7ea>
    goto dropped;
 801b524:	bf00      	nop
 801b526:	e006      	b.n	801b536 <tcp_input+0x7e2>
    goto dropped;
 801b528:	bf00      	nop
 801b52a:	e004      	b.n	801b536 <tcp_input+0x7e2>
    goto dropped;
 801b52c:	bf00      	nop
 801b52e:	e002      	b.n	801b536 <tcp_input+0x7e2>
      goto dropped;
 801b530:	bf00      	nop
 801b532:	e000      	b.n	801b536 <tcp_input+0x7e2>
      goto dropped;
 801b534:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801b536:	6878      	ldr	r0, [r7, #4]
 801b538:	f7fc f918 	bl	801776c <pbuf_free>
 801b53c:	e000      	b.n	801b540 <tcp_input+0x7ec>
  return;
 801b53e:	bf00      	nop
}
 801b540:	3724      	adds	r7, #36	; 0x24
 801b542:	46bd      	mov	sp, r7
 801b544:	bd90      	pop	{r4, r7, pc}
 801b546:	bf00      	nop
 801b548:	2400d41c 	.word	0x2400d41c
 801b54c:	2400d418 	.word	0x2400d418
 801b550:	2400d3e8 	.word	0x2400d3e8
 801b554:	2400d3f8 	.word	0x2400d3f8
 801b558:	2400d40c 	.word	0x2400d40c
 801b55c:	2400d412 	.word	0x2400d412
 801b560:	2400d408 	.word	0x2400d408
 801b564:	2400a0c0 	.word	0x2400a0c0
 801b568:	2400a0c4 	.word	0x2400a0c4

0801b56c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b082      	sub	sp, #8
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	2b00      	cmp	r3, #0
 801b578:	d106      	bne.n	801b588 <tcp_input_delayed_close+0x1c>
 801b57a:	4b17      	ldr	r3, [pc, #92]	; (801b5d8 <tcp_input_delayed_close+0x6c>)
 801b57c:	f240 225a 	movw	r2, #602	; 0x25a
 801b580:	4916      	ldr	r1, [pc, #88]	; (801b5dc <tcp_input_delayed_close+0x70>)
 801b582:	4817      	ldr	r0, [pc, #92]	; (801b5e0 <tcp_input_delayed_close+0x74>)
 801b584:	f004 ffe4 	bl	8020550 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801b588:	4b16      	ldr	r3, [pc, #88]	; (801b5e4 <tcp_input_delayed_close+0x78>)
 801b58a:	781b      	ldrb	r3, [r3, #0]
 801b58c:	f003 0310 	and.w	r3, r3, #16
 801b590:	2b00      	cmp	r3, #0
 801b592:	d01c      	beq.n	801b5ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	8b5b      	ldrh	r3, [r3, #26]
 801b598:	f003 0310 	and.w	r3, r3, #16
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d10d      	bne.n	801b5bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d008      	beq.n	801b5bc <tcp_input_delayed_close+0x50>
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b5b0:	687a      	ldr	r2, [r7, #4]
 801b5b2:	6912      	ldr	r2, [r2, #16]
 801b5b4:	f06f 010e 	mvn.w	r1, #14
 801b5b8:	4610      	mov	r0, r2
 801b5ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b5bc:	6879      	ldr	r1, [r7, #4]
 801b5be:	480a      	ldr	r0, [pc, #40]	; (801b5e8 <tcp_input_delayed_close+0x7c>)
 801b5c0:	f7ff fa50 	bl	801aa64 <tcp_pcb_remove>
    tcp_free(pcb);
 801b5c4:	6878      	ldr	r0, [r7, #4]
 801b5c6:	f7fd fc41 	bl	8018e4c <tcp_free>
    return 1;
 801b5ca:	2301      	movs	r3, #1
 801b5cc:	e000      	b.n	801b5d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801b5ce:	2300      	movs	r3, #0
}
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	3708      	adds	r7, #8
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	bd80      	pop	{r7, pc}
 801b5d8:	080244e8 	.word	0x080244e8
 801b5dc:	080246c0 	.word	0x080246c0
 801b5e0:	0802453c 	.word	0x0802453c
 801b5e4:	2400d415 	.word	0x2400d415
 801b5e8:	2400d3dc 	.word	0x2400d3dc

0801b5ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801b5ec:	b590      	push	{r4, r7, lr}
 801b5ee:	b08b      	sub	sp, #44	; 0x2c
 801b5f0:	af04      	add	r7, sp, #16
 801b5f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801b5f4:	4b6f      	ldr	r3, [pc, #444]	; (801b7b4 <tcp_listen_input+0x1c8>)
 801b5f6:	781b      	ldrb	r3, [r3, #0]
 801b5f8:	f003 0304 	and.w	r3, r3, #4
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	f040 80d2 	bne.w	801b7a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d106      	bne.n	801b616 <tcp_listen_input+0x2a>
 801b608:	4b6b      	ldr	r3, [pc, #428]	; (801b7b8 <tcp_listen_input+0x1cc>)
 801b60a:	f240 2281 	movw	r2, #641	; 0x281
 801b60e:	496b      	ldr	r1, [pc, #428]	; (801b7bc <tcp_listen_input+0x1d0>)
 801b610:	486b      	ldr	r0, [pc, #428]	; (801b7c0 <tcp_listen_input+0x1d4>)
 801b612:	f004 ff9d 	bl	8020550 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801b616:	4b67      	ldr	r3, [pc, #412]	; (801b7b4 <tcp_listen_input+0x1c8>)
 801b618:	781b      	ldrb	r3, [r3, #0]
 801b61a:	f003 0310 	and.w	r3, r3, #16
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d019      	beq.n	801b656 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b622:	4b68      	ldr	r3, [pc, #416]	; (801b7c4 <tcp_listen_input+0x1d8>)
 801b624:	6819      	ldr	r1, [r3, #0]
 801b626:	4b68      	ldr	r3, [pc, #416]	; (801b7c8 <tcp_listen_input+0x1dc>)
 801b628:	881b      	ldrh	r3, [r3, #0]
 801b62a:	461a      	mov	r2, r3
 801b62c:	4b67      	ldr	r3, [pc, #412]	; (801b7cc <tcp_listen_input+0x1e0>)
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b632:	4b67      	ldr	r3, [pc, #412]	; (801b7d0 <tcp_listen_input+0x1e4>)
 801b634:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b636:	885b      	ldrh	r3, [r3, #2]
 801b638:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b63a:	4a65      	ldr	r2, [pc, #404]	; (801b7d0 <tcp_listen_input+0x1e4>)
 801b63c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b63e:	8812      	ldrh	r2, [r2, #0]
 801b640:	b292      	uxth	r2, r2
 801b642:	9202      	str	r2, [sp, #8]
 801b644:	9301      	str	r3, [sp, #4]
 801b646:	4b63      	ldr	r3, [pc, #396]	; (801b7d4 <tcp_listen_input+0x1e8>)
 801b648:	9300      	str	r3, [sp, #0]
 801b64a:	4b63      	ldr	r3, [pc, #396]	; (801b7d8 <tcp_listen_input+0x1ec>)
 801b64c:	4602      	mov	r2, r0
 801b64e:	6878      	ldr	r0, [r7, #4]
 801b650:	f003 fbd8 	bl	801ee04 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801b654:	e0a9      	b.n	801b7aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801b656:	4b57      	ldr	r3, [pc, #348]	; (801b7b4 <tcp_listen_input+0x1c8>)
 801b658:	781b      	ldrb	r3, [r3, #0]
 801b65a:	f003 0302 	and.w	r3, r3, #2
 801b65e:	2b00      	cmp	r3, #0
 801b660:	f000 80a3 	beq.w	801b7aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	7d5b      	ldrb	r3, [r3, #21]
 801b668:	4618      	mov	r0, r3
 801b66a:	f7ff f859 	bl	801a720 <tcp_alloc>
 801b66e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801b670:	697b      	ldr	r3, [r7, #20]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d111      	bne.n	801b69a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	699b      	ldr	r3, [r3, #24]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d00a      	beq.n	801b694 <tcp_listen_input+0xa8>
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	699b      	ldr	r3, [r3, #24]
 801b682:	687a      	ldr	r2, [r7, #4]
 801b684:	6910      	ldr	r0, [r2, #16]
 801b686:	f04f 32ff 	mov.w	r2, #4294967295
 801b68a:	2100      	movs	r1, #0
 801b68c:	4798      	blx	r3
 801b68e:	4603      	mov	r3, r0
 801b690:	73bb      	strb	r3, [r7, #14]
      return;
 801b692:	e08b      	b.n	801b7ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b694:	23f0      	movs	r3, #240	; 0xf0
 801b696:	73bb      	strb	r3, [r7, #14]
      return;
 801b698:	e088      	b.n	801b7ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801b69a:	4b50      	ldr	r3, [pc, #320]	; (801b7dc <tcp_listen_input+0x1f0>)
 801b69c:	695a      	ldr	r2, [r3, #20]
 801b69e:	697b      	ldr	r3, [r7, #20]
 801b6a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801b6a2:	4b4e      	ldr	r3, [pc, #312]	; (801b7dc <tcp_listen_input+0x1f0>)
 801b6a4:	691a      	ldr	r2, [r3, #16]
 801b6a6:	697b      	ldr	r3, [r7, #20]
 801b6a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	8ada      	ldrh	r2, [r3, #22]
 801b6ae:	697b      	ldr	r3, [r7, #20]
 801b6b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801b6b2:	4b47      	ldr	r3, [pc, #284]	; (801b7d0 <tcp_listen_input+0x1e4>)
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	881b      	ldrh	r3, [r3, #0]
 801b6b8:	b29a      	uxth	r2, r3
 801b6ba:	697b      	ldr	r3, [r7, #20]
 801b6bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801b6be:	697b      	ldr	r3, [r7, #20]
 801b6c0:	2203      	movs	r2, #3
 801b6c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801b6c4:	4b41      	ldr	r3, [pc, #260]	; (801b7cc <tcp_listen_input+0x1e0>)
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	1c5a      	adds	r2, r3, #1
 801b6ca:	697b      	ldr	r3, [r7, #20]
 801b6cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801b6ce:	697b      	ldr	r3, [r7, #20]
 801b6d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b6d2:	697b      	ldr	r3, [r7, #20]
 801b6d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801b6d6:	6978      	ldr	r0, [r7, #20]
 801b6d8:	f7ff fa58 	bl	801ab8c <tcp_next_iss>
 801b6dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801b6de:	697b      	ldr	r3, [r7, #20]
 801b6e0:	693a      	ldr	r2, [r7, #16]
 801b6e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801b6e4:	697b      	ldr	r3, [r7, #20]
 801b6e6:	693a      	ldr	r2, [r7, #16]
 801b6e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801b6ea:	697b      	ldr	r3, [r7, #20]
 801b6ec:	693a      	ldr	r2, [r7, #16]
 801b6ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801b6f0:	697b      	ldr	r3, [r7, #20]
 801b6f2:	693a      	ldr	r2, [r7, #16]
 801b6f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b6f6:	4b35      	ldr	r3, [pc, #212]	; (801b7cc <tcp_listen_input+0x1e0>)
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	1e5a      	subs	r2, r3, #1
 801b6fc:	697b      	ldr	r3, [r7, #20]
 801b6fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	691a      	ldr	r2, [r3, #16]
 801b704:	697b      	ldr	r3, [r7, #20]
 801b706:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801b708:	697b      	ldr	r3, [r7, #20]
 801b70a:	687a      	ldr	r2, [r7, #4]
 801b70c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	7a5b      	ldrb	r3, [r3, #9]
 801b712:	f003 030c 	and.w	r3, r3, #12
 801b716:	b2da      	uxtb	r2, r3
 801b718:	697b      	ldr	r3, [r7, #20]
 801b71a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	7a1a      	ldrb	r2, [r3, #8]
 801b720:	697b      	ldr	r3, [r7, #20]
 801b722:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801b724:	4b2e      	ldr	r3, [pc, #184]	; (801b7e0 <tcp_listen_input+0x1f4>)
 801b726:	681a      	ldr	r2, [r3, #0]
 801b728:	697b      	ldr	r3, [r7, #20]
 801b72a:	60da      	str	r2, [r3, #12]
 801b72c:	4a2c      	ldr	r2, [pc, #176]	; (801b7e0 <tcp_listen_input+0x1f4>)
 801b72e:	697b      	ldr	r3, [r7, #20]
 801b730:	6013      	str	r3, [r2, #0]
 801b732:	f003 fee1 	bl	801f4f8 <tcp_timer_needed>
 801b736:	4b2b      	ldr	r3, [pc, #172]	; (801b7e4 <tcp_listen_input+0x1f8>)
 801b738:	2201      	movs	r2, #1
 801b73a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801b73c:	6978      	ldr	r0, [r7, #20]
 801b73e:	f001 fd8f 	bl	801d260 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801b742:	4b23      	ldr	r3, [pc, #140]	; (801b7d0 <tcp_listen_input+0x1e4>)
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	89db      	ldrh	r3, [r3, #14]
 801b748:	b29a      	uxth	r2, r3
 801b74a:	697b      	ldr	r3, [r7, #20]
 801b74c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801b750:	697b      	ldr	r3, [r7, #20]
 801b752:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b756:	697b      	ldr	r3, [r7, #20]
 801b758:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b75c:	697b      	ldr	r3, [r7, #20]
 801b75e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b760:	697b      	ldr	r3, [r7, #20]
 801b762:	3304      	adds	r3, #4
 801b764:	4618      	mov	r0, r3
 801b766:	f7f8 fe81 	bl	801446c <ip4_route>
 801b76a:	4601      	mov	r1, r0
 801b76c:	697b      	ldr	r3, [r7, #20]
 801b76e:	3304      	adds	r3, #4
 801b770:	461a      	mov	r2, r3
 801b772:	4620      	mov	r0, r4
 801b774:	f7ff fa30 	bl	801abd8 <tcp_eff_send_mss_netif>
 801b778:	4603      	mov	r3, r0
 801b77a:	461a      	mov	r2, r3
 801b77c:	697b      	ldr	r3, [r7, #20]
 801b77e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801b780:	2112      	movs	r1, #18
 801b782:	6978      	ldr	r0, [r7, #20]
 801b784:	f002 fc9c 	bl	801e0c0 <tcp_enqueue_flags>
 801b788:	4603      	mov	r3, r0
 801b78a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801b78c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d004      	beq.n	801b79e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801b794:	2100      	movs	r1, #0
 801b796:	6978      	ldr	r0, [r7, #20]
 801b798:	f7fd fdde 	bl	8019358 <tcp_abandon>
      return;
 801b79c:	e006      	b.n	801b7ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801b79e:	6978      	ldr	r0, [r7, #20]
 801b7a0:	f002 fd7c 	bl	801e29c <tcp_output>
  return;
 801b7a4:	e001      	b.n	801b7aa <tcp_listen_input+0x1be>
    return;
 801b7a6:	bf00      	nop
 801b7a8:	e000      	b.n	801b7ac <tcp_listen_input+0x1c0>
  return;
 801b7aa:	bf00      	nop
}
 801b7ac:	371c      	adds	r7, #28
 801b7ae:	46bd      	mov	sp, r7
 801b7b0:	bd90      	pop	{r4, r7, pc}
 801b7b2:	bf00      	nop
 801b7b4:	2400d414 	.word	0x2400d414
 801b7b8:	080244e8 	.word	0x080244e8
 801b7bc:	080246e8 	.word	0x080246e8
 801b7c0:	0802453c 	.word	0x0802453c
 801b7c4:	2400d40c 	.word	0x2400d40c
 801b7c8:	2400d412 	.word	0x2400d412
 801b7cc:	2400d408 	.word	0x2400d408
 801b7d0:	2400d3f8 	.word	0x2400d3f8
 801b7d4:	2400a0c0 	.word	0x2400a0c0
 801b7d8:	2400a0c4 	.word	0x2400a0c4
 801b7dc:	2400a0b0 	.word	0x2400a0b0
 801b7e0:	2400d3dc 	.word	0x2400d3dc
 801b7e4:	2400d3e4 	.word	0x2400d3e4

0801b7e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b086      	sub	sp, #24
 801b7ec:	af04      	add	r7, sp, #16
 801b7ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801b7f0:	4b2f      	ldr	r3, [pc, #188]	; (801b8b0 <tcp_timewait_input+0xc8>)
 801b7f2:	781b      	ldrb	r3, [r3, #0]
 801b7f4:	f003 0304 	and.w	r3, r3, #4
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d153      	bne.n	801b8a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d106      	bne.n	801b810 <tcp_timewait_input+0x28>
 801b802:	4b2c      	ldr	r3, [pc, #176]	; (801b8b4 <tcp_timewait_input+0xcc>)
 801b804:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b808:	492b      	ldr	r1, [pc, #172]	; (801b8b8 <tcp_timewait_input+0xd0>)
 801b80a:	482c      	ldr	r0, [pc, #176]	; (801b8bc <tcp_timewait_input+0xd4>)
 801b80c:	f004 fea0 	bl	8020550 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801b810:	4b27      	ldr	r3, [pc, #156]	; (801b8b0 <tcp_timewait_input+0xc8>)
 801b812:	781b      	ldrb	r3, [r3, #0]
 801b814:	f003 0302 	and.w	r3, r3, #2
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d02a      	beq.n	801b872 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801b81c:	4b28      	ldr	r3, [pc, #160]	; (801b8c0 <tcp_timewait_input+0xd8>)
 801b81e:	681a      	ldr	r2, [r3, #0]
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b824:	1ad3      	subs	r3, r2, r3
 801b826:	2b00      	cmp	r3, #0
 801b828:	db2d      	blt.n	801b886 <tcp_timewait_input+0x9e>
 801b82a:	4b25      	ldr	r3, [pc, #148]	; (801b8c0 <tcp_timewait_input+0xd8>)
 801b82c:	681a      	ldr	r2, [r3, #0]
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b832:	6879      	ldr	r1, [r7, #4]
 801b834:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b836:	440b      	add	r3, r1
 801b838:	1ad3      	subs	r3, r2, r3
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	dc23      	bgt.n	801b886 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b83e:	4b21      	ldr	r3, [pc, #132]	; (801b8c4 <tcp_timewait_input+0xdc>)
 801b840:	6819      	ldr	r1, [r3, #0]
 801b842:	4b21      	ldr	r3, [pc, #132]	; (801b8c8 <tcp_timewait_input+0xe0>)
 801b844:	881b      	ldrh	r3, [r3, #0]
 801b846:	461a      	mov	r2, r3
 801b848:	4b1d      	ldr	r3, [pc, #116]	; (801b8c0 <tcp_timewait_input+0xd8>)
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b84e:	4b1f      	ldr	r3, [pc, #124]	; (801b8cc <tcp_timewait_input+0xe4>)
 801b850:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b852:	885b      	ldrh	r3, [r3, #2]
 801b854:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b856:	4a1d      	ldr	r2, [pc, #116]	; (801b8cc <tcp_timewait_input+0xe4>)
 801b858:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b85a:	8812      	ldrh	r2, [r2, #0]
 801b85c:	b292      	uxth	r2, r2
 801b85e:	9202      	str	r2, [sp, #8]
 801b860:	9301      	str	r3, [sp, #4]
 801b862:	4b1b      	ldr	r3, [pc, #108]	; (801b8d0 <tcp_timewait_input+0xe8>)
 801b864:	9300      	str	r3, [sp, #0]
 801b866:	4b1b      	ldr	r3, [pc, #108]	; (801b8d4 <tcp_timewait_input+0xec>)
 801b868:	4602      	mov	r2, r0
 801b86a:	6878      	ldr	r0, [r7, #4]
 801b86c:	f003 faca 	bl	801ee04 <tcp_rst>
      return;
 801b870:	e01b      	b.n	801b8aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801b872:	4b0f      	ldr	r3, [pc, #60]	; (801b8b0 <tcp_timewait_input+0xc8>)
 801b874:	781b      	ldrb	r3, [r3, #0]
 801b876:	f003 0301 	and.w	r3, r3, #1
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d003      	beq.n	801b886 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801b87e:	4b16      	ldr	r3, [pc, #88]	; (801b8d8 <tcp_timewait_input+0xf0>)
 801b880:	681a      	ldr	r2, [r3, #0]
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801b886:	4b10      	ldr	r3, [pc, #64]	; (801b8c8 <tcp_timewait_input+0xe0>)
 801b888:	881b      	ldrh	r3, [r3, #0]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d00c      	beq.n	801b8a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	8b5b      	ldrh	r3, [r3, #26]
 801b892:	f043 0302 	orr.w	r3, r3, #2
 801b896:	b29a      	uxth	r2, r3
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b89c:	6878      	ldr	r0, [r7, #4]
 801b89e:	f002 fcfd 	bl	801e29c <tcp_output>
  }
  return;
 801b8a2:	e001      	b.n	801b8a8 <tcp_timewait_input+0xc0>
    return;
 801b8a4:	bf00      	nop
 801b8a6:	e000      	b.n	801b8aa <tcp_timewait_input+0xc2>
  return;
 801b8a8:	bf00      	nop
}
 801b8aa:	3708      	adds	r7, #8
 801b8ac:	46bd      	mov	sp, r7
 801b8ae:	bd80      	pop	{r7, pc}
 801b8b0:	2400d414 	.word	0x2400d414
 801b8b4:	080244e8 	.word	0x080244e8
 801b8b8:	08024708 	.word	0x08024708
 801b8bc:	0802453c 	.word	0x0802453c
 801b8c0:	2400d408 	.word	0x2400d408
 801b8c4:	2400d40c 	.word	0x2400d40c
 801b8c8:	2400d412 	.word	0x2400d412
 801b8cc:	2400d3f8 	.word	0x2400d3f8
 801b8d0:	2400a0c0 	.word	0x2400a0c0
 801b8d4:	2400a0c4 	.word	0x2400a0c4
 801b8d8:	2400d3d0 	.word	0x2400d3d0

0801b8dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801b8dc:	b590      	push	{r4, r7, lr}
 801b8de:	b08d      	sub	sp, #52	; 0x34
 801b8e0:	af04      	add	r7, sp, #16
 801b8e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d106      	bne.n	801b900 <tcp_process+0x24>
 801b8f2:	4b9d      	ldr	r3, [pc, #628]	; (801bb68 <tcp_process+0x28c>)
 801b8f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801b8f8:	499c      	ldr	r1, [pc, #624]	; (801bb6c <tcp_process+0x290>)
 801b8fa:	489d      	ldr	r0, [pc, #628]	; (801bb70 <tcp_process+0x294>)
 801b8fc:	f004 fe28 	bl	8020550 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801b900:	4b9c      	ldr	r3, [pc, #624]	; (801bb74 <tcp_process+0x298>)
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	f003 0304 	and.w	r3, r3, #4
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d04e      	beq.n	801b9aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	7d1b      	ldrb	r3, [r3, #20]
 801b910:	2b02      	cmp	r3, #2
 801b912:	d108      	bne.n	801b926 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b918:	4b97      	ldr	r3, [pc, #604]	; (801bb78 <tcp_process+0x29c>)
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	429a      	cmp	r2, r3
 801b91e:	d123      	bne.n	801b968 <tcp_process+0x8c>
        acceptable = 1;
 801b920:	2301      	movs	r3, #1
 801b922:	76fb      	strb	r3, [r7, #27]
 801b924:	e020      	b.n	801b968 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b92a:	4b94      	ldr	r3, [pc, #592]	; (801bb7c <tcp_process+0x2a0>)
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	429a      	cmp	r2, r3
 801b930:	d102      	bne.n	801b938 <tcp_process+0x5c>
        acceptable = 1;
 801b932:	2301      	movs	r3, #1
 801b934:	76fb      	strb	r3, [r7, #27]
 801b936:	e017      	b.n	801b968 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b938:	4b90      	ldr	r3, [pc, #576]	; (801bb7c <tcp_process+0x2a0>)
 801b93a:	681a      	ldr	r2, [r3, #0]
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b940:	1ad3      	subs	r3, r2, r3
 801b942:	2b00      	cmp	r3, #0
 801b944:	db10      	blt.n	801b968 <tcp_process+0x8c>
 801b946:	4b8d      	ldr	r3, [pc, #564]	; (801bb7c <tcp_process+0x2a0>)
 801b948:	681a      	ldr	r2, [r3, #0]
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b94e:	6879      	ldr	r1, [r7, #4]
 801b950:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b952:	440b      	add	r3, r1
 801b954:	1ad3      	subs	r3, r2, r3
 801b956:	2b00      	cmp	r3, #0
 801b958:	dc06      	bgt.n	801b968 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	8b5b      	ldrh	r3, [r3, #26]
 801b95e:	f043 0302 	orr.w	r3, r3, #2
 801b962:	b29a      	uxth	r2, r3
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801b968:	7efb      	ldrb	r3, [r7, #27]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d01b      	beq.n	801b9a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	7d1b      	ldrb	r3, [r3, #20]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d106      	bne.n	801b984 <tcp_process+0xa8>
 801b976:	4b7c      	ldr	r3, [pc, #496]	; (801bb68 <tcp_process+0x28c>)
 801b978:	f44f 724e 	mov.w	r2, #824	; 0x338
 801b97c:	4980      	ldr	r1, [pc, #512]	; (801bb80 <tcp_process+0x2a4>)
 801b97e:	487c      	ldr	r0, [pc, #496]	; (801bb70 <tcp_process+0x294>)
 801b980:	f004 fde6 	bl	8020550 <iprintf>
      recv_flags |= TF_RESET;
 801b984:	4b7f      	ldr	r3, [pc, #508]	; (801bb84 <tcp_process+0x2a8>)
 801b986:	781b      	ldrb	r3, [r3, #0]
 801b988:	f043 0308 	orr.w	r3, r3, #8
 801b98c:	b2da      	uxtb	r2, r3
 801b98e:	4b7d      	ldr	r3, [pc, #500]	; (801bb84 <tcp_process+0x2a8>)
 801b990:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	8b5b      	ldrh	r3, [r3, #26]
 801b996:	f023 0301 	bic.w	r3, r3, #1
 801b99a:	b29a      	uxth	r2, r3
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801b9a0:	f06f 030d 	mvn.w	r3, #13
 801b9a4:	e37a      	b.n	801c09c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	e378      	b.n	801c09c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801b9aa:	4b72      	ldr	r3, [pc, #456]	; (801bb74 <tcp_process+0x298>)
 801b9ac:	781b      	ldrb	r3, [r3, #0]
 801b9ae:	f003 0302 	and.w	r3, r3, #2
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d010      	beq.n	801b9d8 <tcp_process+0xfc>
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	7d1b      	ldrb	r3, [r3, #20]
 801b9ba:	2b02      	cmp	r3, #2
 801b9bc:	d00c      	beq.n	801b9d8 <tcp_process+0xfc>
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	7d1b      	ldrb	r3, [r3, #20]
 801b9c2:	2b03      	cmp	r3, #3
 801b9c4:	d008      	beq.n	801b9d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	8b5b      	ldrh	r3, [r3, #26]
 801b9ca:	f043 0302 	orr.w	r3, r3, #2
 801b9ce:	b29a      	uxth	r2, r3
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	e361      	b.n	801c09c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	8b5b      	ldrh	r3, [r3, #26]
 801b9dc:	f003 0310 	and.w	r3, r3, #16
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d103      	bne.n	801b9ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801b9e4:	4b68      	ldr	r3, [pc, #416]	; (801bb88 <tcp_process+0x2ac>)
 801b9e6:	681a      	ldr	r2, [r3, #0]
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	2200      	movs	r2, #0
 801b9f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	2200      	movs	r2, #0
 801b9f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801b9fc:	6878      	ldr	r0, [r7, #4]
 801b9fe:	f001 fc2f 	bl	801d260 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	7d1b      	ldrb	r3, [r3, #20]
 801ba06:	3b02      	subs	r3, #2
 801ba08:	2b07      	cmp	r3, #7
 801ba0a:	f200 8337 	bhi.w	801c07c <tcp_process+0x7a0>
 801ba0e:	a201      	add	r2, pc, #4	; (adr r2, 801ba14 <tcp_process+0x138>)
 801ba10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba14:	0801ba35 	.word	0x0801ba35
 801ba18:	0801bc65 	.word	0x0801bc65
 801ba1c:	0801bddd 	.word	0x0801bddd
 801ba20:	0801be07 	.word	0x0801be07
 801ba24:	0801bf2b 	.word	0x0801bf2b
 801ba28:	0801bddd 	.word	0x0801bddd
 801ba2c:	0801bfb7 	.word	0x0801bfb7
 801ba30:	0801c047 	.word	0x0801c047
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801ba34:	4b4f      	ldr	r3, [pc, #316]	; (801bb74 <tcp_process+0x298>)
 801ba36:	781b      	ldrb	r3, [r3, #0]
 801ba38:	f003 0310 	and.w	r3, r3, #16
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	f000 80e4 	beq.w	801bc0a <tcp_process+0x32e>
 801ba42:	4b4c      	ldr	r3, [pc, #304]	; (801bb74 <tcp_process+0x298>)
 801ba44:	781b      	ldrb	r3, [r3, #0]
 801ba46:	f003 0302 	and.w	r3, r3, #2
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	f000 80dd 	beq.w	801bc0a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba54:	1c5a      	adds	r2, r3, #1
 801ba56:	4b48      	ldr	r3, [pc, #288]	; (801bb78 <tcp_process+0x29c>)
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	429a      	cmp	r2, r3
 801ba5c:	f040 80d5 	bne.w	801bc0a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801ba60:	4b46      	ldr	r3, [pc, #280]	; (801bb7c <tcp_process+0x2a0>)
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	1c5a      	adds	r2, r3, #1
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801ba72:	4b41      	ldr	r3, [pc, #260]	; (801bb78 <tcp_process+0x29c>)
 801ba74:	681a      	ldr	r2, [r3, #0]
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801ba7a:	4b44      	ldr	r3, [pc, #272]	; (801bb8c <tcp_process+0x2b0>)
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	89db      	ldrh	r3, [r3, #14]
 801ba80:	b29a      	uxth	r2, r3
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801ba94:	4b39      	ldr	r3, [pc, #228]	; (801bb7c <tcp_process+0x2a0>)
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	1e5a      	subs	r2, r3, #1
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	2204      	movs	r2, #4
 801baa2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	3304      	adds	r3, #4
 801baac:	4618      	mov	r0, r3
 801baae:	f7f8 fcdd 	bl	801446c <ip4_route>
 801bab2:	4601      	mov	r1, r0
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	3304      	adds	r3, #4
 801bab8:	461a      	mov	r2, r3
 801baba:	4620      	mov	r0, r4
 801babc:	f7ff f88c 	bl	801abd8 <tcp_eff_send_mss_netif>
 801bac0:	4603      	mov	r3, r0
 801bac2:	461a      	mov	r2, r3
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bacc:	009a      	lsls	r2, r3, #2
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bad2:	005b      	lsls	r3, r3, #1
 801bad4:	f241 111c 	movw	r1, #4380	; 0x111c
 801bad8:	428b      	cmp	r3, r1
 801bada:	bf38      	it	cc
 801badc:	460b      	movcc	r3, r1
 801bade:	429a      	cmp	r2, r3
 801bae0:	d204      	bcs.n	801baec <tcp_process+0x210>
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bae6:	009b      	lsls	r3, r3, #2
 801bae8:	b29b      	uxth	r3, r3
 801baea:	e00d      	b.n	801bb08 <tcp_process+0x22c>
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801baf0:	005b      	lsls	r3, r3, #1
 801baf2:	f241 121c 	movw	r2, #4380	; 0x111c
 801baf6:	4293      	cmp	r3, r2
 801baf8:	d904      	bls.n	801bb04 <tcp_process+0x228>
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bafe:	005b      	lsls	r3, r3, #1
 801bb00:	b29b      	uxth	r3, r3
 801bb02:	e001      	b.n	801bb08 <tcp_process+0x22c>
 801bb04:	f241 131c 	movw	r3, #4380	; 0x111c
 801bb08:	687a      	ldr	r2, [r7, #4]
 801bb0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d106      	bne.n	801bb26 <tcp_process+0x24a>
 801bb18:	4b13      	ldr	r3, [pc, #76]	; (801bb68 <tcp_process+0x28c>)
 801bb1a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801bb1e:	491c      	ldr	r1, [pc, #112]	; (801bb90 <tcp_process+0x2b4>)
 801bb20:	4813      	ldr	r0, [pc, #76]	; (801bb70 <tcp_process+0x294>)
 801bb22:	f004 fd15 	bl	8020550 <iprintf>
        --pcb->snd_queuelen;
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb2c:	3b01      	subs	r3, #1
 801bb2e:	b29a      	uxth	r2, r3
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb3a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801bb3c:	69fb      	ldr	r3, [r7, #28]
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d12a      	bne.n	801bb98 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb46:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801bb48:	69fb      	ldr	r3, [r7, #28]
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d106      	bne.n	801bb5c <tcp_process+0x280>
 801bb4e:	4b06      	ldr	r3, [pc, #24]	; (801bb68 <tcp_process+0x28c>)
 801bb50:	f44f 725d 	mov.w	r2, #884	; 0x374
 801bb54:	490f      	ldr	r1, [pc, #60]	; (801bb94 <tcp_process+0x2b8>)
 801bb56:	4806      	ldr	r0, [pc, #24]	; (801bb70 <tcp_process+0x294>)
 801bb58:	f004 fcfa 	bl	8020550 <iprintf>
          pcb->unsent = rseg->next;
 801bb5c:	69fb      	ldr	r3, [r7, #28]
 801bb5e:	681a      	ldr	r2, [r3, #0]
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	66da      	str	r2, [r3, #108]	; 0x6c
 801bb64:	e01c      	b.n	801bba0 <tcp_process+0x2c4>
 801bb66:	bf00      	nop
 801bb68:	080244e8 	.word	0x080244e8
 801bb6c:	08024728 	.word	0x08024728
 801bb70:	0802453c 	.word	0x0802453c
 801bb74:	2400d414 	.word	0x2400d414
 801bb78:	2400d40c 	.word	0x2400d40c
 801bb7c:	2400d408 	.word	0x2400d408
 801bb80:	08024744 	.word	0x08024744
 801bb84:	2400d415 	.word	0x2400d415
 801bb88:	2400d3d0 	.word	0x2400d3d0
 801bb8c:	2400d3f8 	.word	0x2400d3f8
 801bb90:	08024764 	.word	0x08024764
 801bb94:	0802477c 	.word	0x0802477c
        } else {
          pcb->unacked = rseg->next;
 801bb98:	69fb      	ldr	r3, [r7, #28]
 801bb9a:	681a      	ldr	r2, [r3, #0]
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801bba0:	69f8      	ldr	r0, [r7, #28]
 801bba2:	f7fe fc54 	bl	801a44e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d104      	bne.n	801bbb8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbb4:	861a      	strh	r2, [r3, #48]	; 0x30
 801bbb6:	e006      	b.n	801bbc6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	2200      	movs	r2, #0
 801bbbc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d00a      	beq.n	801bbe6 <tcp_process+0x30a>
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbd6:	687a      	ldr	r2, [r7, #4]
 801bbd8:	6910      	ldr	r0, [r2, #16]
 801bbda:	2200      	movs	r2, #0
 801bbdc:	6879      	ldr	r1, [r7, #4]
 801bbde:	4798      	blx	r3
 801bbe0:	4603      	mov	r3, r0
 801bbe2:	76bb      	strb	r3, [r7, #26]
 801bbe4:	e001      	b.n	801bbea <tcp_process+0x30e>
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801bbea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bbee:	f113 0f0d 	cmn.w	r3, #13
 801bbf2:	d102      	bne.n	801bbfa <tcp_process+0x31e>
          return ERR_ABRT;
 801bbf4:	f06f 030c 	mvn.w	r3, #12
 801bbf8:	e250      	b.n	801c09c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	8b5b      	ldrh	r3, [r3, #26]
 801bbfe:	f043 0302 	orr.w	r3, r3, #2
 801bc02:	b29a      	uxth	r2, r3
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801bc08:	e23a      	b.n	801c080 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801bc0a:	4b98      	ldr	r3, [pc, #608]	; (801be6c <tcp_process+0x590>)
 801bc0c:	781b      	ldrb	r3, [r3, #0]
 801bc0e:	f003 0310 	and.w	r3, r3, #16
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	f000 8234 	beq.w	801c080 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc18:	4b95      	ldr	r3, [pc, #596]	; (801be70 <tcp_process+0x594>)
 801bc1a:	6819      	ldr	r1, [r3, #0]
 801bc1c:	4b95      	ldr	r3, [pc, #596]	; (801be74 <tcp_process+0x598>)
 801bc1e:	881b      	ldrh	r3, [r3, #0]
 801bc20:	461a      	mov	r2, r3
 801bc22:	4b95      	ldr	r3, [pc, #596]	; (801be78 <tcp_process+0x59c>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc28:	4b94      	ldr	r3, [pc, #592]	; (801be7c <tcp_process+0x5a0>)
 801bc2a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc2c:	885b      	ldrh	r3, [r3, #2]
 801bc2e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc30:	4a92      	ldr	r2, [pc, #584]	; (801be7c <tcp_process+0x5a0>)
 801bc32:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc34:	8812      	ldrh	r2, [r2, #0]
 801bc36:	b292      	uxth	r2, r2
 801bc38:	9202      	str	r2, [sp, #8]
 801bc3a:	9301      	str	r3, [sp, #4]
 801bc3c:	4b90      	ldr	r3, [pc, #576]	; (801be80 <tcp_process+0x5a4>)
 801bc3e:	9300      	str	r3, [sp, #0]
 801bc40:	4b90      	ldr	r3, [pc, #576]	; (801be84 <tcp_process+0x5a8>)
 801bc42:	4602      	mov	r2, r0
 801bc44:	6878      	ldr	r0, [r7, #4]
 801bc46:	f003 f8dd 	bl	801ee04 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bc50:	2b05      	cmp	r3, #5
 801bc52:	f200 8215 	bhi.w	801c080 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	2200      	movs	r2, #0
 801bc5a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801bc5c:	6878      	ldr	r0, [r7, #4]
 801bc5e:	f002 fea7 	bl	801e9b0 <tcp_rexmit_rto>
      break;
 801bc62:	e20d      	b.n	801c080 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801bc64:	4b81      	ldr	r3, [pc, #516]	; (801be6c <tcp_process+0x590>)
 801bc66:	781b      	ldrb	r3, [r3, #0]
 801bc68:	f003 0310 	and.w	r3, r3, #16
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	f000 80a1 	beq.w	801bdb4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bc72:	4b7f      	ldr	r3, [pc, #508]	; (801be70 <tcp_process+0x594>)
 801bc74:	681a      	ldr	r2, [r3, #0]
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc7a:	1ad3      	subs	r3, r2, r3
 801bc7c:	3b01      	subs	r3, #1
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	db7e      	blt.n	801bd80 <tcp_process+0x4a4>
 801bc82:	4b7b      	ldr	r3, [pc, #492]	; (801be70 <tcp_process+0x594>)
 801bc84:	681a      	ldr	r2, [r3, #0]
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bc8a:	1ad3      	subs	r3, r2, r3
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	dc77      	bgt.n	801bd80 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	2204      	movs	r2, #4
 801bc94:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d102      	bne.n	801bca4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801bc9e:	23fa      	movs	r3, #250	; 0xfa
 801bca0:	76bb      	strb	r3, [r7, #26]
 801bca2:	e01d      	b.n	801bce0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bca8:	699b      	ldr	r3, [r3, #24]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d106      	bne.n	801bcbc <tcp_process+0x3e0>
 801bcae:	4b76      	ldr	r3, [pc, #472]	; (801be88 <tcp_process+0x5ac>)
 801bcb0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801bcb4:	4975      	ldr	r1, [pc, #468]	; (801be8c <tcp_process+0x5b0>)
 801bcb6:	4876      	ldr	r0, [pc, #472]	; (801be90 <tcp_process+0x5b4>)
 801bcb8:	f004 fc4a 	bl	8020550 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bcc0:	699b      	ldr	r3, [r3, #24]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d00a      	beq.n	801bcdc <tcp_process+0x400>
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bcca:	699b      	ldr	r3, [r3, #24]
 801bccc:	687a      	ldr	r2, [r7, #4]
 801bcce:	6910      	ldr	r0, [r2, #16]
 801bcd0:	2200      	movs	r2, #0
 801bcd2:	6879      	ldr	r1, [r7, #4]
 801bcd4:	4798      	blx	r3
 801bcd6:	4603      	mov	r3, r0
 801bcd8:	76bb      	strb	r3, [r7, #26]
 801bcda:	e001      	b.n	801bce0 <tcp_process+0x404>
 801bcdc:	23f0      	movs	r3, #240	; 0xf0
 801bcde:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801bce0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d00a      	beq.n	801bcfe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801bce8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bcec:	f113 0f0d 	cmn.w	r3, #13
 801bcf0:	d002      	beq.n	801bcf8 <tcp_process+0x41c>
              tcp_abort(pcb);
 801bcf2:	6878      	ldr	r0, [r7, #4]
 801bcf4:	f7fd fbee 	bl	80194d4 <tcp_abort>
            }
            return ERR_ABRT;
 801bcf8:	f06f 030c 	mvn.w	r3, #12
 801bcfc:	e1ce      	b.n	801c09c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801bcfe:	6878      	ldr	r0, [r7, #4]
 801bd00:	f000 fae0 	bl	801c2c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801bd04:	4b63      	ldr	r3, [pc, #396]	; (801be94 <tcp_process+0x5b8>)
 801bd06:	881b      	ldrh	r3, [r3, #0]
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d005      	beq.n	801bd18 <tcp_process+0x43c>
            recv_acked--;
 801bd0c:	4b61      	ldr	r3, [pc, #388]	; (801be94 <tcp_process+0x5b8>)
 801bd0e:	881b      	ldrh	r3, [r3, #0]
 801bd10:	3b01      	subs	r3, #1
 801bd12:	b29a      	uxth	r2, r3
 801bd14:	4b5f      	ldr	r3, [pc, #380]	; (801be94 <tcp_process+0x5b8>)
 801bd16:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd1c:	009a      	lsls	r2, r3, #2
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd22:	005b      	lsls	r3, r3, #1
 801bd24:	f241 111c 	movw	r1, #4380	; 0x111c
 801bd28:	428b      	cmp	r3, r1
 801bd2a:	bf38      	it	cc
 801bd2c:	460b      	movcc	r3, r1
 801bd2e:	429a      	cmp	r2, r3
 801bd30:	d204      	bcs.n	801bd3c <tcp_process+0x460>
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd36:	009b      	lsls	r3, r3, #2
 801bd38:	b29b      	uxth	r3, r3
 801bd3a:	e00d      	b.n	801bd58 <tcp_process+0x47c>
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd40:	005b      	lsls	r3, r3, #1
 801bd42:	f241 121c 	movw	r2, #4380	; 0x111c
 801bd46:	4293      	cmp	r3, r2
 801bd48:	d904      	bls.n	801bd54 <tcp_process+0x478>
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd4e:	005b      	lsls	r3, r3, #1
 801bd50:	b29b      	uxth	r3, r3
 801bd52:	e001      	b.n	801bd58 <tcp_process+0x47c>
 801bd54:	f241 131c 	movw	r3, #4380	; 0x111c
 801bd58:	687a      	ldr	r2, [r7, #4]
 801bd5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801bd5e:	4b4e      	ldr	r3, [pc, #312]	; (801be98 <tcp_process+0x5bc>)
 801bd60:	781b      	ldrb	r3, [r3, #0]
 801bd62:	f003 0320 	and.w	r3, r3, #32
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d037      	beq.n	801bdda <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	8b5b      	ldrh	r3, [r3, #26]
 801bd6e:	f043 0302 	orr.w	r3, r3, #2
 801bd72:	b29a      	uxth	r2, r3
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	2207      	movs	r2, #7
 801bd7c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801bd7e:	e02c      	b.n	801bdda <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd80:	4b3b      	ldr	r3, [pc, #236]	; (801be70 <tcp_process+0x594>)
 801bd82:	6819      	ldr	r1, [r3, #0]
 801bd84:	4b3b      	ldr	r3, [pc, #236]	; (801be74 <tcp_process+0x598>)
 801bd86:	881b      	ldrh	r3, [r3, #0]
 801bd88:	461a      	mov	r2, r3
 801bd8a:	4b3b      	ldr	r3, [pc, #236]	; (801be78 <tcp_process+0x59c>)
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bd90:	4b3a      	ldr	r3, [pc, #232]	; (801be7c <tcp_process+0x5a0>)
 801bd92:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd94:	885b      	ldrh	r3, [r3, #2]
 801bd96:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bd98:	4a38      	ldr	r2, [pc, #224]	; (801be7c <tcp_process+0x5a0>)
 801bd9a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd9c:	8812      	ldrh	r2, [r2, #0]
 801bd9e:	b292      	uxth	r2, r2
 801bda0:	9202      	str	r2, [sp, #8]
 801bda2:	9301      	str	r3, [sp, #4]
 801bda4:	4b36      	ldr	r3, [pc, #216]	; (801be80 <tcp_process+0x5a4>)
 801bda6:	9300      	str	r3, [sp, #0]
 801bda8:	4b36      	ldr	r3, [pc, #216]	; (801be84 <tcp_process+0x5a8>)
 801bdaa:	4602      	mov	r2, r0
 801bdac:	6878      	ldr	r0, [r7, #4]
 801bdae:	f003 f829 	bl	801ee04 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801bdb2:	e167      	b.n	801c084 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801bdb4:	4b2d      	ldr	r3, [pc, #180]	; (801be6c <tcp_process+0x590>)
 801bdb6:	781b      	ldrb	r3, [r3, #0]
 801bdb8:	f003 0302 	and.w	r3, r3, #2
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	f000 8161 	beq.w	801c084 <tcp_process+0x7a8>
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdc6:	1e5a      	subs	r2, r3, #1
 801bdc8:	4b2b      	ldr	r3, [pc, #172]	; (801be78 <tcp_process+0x59c>)
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	429a      	cmp	r2, r3
 801bdce:	f040 8159 	bne.w	801c084 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801bdd2:	6878      	ldr	r0, [r7, #4]
 801bdd4:	f002 fe0e 	bl	801e9f4 <tcp_rexmit>
      break;
 801bdd8:	e154      	b.n	801c084 <tcp_process+0x7a8>
 801bdda:	e153      	b.n	801c084 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801bddc:	6878      	ldr	r0, [r7, #4]
 801bdde:	f000 fa71 	bl	801c2c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801bde2:	4b2d      	ldr	r3, [pc, #180]	; (801be98 <tcp_process+0x5bc>)
 801bde4:	781b      	ldrb	r3, [r3, #0]
 801bde6:	f003 0320 	and.w	r3, r3, #32
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	f000 814c 	beq.w	801c088 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	8b5b      	ldrh	r3, [r3, #26]
 801bdf4:	f043 0302 	orr.w	r3, r3, #2
 801bdf8:	b29a      	uxth	r2, r3
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	2207      	movs	r2, #7
 801be02:	751a      	strb	r2, [r3, #20]
      }
      break;
 801be04:	e140      	b.n	801c088 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801be06:	6878      	ldr	r0, [r7, #4]
 801be08:	f000 fa5c 	bl	801c2c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801be0c:	4b22      	ldr	r3, [pc, #136]	; (801be98 <tcp_process+0x5bc>)
 801be0e:	781b      	ldrb	r3, [r3, #0]
 801be10:	f003 0320 	and.w	r3, r3, #32
 801be14:	2b00      	cmp	r3, #0
 801be16:	d071      	beq.n	801befc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801be18:	4b14      	ldr	r3, [pc, #80]	; (801be6c <tcp_process+0x590>)
 801be1a:	781b      	ldrb	r3, [r3, #0]
 801be1c:	f003 0310 	and.w	r3, r3, #16
 801be20:	2b00      	cmp	r3, #0
 801be22:	d060      	beq.n	801bee6 <tcp_process+0x60a>
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801be28:	4b11      	ldr	r3, [pc, #68]	; (801be70 <tcp_process+0x594>)
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	429a      	cmp	r2, r3
 801be2e:	d15a      	bne.n	801bee6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801be34:	2b00      	cmp	r3, #0
 801be36:	d156      	bne.n	801bee6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	8b5b      	ldrh	r3, [r3, #26]
 801be3c:	f043 0302 	orr.w	r3, r3, #2
 801be40:	b29a      	uxth	r2, r3
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801be46:	6878      	ldr	r0, [r7, #4]
 801be48:	f7fe fdbc 	bl	801a9c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801be4c:	4b13      	ldr	r3, [pc, #76]	; (801be9c <tcp_process+0x5c0>)
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	687a      	ldr	r2, [r7, #4]
 801be52:	429a      	cmp	r2, r3
 801be54:	d105      	bne.n	801be62 <tcp_process+0x586>
 801be56:	4b11      	ldr	r3, [pc, #68]	; (801be9c <tcp_process+0x5c0>)
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	68db      	ldr	r3, [r3, #12]
 801be5c:	4a0f      	ldr	r2, [pc, #60]	; (801be9c <tcp_process+0x5c0>)
 801be5e:	6013      	str	r3, [r2, #0]
 801be60:	e02e      	b.n	801bec0 <tcp_process+0x5e4>
 801be62:	4b0e      	ldr	r3, [pc, #56]	; (801be9c <tcp_process+0x5c0>)
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	617b      	str	r3, [r7, #20]
 801be68:	e027      	b.n	801beba <tcp_process+0x5de>
 801be6a:	bf00      	nop
 801be6c:	2400d414 	.word	0x2400d414
 801be70:	2400d40c 	.word	0x2400d40c
 801be74:	2400d412 	.word	0x2400d412
 801be78:	2400d408 	.word	0x2400d408
 801be7c:	2400d3f8 	.word	0x2400d3f8
 801be80:	2400a0c0 	.word	0x2400a0c0
 801be84:	2400a0c4 	.word	0x2400a0c4
 801be88:	080244e8 	.word	0x080244e8
 801be8c:	08024790 	.word	0x08024790
 801be90:	0802453c 	.word	0x0802453c
 801be94:	2400d410 	.word	0x2400d410
 801be98:	2400d415 	.word	0x2400d415
 801be9c:	2400d3dc 	.word	0x2400d3dc
 801bea0:	697b      	ldr	r3, [r7, #20]
 801bea2:	68db      	ldr	r3, [r3, #12]
 801bea4:	687a      	ldr	r2, [r7, #4]
 801bea6:	429a      	cmp	r2, r3
 801bea8:	d104      	bne.n	801beb4 <tcp_process+0x5d8>
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	68da      	ldr	r2, [r3, #12]
 801beae:	697b      	ldr	r3, [r7, #20]
 801beb0:	60da      	str	r2, [r3, #12]
 801beb2:	e005      	b.n	801bec0 <tcp_process+0x5e4>
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	68db      	ldr	r3, [r3, #12]
 801beb8:	617b      	str	r3, [r7, #20]
 801beba:	697b      	ldr	r3, [r7, #20]
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d1ef      	bne.n	801bea0 <tcp_process+0x5c4>
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	2200      	movs	r2, #0
 801bec4:	60da      	str	r2, [r3, #12]
 801bec6:	4b77      	ldr	r3, [pc, #476]	; (801c0a4 <tcp_process+0x7c8>)
 801bec8:	2201      	movs	r2, #1
 801beca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	220a      	movs	r2, #10
 801bed0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801bed2:	4b75      	ldr	r3, [pc, #468]	; (801c0a8 <tcp_process+0x7cc>)
 801bed4:	681a      	ldr	r2, [r3, #0]
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	60da      	str	r2, [r3, #12]
 801beda:	4a73      	ldr	r2, [pc, #460]	; (801c0a8 <tcp_process+0x7cc>)
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	6013      	str	r3, [r2, #0]
 801bee0:	f003 fb0a 	bl	801f4f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801bee4:	e0d2      	b.n	801c08c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	8b5b      	ldrh	r3, [r3, #26]
 801beea:	f043 0302 	orr.w	r3, r3, #2
 801beee:	b29a      	uxth	r2, r3
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	2208      	movs	r2, #8
 801bef8:	751a      	strb	r2, [r3, #20]
      break;
 801befa:	e0c7      	b.n	801c08c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801befc:	4b6b      	ldr	r3, [pc, #428]	; (801c0ac <tcp_process+0x7d0>)
 801befe:	781b      	ldrb	r3, [r3, #0]
 801bf00:	f003 0310 	and.w	r3, r3, #16
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	f000 80c1 	beq.w	801c08c <tcp_process+0x7b0>
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bf0e:	4b68      	ldr	r3, [pc, #416]	; (801c0b0 <tcp_process+0x7d4>)
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	429a      	cmp	r2, r3
 801bf14:	f040 80ba 	bne.w	801c08c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	f040 80b5 	bne.w	801c08c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	2206      	movs	r2, #6
 801bf26:	751a      	strb	r2, [r3, #20]
      break;
 801bf28:	e0b0      	b.n	801c08c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801bf2a:	6878      	ldr	r0, [r7, #4]
 801bf2c:	f000 f9ca 	bl	801c2c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bf30:	4b60      	ldr	r3, [pc, #384]	; (801c0b4 <tcp_process+0x7d8>)
 801bf32:	781b      	ldrb	r3, [r3, #0]
 801bf34:	f003 0320 	and.w	r3, r3, #32
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	f000 80a9 	beq.w	801c090 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	8b5b      	ldrh	r3, [r3, #26]
 801bf42:	f043 0302 	orr.w	r3, r3, #2
 801bf46:	b29a      	uxth	r2, r3
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801bf4c:	6878      	ldr	r0, [r7, #4]
 801bf4e:	f7fe fd39 	bl	801a9c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801bf52:	4b59      	ldr	r3, [pc, #356]	; (801c0b8 <tcp_process+0x7dc>)
 801bf54:	681b      	ldr	r3, [r3, #0]
 801bf56:	687a      	ldr	r2, [r7, #4]
 801bf58:	429a      	cmp	r2, r3
 801bf5a:	d105      	bne.n	801bf68 <tcp_process+0x68c>
 801bf5c:	4b56      	ldr	r3, [pc, #344]	; (801c0b8 <tcp_process+0x7dc>)
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	68db      	ldr	r3, [r3, #12]
 801bf62:	4a55      	ldr	r2, [pc, #340]	; (801c0b8 <tcp_process+0x7dc>)
 801bf64:	6013      	str	r3, [r2, #0]
 801bf66:	e013      	b.n	801bf90 <tcp_process+0x6b4>
 801bf68:	4b53      	ldr	r3, [pc, #332]	; (801c0b8 <tcp_process+0x7dc>)
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	613b      	str	r3, [r7, #16]
 801bf6e:	e00c      	b.n	801bf8a <tcp_process+0x6ae>
 801bf70:	693b      	ldr	r3, [r7, #16]
 801bf72:	68db      	ldr	r3, [r3, #12]
 801bf74:	687a      	ldr	r2, [r7, #4]
 801bf76:	429a      	cmp	r2, r3
 801bf78:	d104      	bne.n	801bf84 <tcp_process+0x6a8>
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	68da      	ldr	r2, [r3, #12]
 801bf7e:	693b      	ldr	r3, [r7, #16]
 801bf80:	60da      	str	r2, [r3, #12]
 801bf82:	e005      	b.n	801bf90 <tcp_process+0x6b4>
 801bf84:	693b      	ldr	r3, [r7, #16]
 801bf86:	68db      	ldr	r3, [r3, #12]
 801bf88:	613b      	str	r3, [r7, #16]
 801bf8a:	693b      	ldr	r3, [r7, #16]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d1ef      	bne.n	801bf70 <tcp_process+0x694>
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	2200      	movs	r2, #0
 801bf94:	60da      	str	r2, [r3, #12]
 801bf96:	4b43      	ldr	r3, [pc, #268]	; (801c0a4 <tcp_process+0x7c8>)
 801bf98:	2201      	movs	r2, #1
 801bf9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	220a      	movs	r2, #10
 801bfa0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801bfa2:	4b41      	ldr	r3, [pc, #260]	; (801c0a8 <tcp_process+0x7cc>)
 801bfa4:	681a      	ldr	r2, [r3, #0]
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	60da      	str	r2, [r3, #12]
 801bfaa:	4a3f      	ldr	r2, [pc, #252]	; (801c0a8 <tcp_process+0x7cc>)
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	6013      	str	r3, [r2, #0]
 801bfb0:	f003 faa2 	bl	801f4f8 <tcp_timer_needed>
      }
      break;
 801bfb4:	e06c      	b.n	801c090 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801bfb6:	6878      	ldr	r0, [r7, #4]
 801bfb8:	f000 f984 	bl	801c2c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801bfbc:	4b3b      	ldr	r3, [pc, #236]	; (801c0ac <tcp_process+0x7d0>)
 801bfbe:	781b      	ldrb	r3, [r3, #0]
 801bfc0:	f003 0310 	and.w	r3, r3, #16
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d065      	beq.n	801c094 <tcp_process+0x7b8>
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bfcc:	4b38      	ldr	r3, [pc, #224]	; (801c0b0 <tcp_process+0x7d4>)
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	429a      	cmp	r2, r3
 801bfd2:	d15f      	bne.n	801c094 <tcp_process+0x7b8>
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d15b      	bne.n	801c094 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801bfdc:	6878      	ldr	r0, [r7, #4]
 801bfde:	f7fe fcf1 	bl	801a9c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801bfe2:	4b35      	ldr	r3, [pc, #212]	; (801c0b8 <tcp_process+0x7dc>)
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	687a      	ldr	r2, [r7, #4]
 801bfe8:	429a      	cmp	r2, r3
 801bfea:	d105      	bne.n	801bff8 <tcp_process+0x71c>
 801bfec:	4b32      	ldr	r3, [pc, #200]	; (801c0b8 <tcp_process+0x7dc>)
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	68db      	ldr	r3, [r3, #12]
 801bff2:	4a31      	ldr	r2, [pc, #196]	; (801c0b8 <tcp_process+0x7dc>)
 801bff4:	6013      	str	r3, [r2, #0]
 801bff6:	e013      	b.n	801c020 <tcp_process+0x744>
 801bff8:	4b2f      	ldr	r3, [pc, #188]	; (801c0b8 <tcp_process+0x7dc>)
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	60fb      	str	r3, [r7, #12]
 801bffe:	e00c      	b.n	801c01a <tcp_process+0x73e>
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	68db      	ldr	r3, [r3, #12]
 801c004:	687a      	ldr	r2, [r7, #4]
 801c006:	429a      	cmp	r2, r3
 801c008:	d104      	bne.n	801c014 <tcp_process+0x738>
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	68da      	ldr	r2, [r3, #12]
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	60da      	str	r2, [r3, #12]
 801c012:	e005      	b.n	801c020 <tcp_process+0x744>
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	68db      	ldr	r3, [r3, #12]
 801c018:	60fb      	str	r3, [r7, #12]
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d1ef      	bne.n	801c000 <tcp_process+0x724>
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	2200      	movs	r2, #0
 801c024:	60da      	str	r2, [r3, #12]
 801c026:	4b1f      	ldr	r3, [pc, #124]	; (801c0a4 <tcp_process+0x7c8>)
 801c028:	2201      	movs	r2, #1
 801c02a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	220a      	movs	r2, #10
 801c030:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c032:	4b1d      	ldr	r3, [pc, #116]	; (801c0a8 <tcp_process+0x7cc>)
 801c034:	681a      	ldr	r2, [r3, #0]
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	60da      	str	r2, [r3, #12]
 801c03a:	4a1b      	ldr	r2, [pc, #108]	; (801c0a8 <tcp_process+0x7cc>)
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	6013      	str	r3, [r2, #0]
 801c040:	f003 fa5a 	bl	801f4f8 <tcp_timer_needed>
      }
      break;
 801c044:	e026      	b.n	801c094 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801c046:	6878      	ldr	r0, [r7, #4]
 801c048:	f000 f93c 	bl	801c2c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c04c:	4b17      	ldr	r3, [pc, #92]	; (801c0ac <tcp_process+0x7d0>)
 801c04e:	781b      	ldrb	r3, [r3, #0]
 801c050:	f003 0310 	and.w	r3, r3, #16
 801c054:	2b00      	cmp	r3, #0
 801c056:	d01f      	beq.n	801c098 <tcp_process+0x7bc>
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c05c:	4b14      	ldr	r3, [pc, #80]	; (801c0b0 <tcp_process+0x7d4>)
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	429a      	cmp	r2, r3
 801c062:	d119      	bne.n	801c098 <tcp_process+0x7bc>
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d115      	bne.n	801c098 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801c06c:	4b11      	ldr	r3, [pc, #68]	; (801c0b4 <tcp_process+0x7d8>)
 801c06e:	781b      	ldrb	r3, [r3, #0]
 801c070:	f043 0310 	orr.w	r3, r3, #16
 801c074:	b2da      	uxtb	r2, r3
 801c076:	4b0f      	ldr	r3, [pc, #60]	; (801c0b4 <tcp_process+0x7d8>)
 801c078:	701a      	strb	r2, [r3, #0]
      }
      break;
 801c07a:	e00d      	b.n	801c098 <tcp_process+0x7bc>
    default:
      break;
 801c07c:	bf00      	nop
 801c07e:	e00c      	b.n	801c09a <tcp_process+0x7be>
      break;
 801c080:	bf00      	nop
 801c082:	e00a      	b.n	801c09a <tcp_process+0x7be>
      break;
 801c084:	bf00      	nop
 801c086:	e008      	b.n	801c09a <tcp_process+0x7be>
      break;
 801c088:	bf00      	nop
 801c08a:	e006      	b.n	801c09a <tcp_process+0x7be>
      break;
 801c08c:	bf00      	nop
 801c08e:	e004      	b.n	801c09a <tcp_process+0x7be>
      break;
 801c090:	bf00      	nop
 801c092:	e002      	b.n	801c09a <tcp_process+0x7be>
      break;
 801c094:	bf00      	nop
 801c096:	e000      	b.n	801c09a <tcp_process+0x7be>
      break;
 801c098:	bf00      	nop
  }
  return ERR_OK;
 801c09a:	2300      	movs	r3, #0
}
 801c09c:	4618      	mov	r0, r3
 801c09e:	3724      	adds	r7, #36	; 0x24
 801c0a0:	46bd      	mov	sp, r7
 801c0a2:	bd90      	pop	{r4, r7, pc}
 801c0a4:	2400d3e4 	.word	0x2400d3e4
 801c0a8:	2400d3e0 	.word	0x2400d3e0
 801c0ac:	2400d414 	.word	0x2400d414
 801c0b0:	2400d40c 	.word	0x2400d40c
 801c0b4:	2400d415 	.word	0x2400d415
 801c0b8:	2400d3dc 	.word	0x2400d3dc

0801c0bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c0bc:	b590      	push	{r4, r7, lr}
 801c0be:	b085      	sub	sp, #20
 801c0c0:	af00      	add	r7, sp, #0
 801c0c2:	6078      	str	r0, [r7, #4]
 801c0c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d106      	bne.n	801c0da <tcp_oos_insert_segment+0x1e>
 801c0cc:	4b3b      	ldr	r3, [pc, #236]	; (801c1bc <tcp_oos_insert_segment+0x100>)
 801c0ce:	f240 421f 	movw	r2, #1055	; 0x41f
 801c0d2:	493b      	ldr	r1, [pc, #236]	; (801c1c0 <tcp_oos_insert_segment+0x104>)
 801c0d4:	483b      	ldr	r0, [pc, #236]	; (801c1c4 <tcp_oos_insert_segment+0x108>)
 801c0d6:	f004 fa3b 	bl	8020550 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	68db      	ldr	r3, [r3, #12]
 801c0de:	899b      	ldrh	r3, [r3, #12]
 801c0e0:	b29b      	uxth	r3, r3
 801c0e2:	4618      	mov	r0, r3
 801c0e4:	f7f4 fcf4 	bl	8010ad0 <lwip_htons>
 801c0e8:	4603      	mov	r3, r0
 801c0ea:	b2db      	uxtb	r3, r3
 801c0ec:	f003 0301 	and.w	r3, r3, #1
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d028      	beq.n	801c146 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801c0f4:	6838      	ldr	r0, [r7, #0]
 801c0f6:	f7fe f995 	bl	801a424 <tcp_segs_free>
    next = NULL;
 801c0fa:	2300      	movs	r3, #0
 801c0fc:	603b      	str	r3, [r7, #0]
 801c0fe:	e056      	b.n	801c1ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c100:	683b      	ldr	r3, [r7, #0]
 801c102:	68db      	ldr	r3, [r3, #12]
 801c104:	899b      	ldrh	r3, [r3, #12]
 801c106:	b29b      	uxth	r3, r3
 801c108:	4618      	mov	r0, r3
 801c10a:	f7f4 fce1 	bl	8010ad0 <lwip_htons>
 801c10e:	4603      	mov	r3, r0
 801c110:	b2db      	uxtb	r3, r3
 801c112:	f003 0301 	and.w	r3, r3, #1
 801c116:	2b00      	cmp	r3, #0
 801c118:	d00d      	beq.n	801c136 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	68db      	ldr	r3, [r3, #12]
 801c11e:	899b      	ldrh	r3, [r3, #12]
 801c120:	b29c      	uxth	r4, r3
 801c122:	2001      	movs	r0, #1
 801c124:	f7f4 fcd4 	bl	8010ad0 <lwip_htons>
 801c128:	4603      	mov	r3, r0
 801c12a:	461a      	mov	r2, r3
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	68db      	ldr	r3, [r3, #12]
 801c130:	4322      	orrs	r2, r4
 801c132:	b292      	uxth	r2, r2
 801c134:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801c136:	683b      	ldr	r3, [r7, #0]
 801c138:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801c13a:	683b      	ldr	r3, [r7, #0]
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801c140:	68f8      	ldr	r0, [r7, #12]
 801c142:	f7fe f984 	bl	801a44e <tcp_seg_free>
    while (next &&
 801c146:	683b      	ldr	r3, [r7, #0]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d00e      	beq.n	801c16a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	891b      	ldrh	r3, [r3, #8]
 801c150:	461a      	mov	r2, r3
 801c152:	4b1d      	ldr	r3, [pc, #116]	; (801c1c8 <tcp_oos_insert_segment+0x10c>)
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	441a      	add	r2, r3
 801c158:	683b      	ldr	r3, [r7, #0]
 801c15a:	68db      	ldr	r3, [r3, #12]
 801c15c:	685b      	ldr	r3, [r3, #4]
 801c15e:	6839      	ldr	r1, [r7, #0]
 801c160:	8909      	ldrh	r1, [r1, #8]
 801c162:	440b      	add	r3, r1
 801c164:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c166:	2b00      	cmp	r3, #0
 801c168:	daca      	bge.n	801c100 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c16a:	683b      	ldr	r3, [r7, #0]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d01e      	beq.n	801c1ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	891b      	ldrh	r3, [r3, #8]
 801c174:	461a      	mov	r2, r3
 801c176:	4b14      	ldr	r3, [pc, #80]	; (801c1c8 <tcp_oos_insert_segment+0x10c>)
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	441a      	add	r2, r3
 801c17c:	683b      	ldr	r3, [r7, #0]
 801c17e:	68db      	ldr	r3, [r3, #12]
 801c180:	685b      	ldr	r3, [r3, #4]
 801c182:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c184:	2b00      	cmp	r3, #0
 801c186:	dd12      	ble.n	801c1ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c188:	683b      	ldr	r3, [r7, #0]
 801c18a:	68db      	ldr	r3, [r3, #12]
 801c18c:	685b      	ldr	r3, [r3, #4]
 801c18e:	b29a      	uxth	r2, r3
 801c190:	4b0d      	ldr	r3, [pc, #52]	; (801c1c8 <tcp_oos_insert_segment+0x10c>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	b29b      	uxth	r3, r3
 801c196:	1ad3      	subs	r3, r2, r3
 801c198:	b29a      	uxth	r2, r3
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	685a      	ldr	r2, [r3, #4]
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	891b      	ldrh	r3, [r3, #8]
 801c1a6:	4619      	mov	r1, r3
 801c1a8:	4610      	mov	r0, r2
 801c1aa:	f7fb f959 	bl	8017460 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	683a      	ldr	r2, [r7, #0]
 801c1b2:	601a      	str	r2, [r3, #0]
}
 801c1b4:	bf00      	nop
 801c1b6:	3714      	adds	r7, #20
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bd90      	pop	{r4, r7, pc}
 801c1bc:	080244e8 	.word	0x080244e8
 801c1c0:	080247b0 	.word	0x080247b0
 801c1c4:	0802453c 	.word	0x0802453c
 801c1c8:	2400d408 	.word	0x2400d408

0801c1cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c1cc:	b5b0      	push	{r4, r5, r7, lr}
 801c1ce:	b086      	sub	sp, #24
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	60f8      	str	r0, [r7, #12]
 801c1d4:	60b9      	str	r1, [r7, #8]
 801c1d6:	607a      	str	r2, [r7, #4]
 801c1d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c1da:	e03e      	b.n	801c25a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c1dc:	68bb      	ldr	r3, [r7, #8]
 801c1de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	681b      	ldr	r3, [r3, #0]
 801c1e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c1e6:	697b      	ldr	r3, [r7, #20]
 801c1e8:	685b      	ldr	r3, [r3, #4]
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	f7fb fb4c 	bl	8017888 <pbuf_clen>
 801c1f0:	4603      	mov	r3, r0
 801c1f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c1fa:	8a7a      	ldrh	r2, [r7, #18]
 801c1fc:	429a      	cmp	r2, r3
 801c1fe:	d906      	bls.n	801c20e <tcp_free_acked_segments+0x42>
 801c200:	4b2a      	ldr	r3, [pc, #168]	; (801c2ac <tcp_free_acked_segments+0xe0>)
 801c202:	f240 4257 	movw	r2, #1111	; 0x457
 801c206:	492a      	ldr	r1, [pc, #168]	; (801c2b0 <tcp_free_acked_segments+0xe4>)
 801c208:	482a      	ldr	r0, [pc, #168]	; (801c2b4 <tcp_free_acked_segments+0xe8>)
 801c20a:	f004 f9a1 	bl	8020550 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801c214:	8a7b      	ldrh	r3, [r7, #18]
 801c216:	1ad3      	subs	r3, r2, r3
 801c218:	b29a      	uxth	r2, r3
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c220:	697b      	ldr	r3, [r7, #20]
 801c222:	891a      	ldrh	r2, [r3, #8]
 801c224:	4b24      	ldr	r3, [pc, #144]	; (801c2b8 <tcp_free_acked_segments+0xec>)
 801c226:	881b      	ldrh	r3, [r3, #0]
 801c228:	4413      	add	r3, r2
 801c22a:	b29a      	uxth	r2, r3
 801c22c:	4b22      	ldr	r3, [pc, #136]	; (801c2b8 <tcp_free_acked_segments+0xec>)
 801c22e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c230:	6978      	ldr	r0, [r7, #20]
 801c232:	f7fe f90c 	bl	801a44e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d00c      	beq.n	801c25a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c240:	68bb      	ldr	r3, [r7, #8]
 801c242:	2b00      	cmp	r3, #0
 801c244:	d109      	bne.n	801c25a <tcp_free_acked_segments+0x8e>
 801c246:	683b      	ldr	r3, [r7, #0]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d106      	bne.n	801c25a <tcp_free_acked_segments+0x8e>
 801c24c:	4b17      	ldr	r3, [pc, #92]	; (801c2ac <tcp_free_acked_segments+0xe0>)
 801c24e:	f240 4261 	movw	r2, #1121	; 0x461
 801c252:	491a      	ldr	r1, [pc, #104]	; (801c2bc <tcp_free_acked_segments+0xf0>)
 801c254:	4817      	ldr	r0, [pc, #92]	; (801c2b4 <tcp_free_acked_segments+0xe8>)
 801c256:	f004 f97b 	bl	8020550 <iprintf>
  while (seg_list != NULL &&
 801c25a:	68bb      	ldr	r3, [r7, #8]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d020      	beq.n	801c2a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c260:	68bb      	ldr	r3, [r7, #8]
 801c262:	68db      	ldr	r3, [r3, #12]
 801c264:	685b      	ldr	r3, [r3, #4]
 801c266:	4618      	mov	r0, r3
 801c268:	f7f4 fc47 	bl	8010afa <lwip_htonl>
 801c26c:	4604      	mov	r4, r0
 801c26e:	68bb      	ldr	r3, [r7, #8]
 801c270:	891b      	ldrh	r3, [r3, #8]
 801c272:	461d      	mov	r5, r3
 801c274:	68bb      	ldr	r3, [r7, #8]
 801c276:	68db      	ldr	r3, [r3, #12]
 801c278:	899b      	ldrh	r3, [r3, #12]
 801c27a:	b29b      	uxth	r3, r3
 801c27c:	4618      	mov	r0, r3
 801c27e:	f7f4 fc27 	bl	8010ad0 <lwip_htons>
 801c282:	4603      	mov	r3, r0
 801c284:	b2db      	uxtb	r3, r3
 801c286:	f003 0303 	and.w	r3, r3, #3
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d001      	beq.n	801c292 <tcp_free_acked_segments+0xc6>
 801c28e:	2301      	movs	r3, #1
 801c290:	e000      	b.n	801c294 <tcp_free_acked_segments+0xc8>
 801c292:	2300      	movs	r3, #0
 801c294:	442b      	add	r3, r5
 801c296:	18e2      	adds	r2, r4, r3
 801c298:	4b09      	ldr	r3, [pc, #36]	; (801c2c0 <tcp_free_acked_segments+0xf4>)
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	dd9c      	ble.n	801c1dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c2a2:	68bb      	ldr	r3, [r7, #8]
}
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	3718      	adds	r7, #24
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	bdb0      	pop	{r4, r5, r7, pc}
 801c2ac:	080244e8 	.word	0x080244e8
 801c2b0:	080247d8 	.word	0x080247d8
 801c2b4:	0802453c 	.word	0x0802453c
 801c2b8:	2400d410 	.word	0x2400d410
 801c2bc:	08024800 	.word	0x08024800
 801c2c0:	2400d40c 	.word	0x2400d40c

0801c2c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c2c4:	b5b0      	push	{r4, r5, r7, lr}
 801c2c6:	b094      	sub	sp, #80	; 0x50
 801c2c8:	af00      	add	r7, sp, #0
 801c2ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c2cc:	2300      	movs	r3, #0
 801c2ce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d106      	bne.n	801c2e4 <tcp_receive+0x20>
 801c2d6:	4b91      	ldr	r3, [pc, #580]	; (801c51c <tcp_receive+0x258>)
 801c2d8:	f240 427b 	movw	r2, #1147	; 0x47b
 801c2dc:	4990      	ldr	r1, [pc, #576]	; (801c520 <tcp_receive+0x25c>)
 801c2de:	4891      	ldr	r0, [pc, #580]	; (801c524 <tcp_receive+0x260>)
 801c2e0:	f004 f936 	bl	8020550 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	7d1b      	ldrb	r3, [r3, #20]
 801c2e8:	2b03      	cmp	r3, #3
 801c2ea:	d806      	bhi.n	801c2fa <tcp_receive+0x36>
 801c2ec:	4b8b      	ldr	r3, [pc, #556]	; (801c51c <tcp_receive+0x258>)
 801c2ee:	f240 427c 	movw	r2, #1148	; 0x47c
 801c2f2:	498d      	ldr	r1, [pc, #564]	; (801c528 <tcp_receive+0x264>)
 801c2f4:	488b      	ldr	r0, [pc, #556]	; (801c524 <tcp_receive+0x260>)
 801c2f6:	f004 f92b 	bl	8020550 <iprintf>

  if (flags & TCP_ACK) {
 801c2fa:	4b8c      	ldr	r3, [pc, #560]	; (801c52c <tcp_receive+0x268>)
 801c2fc:	781b      	ldrb	r3, [r3, #0]
 801c2fe:	f003 0310 	and.w	r3, r3, #16
 801c302:	2b00      	cmp	r3, #0
 801c304:	f000 8264 	beq.w	801c7d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c30e:	461a      	mov	r2, r3
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c314:	4413      	add	r3, r2
 801c316:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c31c:	4b84      	ldr	r3, [pc, #528]	; (801c530 <tcp_receive+0x26c>)
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	1ad3      	subs	r3, r2, r3
 801c322:	2b00      	cmp	r3, #0
 801c324:	db1b      	blt.n	801c35e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c32a:	4b81      	ldr	r3, [pc, #516]	; (801c530 <tcp_receive+0x26c>)
 801c32c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c32e:	429a      	cmp	r2, r3
 801c330:	d106      	bne.n	801c340 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c336:	4b7f      	ldr	r3, [pc, #508]	; (801c534 <tcp_receive+0x270>)
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	1ad3      	subs	r3, r2, r3
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	db0e      	blt.n	801c35e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c344:	4b7b      	ldr	r3, [pc, #492]	; (801c534 <tcp_receive+0x270>)
 801c346:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c348:	429a      	cmp	r2, r3
 801c34a:	d125      	bne.n	801c398 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c34c:	4b7a      	ldr	r3, [pc, #488]	; (801c538 <tcp_receive+0x274>)
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	89db      	ldrh	r3, [r3, #14]
 801c352:	b29a      	uxth	r2, r3
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c35a:	429a      	cmp	r2, r3
 801c35c:	d91c      	bls.n	801c398 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c35e:	4b76      	ldr	r3, [pc, #472]	; (801c538 <tcp_receive+0x274>)
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	89db      	ldrh	r3, [r3, #14]
 801c364:	b29a      	uxth	r2, r3
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c378:	429a      	cmp	r2, r3
 801c37a:	d205      	bcs.n	801c388 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801c388:	4b69      	ldr	r3, [pc, #420]	; (801c530 <tcp_receive+0x26c>)
 801c38a:	681a      	ldr	r2, [r3, #0]
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801c390:	4b68      	ldr	r3, [pc, #416]	; (801c534 <tcp_receive+0x270>)
 801c392:	681a      	ldr	r2, [r3, #0]
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c398:	4b66      	ldr	r3, [pc, #408]	; (801c534 <tcp_receive+0x270>)
 801c39a:	681a      	ldr	r2, [r3, #0]
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c3a0:	1ad3      	subs	r3, r2, r3
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	dc58      	bgt.n	801c458 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c3a6:	4b65      	ldr	r3, [pc, #404]	; (801c53c <tcp_receive+0x278>)
 801c3a8:	881b      	ldrh	r3, [r3, #0]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d14b      	bne.n	801c446 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3b2:	687a      	ldr	r2, [r7, #4]
 801c3b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801c3b8:	4413      	add	r3, r2
 801c3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c3bc:	429a      	cmp	r2, r3
 801c3be:	d142      	bne.n	801c446 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	db3d      	blt.n	801c446 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c3ce:	4b59      	ldr	r3, [pc, #356]	; (801c534 <tcp_receive+0x270>)
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	429a      	cmp	r2, r3
 801c3d4:	d137      	bne.n	801c446 <tcp_receive+0x182>
              found_dupack = 1;
 801c3d6:	2301      	movs	r3, #1
 801c3d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c3e0:	2bff      	cmp	r3, #255	; 0xff
 801c3e2:	d007      	beq.n	801c3f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c3ea:	3301      	adds	r3, #1
 801c3ec:	b2da      	uxtb	r2, r3
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c3fa:	2b03      	cmp	r3, #3
 801c3fc:	d91b      	bls.n	801c436 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c408:	4413      	add	r3, r2
 801c40a:	b29a      	uxth	r2, r3
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c412:	429a      	cmp	r2, r3
 801c414:	d30a      	bcc.n	801c42c <tcp_receive+0x168>
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c420:	4413      	add	r3, r2
 801c422:	b29a      	uxth	r2, r3
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c42a:	e004      	b.n	801c436 <tcp_receive+0x172>
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c432:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c43c:	2b02      	cmp	r3, #2
 801c43e:	d902      	bls.n	801c446 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801c440:	6878      	ldr	r0, [r7, #4]
 801c442:	f002 fb43 	bl	801eacc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801c446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c448:	2b00      	cmp	r3, #0
 801c44a:	f040 8161 	bne.w	801c710 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	2200      	movs	r2, #0
 801c452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801c456:	e15b      	b.n	801c710 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c458:	4b36      	ldr	r3, [pc, #216]	; (801c534 <tcp_receive+0x270>)
 801c45a:	681a      	ldr	r2, [r3, #0]
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c460:	1ad3      	subs	r3, r2, r3
 801c462:	3b01      	subs	r3, #1
 801c464:	2b00      	cmp	r3, #0
 801c466:	f2c0 814e 	blt.w	801c706 <tcp_receive+0x442>
 801c46a:	4b32      	ldr	r3, [pc, #200]	; (801c534 <tcp_receive+0x270>)
 801c46c:	681a      	ldr	r2, [r3, #0]
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c472:	1ad3      	subs	r3, r2, r3
 801c474:	2b00      	cmp	r3, #0
 801c476:	f300 8146 	bgt.w	801c706 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	8b5b      	ldrh	r3, [r3, #26]
 801c47e:	f003 0304 	and.w	r3, r3, #4
 801c482:	2b00      	cmp	r3, #0
 801c484:	d010      	beq.n	801c4a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	8b5b      	ldrh	r3, [r3, #26]
 801c48a:	f023 0304 	bic.w	r3, r3, #4
 801c48e:	b29a      	uxth	r2, r3
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	2200      	movs	r2, #0
 801c4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	2200      	movs	r2, #0
 801c4ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c4b6:	10db      	asrs	r3, r3, #3
 801c4b8:	b21b      	sxth	r3, r3
 801c4ba:	b29a      	uxth	r2, r3
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c4c2:	b29b      	uxth	r3, r3
 801c4c4:	4413      	add	r3, r2
 801c4c6:	b29b      	uxth	r3, r3
 801c4c8:	b21a      	sxth	r2, r3
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c4d0:	4b18      	ldr	r3, [pc, #96]	; (801c534 <tcp_receive+0x270>)
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	b29a      	uxth	r2, r3
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c4da:	b29b      	uxth	r3, r3
 801c4dc:	1ad3      	subs	r3, r2, r3
 801c4de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	2200      	movs	r2, #0
 801c4e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801c4e8:	4b12      	ldr	r3, [pc, #72]	; (801c534 <tcp_receive+0x270>)
 801c4ea:	681a      	ldr	r2, [r3, #0]
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	7d1b      	ldrb	r3, [r3, #20]
 801c4f4:	2b03      	cmp	r3, #3
 801c4f6:	f240 8097 	bls.w	801c628 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801c506:	429a      	cmp	r2, r3
 801c508:	d245      	bcs.n	801c596 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	8b5b      	ldrh	r3, [r3, #26]
 801c50e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c512:	2b00      	cmp	r3, #0
 801c514:	d014      	beq.n	801c540 <tcp_receive+0x27c>
 801c516:	2301      	movs	r3, #1
 801c518:	e013      	b.n	801c542 <tcp_receive+0x27e>
 801c51a:	bf00      	nop
 801c51c:	080244e8 	.word	0x080244e8
 801c520:	08024820 	.word	0x08024820
 801c524:	0802453c 	.word	0x0802453c
 801c528:	0802483c 	.word	0x0802483c
 801c52c:	2400d414 	.word	0x2400d414
 801c530:	2400d408 	.word	0x2400d408
 801c534:	2400d40c 	.word	0x2400d40c
 801c538:	2400d3f8 	.word	0x2400d3f8
 801c53c:	2400d412 	.word	0x2400d412
 801c540:	2302      	movs	r3, #2
 801c542:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c546:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801c54a:	b29a      	uxth	r2, r3
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c550:	fb12 f303 	smulbb	r3, r2, r3
 801c554:	b29b      	uxth	r3, r3
 801c556:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c558:	4293      	cmp	r3, r2
 801c55a:	bf28      	it	cs
 801c55c:	4613      	movcs	r3, r2
 801c55e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c566:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c568:	4413      	add	r3, r2
 801c56a:	b29a      	uxth	r2, r3
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c572:	429a      	cmp	r2, r3
 801c574:	d309      	bcc.n	801c58a <tcp_receive+0x2c6>
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c57c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c57e:	4413      	add	r3, r2
 801c580:	b29a      	uxth	r2, r3
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c588:	e04e      	b.n	801c628 <tcp_receive+0x364>
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c590:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c594:	e048      	b.n	801c628 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c59c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c59e:	4413      	add	r3, r2
 801c5a0:	b29a      	uxth	r2, r3
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801c5a8:	429a      	cmp	r2, r3
 801c5aa:	d309      	bcc.n	801c5c0 <tcp_receive+0x2fc>
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c5b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c5b4:	4413      	add	r3, r2
 801c5b6:	b29a      	uxth	r2, r3
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801c5be:	e004      	b.n	801c5ca <tcp_receive+0x306>
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c5c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c5d6:	429a      	cmp	r2, r3
 801c5d8:	d326      	bcc.n	801c628 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c5e6:	1ad3      	subs	r3, r2, r3
 801c5e8:	b29a      	uxth	r2, r3
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5fa:	4413      	add	r3, r2
 801c5fc:	b29a      	uxth	r2, r3
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c604:	429a      	cmp	r2, r3
 801c606:	d30a      	bcc.n	801c61e <tcp_receive+0x35a>
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c612:	4413      	add	r3, r2
 801c614:	b29a      	uxth	r2, r3
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c61c:	e004      	b.n	801c628 <tcp_receive+0x364>
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c624:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c630:	4a98      	ldr	r2, [pc, #608]	; (801c894 <tcp_receive+0x5d0>)
 801c632:	6878      	ldr	r0, [r7, #4]
 801c634:	f7ff fdca 	bl	801c1cc <tcp_free_acked_segments>
 801c638:	4602      	mov	r2, r0
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c646:	4a94      	ldr	r2, [pc, #592]	; (801c898 <tcp_receive+0x5d4>)
 801c648:	6878      	ldr	r0, [r7, #4]
 801c64a:	f7ff fdbf 	bl	801c1cc <tcp_free_acked_segments>
 801c64e:	4602      	mov	r2, r0
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d104      	bne.n	801c666 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c662:	861a      	strh	r2, [r3, #48]	; 0x30
 801c664:	e002      	b.n	801c66c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	2200      	movs	r2, #0
 801c66a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	2200      	movs	r2, #0
 801c670:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c676:	2b00      	cmp	r3, #0
 801c678:	d103      	bne.n	801c682 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	2200      	movs	r2, #0
 801c67e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c688:	4b84      	ldr	r3, [pc, #528]	; (801c89c <tcp_receive+0x5d8>)
 801c68a:	881b      	ldrh	r3, [r3, #0]
 801c68c:	4413      	add	r3, r2
 801c68e:	b29a      	uxth	r2, r3
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	8b5b      	ldrh	r3, [r3, #26]
 801c69a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d035      	beq.n	801c70e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d118      	bne.n	801c6dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d00c      	beq.n	801c6cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6ba:	68db      	ldr	r3, [r3, #12]
 801c6bc:	685b      	ldr	r3, [r3, #4]
 801c6be:	4618      	mov	r0, r3
 801c6c0:	f7f4 fa1b 	bl	8010afa <lwip_htonl>
 801c6c4:	4603      	mov	r3, r0
 801c6c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	dc20      	bgt.n	801c70e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	8b5b      	ldrh	r3, [r3, #26]
 801c6d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c6d4:	b29a      	uxth	r2, r3
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c6da:	e018      	b.n	801c70e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c6e4:	68db      	ldr	r3, [r3, #12]
 801c6e6:	685b      	ldr	r3, [r3, #4]
 801c6e8:	4618      	mov	r0, r3
 801c6ea:	f7f4 fa06 	bl	8010afa <lwip_htonl>
 801c6ee:	4603      	mov	r3, r0
 801c6f0:	1ae3      	subs	r3, r4, r3
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	dc0b      	bgt.n	801c70e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	8b5b      	ldrh	r3, [r3, #26]
 801c6fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c6fe:	b29a      	uxth	r2, r3
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c704:	e003      	b.n	801c70e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801c706:	6878      	ldr	r0, [r7, #4]
 801c708:	f002 fbce 	bl	801eea8 <tcp_send_empty_ack>
 801c70c:	e000      	b.n	801c710 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c70e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c714:	2b00      	cmp	r3, #0
 801c716:	d05b      	beq.n	801c7d0 <tcp_receive+0x50c>
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c71c:	4b60      	ldr	r3, [pc, #384]	; (801c8a0 <tcp_receive+0x5dc>)
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	1ad3      	subs	r3, r2, r3
 801c722:	2b00      	cmp	r3, #0
 801c724:	da54      	bge.n	801c7d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c726:	4b5f      	ldr	r3, [pc, #380]	; (801c8a4 <tcp_receive+0x5e0>)
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	b29a      	uxth	r2, r3
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c730:	b29b      	uxth	r3, r3
 801c732:	1ad3      	subs	r3, r2, r3
 801c734:	b29b      	uxth	r3, r3
 801c736:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801c73a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c744:	10db      	asrs	r3, r3, #3
 801c746:	b21b      	sxth	r3, r3
 801c748:	b29b      	uxth	r3, r3
 801c74a:	1ad3      	subs	r3, r2, r3
 801c74c:	b29b      	uxth	r3, r3
 801c74e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c758:	b29a      	uxth	r2, r3
 801c75a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c75e:	4413      	add	r3, r2
 801c760:	b29b      	uxth	r3, r3
 801c762:	b21a      	sxth	r2, r3
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801c768:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	da05      	bge.n	801c77c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801c770:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c774:	425b      	negs	r3, r3
 801c776:	b29b      	uxth	r3, r3
 801c778:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801c77c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c786:	109b      	asrs	r3, r3, #2
 801c788:	b21b      	sxth	r3, r3
 801c78a:	b29b      	uxth	r3, r3
 801c78c:	1ad3      	subs	r3, r2, r3
 801c78e:	b29b      	uxth	r3, r3
 801c790:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c79a:	b29a      	uxth	r2, r3
 801c79c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c7a0:	4413      	add	r3, r2
 801c7a2:	b29b      	uxth	r3, r3
 801c7a4:	b21a      	sxth	r2, r3
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c7b0:	10db      	asrs	r3, r3, #3
 801c7b2:	b21b      	sxth	r3, r3
 801c7b4:	b29a      	uxth	r2, r3
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c7bc:	b29b      	uxth	r3, r3
 801c7be:	4413      	add	r3, r2
 801c7c0:	b29b      	uxth	r3, r3
 801c7c2:	b21a      	sxth	r2, r3
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c7d0:	4b35      	ldr	r3, [pc, #212]	; (801c8a8 <tcp_receive+0x5e4>)
 801c7d2:	881b      	ldrh	r3, [r3, #0]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	f000 84e2 	beq.w	801d19e <tcp_receive+0xeda>
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	7d1b      	ldrb	r3, [r3, #20]
 801c7de:	2b06      	cmp	r3, #6
 801c7e0:	f200 84dd 	bhi.w	801d19e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c7e8:	4b30      	ldr	r3, [pc, #192]	; (801c8ac <tcp_receive+0x5e8>)
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	1ad3      	subs	r3, r2, r3
 801c7ee:	3b01      	subs	r3, #1
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	f2c0 808f 	blt.w	801c914 <tcp_receive+0x650>
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c7fa:	4b2b      	ldr	r3, [pc, #172]	; (801c8a8 <tcp_receive+0x5e4>)
 801c7fc:	881b      	ldrh	r3, [r3, #0]
 801c7fe:	4619      	mov	r1, r3
 801c800:	4b2a      	ldr	r3, [pc, #168]	; (801c8ac <tcp_receive+0x5e8>)
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	440b      	add	r3, r1
 801c806:	1ad3      	subs	r3, r2, r3
 801c808:	3301      	adds	r3, #1
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	f300 8082 	bgt.w	801c914 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801c810:	4b27      	ldr	r3, [pc, #156]	; (801c8b0 <tcp_receive+0x5ec>)
 801c812:	685b      	ldr	r3, [r3, #4]
 801c814:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c81a:	4b24      	ldr	r3, [pc, #144]	; (801c8ac <tcp_receive+0x5e8>)
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	1ad3      	subs	r3, r2, r3
 801c820:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c822:	4b23      	ldr	r3, [pc, #140]	; (801c8b0 <tcp_receive+0x5ec>)
 801c824:	685b      	ldr	r3, [r3, #4]
 801c826:	2b00      	cmp	r3, #0
 801c828:	d106      	bne.n	801c838 <tcp_receive+0x574>
 801c82a:	4b22      	ldr	r3, [pc, #136]	; (801c8b4 <tcp_receive+0x5f0>)
 801c82c:	f240 5294 	movw	r2, #1428	; 0x594
 801c830:	4921      	ldr	r1, [pc, #132]	; (801c8b8 <tcp_receive+0x5f4>)
 801c832:	4822      	ldr	r0, [pc, #136]	; (801c8bc <tcp_receive+0x5f8>)
 801c834:	f003 fe8c 	bl	8020550 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c83a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c83e:	4293      	cmp	r3, r2
 801c840:	d906      	bls.n	801c850 <tcp_receive+0x58c>
 801c842:	4b1c      	ldr	r3, [pc, #112]	; (801c8b4 <tcp_receive+0x5f0>)
 801c844:	f240 5295 	movw	r2, #1429	; 0x595
 801c848:	491d      	ldr	r1, [pc, #116]	; (801c8c0 <tcp_receive+0x5fc>)
 801c84a:	481c      	ldr	r0, [pc, #112]	; (801c8bc <tcp_receive+0x5f8>)
 801c84c:	f003 fe80 	bl	8020550 <iprintf>
      off = (u16_t)off32;
 801c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c852:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c856:	4b16      	ldr	r3, [pc, #88]	; (801c8b0 <tcp_receive+0x5ec>)
 801c858:	685b      	ldr	r3, [r3, #4]
 801c85a:	891b      	ldrh	r3, [r3, #8]
 801c85c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c860:	429a      	cmp	r2, r3
 801c862:	d906      	bls.n	801c872 <tcp_receive+0x5ae>
 801c864:	4b13      	ldr	r3, [pc, #76]	; (801c8b4 <tcp_receive+0x5f0>)
 801c866:	f240 5297 	movw	r2, #1431	; 0x597
 801c86a:	4916      	ldr	r1, [pc, #88]	; (801c8c4 <tcp_receive+0x600>)
 801c86c:	4813      	ldr	r0, [pc, #76]	; (801c8bc <tcp_receive+0x5f8>)
 801c86e:	f003 fe6f 	bl	8020550 <iprintf>
      inseg.len -= off;
 801c872:	4b0f      	ldr	r3, [pc, #60]	; (801c8b0 <tcp_receive+0x5ec>)
 801c874:	891a      	ldrh	r2, [r3, #8]
 801c876:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c87a:	1ad3      	subs	r3, r2, r3
 801c87c:	b29a      	uxth	r2, r3
 801c87e:	4b0c      	ldr	r3, [pc, #48]	; (801c8b0 <tcp_receive+0x5ec>)
 801c880:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c882:	4b0b      	ldr	r3, [pc, #44]	; (801c8b0 <tcp_receive+0x5ec>)
 801c884:	685b      	ldr	r3, [r3, #4]
 801c886:	891a      	ldrh	r2, [r3, #8]
 801c888:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c88c:	1ad3      	subs	r3, r2, r3
 801c88e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801c890:	e02a      	b.n	801c8e8 <tcp_receive+0x624>
 801c892:	bf00      	nop
 801c894:	08024858 	.word	0x08024858
 801c898:	08024860 	.word	0x08024860
 801c89c:	2400d410 	.word	0x2400d410
 801c8a0:	2400d40c 	.word	0x2400d40c
 801c8a4:	2400d3d0 	.word	0x2400d3d0
 801c8a8:	2400d412 	.word	0x2400d412
 801c8ac:	2400d408 	.word	0x2400d408
 801c8b0:	2400d3e8 	.word	0x2400d3e8
 801c8b4:	080244e8 	.word	0x080244e8
 801c8b8:	08024868 	.word	0x08024868
 801c8bc:	0802453c 	.word	0x0802453c
 801c8c0:	08024878 	.word	0x08024878
 801c8c4:	08024888 	.word	0x08024888
        off -= p->len;
 801c8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8ca:	895b      	ldrh	r3, [r3, #10]
 801c8cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c8d0:	1ad3      	subs	r3, r2, r3
 801c8d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801c8d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c8da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801c8dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8de:	2200      	movs	r2, #0
 801c8e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801c8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801c8e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8ea:	895b      	ldrh	r3, [r3, #10]
 801c8ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c8f0:	429a      	cmp	r2, r3
 801c8f2:	d8e9      	bhi.n	801c8c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801c8f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c8f8:	4619      	mov	r1, r3
 801c8fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c8fc:	f7fa feb0 	bl	8017660 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c904:	4a91      	ldr	r2, [pc, #580]	; (801cb4c <tcp_receive+0x888>)
 801c906:	6013      	str	r3, [r2, #0]
 801c908:	4b91      	ldr	r3, [pc, #580]	; (801cb50 <tcp_receive+0x88c>)
 801c90a:	68db      	ldr	r3, [r3, #12]
 801c90c:	4a8f      	ldr	r2, [pc, #572]	; (801cb4c <tcp_receive+0x888>)
 801c90e:	6812      	ldr	r2, [r2, #0]
 801c910:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c912:	e00d      	b.n	801c930 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801c914:	4b8d      	ldr	r3, [pc, #564]	; (801cb4c <tcp_receive+0x888>)
 801c916:	681a      	ldr	r2, [r3, #0]
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c91c:	1ad3      	subs	r3, r2, r3
 801c91e:	2b00      	cmp	r3, #0
 801c920:	da06      	bge.n	801c930 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	8b5b      	ldrh	r3, [r3, #26]
 801c926:	f043 0302 	orr.w	r3, r3, #2
 801c92a:	b29a      	uxth	r2, r3
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c930:	4b86      	ldr	r3, [pc, #536]	; (801cb4c <tcp_receive+0x888>)
 801c932:	681a      	ldr	r2, [r3, #0]
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c938:	1ad3      	subs	r3, r2, r3
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	f2c0 842a 	blt.w	801d194 <tcp_receive+0xed0>
 801c940:	4b82      	ldr	r3, [pc, #520]	; (801cb4c <tcp_receive+0x888>)
 801c942:	681a      	ldr	r2, [r3, #0]
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c948:	6879      	ldr	r1, [r7, #4]
 801c94a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c94c:	440b      	add	r3, r1
 801c94e:	1ad3      	subs	r3, r2, r3
 801c950:	3301      	adds	r3, #1
 801c952:	2b00      	cmp	r3, #0
 801c954:	f300 841e 	bgt.w	801d194 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c95c:	4b7b      	ldr	r3, [pc, #492]	; (801cb4c <tcp_receive+0x888>)
 801c95e:	681b      	ldr	r3, [r3, #0]
 801c960:	429a      	cmp	r2, r3
 801c962:	f040 829a 	bne.w	801ce9a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801c966:	4b7a      	ldr	r3, [pc, #488]	; (801cb50 <tcp_receive+0x88c>)
 801c968:	891c      	ldrh	r4, [r3, #8]
 801c96a:	4b79      	ldr	r3, [pc, #484]	; (801cb50 <tcp_receive+0x88c>)
 801c96c:	68db      	ldr	r3, [r3, #12]
 801c96e:	899b      	ldrh	r3, [r3, #12]
 801c970:	b29b      	uxth	r3, r3
 801c972:	4618      	mov	r0, r3
 801c974:	f7f4 f8ac 	bl	8010ad0 <lwip_htons>
 801c978:	4603      	mov	r3, r0
 801c97a:	b2db      	uxtb	r3, r3
 801c97c:	f003 0303 	and.w	r3, r3, #3
 801c980:	2b00      	cmp	r3, #0
 801c982:	d001      	beq.n	801c988 <tcp_receive+0x6c4>
 801c984:	2301      	movs	r3, #1
 801c986:	e000      	b.n	801c98a <tcp_receive+0x6c6>
 801c988:	2300      	movs	r3, #0
 801c98a:	4423      	add	r3, r4
 801c98c:	b29a      	uxth	r2, r3
 801c98e:	4b71      	ldr	r3, [pc, #452]	; (801cb54 <tcp_receive+0x890>)
 801c990:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c996:	4b6f      	ldr	r3, [pc, #444]	; (801cb54 <tcp_receive+0x890>)
 801c998:	881b      	ldrh	r3, [r3, #0]
 801c99a:	429a      	cmp	r2, r3
 801c99c:	d275      	bcs.n	801ca8a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c99e:	4b6c      	ldr	r3, [pc, #432]	; (801cb50 <tcp_receive+0x88c>)
 801c9a0:	68db      	ldr	r3, [r3, #12]
 801c9a2:	899b      	ldrh	r3, [r3, #12]
 801c9a4:	b29b      	uxth	r3, r3
 801c9a6:	4618      	mov	r0, r3
 801c9a8:	f7f4 f892 	bl	8010ad0 <lwip_htons>
 801c9ac:	4603      	mov	r3, r0
 801c9ae:	b2db      	uxtb	r3, r3
 801c9b0:	f003 0301 	and.w	r3, r3, #1
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d01f      	beq.n	801c9f8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c9b8:	4b65      	ldr	r3, [pc, #404]	; (801cb50 <tcp_receive+0x88c>)
 801c9ba:	68db      	ldr	r3, [r3, #12]
 801c9bc:	899b      	ldrh	r3, [r3, #12]
 801c9be:	b29b      	uxth	r3, r3
 801c9c0:	b21b      	sxth	r3, r3
 801c9c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c9c6:	b21c      	sxth	r4, r3
 801c9c8:	4b61      	ldr	r3, [pc, #388]	; (801cb50 <tcp_receive+0x88c>)
 801c9ca:	68db      	ldr	r3, [r3, #12]
 801c9cc:	899b      	ldrh	r3, [r3, #12]
 801c9ce:	b29b      	uxth	r3, r3
 801c9d0:	4618      	mov	r0, r3
 801c9d2:	f7f4 f87d 	bl	8010ad0 <lwip_htons>
 801c9d6:	4603      	mov	r3, r0
 801c9d8:	b2db      	uxtb	r3, r3
 801c9da:	b29b      	uxth	r3, r3
 801c9dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c9e0:	b29b      	uxth	r3, r3
 801c9e2:	4618      	mov	r0, r3
 801c9e4:	f7f4 f874 	bl	8010ad0 <lwip_htons>
 801c9e8:	4603      	mov	r3, r0
 801c9ea:	b21b      	sxth	r3, r3
 801c9ec:	4323      	orrs	r3, r4
 801c9ee:	b21a      	sxth	r2, r3
 801c9f0:	4b57      	ldr	r3, [pc, #348]	; (801cb50 <tcp_receive+0x88c>)
 801c9f2:	68db      	ldr	r3, [r3, #12]
 801c9f4:	b292      	uxth	r2, r2
 801c9f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c9fc:	4b54      	ldr	r3, [pc, #336]	; (801cb50 <tcp_receive+0x88c>)
 801c9fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ca00:	4b53      	ldr	r3, [pc, #332]	; (801cb50 <tcp_receive+0x88c>)
 801ca02:	68db      	ldr	r3, [r3, #12]
 801ca04:	899b      	ldrh	r3, [r3, #12]
 801ca06:	b29b      	uxth	r3, r3
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f7f4 f861 	bl	8010ad0 <lwip_htons>
 801ca0e:	4603      	mov	r3, r0
 801ca10:	b2db      	uxtb	r3, r3
 801ca12:	f003 0302 	and.w	r3, r3, #2
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d005      	beq.n	801ca26 <tcp_receive+0x762>
            inseg.len -= 1;
 801ca1a:	4b4d      	ldr	r3, [pc, #308]	; (801cb50 <tcp_receive+0x88c>)
 801ca1c:	891b      	ldrh	r3, [r3, #8]
 801ca1e:	3b01      	subs	r3, #1
 801ca20:	b29a      	uxth	r2, r3
 801ca22:	4b4b      	ldr	r3, [pc, #300]	; (801cb50 <tcp_receive+0x88c>)
 801ca24:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801ca26:	4b4a      	ldr	r3, [pc, #296]	; (801cb50 <tcp_receive+0x88c>)
 801ca28:	685b      	ldr	r3, [r3, #4]
 801ca2a:	4a49      	ldr	r2, [pc, #292]	; (801cb50 <tcp_receive+0x88c>)
 801ca2c:	8912      	ldrh	r2, [r2, #8]
 801ca2e:	4611      	mov	r1, r2
 801ca30:	4618      	mov	r0, r3
 801ca32:	f7fa fd15 	bl	8017460 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801ca36:	4b46      	ldr	r3, [pc, #280]	; (801cb50 <tcp_receive+0x88c>)
 801ca38:	891c      	ldrh	r4, [r3, #8]
 801ca3a:	4b45      	ldr	r3, [pc, #276]	; (801cb50 <tcp_receive+0x88c>)
 801ca3c:	68db      	ldr	r3, [r3, #12]
 801ca3e:	899b      	ldrh	r3, [r3, #12]
 801ca40:	b29b      	uxth	r3, r3
 801ca42:	4618      	mov	r0, r3
 801ca44:	f7f4 f844 	bl	8010ad0 <lwip_htons>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	f003 0303 	and.w	r3, r3, #3
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d001      	beq.n	801ca58 <tcp_receive+0x794>
 801ca54:	2301      	movs	r3, #1
 801ca56:	e000      	b.n	801ca5a <tcp_receive+0x796>
 801ca58:	2300      	movs	r3, #0
 801ca5a:	4423      	add	r3, r4
 801ca5c:	b29a      	uxth	r2, r3
 801ca5e:	4b3d      	ldr	r3, [pc, #244]	; (801cb54 <tcp_receive+0x890>)
 801ca60:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ca62:	4b3c      	ldr	r3, [pc, #240]	; (801cb54 <tcp_receive+0x890>)
 801ca64:	881b      	ldrh	r3, [r3, #0]
 801ca66:	461a      	mov	r2, r3
 801ca68:	4b38      	ldr	r3, [pc, #224]	; (801cb4c <tcp_receive+0x888>)
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	441a      	add	r2, r3
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca72:	6879      	ldr	r1, [r7, #4]
 801ca74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ca76:	440b      	add	r3, r1
 801ca78:	429a      	cmp	r2, r3
 801ca7a:	d006      	beq.n	801ca8a <tcp_receive+0x7c6>
 801ca7c:	4b36      	ldr	r3, [pc, #216]	; (801cb58 <tcp_receive+0x894>)
 801ca7e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801ca82:	4936      	ldr	r1, [pc, #216]	; (801cb5c <tcp_receive+0x898>)
 801ca84:	4836      	ldr	r0, [pc, #216]	; (801cb60 <tcp_receive+0x89c>)
 801ca86:	f003 fd63 	bl	8020550 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	f000 80e7 	beq.w	801cc62 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ca94:	4b2e      	ldr	r3, [pc, #184]	; (801cb50 <tcp_receive+0x88c>)
 801ca96:	68db      	ldr	r3, [r3, #12]
 801ca98:	899b      	ldrh	r3, [r3, #12]
 801ca9a:	b29b      	uxth	r3, r3
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	f7f4 f817 	bl	8010ad0 <lwip_htons>
 801caa2:	4603      	mov	r3, r0
 801caa4:	b2db      	uxtb	r3, r3
 801caa6:	f003 0301 	and.w	r3, r3, #1
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d010      	beq.n	801cad0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801caae:	e00a      	b.n	801cac6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cab4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801caba:	681a      	ldr	r2, [r3, #0]
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801cac0:	68f8      	ldr	r0, [r7, #12]
 801cac2:	f7fd fcc4 	bl	801a44e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d1f0      	bne.n	801cab0 <tcp_receive+0x7ec>
 801cace:	e0c8      	b.n	801cc62 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cad4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801cad6:	e052      	b.n	801cb7e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cada:	68db      	ldr	r3, [r3, #12]
 801cadc:	899b      	ldrh	r3, [r3, #12]
 801cade:	b29b      	uxth	r3, r3
 801cae0:	4618      	mov	r0, r3
 801cae2:	f7f3 fff5 	bl	8010ad0 <lwip_htons>
 801cae6:	4603      	mov	r3, r0
 801cae8:	b2db      	uxtb	r3, r3
 801caea:	f003 0301 	and.w	r3, r3, #1
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d03d      	beq.n	801cb6e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801caf2:	4b17      	ldr	r3, [pc, #92]	; (801cb50 <tcp_receive+0x88c>)
 801caf4:	68db      	ldr	r3, [r3, #12]
 801caf6:	899b      	ldrh	r3, [r3, #12]
 801caf8:	b29b      	uxth	r3, r3
 801cafa:	4618      	mov	r0, r3
 801cafc:	f7f3 ffe8 	bl	8010ad0 <lwip_htons>
 801cb00:	4603      	mov	r3, r0
 801cb02:	b2db      	uxtb	r3, r3
 801cb04:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d130      	bne.n	801cb6e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801cb0c:	4b10      	ldr	r3, [pc, #64]	; (801cb50 <tcp_receive+0x88c>)
 801cb0e:	68db      	ldr	r3, [r3, #12]
 801cb10:	899b      	ldrh	r3, [r3, #12]
 801cb12:	b29c      	uxth	r4, r3
 801cb14:	2001      	movs	r0, #1
 801cb16:	f7f3 ffdb 	bl	8010ad0 <lwip_htons>
 801cb1a:	4603      	mov	r3, r0
 801cb1c:	461a      	mov	r2, r3
 801cb1e:	4b0c      	ldr	r3, [pc, #48]	; (801cb50 <tcp_receive+0x88c>)
 801cb20:	68db      	ldr	r3, [r3, #12]
 801cb22:	4322      	orrs	r2, r4
 801cb24:	b292      	uxth	r2, r2
 801cb26:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801cb28:	4b09      	ldr	r3, [pc, #36]	; (801cb50 <tcp_receive+0x88c>)
 801cb2a:	891c      	ldrh	r4, [r3, #8]
 801cb2c:	4b08      	ldr	r3, [pc, #32]	; (801cb50 <tcp_receive+0x88c>)
 801cb2e:	68db      	ldr	r3, [r3, #12]
 801cb30:	899b      	ldrh	r3, [r3, #12]
 801cb32:	b29b      	uxth	r3, r3
 801cb34:	4618      	mov	r0, r3
 801cb36:	f7f3 ffcb 	bl	8010ad0 <lwip_htons>
 801cb3a:	4603      	mov	r3, r0
 801cb3c:	b2db      	uxtb	r3, r3
 801cb3e:	f003 0303 	and.w	r3, r3, #3
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d00e      	beq.n	801cb64 <tcp_receive+0x8a0>
 801cb46:	2301      	movs	r3, #1
 801cb48:	e00d      	b.n	801cb66 <tcp_receive+0x8a2>
 801cb4a:	bf00      	nop
 801cb4c:	2400d408 	.word	0x2400d408
 801cb50:	2400d3e8 	.word	0x2400d3e8
 801cb54:	2400d412 	.word	0x2400d412
 801cb58:	080244e8 	.word	0x080244e8
 801cb5c:	08024898 	.word	0x08024898
 801cb60:	0802453c 	.word	0x0802453c
 801cb64:	2300      	movs	r3, #0
 801cb66:	4423      	add	r3, r4
 801cb68:	b29a      	uxth	r2, r3
 801cb6a:	4b98      	ldr	r3, [pc, #608]	; (801cdcc <tcp_receive+0xb08>)
 801cb6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801cb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb70:	613b      	str	r3, [r7, #16]
              next = next->next;
 801cb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801cb78:	6938      	ldr	r0, [r7, #16]
 801cb7a:	f7fd fc68 	bl	801a44e <tcp_seg_free>
            while (next &&
 801cb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d00e      	beq.n	801cba2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801cb84:	4b91      	ldr	r3, [pc, #580]	; (801cdcc <tcp_receive+0xb08>)
 801cb86:	881b      	ldrh	r3, [r3, #0]
 801cb88:	461a      	mov	r2, r3
 801cb8a:	4b91      	ldr	r3, [pc, #580]	; (801cdd0 <tcp_receive+0xb0c>)
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	441a      	add	r2, r3
 801cb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb92:	68db      	ldr	r3, [r3, #12]
 801cb94:	685b      	ldr	r3, [r3, #4]
 801cb96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cb98:	8909      	ldrh	r1, [r1, #8]
 801cb9a:	440b      	add	r3, r1
 801cb9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	da9a      	bge.n	801cad8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801cba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d059      	beq.n	801cc5c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801cba8:	4b88      	ldr	r3, [pc, #544]	; (801cdcc <tcp_receive+0xb08>)
 801cbaa:	881b      	ldrh	r3, [r3, #0]
 801cbac:	461a      	mov	r2, r3
 801cbae:	4b88      	ldr	r3, [pc, #544]	; (801cdd0 <tcp_receive+0xb0c>)
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	441a      	add	r2, r3
 801cbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbb6:	68db      	ldr	r3, [r3, #12]
 801cbb8:	685b      	ldr	r3, [r3, #4]
 801cbba:	1ad3      	subs	r3, r2, r3
            if (next &&
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	dd4d      	ble.n	801cc5c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801cbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbc2:	68db      	ldr	r3, [r3, #12]
 801cbc4:	685b      	ldr	r3, [r3, #4]
 801cbc6:	b29a      	uxth	r2, r3
 801cbc8:	4b81      	ldr	r3, [pc, #516]	; (801cdd0 <tcp_receive+0xb0c>)
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	b29b      	uxth	r3, r3
 801cbce:	1ad3      	subs	r3, r2, r3
 801cbd0:	b29a      	uxth	r2, r3
 801cbd2:	4b80      	ldr	r3, [pc, #512]	; (801cdd4 <tcp_receive+0xb10>)
 801cbd4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cbd6:	4b7f      	ldr	r3, [pc, #508]	; (801cdd4 <tcp_receive+0xb10>)
 801cbd8:	68db      	ldr	r3, [r3, #12]
 801cbda:	899b      	ldrh	r3, [r3, #12]
 801cbdc:	b29b      	uxth	r3, r3
 801cbde:	4618      	mov	r0, r3
 801cbe0:	f7f3 ff76 	bl	8010ad0 <lwip_htons>
 801cbe4:	4603      	mov	r3, r0
 801cbe6:	b2db      	uxtb	r3, r3
 801cbe8:	f003 0302 	and.w	r3, r3, #2
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d005      	beq.n	801cbfc <tcp_receive+0x938>
                inseg.len -= 1;
 801cbf0:	4b78      	ldr	r3, [pc, #480]	; (801cdd4 <tcp_receive+0xb10>)
 801cbf2:	891b      	ldrh	r3, [r3, #8]
 801cbf4:	3b01      	subs	r3, #1
 801cbf6:	b29a      	uxth	r2, r3
 801cbf8:	4b76      	ldr	r3, [pc, #472]	; (801cdd4 <tcp_receive+0xb10>)
 801cbfa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801cbfc:	4b75      	ldr	r3, [pc, #468]	; (801cdd4 <tcp_receive+0xb10>)
 801cbfe:	685b      	ldr	r3, [r3, #4]
 801cc00:	4a74      	ldr	r2, [pc, #464]	; (801cdd4 <tcp_receive+0xb10>)
 801cc02:	8912      	ldrh	r2, [r2, #8]
 801cc04:	4611      	mov	r1, r2
 801cc06:	4618      	mov	r0, r3
 801cc08:	f7fa fc2a 	bl	8017460 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801cc0c:	4b71      	ldr	r3, [pc, #452]	; (801cdd4 <tcp_receive+0xb10>)
 801cc0e:	891c      	ldrh	r4, [r3, #8]
 801cc10:	4b70      	ldr	r3, [pc, #448]	; (801cdd4 <tcp_receive+0xb10>)
 801cc12:	68db      	ldr	r3, [r3, #12]
 801cc14:	899b      	ldrh	r3, [r3, #12]
 801cc16:	b29b      	uxth	r3, r3
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f7f3 ff59 	bl	8010ad0 <lwip_htons>
 801cc1e:	4603      	mov	r3, r0
 801cc20:	b2db      	uxtb	r3, r3
 801cc22:	f003 0303 	and.w	r3, r3, #3
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d001      	beq.n	801cc2e <tcp_receive+0x96a>
 801cc2a:	2301      	movs	r3, #1
 801cc2c:	e000      	b.n	801cc30 <tcp_receive+0x96c>
 801cc2e:	2300      	movs	r3, #0
 801cc30:	4423      	add	r3, r4
 801cc32:	b29a      	uxth	r2, r3
 801cc34:	4b65      	ldr	r3, [pc, #404]	; (801cdcc <tcp_receive+0xb08>)
 801cc36:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801cc38:	4b64      	ldr	r3, [pc, #400]	; (801cdcc <tcp_receive+0xb08>)
 801cc3a:	881b      	ldrh	r3, [r3, #0]
 801cc3c:	461a      	mov	r2, r3
 801cc3e:	4b64      	ldr	r3, [pc, #400]	; (801cdd0 <tcp_receive+0xb0c>)
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	441a      	add	r2, r3
 801cc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc46:	68db      	ldr	r3, [r3, #12]
 801cc48:	685b      	ldr	r3, [r3, #4]
 801cc4a:	429a      	cmp	r2, r3
 801cc4c:	d006      	beq.n	801cc5c <tcp_receive+0x998>
 801cc4e:	4b62      	ldr	r3, [pc, #392]	; (801cdd8 <tcp_receive+0xb14>)
 801cc50:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801cc54:	4961      	ldr	r1, [pc, #388]	; (801cddc <tcp_receive+0xb18>)
 801cc56:	4862      	ldr	r0, [pc, #392]	; (801cde0 <tcp_receive+0xb1c>)
 801cc58:	f003 fc7a 	bl	8020550 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cc60:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801cc62:	4b5a      	ldr	r3, [pc, #360]	; (801cdcc <tcp_receive+0xb08>)
 801cc64:	881b      	ldrh	r3, [r3, #0]
 801cc66:	461a      	mov	r2, r3
 801cc68:	4b59      	ldr	r3, [pc, #356]	; (801cdd0 <tcp_receive+0xb0c>)
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	441a      	add	r2, r3
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cc76:	4b55      	ldr	r3, [pc, #340]	; (801cdcc <tcp_receive+0xb08>)
 801cc78:	881b      	ldrh	r3, [r3, #0]
 801cc7a:	429a      	cmp	r2, r3
 801cc7c:	d206      	bcs.n	801cc8c <tcp_receive+0x9c8>
 801cc7e:	4b56      	ldr	r3, [pc, #344]	; (801cdd8 <tcp_receive+0xb14>)
 801cc80:	f240 6207 	movw	r2, #1543	; 0x607
 801cc84:	4957      	ldr	r1, [pc, #348]	; (801cde4 <tcp_receive+0xb20>)
 801cc86:	4856      	ldr	r0, [pc, #344]	; (801cde0 <tcp_receive+0xb1c>)
 801cc88:	f003 fc62 	bl	8020550 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cc90:	4b4e      	ldr	r3, [pc, #312]	; (801cdcc <tcp_receive+0xb08>)
 801cc92:	881b      	ldrh	r3, [r3, #0]
 801cc94:	1ad3      	subs	r3, r2, r3
 801cc96:	b29a      	uxth	r2, r3
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801cc9c:	6878      	ldr	r0, [r7, #4]
 801cc9e:	f7fc fd99 	bl	80197d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801cca2:	4b4c      	ldr	r3, [pc, #304]	; (801cdd4 <tcp_receive+0xb10>)
 801cca4:	685b      	ldr	r3, [r3, #4]
 801cca6:	891b      	ldrh	r3, [r3, #8]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d006      	beq.n	801ccba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801ccac:	4b49      	ldr	r3, [pc, #292]	; (801cdd4 <tcp_receive+0xb10>)
 801ccae:	685b      	ldr	r3, [r3, #4]
 801ccb0:	4a4d      	ldr	r2, [pc, #308]	; (801cde8 <tcp_receive+0xb24>)
 801ccb2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801ccb4:	4b47      	ldr	r3, [pc, #284]	; (801cdd4 <tcp_receive+0xb10>)
 801ccb6:	2200      	movs	r2, #0
 801ccb8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ccba:	4b46      	ldr	r3, [pc, #280]	; (801cdd4 <tcp_receive+0xb10>)
 801ccbc:	68db      	ldr	r3, [r3, #12]
 801ccbe:	899b      	ldrh	r3, [r3, #12]
 801ccc0:	b29b      	uxth	r3, r3
 801ccc2:	4618      	mov	r0, r3
 801ccc4:	f7f3 ff04 	bl	8010ad0 <lwip_htons>
 801ccc8:	4603      	mov	r3, r0
 801ccca:	b2db      	uxtb	r3, r3
 801cccc:	f003 0301 	and.w	r3, r3, #1
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	f000 80b8 	beq.w	801ce46 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801ccd6:	4b45      	ldr	r3, [pc, #276]	; (801cdec <tcp_receive+0xb28>)
 801ccd8:	781b      	ldrb	r3, [r3, #0]
 801ccda:	f043 0320 	orr.w	r3, r3, #32
 801ccde:	b2da      	uxtb	r2, r3
 801cce0:	4b42      	ldr	r3, [pc, #264]	; (801cdec <tcp_receive+0xb28>)
 801cce2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801cce4:	e0af      	b.n	801ce46 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ccea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ccf0:	68db      	ldr	r3, [r3, #12]
 801ccf2:	685b      	ldr	r3, [r3, #4]
 801ccf4:	4a36      	ldr	r2, [pc, #216]	; (801cdd0 <tcp_receive+0xb0c>)
 801ccf6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ccf8:	68bb      	ldr	r3, [r7, #8]
 801ccfa:	891b      	ldrh	r3, [r3, #8]
 801ccfc:	461c      	mov	r4, r3
 801ccfe:	68bb      	ldr	r3, [r7, #8]
 801cd00:	68db      	ldr	r3, [r3, #12]
 801cd02:	899b      	ldrh	r3, [r3, #12]
 801cd04:	b29b      	uxth	r3, r3
 801cd06:	4618      	mov	r0, r3
 801cd08:	f7f3 fee2 	bl	8010ad0 <lwip_htons>
 801cd0c:	4603      	mov	r3, r0
 801cd0e:	b2db      	uxtb	r3, r3
 801cd10:	f003 0303 	and.w	r3, r3, #3
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d001      	beq.n	801cd1c <tcp_receive+0xa58>
 801cd18:	2301      	movs	r3, #1
 801cd1a:	e000      	b.n	801cd1e <tcp_receive+0xa5a>
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	191a      	adds	r2, r3, r4
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd24:	441a      	add	r2, r3
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd2e:	461c      	mov	r4, r3
 801cd30:	68bb      	ldr	r3, [r7, #8]
 801cd32:	891b      	ldrh	r3, [r3, #8]
 801cd34:	461d      	mov	r5, r3
 801cd36:	68bb      	ldr	r3, [r7, #8]
 801cd38:	68db      	ldr	r3, [r3, #12]
 801cd3a:	899b      	ldrh	r3, [r3, #12]
 801cd3c:	b29b      	uxth	r3, r3
 801cd3e:	4618      	mov	r0, r3
 801cd40:	f7f3 fec6 	bl	8010ad0 <lwip_htons>
 801cd44:	4603      	mov	r3, r0
 801cd46:	b2db      	uxtb	r3, r3
 801cd48:	f003 0303 	and.w	r3, r3, #3
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	d001      	beq.n	801cd54 <tcp_receive+0xa90>
 801cd50:	2301      	movs	r3, #1
 801cd52:	e000      	b.n	801cd56 <tcp_receive+0xa92>
 801cd54:	2300      	movs	r3, #0
 801cd56:	442b      	add	r3, r5
 801cd58:	429c      	cmp	r4, r3
 801cd5a:	d206      	bcs.n	801cd6a <tcp_receive+0xaa6>
 801cd5c:	4b1e      	ldr	r3, [pc, #120]	; (801cdd8 <tcp_receive+0xb14>)
 801cd5e:	f240 622b 	movw	r2, #1579	; 0x62b
 801cd62:	4923      	ldr	r1, [pc, #140]	; (801cdf0 <tcp_receive+0xb2c>)
 801cd64:	481e      	ldr	r0, [pc, #120]	; (801cde0 <tcp_receive+0xb1c>)
 801cd66:	f003 fbf3 	bl	8020550 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801cd6a:	68bb      	ldr	r3, [r7, #8]
 801cd6c:	891b      	ldrh	r3, [r3, #8]
 801cd6e:	461c      	mov	r4, r3
 801cd70:	68bb      	ldr	r3, [r7, #8]
 801cd72:	68db      	ldr	r3, [r3, #12]
 801cd74:	899b      	ldrh	r3, [r3, #12]
 801cd76:	b29b      	uxth	r3, r3
 801cd78:	4618      	mov	r0, r3
 801cd7a:	f7f3 fea9 	bl	8010ad0 <lwip_htons>
 801cd7e:	4603      	mov	r3, r0
 801cd80:	b2db      	uxtb	r3, r3
 801cd82:	f003 0303 	and.w	r3, r3, #3
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d001      	beq.n	801cd8e <tcp_receive+0xaca>
 801cd8a:	2301      	movs	r3, #1
 801cd8c:	e000      	b.n	801cd90 <tcp_receive+0xacc>
 801cd8e:	2300      	movs	r3, #0
 801cd90:	1919      	adds	r1, r3, r4
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cd96:	b28b      	uxth	r3, r1
 801cd98:	1ad3      	subs	r3, r2, r3
 801cd9a:	b29a      	uxth	r2, r3
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801cda0:	6878      	ldr	r0, [r7, #4]
 801cda2:	f7fc fd17 	bl	80197d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801cda6:	68bb      	ldr	r3, [r7, #8]
 801cda8:	685b      	ldr	r3, [r3, #4]
 801cdaa:	891b      	ldrh	r3, [r3, #8]
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d028      	beq.n	801ce02 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801cdb0:	4b0d      	ldr	r3, [pc, #52]	; (801cde8 <tcp_receive+0xb24>)
 801cdb2:	681b      	ldr	r3, [r3, #0]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d01d      	beq.n	801cdf4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801cdb8:	4b0b      	ldr	r3, [pc, #44]	; (801cde8 <tcp_receive+0xb24>)
 801cdba:	681a      	ldr	r2, [r3, #0]
 801cdbc:	68bb      	ldr	r3, [r7, #8]
 801cdbe:	685b      	ldr	r3, [r3, #4]
 801cdc0:	4619      	mov	r1, r3
 801cdc2:	4610      	mov	r0, r2
 801cdc4:	f7fa fda0 	bl	8017908 <pbuf_cat>
 801cdc8:	e018      	b.n	801cdfc <tcp_receive+0xb38>
 801cdca:	bf00      	nop
 801cdcc:	2400d412 	.word	0x2400d412
 801cdd0:	2400d408 	.word	0x2400d408
 801cdd4:	2400d3e8 	.word	0x2400d3e8
 801cdd8:	080244e8 	.word	0x080244e8
 801cddc:	080248d0 	.word	0x080248d0
 801cde0:	0802453c 	.word	0x0802453c
 801cde4:	0802490c 	.word	0x0802490c
 801cde8:	2400d418 	.word	0x2400d418
 801cdec:	2400d415 	.word	0x2400d415
 801cdf0:	0802492c 	.word	0x0802492c
            } else {
              recv_data = cseg->p;
 801cdf4:	68bb      	ldr	r3, [r7, #8]
 801cdf6:	685b      	ldr	r3, [r3, #4]
 801cdf8:	4a70      	ldr	r2, [pc, #448]	; (801cfbc <tcp_receive+0xcf8>)
 801cdfa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801cdfc:	68bb      	ldr	r3, [r7, #8]
 801cdfe:	2200      	movs	r2, #0
 801ce00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ce02:	68bb      	ldr	r3, [r7, #8]
 801ce04:	68db      	ldr	r3, [r3, #12]
 801ce06:	899b      	ldrh	r3, [r3, #12]
 801ce08:	b29b      	uxth	r3, r3
 801ce0a:	4618      	mov	r0, r3
 801ce0c:	f7f3 fe60 	bl	8010ad0 <lwip_htons>
 801ce10:	4603      	mov	r3, r0
 801ce12:	b2db      	uxtb	r3, r3
 801ce14:	f003 0301 	and.w	r3, r3, #1
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d00d      	beq.n	801ce38 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801ce1c:	4b68      	ldr	r3, [pc, #416]	; (801cfc0 <tcp_receive+0xcfc>)
 801ce1e:	781b      	ldrb	r3, [r3, #0]
 801ce20:	f043 0320 	orr.w	r3, r3, #32
 801ce24:	b2da      	uxtb	r2, r3
 801ce26:	4b66      	ldr	r3, [pc, #408]	; (801cfc0 <tcp_receive+0xcfc>)
 801ce28:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	7d1b      	ldrb	r3, [r3, #20]
 801ce2e:	2b04      	cmp	r3, #4
 801ce30:	d102      	bne.n	801ce38 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	2207      	movs	r2, #7
 801ce36:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801ce38:	68bb      	ldr	r3, [r7, #8]
 801ce3a:	681a      	ldr	r2, [r3, #0]
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801ce40:	68b8      	ldr	r0, [r7, #8]
 801ce42:	f7fd fb04 	bl	801a44e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d008      	beq.n	801ce60 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ce52:	68db      	ldr	r3, [r3, #12]
 801ce54:	685a      	ldr	r2, [r3, #4]
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801ce5a:	429a      	cmp	r2, r3
 801ce5c:	f43f af43 	beq.w	801cce6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	8b5b      	ldrh	r3, [r3, #26]
 801ce64:	f003 0301 	and.w	r3, r3, #1
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d00e      	beq.n	801ce8a <tcp_receive+0xbc6>
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	8b5b      	ldrh	r3, [r3, #26]
 801ce70:	f023 0301 	bic.w	r3, r3, #1
 801ce74:	b29a      	uxth	r2, r3
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	835a      	strh	r2, [r3, #26]
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	8b5b      	ldrh	r3, [r3, #26]
 801ce7e:	f043 0302 	orr.w	r3, r3, #2
 801ce82:	b29a      	uxth	r2, r3
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801ce88:	e188      	b.n	801d19c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	8b5b      	ldrh	r3, [r3, #26]
 801ce8e:	f043 0301 	orr.w	r3, r3, #1
 801ce92:	b29a      	uxth	r2, r3
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801ce98:	e180      	b.n	801d19c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d106      	bne.n	801ceb0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801cea2:	4848      	ldr	r0, [pc, #288]	; (801cfc4 <tcp_receive+0xd00>)
 801cea4:	f7fd faec 	bl	801a480 <tcp_seg_copy>
 801cea8:	4602      	mov	r2, r0
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	675a      	str	r2, [r3, #116]	; 0x74
 801ceae:	e16d      	b.n	801d18c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801ceb0:	2300      	movs	r3, #0
 801ceb2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ceb8:	63bb      	str	r3, [r7, #56]	; 0x38
 801ceba:	e157      	b.n	801d16c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cebe:	68db      	ldr	r3, [r3, #12]
 801cec0:	685a      	ldr	r2, [r3, #4]
 801cec2:	4b41      	ldr	r3, [pc, #260]	; (801cfc8 <tcp_receive+0xd04>)
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	429a      	cmp	r2, r3
 801cec8:	d11d      	bne.n	801cf06 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801ceca:	4b3e      	ldr	r3, [pc, #248]	; (801cfc4 <tcp_receive+0xd00>)
 801cecc:	891a      	ldrh	r2, [r3, #8]
 801cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ced0:	891b      	ldrh	r3, [r3, #8]
 801ced2:	429a      	cmp	r2, r3
 801ced4:	f240 814f 	bls.w	801d176 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ced8:	483a      	ldr	r0, [pc, #232]	; (801cfc4 <tcp_receive+0xd00>)
 801ceda:	f7fd fad1 	bl	801a480 <tcp_seg_copy>
 801cede:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801cee0:	697b      	ldr	r3, [r7, #20]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	f000 8149 	beq.w	801d17a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801cee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d003      	beq.n	801cef6 <tcp_receive+0xc32>
                    prev->next = cseg;
 801ceee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cef0:	697a      	ldr	r2, [r7, #20]
 801cef2:	601a      	str	r2, [r3, #0]
 801cef4:	e002      	b.n	801cefc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	697a      	ldr	r2, [r7, #20]
 801cefa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801cefc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cefe:	6978      	ldr	r0, [r7, #20]
 801cf00:	f7ff f8dc 	bl	801c0bc <tcp_oos_insert_segment>
                }
                break;
 801cf04:	e139      	b.n	801d17a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801cf06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d117      	bne.n	801cf3c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801cf0c:	4b2e      	ldr	r3, [pc, #184]	; (801cfc8 <tcp_receive+0xd04>)
 801cf0e:	681a      	ldr	r2, [r3, #0]
 801cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf12:	68db      	ldr	r3, [r3, #12]
 801cf14:	685b      	ldr	r3, [r3, #4]
 801cf16:	1ad3      	subs	r3, r2, r3
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	da57      	bge.n	801cfcc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cf1c:	4829      	ldr	r0, [pc, #164]	; (801cfc4 <tcp_receive+0xd00>)
 801cf1e:	f7fd faaf 	bl	801a480 <tcp_seg_copy>
 801cf22:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801cf24:	69bb      	ldr	r3, [r7, #24]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	f000 8129 	beq.w	801d17e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	69ba      	ldr	r2, [r7, #24]
 801cf30:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801cf32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cf34:	69b8      	ldr	r0, [r7, #24]
 801cf36:	f7ff f8c1 	bl	801c0bc <tcp_oos_insert_segment>
                  }
                  break;
 801cf3a:	e120      	b.n	801d17e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801cf3c:	4b22      	ldr	r3, [pc, #136]	; (801cfc8 <tcp_receive+0xd04>)
 801cf3e:	681a      	ldr	r2, [r3, #0]
 801cf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf42:	68db      	ldr	r3, [r3, #12]
 801cf44:	685b      	ldr	r3, [r3, #4]
 801cf46:	1ad3      	subs	r3, r2, r3
 801cf48:	3b01      	subs	r3, #1
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	db3e      	blt.n	801cfcc <tcp_receive+0xd08>
 801cf4e:	4b1e      	ldr	r3, [pc, #120]	; (801cfc8 <tcp_receive+0xd04>)
 801cf50:	681a      	ldr	r2, [r3, #0]
 801cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf54:	68db      	ldr	r3, [r3, #12]
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	1ad3      	subs	r3, r2, r3
 801cf5a:	3301      	adds	r3, #1
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	dc35      	bgt.n	801cfcc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cf60:	4818      	ldr	r0, [pc, #96]	; (801cfc4 <tcp_receive+0xd00>)
 801cf62:	f7fd fa8d 	bl	801a480 <tcp_seg_copy>
 801cf66:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801cf68:	69fb      	ldr	r3, [r7, #28]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	f000 8109 	beq.w	801d182 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801cf70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf72:	68db      	ldr	r3, [r3, #12]
 801cf74:	685b      	ldr	r3, [r3, #4]
 801cf76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cf78:	8912      	ldrh	r2, [r2, #8]
 801cf7a:	441a      	add	r2, r3
 801cf7c:	4b12      	ldr	r3, [pc, #72]	; (801cfc8 <tcp_receive+0xd04>)
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	1ad3      	subs	r3, r2, r3
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	dd12      	ble.n	801cfac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801cf86:	4b10      	ldr	r3, [pc, #64]	; (801cfc8 <tcp_receive+0xd04>)
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	b29a      	uxth	r2, r3
 801cf8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf8e:	68db      	ldr	r3, [r3, #12]
 801cf90:	685b      	ldr	r3, [r3, #4]
 801cf92:	b29b      	uxth	r3, r3
 801cf94:	1ad3      	subs	r3, r2, r3
 801cf96:	b29a      	uxth	r2, r3
 801cf98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf9a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801cf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf9e:	685a      	ldr	r2, [r3, #4]
 801cfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfa2:	891b      	ldrh	r3, [r3, #8]
 801cfa4:	4619      	mov	r1, r3
 801cfa6:	4610      	mov	r0, r2
 801cfa8:	f7fa fa5a 	bl	8017460 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfae:	69fa      	ldr	r2, [r7, #28]
 801cfb0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801cfb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cfb4:	69f8      	ldr	r0, [r7, #28]
 801cfb6:	f7ff f881 	bl	801c0bc <tcp_oos_insert_segment>
                  }
                  break;
 801cfba:	e0e2      	b.n	801d182 <tcp_receive+0xebe>
 801cfbc:	2400d418 	.word	0x2400d418
 801cfc0:	2400d415 	.word	0x2400d415
 801cfc4:	2400d3e8 	.word	0x2400d3e8
 801cfc8:	2400d408 	.word	0x2400d408
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfd2:	681b      	ldr	r3, [r3, #0]
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	f040 80c6 	bne.w	801d166 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801cfda:	4b80      	ldr	r3, [pc, #512]	; (801d1dc <tcp_receive+0xf18>)
 801cfdc:	681a      	ldr	r2, [r3, #0]
 801cfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfe0:	68db      	ldr	r3, [r3, #12]
 801cfe2:	685b      	ldr	r3, [r3, #4]
 801cfe4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	f340 80bd 	ble.w	801d166 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfee:	68db      	ldr	r3, [r3, #12]
 801cff0:	899b      	ldrh	r3, [r3, #12]
 801cff2:	b29b      	uxth	r3, r3
 801cff4:	4618      	mov	r0, r3
 801cff6:	f7f3 fd6b 	bl	8010ad0 <lwip_htons>
 801cffa:	4603      	mov	r3, r0
 801cffc:	b2db      	uxtb	r3, r3
 801cffe:	f003 0301 	and.w	r3, r3, #1
 801d002:	2b00      	cmp	r3, #0
 801d004:	f040 80bf 	bne.w	801d186 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801d008:	4875      	ldr	r0, [pc, #468]	; (801d1e0 <tcp_receive+0xf1c>)
 801d00a:	f7fd fa39 	bl	801a480 <tcp_seg_copy>
 801d00e:	4602      	mov	r2, r0
 801d010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d012:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	f000 80b6 	beq.w	801d18a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d020:	68db      	ldr	r3, [r3, #12]
 801d022:	685b      	ldr	r3, [r3, #4]
 801d024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d026:	8912      	ldrh	r2, [r2, #8]
 801d028:	441a      	add	r2, r3
 801d02a:	4b6c      	ldr	r3, [pc, #432]	; (801d1dc <tcp_receive+0xf18>)
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	1ad3      	subs	r3, r2, r3
 801d030:	2b00      	cmp	r3, #0
 801d032:	dd12      	ble.n	801d05a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d034:	4b69      	ldr	r3, [pc, #420]	; (801d1dc <tcp_receive+0xf18>)
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	b29a      	uxth	r2, r3
 801d03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d03c:	68db      	ldr	r3, [r3, #12]
 801d03e:	685b      	ldr	r3, [r3, #4]
 801d040:	b29b      	uxth	r3, r3
 801d042:	1ad3      	subs	r3, r2, r3
 801d044:	b29a      	uxth	r2, r3
 801d046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d048:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d04c:	685a      	ldr	r2, [r3, #4]
 801d04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d050:	891b      	ldrh	r3, [r3, #8]
 801d052:	4619      	mov	r1, r3
 801d054:	4610      	mov	r0, r2
 801d056:	f7fa fa03 	bl	8017460 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d05a:	4b62      	ldr	r3, [pc, #392]	; (801d1e4 <tcp_receive+0xf20>)
 801d05c:	881b      	ldrh	r3, [r3, #0]
 801d05e:	461a      	mov	r2, r3
 801d060:	4b5e      	ldr	r3, [pc, #376]	; (801d1dc <tcp_receive+0xf18>)
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	441a      	add	r2, r3
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d06a:	6879      	ldr	r1, [r7, #4]
 801d06c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d06e:	440b      	add	r3, r1
 801d070:	1ad3      	subs	r3, r2, r3
 801d072:	2b00      	cmp	r3, #0
 801d074:	f340 8089 	ble.w	801d18a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	68db      	ldr	r3, [r3, #12]
 801d07e:	899b      	ldrh	r3, [r3, #12]
 801d080:	b29b      	uxth	r3, r3
 801d082:	4618      	mov	r0, r3
 801d084:	f7f3 fd24 	bl	8010ad0 <lwip_htons>
 801d088:	4603      	mov	r3, r0
 801d08a:	b2db      	uxtb	r3, r3
 801d08c:	f003 0301 	and.w	r3, r3, #1
 801d090:	2b00      	cmp	r3, #0
 801d092:	d022      	beq.n	801d0da <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	68db      	ldr	r3, [r3, #12]
 801d09a:	899b      	ldrh	r3, [r3, #12]
 801d09c:	b29b      	uxth	r3, r3
 801d09e:	b21b      	sxth	r3, r3
 801d0a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d0a4:	b21c      	sxth	r4, r3
 801d0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	68db      	ldr	r3, [r3, #12]
 801d0ac:	899b      	ldrh	r3, [r3, #12]
 801d0ae:	b29b      	uxth	r3, r3
 801d0b0:	4618      	mov	r0, r3
 801d0b2:	f7f3 fd0d 	bl	8010ad0 <lwip_htons>
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	b2db      	uxtb	r3, r3
 801d0ba:	b29b      	uxth	r3, r3
 801d0bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d0c0:	b29b      	uxth	r3, r3
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	f7f3 fd04 	bl	8010ad0 <lwip_htons>
 801d0c8:	4603      	mov	r3, r0
 801d0ca:	b21b      	sxth	r3, r3
 801d0cc:	4323      	orrs	r3, r4
 801d0ce:	b21a      	sxth	r2, r3
 801d0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	68db      	ldr	r3, [r3, #12]
 801d0d6:	b292      	uxth	r2, r2
 801d0d8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0de:	b29a      	uxth	r2, r3
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d0e4:	4413      	add	r3, r2
 801d0e6:	b299      	uxth	r1, r3
 801d0e8:	4b3c      	ldr	r3, [pc, #240]	; (801d1dc <tcp_receive+0xf18>)
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	b29a      	uxth	r2, r3
 801d0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	1a8a      	subs	r2, r1, r2
 801d0f4:	b292      	uxth	r2, r2
 801d0f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	685a      	ldr	r2, [r3, #4]
 801d0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d100:	681b      	ldr	r3, [r3, #0]
 801d102:	891b      	ldrh	r3, [r3, #8]
 801d104:	4619      	mov	r1, r3
 801d106:	4610      	mov	r0, r2
 801d108:	f7fa f9aa 	bl	8017460 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	891c      	ldrh	r4, [r3, #8]
 801d112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	68db      	ldr	r3, [r3, #12]
 801d118:	899b      	ldrh	r3, [r3, #12]
 801d11a:	b29b      	uxth	r3, r3
 801d11c:	4618      	mov	r0, r3
 801d11e:	f7f3 fcd7 	bl	8010ad0 <lwip_htons>
 801d122:	4603      	mov	r3, r0
 801d124:	b2db      	uxtb	r3, r3
 801d126:	f003 0303 	and.w	r3, r3, #3
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d001      	beq.n	801d132 <tcp_receive+0xe6e>
 801d12e:	2301      	movs	r3, #1
 801d130:	e000      	b.n	801d134 <tcp_receive+0xe70>
 801d132:	2300      	movs	r3, #0
 801d134:	4423      	add	r3, r4
 801d136:	b29a      	uxth	r2, r3
 801d138:	4b2a      	ldr	r3, [pc, #168]	; (801d1e4 <tcp_receive+0xf20>)
 801d13a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d13c:	4b29      	ldr	r3, [pc, #164]	; (801d1e4 <tcp_receive+0xf20>)
 801d13e:	881b      	ldrh	r3, [r3, #0]
 801d140:	461a      	mov	r2, r3
 801d142:	4b26      	ldr	r3, [pc, #152]	; (801d1dc <tcp_receive+0xf18>)
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	441a      	add	r2, r3
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d14c:	6879      	ldr	r1, [r7, #4]
 801d14e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d150:	440b      	add	r3, r1
 801d152:	429a      	cmp	r2, r3
 801d154:	d019      	beq.n	801d18a <tcp_receive+0xec6>
 801d156:	4b24      	ldr	r3, [pc, #144]	; (801d1e8 <tcp_receive+0xf24>)
 801d158:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d15c:	4923      	ldr	r1, [pc, #140]	; (801d1ec <tcp_receive+0xf28>)
 801d15e:	4824      	ldr	r0, [pc, #144]	; (801d1f0 <tcp_receive+0xf2c>)
 801d160:	f003 f9f6 	bl	8020550 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d164:	e011      	b.n	801d18a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	63bb      	str	r3, [r7, #56]	; 0x38
 801d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d16e:	2b00      	cmp	r3, #0
 801d170:	f47f aea4 	bne.w	801cebc <tcp_receive+0xbf8>
 801d174:	e00a      	b.n	801d18c <tcp_receive+0xec8>
                break;
 801d176:	bf00      	nop
 801d178:	e008      	b.n	801d18c <tcp_receive+0xec8>
                break;
 801d17a:	bf00      	nop
 801d17c:	e006      	b.n	801d18c <tcp_receive+0xec8>
                  break;
 801d17e:	bf00      	nop
 801d180:	e004      	b.n	801d18c <tcp_receive+0xec8>
                  break;
 801d182:	bf00      	nop
 801d184:	e002      	b.n	801d18c <tcp_receive+0xec8>
                  break;
 801d186:	bf00      	nop
 801d188:	e000      	b.n	801d18c <tcp_receive+0xec8>
                break;
 801d18a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d18c:	6878      	ldr	r0, [r7, #4]
 801d18e:	f001 fe8b 	bl	801eea8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d192:	e003      	b.n	801d19c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d194:	6878      	ldr	r0, [r7, #4]
 801d196:	f001 fe87 	bl	801eea8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d19a:	e01a      	b.n	801d1d2 <tcp_receive+0xf0e>
 801d19c:	e019      	b.n	801d1d2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d19e:	4b0f      	ldr	r3, [pc, #60]	; (801d1dc <tcp_receive+0xf18>)
 801d1a0:	681a      	ldr	r2, [r3, #0]
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1a6:	1ad3      	subs	r3, r2, r3
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	db0a      	blt.n	801d1c2 <tcp_receive+0xefe>
 801d1ac:	4b0b      	ldr	r3, [pc, #44]	; (801d1dc <tcp_receive+0xf18>)
 801d1ae:	681a      	ldr	r2, [r3, #0]
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1b4:	6879      	ldr	r1, [r7, #4]
 801d1b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d1b8:	440b      	add	r3, r1
 801d1ba:	1ad3      	subs	r3, r2, r3
 801d1bc:	3301      	adds	r3, #1
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	dd07      	ble.n	801d1d2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	8b5b      	ldrh	r3, [r3, #26]
 801d1c6:	f043 0302 	orr.w	r3, r3, #2
 801d1ca:	b29a      	uxth	r2, r3
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d1d0:	e7ff      	b.n	801d1d2 <tcp_receive+0xf0e>
 801d1d2:	bf00      	nop
 801d1d4:	3750      	adds	r7, #80	; 0x50
 801d1d6:	46bd      	mov	sp, r7
 801d1d8:	bdb0      	pop	{r4, r5, r7, pc}
 801d1da:	bf00      	nop
 801d1dc:	2400d408 	.word	0x2400d408
 801d1e0:	2400d3e8 	.word	0x2400d3e8
 801d1e4:	2400d412 	.word	0x2400d412
 801d1e8:	080244e8 	.word	0x080244e8
 801d1ec:	08024898 	.word	0x08024898
 801d1f0:	0802453c 	.word	0x0802453c

0801d1f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d1f4:	b480      	push	{r7}
 801d1f6:	b083      	sub	sp, #12
 801d1f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d1fa:	4b15      	ldr	r3, [pc, #84]	; (801d250 <tcp_get_next_optbyte+0x5c>)
 801d1fc:	881b      	ldrh	r3, [r3, #0]
 801d1fe:	1c5a      	adds	r2, r3, #1
 801d200:	b291      	uxth	r1, r2
 801d202:	4a13      	ldr	r2, [pc, #76]	; (801d250 <tcp_get_next_optbyte+0x5c>)
 801d204:	8011      	strh	r1, [r2, #0]
 801d206:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d208:	4b12      	ldr	r3, [pc, #72]	; (801d254 <tcp_get_next_optbyte+0x60>)
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d004      	beq.n	801d21a <tcp_get_next_optbyte+0x26>
 801d210:	4b11      	ldr	r3, [pc, #68]	; (801d258 <tcp_get_next_optbyte+0x64>)
 801d212:	881b      	ldrh	r3, [r3, #0]
 801d214:	88fa      	ldrh	r2, [r7, #6]
 801d216:	429a      	cmp	r2, r3
 801d218:	d208      	bcs.n	801d22c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d21a:	4b10      	ldr	r3, [pc, #64]	; (801d25c <tcp_get_next_optbyte+0x68>)
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	3314      	adds	r3, #20
 801d220:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d222:	88fb      	ldrh	r3, [r7, #6]
 801d224:	683a      	ldr	r2, [r7, #0]
 801d226:	4413      	add	r3, r2
 801d228:	781b      	ldrb	r3, [r3, #0]
 801d22a:	e00b      	b.n	801d244 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d22c:	88fb      	ldrh	r3, [r7, #6]
 801d22e:	b2da      	uxtb	r2, r3
 801d230:	4b09      	ldr	r3, [pc, #36]	; (801d258 <tcp_get_next_optbyte+0x64>)
 801d232:	881b      	ldrh	r3, [r3, #0]
 801d234:	b2db      	uxtb	r3, r3
 801d236:	1ad3      	subs	r3, r2, r3
 801d238:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d23a:	4b06      	ldr	r3, [pc, #24]	; (801d254 <tcp_get_next_optbyte+0x60>)
 801d23c:	681a      	ldr	r2, [r3, #0]
 801d23e:	797b      	ldrb	r3, [r7, #5]
 801d240:	4413      	add	r3, r2
 801d242:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d244:	4618      	mov	r0, r3
 801d246:	370c      	adds	r7, #12
 801d248:	46bd      	mov	sp, r7
 801d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d24e:	4770      	bx	lr
 801d250:	2400d404 	.word	0x2400d404
 801d254:	2400d400 	.word	0x2400d400
 801d258:	2400d3fe 	.word	0x2400d3fe
 801d25c:	2400d3f8 	.word	0x2400d3f8

0801d260 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b084      	sub	sp, #16
 801d264:	af00      	add	r7, sp, #0
 801d266:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d106      	bne.n	801d27c <tcp_parseopt+0x1c>
 801d26e:	4b32      	ldr	r3, [pc, #200]	; (801d338 <tcp_parseopt+0xd8>)
 801d270:	f240 727d 	movw	r2, #1917	; 0x77d
 801d274:	4931      	ldr	r1, [pc, #196]	; (801d33c <tcp_parseopt+0xdc>)
 801d276:	4832      	ldr	r0, [pc, #200]	; (801d340 <tcp_parseopt+0xe0>)
 801d278:	f003 f96a 	bl	8020550 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d27c:	4b31      	ldr	r3, [pc, #196]	; (801d344 <tcp_parseopt+0xe4>)
 801d27e:	881b      	ldrh	r3, [r3, #0]
 801d280:	2b00      	cmp	r3, #0
 801d282:	d055      	beq.n	801d330 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d284:	4b30      	ldr	r3, [pc, #192]	; (801d348 <tcp_parseopt+0xe8>)
 801d286:	2200      	movs	r2, #0
 801d288:	801a      	strh	r2, [r3, #0]
 801d28a:	e045      	b.n	801d318 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801d28c:	f7ff ffb2 	bl	801d1f4 <tcp_get_next_optbyte>
 801d290:	4603      	mov	r3, r0
 801d292:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d294:	7bfb      	ldrb	r3, [r7, #15]
 801d296:	2b02      	cmp	r3, #2
 801d298:	d006      	beq.n	801d2a8 <tcp_parseopt+0x48>
 801d29a:	2b02      	cmp	r3, #2
 801d29c:	dc2b      	bgt.n	801d2f6 <tcp_parseopt+0x96>
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d041      	beq.n	801d326 <tcp_parseopt+0xc6>
 801d2a2:	2b01      	cmp	r3, #1
 801d2a4:	d127      	bne.n	801d2f6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801d2a6:	e037      	b.n	801d318 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d2a8:	f7ff ffa4 	bl	801d1f4 <tcp_get_next_optbyte>
 801d2ac:	4603      	mov	r3, r0
 801d2ae:	2b04      	cmp	r3, #4
 801d2b0:	d13b      	bne.n	801d32a <tcp_parseopt+0xca>
 801d2b2:	4b25      	ldr	r3, [pc, #148]	; (801d348 <tcp_parseopt+0xe8>)
 801d2b4:	881b      	ldrh	r3, [r3, #0]
 801d2b6:	3301      	adds	r3, #1
 801d2b8:	4a22      	ldr	r2, [pc, #136]	; (801d344 <tcp_parseopt+0xe4>)
 801d2ba:	8812      	ldrh	r2, [r2, #0]
 801d2bc:	4293      	cmp	r3, r2
 801d2be:	da34      	bge.n	801d32a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d2c0:	f7ff ff98 	bl	801d1f4 <tcp_get_next_optbyte>
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	b29b      	uxth	r3, r3
 801d2c8:	021b      	lsls	r3, r3, #8
 801d2ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d2cc:	f7ff ff92 	bl	801d1f4 <tcp_get_next_optbyte>
 801d2d0:	4603      	mov	r3, r0
 801d2d2:	b29a      	uxth	r2, r3
 801d2d4:	89bb      	ldrh	r3, [r7, #12]
 801d2d6:	4313      	orrs	r3, r2
 801d2d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d2da:	89bb      	ldrh	r3, [r7, #12]
 801d2dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d2e0:	d804      	bhi.n	801d2ec <tcp_parseopt+0x8c>
 801d2e2:	89bb      	ldrh	r3, [r7, #12]
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d001      	beq.n	801d2ec <tcp_parseopt+0x8c>
 801d2e8:	89ba      	ldrh	r2, [r7, #12]
 801d2ea:	e001      	b.n	801d2f0 <tcp_parseopt+0x90>
 801d2ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801d2f4:	e010      	b.n	801d318 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d2f6:	f7ff ff7d 	bl	801d1f4 <tcp_get_next_optbyte>
 801d2fa:	4603      	mov	r3, r0
 801d2fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d2fe:	7afb      	ldrb	r3, [r7, #11]
 801d300:	2b01      	cmp	r3, #1
 801d302:	d914      	bls.n	801d32e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d304:	7afb      	ldrb	r3, [r7, #11]
 801d306:	b29a      	uxth	r2, r3
 801d308:	4b0f      	ldr	r3, [pc, #60]	; (801d348 <tcp_parseopt+0xe8>)
 801d30a:	881b      	ldrh	r3, [r3, #0]
 801d30c:	4413      	add	r3, r2
 801d30e:	b29b      	uxth	r3, r3
 801d310:	3b02      	subs	r3, #2
 801d312:	b29a      	uxth	r2, r3
 801d314:	4b0c      	ldr	r3, [pc, #48]	; (801d348 <tcp_parseopt+0xe8>)
 801d316:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d318:	4b0b      	ldr	r3, [pc, #44]	; (801d348 <tcp_parseopt+0xe8>)
 801d31a:	881a      	ldrh	r2, [r3, #0]
 801d31c:	4b09      	ldr	r3, [pc, #36]	; (801d344 <tcp_parseopt+0xe4>)
 801d31e:	881b      	ldrh	r3, [r3, #0]
 801d320:	429a      	cmp	r2, r3
 801d322:	d3b3      	bcc.n	801d28c <tcp_parseopt+0x2c>
 801d324:	e004      	b.n	801d330 <tcp_parseopt+0xd0>
          return;
 801d326:	bf00      	nop
 801d328:	e002      	b.n	801d330 <tcp_parseopt+0xd0>
            return;
 801d32a:	bf00      	nop
 801d32c:	e000      	b.n	801d330 <tcp_parseopt+0xd0>
            return;
 801d32e:	bf00      	nop
      }
    }
  }
}
 801d330:	3710      	adds	r7, #16
 801d332:	46bd      	mov	sp, r7
 801d334:	bd80      	pop	{r7, pc}
 801d336:	bf00      	nop
 801d338:	080244e8 	.word	0x080244e8
 801d33c:	08024954 	.word	0x08024954
 801d340:	0802453c 	.word	0x0802453c
 801d344:	2400d3fc 	.word	0x2400d3fc
 801d348:	2400d404 	.word	0x2400d404

0801d34c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d34c:	b480      	push	{r7}
 801d34e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d350:	4b05      	ldr	r3, [pc, #20]	; (801d368 <tcp_trigger_input_pcb_close+0x1c>)
 801d352:	781b      	ldrb	r3, [r3, #0]
 801d354:	f043 0310 	orr.w	r3, r3, #16
 801d358:	b2da      	uxtb	r2, r3
 801d35a:	4b03      	ldr	r3, [pc, #12]	; (801d368 <tcp_trigger_input_pcb_close+0x1c>)
 801d35c:	701a      	strb	r2, [r3, #0]
}
 801d35e:	bf00      	nop
 801d360:	46bd      	mov	sp, r7
 801d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d366:	4770      	bx	lr
 801d368:	2400d415 	.word	0x2400d415

0801d36c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	b084      	sub	sp, #16
 801d370:	af00      	add	r7, sp, #0
 801d372:	60f8      	str	r0, [r7, #12]
 801d374:	60b9      	str	r1, [r7, #8]
 801d376:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d00a      	beq.n	801d394 <tcp_route+0x28>
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	7a1b      	ldrb	r3, [r3, #8]
 801d382:	2b00      	cmp	r3, #0
 801d384:	d006      	beq.n	801d394 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	7a1b      	ldrb	r3, [r3, #8]
 801d38a:	4618      	mov	r0, r3
 801d38c:	f7f9 fe32 	bl	8016ff4 <netif_get_by_index>
 801d390:	4603      	mov	r3, r0
 801d392:	e003      	b.n	801d39c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d394:	6878      	ldr	r0, [r7, #4]
 801d396:	f7f7 f869 	bl	801446c <ip4_route>
 801d39a:	4603      	mov	r3, r0
  }
}
 801d39c:	4618      	mov	r0, r3
 801d39e:	3710      	adds	r7, #16
 801d3a0:	46bd      	mov	sp, r7
 801d3a2:	bd80      	pop	{r7, pc}

0801d3a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d3a4:	b590      	push	{r4, r7, lr}
 801d3a6:	b087      	sub	sp, #28
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	60f8      	str	r0, [r7, #12]
 801d3ac:	60b9      	str	r1, [r7, #8]
 801d3ae:	603b      	str	r3, [r7, #0]
 801d3b0:	4613      	mov	r3, r2
 801d3b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d105      	bne.n	801d3c6 <tcp_create_segment+0x22>
 801d3ba:	4b44      	ldr	r3, [pc, #272]	; (801d4cc <tcp_create_segment+0x128>)
 801d3bc:	22a3      	movs	r2, #163	; 0xa3
 801d3be:	4944      	ldr	r1, [pc, #272]	; (801d4d0 <tcp_create_segment+0x12c>)
 801d3c0:	4844      	ldr	r0, [pc, #272]	; (801d4d4 <tcp_create_segment+0x130>)
 801d3c2:	f003 f8c5 	bl	8020550 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d3c6:	68bb      	ldr	r3, [r7, #8]
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d105      	bne.n	801d3d8 <tcp_create_segment+0x34>
 801d3cc:	4b3f      	ldr	r3, [pc, #252]	; (801d4cc <tcp_create_segment+0x128>)
 801d3ce:	22a4      	movs	r2, #164	; 0xa4
 801d3d0:	4941      	ldr	r1, [pc, #260]	; (801d4d8 <tcp_create_segment+0x134>)
 801d3d2:	4840      	ldr	r0, [pc, #256]	; (801d4d4 <tcp_create_segment+0x130>)
 801d3d4:	f003 f8bc 	bl	8020550 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d3d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d3dc:	009b      	lsls	r3, r3, #2
 801d3de:	b2db      	uxtb	r3, r3
 801d3e0:	f003 0304 	and.w	r3, r3, #4
 801d3e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d3e6:	2003      	movs	r0, #3
 801d3e8:	f7f8 ffde 	bl	80163a8 <memp_malloc>
 801d3ec:	6138      	str	r0, [r7, #16]
 801d3ee:	693b      	ldr	r3, [r7, #16]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d104      	bne.n	801d3fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801d3f4:	68b8      	ldr	r0, [r7, #8]
 801d3f6:	f7fa f9b9 	bl	801776c <pbuf_free>
    return NULL;
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	e061      	b.n	801d4c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801d3fe:	693b      	ldr	r3, [r7, #16]
 801d400:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d404:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801d406:	693b      	ldr	r3, [r7, #16]
 801d408:	2200      	movs	r2, #0
 801d40a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801d40c:	693b      	ldr	r3, [r7, #16]
 801d40e:	68ba      	ldr	r2, [r7, #8]
 801d410:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d412:	68bb      	ldr	r3, [r7, #8]
 801d414:	891a      	ldrh	r2, [r3, #8]
 801d416:	7dfb      	ldrb	r3, [r7, #23]
 801d418:	b29b      	uxth	r3, r3
 801d41a:	429a      	cmp	r2, r3
 801d41c:	d205      	bcs.n	801d42a <tcp_create_segment+0x86>
 801d41e:	4b2b      	ldr	r3, [pc, #172]	; (801d4cc <tcp_create_segment+0x128>)
 801d420:	22b0      	movs	r2, #176	; 0xb0
 801d422:	492e      	ldr	r1, [pc, #184]	; (801d4dc <tcp_create_segment+0x138>)
 801d424:	482b      	ldr	r0, [pc, #172]	; (801d4d4 <tcp_create_segment+0x130>)
 801d426:	f003 f893 	bl	8020550 <iprintf>
  seg->len = p->tot_len - optlen;
 801d42a:	68bb      	ldr	r3, [r7, #8]
 801d42c:	891a      	ldrh	r2, [r3, #8]
 801d42e:	7dfb      	ldrb	r3, [r7, #23]
 801d430:	b29b      	uxth	r3, r3
 801d432:	1ad3      	subs	r3, r2, r3
 801d434:	b29a      	uxth	r2, r3
 801d436:	693b      	ldr	r3, [r7, #16]
 801d438:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d43a:	2114      	movs	r1, #20
 801d43c:	68b8      	ldr	r0, [r7, #8]
 801d43e:	f7fa f8ff 	bl	8017640 <pbuf_add_header>
 801d442:	4603      	mov	r3, r0
 801d444:	2b00      	cmp	r3, #0
 801d446:	d004      	beq.n	801d452 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801d448:	6938      	ldr	r0, [r7, #16]
 801d44a:	f7fd f800 	bl	801a44e <tcp_seg_free>
    return NULL;
 801d44e:	2300      	movs	r3, #0
 801d450:	e037      	b.n	801d4c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d452:	693b      	ldr	r3, [r7, #16]
 801d454:	685b      	ldr	r3, [r3, #4]
 801d456:	685a      	ldr	r2, [r3, #4]
 801d458:	693b      	ldr	r3, [r7, #16]
 801d45a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d45c:	68fb      	ldr	r3, [r7, #12]
 801d45e:	8ada      	ldrh	r2, [r3, #22]
 801d460:	693b      	ldr	r3, [r7, #16]
 801d462:	68dc      	ldr	r4, [r3, #12]
 801d464:	4610      	mov	r0, r2
 801d466:	f7f3 fb33 	bl	8010ad0 <lwip_htons>
 801d46a:	4603      	mov	r3, r0
 801d46c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	8b1a      	ldrh	r2, [r3, #24]
 801d472:	693b      	ldr	r3, [r7, #16]
 801d474:	68dc      	ldr	r4, [r3, #12]
 801d476:	4610      	mov	r0, r2
 801d478:	f7f3 fb2a 	bl	8010ad0 <lwip_htons>
 801d47c:	4603      	mov	r3, r0
 801d47e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d480:	693b      	ldr	r3, [r7, #16]
 801d482:	68dc      	ldr	r4, [r3, #12]
 801d484:	6838      	ldr	r0, [r7, #0]
 801d486:	f7f3 fb38 	bl	8010afa <lwip_htonl>
 801d48a:	4603      	mov	r3, r0
 801d48c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d48e:	7dfb      	ldrb	r3, [r7, #23]
 801d490:	089b      	lsrs	r3, r3, #2
 801d492:	b2db      	uxtb	r3, r3
 801d494:	b29b      	uxth	r3, r3
 801d496:	3305      	adds	r3, #5
 801d498:	b29b      	uxth	r3, r3
 801d49a:	031b      	lsls	r3, r3, #12
 801d49c:	b29a      	uxth	r2, r3
 801d49e:	79fb      	ldrb	r3, [r7, #7]
 801d4a0:	b29b      	uxth	r3, r3
 801d4a2:	4313      	orrs	r3, r2
 801d4a4:	b29a      	uxth	r2, r3
 801d4a6:	693b      	ldr	r3, [r7, #16]
 801d4a8:	68dc      	ldr	r4, [r3, #12]
 801d4aa:	4610      	mov	r0, r2
 801d4ac:	f7f3 fb10 	bl	8010ad0 <lwip_htons>
 801d4b0:	4603      	mov	r3, r0
 801d4b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801d4b4:	693b      	ldr	r3, [r7, #16]
 801d4b6:	68db      	ldr	r3, [r3, #12]
 801d4b8:	2200      	movs	r2, #0
 801d4ba:	749a      	strb	r2, [r3, #18]
 801d4bc:	2200      	movs	r2, #0
 801d4be:	74da      	strb	r2, [r3, #19]
  return seg;
 801d4c0:	693b      	ldr	r3, [r7, #16]
}
 801d4c2:	4618      	mov	r0, r3
 801d4c4:	371c      	adds	r7, #28
 801d4c6:	46bd      	mov	sp, r7
 801d4c8:	bd90      	pop	{r4, r7, pc}
 801d4ca:	bf00      	nop
 801d4cc:	08024970 	.word	0x08024970
 801d4d0:	080249ac 	.word	0x080249ac
 801d4d4:	080249cc 	.word	0x080249cc
 801d4d8:	080249f4 	.word	0x080249f4
 801d4dc:	08024a18 	.word	0x08024a18

0801d4e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801d4e0:	b580      	push	{r7, lr}
 801d4e2:	b086      	sub	sp, #24
 801d4e4:	af00      	add	r7, sp, #0
 801d4e6:	607b      	str	r3, [r7, #4]
 801d4e8:	4603      	mov	r3, r0
 801d4ea:	73fb      	strb	r3, [r7, #15]
 801d4ec:	460b      	mov	r3, r1
 801d4ee:	81bb      	strh	r3, [r7, #12]
 801d4f0:	4613      	mov	r3, r2
 801d4f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801d4f4:	89bb      	ldrh	r3, [r7, #12]
 801d4f6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d105      	bne.n	801d50a <tcp_pbuf_prealloc+0x2a>
 801d4fe:	4b30      	ldr	r3, [pc, #192]	; (801d5c0 <tcp_pbuf_prealloc+0xe0>)
 801d500:	22e8      	movs	r2, #232	; 0xe8
 801d502:	4930      	ldr	r1, [pc, #192]	; (801d5c4 <tcp_pbuf_prealloc+0xe4>)
 801d504:	4830      	ldr	r0, [pc, #192]	; (801d5c8 <tcp_pbuf_prealloc+0xe8>)
 801d506:	f003 f823 	bl	8020550 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d50a:	6a3b      	ldr	r3, [r7, #32]
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d105      	bne.n	801d51c <tcp_pbuf_prealloc+0x3c>
 801d510:	4b2b      	ldr	r3, [pc, #172]	; (801d5c0 <tcp_pbuf_prealloc+0xe0>)
 801d512:	22e9      	movs	r2, #233	; 0xe9
 801d514:	492d      	ldr	r1, [pc, #180]	; (801d5cc <tcp_pbuf_prealloc+0xec>)
 801d516:	482c      	ldr	r0, [pc, #176]	; (801d5c8 <tcp_pbuf_prealloc+0xe8>)
 801d518:	f003 f81a 	bl	8020550 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801d51c:	89ba      	ldrh	r2, [r7, #12]
 801d51e:	897b      	ldrh	r3, [r7, #10]
 801d520:	429a      	cmp	r2, r3
 801d522:	d221      	bcs.n	801d568 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d524:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d528:	f003 0302 	and.w	r3, r3, #2
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d111      	bne.n	801d554 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801d530:	6a3b      	ldr	r3, [r7, #32]
 801d532:	8b5b      	ldrh	r3, [r3, #26]
 801d534:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d115      	bne.n	801d568 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801d53c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d540:	2b00      	cmp	r3, #0
 801d542:	d007      	beq.n	801d554 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801d544:	6a3b      	ldr	r3, [r7, #32]
 801d546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d103      	bne.n	801d554 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801d54c:	6a3b      	ldr	r3, [r7, #32]
 801d54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801d550:	2b00      	cmp	r3, #0
 801d552:	d009      	beq.n	801d568 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801d554:	89bb      	ldrh	r3, [r7, #12]
 801d556:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801d55a:	f023 0203 	bic.w	r2, r3, #3
 801d55e:	897b      	ldrh	r3, [r7, #10]
 801d560:	4293      	cmp	r3, r2
 801d562:	bf28      	it	cs
 801d564:	4613      	movcs	r3, r2
 801d566:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801d568:	8af9      	ldrh	r1, [r7, #22]
 801d56a:	7bfb      	ldrb	r3, [r7, #15]
 801d56c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d570:	4618      	mov	r0, r3
 801d572:	f7f9 fe17 	bl	80171a4 <pbuf_alloc>
 801d576:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d578:	693b      	ldr	r3, [r7, #16]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d101      	bne.n	801d582 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801d57e:	2300      	movs	r3, #0
 801d580:	e019      	b.n	801d5b6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801d582:	693b      	ldr	r3, [r7, #16]
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d006      	beq.n	801d598 <tcp_pbuf_prealloc+0xb8>
 801d58a:	4b0d      	ldr	r3, [pc, #52]	; (801d5c0 <tcp_pbuf_prealloc+0xe0>)
 801d58c:	f240 120b 	movw	r2, #267	; 0x10b
 801d590:	490f      	ldr	r1, [pc, #60]	; (801d5d0 <tcp_pbuf_prealloc+0xf0>)
 801d592:	480d      	ldr	r0, [pc, #52]	; (801d5c8 <tcp_pbuf_prealloc+0xe8>)
 801d594:	f002 ffdc 	bl	8020550 <iprintf>
  *oversize = p->len - length;
 801d598:	693b      	ldr	r3, [r7, #16]
 801d59a:	895a      	ldrh	r2, [r3, #10]
 801d59c:	89bb      	ldrh	r3, [r7, #12]
 801d59e:	1ad3      	subs	r3, r2, r3
 801d5a0:	b29a      	uxth	r2, r3
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801d5a6:	693b      	ldr	r3, [r7, #16]
 801d5a8:	89ba      	ldrh	r2, [r7, #12]
 801d5aa:	811a      	strh	r2, [r3, #8]
 801d5ac:	693b      	ldr	r3, [r7, #16]
 801d5ae:	891a      	ldrh	r2, [r3, #8]
 801d5b0:	693b      	ldr	r3, [r7, #16]
 801d5b2:	815a      	strh	r2, [r3, #10]
  return p;
 801d5b4:	693b      	ldr	r3, [r7, #16]
}
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	3718      	adds	r7, #24
 801d5ba:	46bd      	mov	sp, r7
 801d5bc:	bd80      	pop	{r7, pc}
 801d5be:	bf00      	nop
 801d5c0:	08024970 	.word	0x08024970
 801d5c4:	08024a30 	.word	0x08024a30
 801d5c8:	080249cc 	.word	0x080249cc
 801d5cc:	08024a54 	.word	0x08024a54
 801d5d0:	08024a74 	.word	0x08024a74

0801d5d4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801d5d4:	b580      	push	{r7, lr}
 801d5d6:	b082      	sub	sp, #8
 801d5d8:	af00      	add	r7, sp, #0
 801d5da:	6078      	str	r0, [r7, #4]
 801d5dc:	460b      	mov	r3, r1
 801d5de:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801d5e0:	687b      	ldr	r3, [r7, #4]
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d106      	bne.n	801d5f4 <tcp_write_checks+0x20>
 801d5e6:	4b33      	ldr	r3, [pc, #204]	; (801d6b4 <tcp_write_checks+0xe0>)
 801d5e8:	f240 1233 	movw	r2, #307	; 0x133
 801d5ec:	4932      	ldr	r1, [pc, #200]	; (801d6b8 <tcp_write_checks+0xe4>)
 801d5ee:	4833      	ldr	r0, [pc, #204]	; (801d6bc <tcp_write_checks+0xe8>)
 801d5f0:	f002 ffae 	bl	8020550 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	7d1b      	ldrb	r3, [r3, #20]
 801d5f8:	2b04      	cmp	r3, #4
 801d5fa:	d00e      	beq.n	801d61a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801d600:	2b07      	cmp	r3, #7
 801d602:	d00a      	beq.n	801d61a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801d608:	2b02      	cmp	r3, #2
 801d60a:	d006      	beq.n	801d61a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801d610:	2b03      	cmp	r3, #3
 801d612:	d002      	beq.n	801d61a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801d614:	f06f 030a 	mvn.w	r3, #10
 801d618:	e048      	b.n	801d6ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801d61a:	887b      	ldrh	r3, [r7, #2]
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	d101      	bne.n	801d624 <tcp_write_checks+0x50>
    return ERR_OK;
 801d620:	2300      	movs	r3, #0
 801d622:	e043      	b.n	801d6ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801d62a:	887a      	ldrh	r2, [r7, #2]
 801d62c:	429a      	cmp	r2, r3
 801d62e:	d909      	bls.n	801d644 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	8b5b      	ldrh	r3, [r3, #26]
 801d634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d638:	b29a      	uxth	r2, r3
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d63e:	f04f 33ff 	mov.w	r3, #4294967295
 801d642:	e033      	b.n	801d6ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d64a:	2b08      	cmp	r3, #8
 801d64c:	d909      	bls.n	801d662 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	8b5b      	ldrh	r3, [r3, #26]
 801d652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d656:	b29a      	uxth	r2, r3
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d65c:	f04f 33ff 	mov.w	r3, #4294967295
 801d660:	e024      	b.n	801d6ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d668:	2b00      	cmp	r3, #0
 801d66a:	d00f      	beq.n	801d68c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d670:	2b00      	cmp	r3, #0
 801d672:	d11a      	bne.n	801d6aa <tcp_write_checks+0xd6>
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d116      	bne.n	801d6aa <tcp_write_checks+0xd6>
 801d67c:	4b0d      	ldr	r3, [pc, #52]	; (801d6b4 <tcp_write_checks+0xe0>)
 801d67e:	f240 1255 	movw	r2, #341	; 0x155
 801d682:	490f      	ldr	r1, [pc, #60]	; (801d6c0 <tcp_write_checks+0xec>)
 801d684:	480d      	ldr	r0, [pc, #52]	; (801d6bc <tcp_write_checks+0xe8>)
 801d686:	f002 ff63 	bl	8020550 <iprintf>
 801d68a:	e00e      	b.n	801d6aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d690:	2b00      	cmp	r3, #0
 801d692:	d103      	bne.n	801d69c <tcp_write_checks+0xc8>
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d006      	beq.n	801d6aa <tcp_write_checks+0xd6>
 801d69c:	4b05      	ldr	r3, [pc, #20]	; (801d6b4 <tcp_write_checks+0xe0>)
 801d69e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801d6a2:	4908      	ldr	r1, [pc, #32]	; (801d6c4 <tcp_write_checks+0xf0>)
 801d6a4:	4805      	ldr	r0, [pc, #20]	; (801d6bc <tcp_write_checks+0xe8>)
 801d6a6:	f002 ff53 	bl	8020550 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801d6aa:	2300      	movs	r3, #0
}
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	3708      	adds	r7, #8
 801d6b0:	46bd      	mov	sp, r7
 801d6b2:	bd80      	pop	{r7, pc}
 801d6b4:	08024970 	.word	0x08024970
 801d6b8:	08024a88 	.word	0x08024a88
 801d6bc:	080249cc 	.word	0x080249cc
 801d6c0:	08024aa8 	.word	0x08024aa8
 801d6c4:	08024ae4 	.word	0x08024ae4

0801d6c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801d6c8:	b590      	push	{r4, r7, lr}
 801d6ca:	b09b      	sub	sp, #108	; 0x6c
 801d6cc:	af04      	add	r7, sp, #16
 801d6ce:	60f8      	str	r0, [r7, #12]
 801d6d0:	60b9      	str	r1, [r7, #8]
 801d6d2:	4611      	mov	r1, r2
 801d6d4:	461a      	mov	r2, r3
 801d6d6:	460b      	mov	r3, r1
 801d6d8:	80fb      	strh	r3, [r7, #6]
 801d6da:	4613      	mov	r3, r2
 801d6dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801d6de:	2300      	movs	r3, #0
 801d6e0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	653b      	str	r3, [r7, #80]	; 0x50
 801d6e6:	2300      	movs	r3, #0
 801d6e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d6ea:	2300      	movs	r3, #0
 801d6ec:	64bb      	str	r3, [r7, #72]	; 0x48
 801d6ee:	2300      	movs	r3, #0
 801d6f0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801d6f8:	2300      	movs	r3, #0
 801d6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801d6fe:	2300      	movs	r3, #0
 801d700:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801d702:	2300      	movs	r3, #0
 801d704:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801d706:	2300      	movs	r3, #0
 801d708:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801d70a:	68fb      	ldr	r3, [r7, #12]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d109      	bne.n	801d724 <tcp_write+0x5c>
 801d710:	4ba4      	ldr	r3, [pc, #656]	; (801d9a4 <tcp_write+0x2dc>)
 801d712:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801d716:	49a4      	ldr	r1, [pc, #656]	; (801d9a8 <tcp_write+0x2e0>)
 801d718:	48a4      	ldr	r0, [pc, #656]	; (801d9ac <tcp_write+0x2e4>)
 801d71a:	f002 ff19 	bl	8020550 <iprintf>
 801d71e:	f06f 030f 	mvn.w	r3, #15
 801d722:	e32a      	b.n	801dd7a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d72a:	085b      	lsrs	r3, r3, #1
 801d72c:	b29a      	uxth	r2, r3
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d732:	4293      	cmp	r3, r2
 801d734:	bf28      	it	cs
 801d736:	4613      	movcs	r3, r2
 801d738:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801d73a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d102      	bne.n	801d746 <tcp_write+0x7e>
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d744:	e000      	b.n	801d748 <tcp_write+0x80>
 801d746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d748:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d74a:	68bb      	ldr	r3, [r7, #8]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d109      	bne.n	801d764 <tcp_write+0x9c>
 801d750:	4b94      	ldr	r3, [pc, #592]	; (801d9a4 <tcp_write+0x2dc>)
 801d752:	f240 12ad 	movw	r2, #429	; 0x1ad
 801d756:	4996      	ldr	r1, [pc, #600]	; (801d9b0 <tcp_write+0x2e8>)
 801d758:	4894      	ldr	r0, [pc, #592]	; (801d9ac <tcp_write+0x2e4>)
 801d75a:	f002 fef9 	bl	8020550 <iprintf>
 801d75e:	f06f 030f 	mvn.w	r3, #15
 801d762:	e30a      	b.n	801dd7a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801d764:	88fb      	ldrh	r3, [r7, #6]
 801d766:	4619      	mov	r1, r3
 801d768:	68f8      	ldr	r0, [r7, #12]
 801d76a:	f7ff ff33 	bl	801d5d4 <tcp_write_checks>
 801d76e:	4603      	mov	r3, r0
 801d770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801d774:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d002      	beq.n	801d782 <tcp_write+0xba>
    return err;
 801d77c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d780:	e2fb      	b.n	801dd7a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d788:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d78c:	2300      	movs	r3, #0
 801d78e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801d792:	68fb      	ldr	r3, [r7, #12]
 801d794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d796:	2b00      	cmp	r3, #0
 801d798:	f000 80f6 	beq.w	801d988 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d7a0:	653b      	str	r3, [r7, #80]	; 0x50
 801d7a2:	e002      	b.n	801d7aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801d7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d7aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d1f8      	bne.n	801d7a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7b4:	7a9b      	ldrb	r3, [r3, #10]
 801d7b6:	009b      	lsls	r3, r3, #2
 801d7b8:	b29b      	uxth	r3, r3
 801d7ba:	f003 0304 	and.w	r3, r3, #4
 801d7be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d7c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d7c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7c4:	891b      	ldrh	r3, [r3, #8]
 801d7c6:	4619      	mov	r1, r3
 801d7c8:	8c3b      	ldrh	r3, [r7, #32]
 801d7ca:	440b      	add	r3, r1
 801d7cc:	429a      	cmp	r2, r3
 801d7ce:	da06      	bge.n	801d7de <tcp_write+0x116>
 801d7d0:	4b74      	ldr	r3, [pc, #464]	; (801d9a4 <tcp_write+0x2dc>)
 801d7d2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d7d6:	4977      	ldr	r1, [pc, #476]	; (801d9b4 <tcp_write+0x2ec>)
 801d7d8:	4874      	ldr	r0, [pc, #464]	; (801d9ac <tcp_write+0x2e4>)
 801d7da:	f002 feb9 	bl	8020550 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d7de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7e0:	891a      	ldrh	r2, [r3, #8]
 801d7e2:	8c3b      	ldrh	r3, [r7, #32]
 801d7e4:	4413      	add	r3, r2
 801d7e6:	b29b      	uxth	r3, r3
 801d7e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d7ea:	1ad3      	subs	r3, r2, r3
 801d7ec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d7f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801d7f6:	8a7b      	ldrh	r3, [r7, #18]
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d026      	beq.n	801d84a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801d7fc:	8a7b      	ldrh	r3, [r7, #18]
 801d7fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d800:	429a      	cmp	r2, r3
 801d802:	d206      	bcs.n	801d812 <tcp_write+0x14a>
 801d804:	4b67      	ldr	r3, [pc, #412]	; (801d9a4 <tcp_write+0x2dc>)
 801d806:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801d80a:	496b      	ldr	r1, [pc, #428]	; (801d9b8 <tcp_write+0x2f0>)
 801d80c:	4867      	ldr	r0, [pc, #412]	; (801d9ac <tcp_write+0x2e4>)
 801d80e:	f002 fe9f 	bl	8020550 <iprintf>
      seg = last_unsent;
 801d812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d814:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801d816:	8a7b      	ldrh	r3, [r7, #18]
 801d818:	88fa      	ldrh	r2, [r7, #6]
 801d81a:	4293      	cmp	r3, r2
 801d81c:	bf28      	it	cs
 801d81e:	4613      	movcs	r3, r2
 801d820:	b29b      	uxth	r3, r3
 801d822:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d824:	4293      	cmp	r3, r2
 801d826:	bf28      	it	cs
 801d828:	4613      	movcs	r3, r2
 801d82a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801d82c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d830:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d832:	4413      	add	r3, r2
 801d834:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801d838:	8a7a      	ldrh	r2, [r7, #18]
 801d83a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d83c:	1ad3      	subs	r3, r2, r3
 801d83e:	b29b      	uxth	r3, r3
 801d840:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801d842:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d844:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d846:	1ad3      	subs	r3, r2, r3
 801d848:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d84a:	8a7b      	ldrh	r3, [r7, #18]
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d00b      	beq.n	801d868 <tcp_write+0x1a0>
 801d850:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d854:	88fb      	ldrh	r3, [r7, #6]
 801d856:	429a      	cmp	r2, r3
 801d858:	d006      	beq.n	801d868 <tcp_write+0x1a0>
 801d85a:	4b52      	ldr	r3, [pc, #328]	; (801d9a4 <tcp_write+0x2dc>)
 801d85c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d860:	4956      	ldr	r1, [pc, #344]	; (801d9bc <tcp_write+0x2f4>)
 801d862:	4852      	ldr	r0, [pc, #328]	; (801d9ac <tcp_write+0x2e4>)
 801d864:	f002 fe74 	bl	8020550 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d868:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d86c:	88fb      	ldrh	r3, [r7, #6]
 801d86e:	429a      	cmp	r2, r3
 801d870:	f080 8167 	bcs.w	801db42 <tcp_write+0x47a>
 801d874:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d876:	2b00      	cmp	r3, #0
 801d878:	f000 8163 	beq.w	801db42 <tcp_write+0x47a>
 801d87c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d87e:	891b      	ldrh	r3, [r3, #8]
 801d880:	2b00      	cmp	r3, #0
 801d882:	f000 815e 	beq.w	801db42 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801d886:	88fa      	ldrh	r2, [r7, #6]
 801d888:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d88c:	1ad2      	subs	r2, r2, r3
 801d88e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d890:	4293      	cmp	r3, r2
 801d892:	bfa8      	it	ge
 801d894:	4613      	movge	r3, r2
 801d896:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801d898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d89a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d89c:	797b      	ldrb	r3, [r7, #5]
 801d89e:	f003 0301 	and.w	r3, r3, #1
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d027      	beq.n	801d8f6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801d8a6:	f107 0012 	add.w	r0, r7, #18
 801d8aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d8ac:	8bf9      	ldrh	r1, [r7, #30]
 801d8ae:	2301      	movs	r3, #1
 801d8b0:	9302      	str	r3, [sp, #8]
 801d8b2:	797b      	ldrb	r3, [r7, #5]
 801d8b4:	9301      	str	r3, [sp, #4]
 801d8b6:	68fb      	ldr	r3, [r7, #12]
 801d8b8:	9300      	str	r3, [sp, #0]
 801d8ba:	4603      	mov	r3, r0
 801d8bc:	2000      	movs	r0, #0
 801d8be:	f7ff fe0f 	bl	801d4e0 <tcp_pbuf_prealloc>
 801d8c2:	6578      	str	r0, [r7, #84]	; 0x54
 801d8c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	f000 8225 	beq.w	801dd16 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801d8cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8ce:	6858      	ldr	r0, [r3, #4]
 801d8d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d8d4:	68ba      	ldr	r2, [r7, #8]
 801d8d6:	4413      	add	r3, r2
 801d8d8:	8bfa      	ldrh	r2, [r7, #30]
 801d8da:	4619      	mov	r1, r3
 801d8dc:	f002 fd42 	bl	8020364 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801d8e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d8e2:	f7f9 ffd1 	bl	8017888 <pbuf_clen>
 801d8e6:	4603      	mov	r3, r0
 801d8e8:	461a      	mov	r2, r3
 801d8ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d8ee:	4413      	add	r3, r2
 801d8f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801d8f4:	e041      	b.n	801d97a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801d8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d8f8:	685b      	ldr	r3, [r3, #4]
 801d8fa:	637b      	str	r3, [r7, #52]	; 0x34
 801d8fc:	e002      	b.n	801d904 <tcp_write+0x23c>
 801d8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	637b      	str	r3, [r7, #52]	; 0x34
 801d904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d1f8      	bne.n	801d8fe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d90e:	7b1b      	ldrb	r3, [r3, #12]
 801d910:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d914:	2b00      	cmp	r3, #0
 801d916:	d115      	bne.n	801d944 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801d918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d91a:	685b      	ldr	r3, [r3, #4]
 801d91c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d91e:	8952      	ldrh	r2, [r2, #10]
 801d920:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d922:	68ba      	ldr	r2, [r7, #8]
 801d924:	429a      	cmp	r2, r3
 801d926:	d10d      	bne.n	801d944 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801d928:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	d006      	beq.n	801d93e <tcp_write+0x276>
 801d930:	4b1c      	ldr	r3, [pc, #112]	; (801d9a4 <tcp_write+0x2dc>)
 801d932:	f240 2231 	movw	r2, #561	; 0x231
 801d936:	4922      	ldr	r1, [pc, #136]	; (801d9c0 <tcp_write+0x2f8>)
 801d938:	481c      	ldr	r0, [pc, #112]	; (801d9ac <tcp_write+0x2e4>)
 801d93a:	f002 fe09 	bl	8020550 <iprintf>
          extendlen = seglen;
 801d93e:	8bfb      	ldrh	r3, [r7, #30]
 801d940:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801d942:	e01a      	b.n	801d97a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801d944:	8bfb      	ldrh	r3, [r7, #30]
 801d946:	2201      	movs	r2, #1
 801d948:	4619      	mov	r1, r3
 801d94a:	2000      	movs	r0, #0
 801d94c:	f7f9 fc2a 	bl	80171a4 <pbuf_alloc>
 801d950:	6578      	str	r0, [r7, #84]	; 0x54
 801d952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d954:	2b00      	cmp	r3, #0
 801d956:	f000 81e0 	beq.w	801dd1a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801d95a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d95e:	68ba      	ldr	r2, [r7, #8]
 801d960:	441a      	add	r2, r3
 801d962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d964:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801d966:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d968:	f7f9 ff8e 	bl	8017888 <pbuf_clen>
 801d96c:	4603      	mov	r3, r0
 801d96e:	461a      	mov	r2, r3
 801d970:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d974:	4413      	add	r3, r2
 801d976:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801d97a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d97e:	8bfb      	ldrh	r3, [r7, #30]
 801d980:	4413      	add	r3, r2
 801d982:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801d986:	e0dc      	b.n	801db42 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d98e:	2b00      	cmp	r3, #0
 801d990:	f000 80d7 	beq.w	801db42 <tcp_write+0x47a>
 801d994:	4b03      	ldr	r3, [pc, #12]	; (801d9a4 <tcp_write+0x2dc>)
 801d996:	f240 224a 	movw	r2, #586	; 0x24a
 801d99a:	490a      	ldr	r1, [pc, #40]	; (801d9c4 <tcp_write+0x2fc>)
 801d99c:	4803      	ldr	r0, [pc, #12]	; (801d9ac <tcp_write+0x2e4>)
 801d99e:	f002 fdd7 	bl	8020550 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801d9a2:	e0ce      	b.n	801db42 <tcp_write+0x47a>
 801d9a4:	08024970 	.word	0x08024970
 801d9a8:	08024b18 	.word	0x08024b18
 801d9ac:	080249cc 	.word	0x080249cc
 801d9b0:	08024b30 	.word	0x08024b30
 801d9b4:	08024b64 	.word	0x08024b64
 801d9b8:	08024b7c 	.word	0x08024b7c
 801d9bc:	08024b9c 	.word	0x08024b9c
 801d9c0:	08024bbc 	.word	0x08024bbc
 801d9c4:	08024be8 	.word	0x08024be8
    struct pbuf *p;
    u16_t left = len - pos;
 801d9c8:	88fa      	ldrh	r2, [r7, #6]
 801d9ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d9ce:	1ad3      	subs	r3, r2, r3
 801d9d0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801d9d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d9d6:	b29b      	uxth	r3, r3
 801d9d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d9da:	1ad3      	subs	r3, r2, r3
 801d9dc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801d9de:	8b7a      	ldrh	r2, [r7, #26]
 801d9e0:	8bbb      	ldrh	r3, [r7, #28]
 801d9e2:	4293      	cmp	r3, r2
 801d9e4:	bf28      	it	cs
 801d9e6:	4613      	movcs	r3, r2
 801d9e8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d9ea:	797b      	ldrb	r3, [r7, #5]
 801d9ec:	f003 0301 	and.w	r3, r3, #1
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d036      	beq.n	801da62 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801d9f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d9f8:	b29a      	uxth	r2, r3
 801d9fa:	8b3b      	ldrh	r3, [r7, #24]
 801d9fc:	4413      	add	r3, r2
 801d9fe:	b299      	uxth	r1, r3
 801da00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da02:	2b00      	cmp	r3, #0
 801da04:	bf0c      	ite	eq
 801da06:	2301      	moveq	r3, #1
 801da08:	2300      	movne	r3, #0
 801da0a:	b2db      	uxtb	r3, r3
 801da0c:	f107 0012 	add.w	r0, r7, #18
 801da10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801da12:	9302      	str	r3, [sp, #8]
 801da14:	797b      	ldrb	r3, [r7, #5]
 801da16:	9301      	str	r3, [sp, #4]
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	9300      	str	r3, [sp, #0]
 801da1c:	4603      	mov	r3, r0
 801da1e:	2036      	movs	r0, #54	; 0x36
 801da20:	f7ff fd5e 	bl	801d4e0 <tcp_pbuf_prealloc>
 801da24:	6338      	str	r0, [r7, #48]	; 0x30
 801da26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da28:	2b00      	cmp	r3, #0
 801da2a:	f000 8178 	beq.w	801dd1e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801da2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da30:	895b      	ldrh	r3, [r3, #10]
 801da32:	8b3a      	ldrh	r2, [r7, #24]
 801da34:	429a      	cmp	r2, r3
 801da36:	d906      	bls.n	801da46 <tcp_write+0x37e>
 801da38:	4b8c      	ldr	r3, [pc, #560]	; (801dc6c <tcp_write+0x5a4>)
 801da3a:	f240 2266 	movw	r2, #614	; 0x266
 801da3e:	498c      	ldr	r1, [pc, #560]	; (801dc70 <tcp_write+0x5a8>)
 801da40:	488c      	ldr	r0, [pc, #560]	; (801dc74 <tcp_write+0x5ac>)
 801da42:	f002 fd85 	bl	8020550 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da48:	685a      	ldr	r2, [r3, #4]
 801da4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801da4e:	18d0      	adds	r0, r2, r3
 801da50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801da54:	68ba      	ldr	r2, [r7, #8]
 801da56:	4413      	add	r3, r2
 801da58:	8b3a      	ldrh	r2, [r7, #24]
 801da5a:	4619      	mov	r1, r3
 801da5c:	f002 fc82 	bl	8020364 <memcpy>
 801da60:	e02f      	b.n	801dac2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801da62:	8a7b      	ldrh	r3, [r7, #18]
 801da64:	2b00      	cmp	r3, #0
 801da66:	d006      	beq.n	801da76 <tcp_write+0x3ae>
 801da68:	4b80      	ldr	r3, [pc, #512]	; (801dc6c <tcp_write+0x5a4>)
 801da6a:	f240 2271 	movw	r2, #625	; 0x271
 801da6e:	4982      	ldr	r1, [pc, #520]	; (801dc78 <tcp_write+0x5b0>)
 801da70:	4880      	ldr	r0, [pc, #512]	; (801dc74 <tcp_write+0x5ac>)
 801da72:	f002 fd6d 	bl	8020550 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801da76:	8b3b      	ldrh	r3, [r7, #24]
 801da78:	2201      	movs	r2, #1
 801da7a:	4619      	mov	r1, r3
 801da7c:	2036      	movs	r0, #54	; 0x36
 801da7e:	f7f9 fb91 	bl	80171a4 <pbuf_alloc>
 801da82:	6178      	str	r0, [r7, #20]
 801da84:	697b      	ldr	r3, [r7, #20]
 801da86:	2b00      	cmp	r3, #0
 801da88:	f000 814b 	beq.w	801dd22 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801da8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801da90:	68ba      	ldr	r2, [r7, #8]
 801da92:	441a      	add	r2, r3
 801da94:	697b      	ldr	r3, [r7, #20]
 801da96:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801da98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801da9c:	b29b      	uxth	r3, r3
 801da9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801daa2:	4619      	mov	r1, r3
 801daa4:	2036      	movs	r0, #54	; 0x36
 801daa6:	f7f9 fb7d 	bl	80171a4 <pbuf_alloc>
 801daaa:	6338      	str	r0, [r7, #48]	; 0x30
 801daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d103      	bne.n	801daba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801dab2:	6978      	ldr	r0, [r7, #20]
 801dab4:	f7f9 fe5a 	bl	801776c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801dab8:	e136      	b.n	801dd28 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801daba:	6979      	ldr	r1, [r7, #20]
 801dabc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dabe:	f7f9 ff23 	bl	8017908 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801dac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dac4:	f7f9 fee0 	bl	8017888 <pbuf_clen>
 801dac8:	4603      	mov	r3, r0
 801daca:	461a      	mov	r2, r3
 801dacc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dad0:	4413      	add	r3, r2
 801dad2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801dad6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dada:	2b09      	cmp	r3, #9
 801dadc:	d903      	bls.n	801dae6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801dade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dae0:	f7f9 fe44 	bl	801776c <pbuf_free>
      goto memerr;
 801dae4:	e120      	b.n	801dd28 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801daea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801daee:	441a      	add	r2, r3
 801daf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801daf4:	9300      	str	r3, [sp, #0]
 801daf6:	4613      	mov	r3, r2
 801daf8:	2200      	movs	r2, #0
 801dafa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dafc:	68f8      	ldr	r0, [r7, #12]
 801dafe:	f7ff fc51 	bl	801d3a4 <tcp_create_segment>
 801db02:	64f8      	str	r0, [r7, #76]	; 0x4c
 801db04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db06:	2b00      	cmp	r3, #0
 801db08:	f000 810d 	beq.w	801dd26 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801db0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d102      	bne.n	801db18 <tcp_write+0x450>
      queue = seg;
 801db12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db14:	647b      	str	r3, [r7, #68]	; 0x44
 801db16:	e00c      	b.n	801db32 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801db18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d106      	bne.n	801db2c <tcp_write+0x464>
 801db1e:	4b53      	ldr	r3, [pc, #332]	; (801dc6c <tcp_write+0x5a4>)
 801db20:	f240 22ab 	movw	r2, #683	; 0x2ab
 801db24:	4955      	ldr	r1, [pc, #340]	; (801dc7c <tcp_write+0x5b4>)
 801db26:	4853      	ldr	r0, [pc, #332]	; (801dc74 <tcp_write+0x5ac>)
 801db28:	f002 fd12 	bl	8020550 <iprintf>
      prev_seg->next = seg;
 801db2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801db30:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801db32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db34:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801db36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801db3a:	8b3b      	ldrh	r3, [r7, #24]
 801db3c:	4413      	add	r3, r2
 801db3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801db42:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801db46:	88fb      	ldrh	r3, [r7, #6]
 801db48:	429a      	cmp	r2, r3
 801db4a:	f4ff af3d 	bcc.w	801d9c8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801db4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801db50:	2b00      	cmp	r3, #0
 801db52:	d02c      	beq.n	801dbae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801db54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db56:	685b      	ldr	r3, [r3, #4]
 801db58:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db5a:	e01e      	b.n	801db9a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801db5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db5e:	891a      	ldrh	r2, [r3, #8]
 801db60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801db62:	4413      	add	r3, r2
 801db64:	b29a      	uxth	r2, r3
 801db66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db68:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801db6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d110      	bne.n	801db94 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801db72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db74:	685b      	ldr	r3, [r3, #4]
 801db76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801db78:	8952      	ldrh	r2, [r2, #10]
 801db7a:	4413      	add	r3, r2
 801db7c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801db7e:	68b9      	ldr	r1, [r7, #8]
 801db80:	4618      	mov	r0, r3
 801db82:	f002 fbef 	bl	8020364 <memcpy>
        p->len += oversize_used;
 801db86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db88:	895a      	ldrh	r2, [r3, #10]
 801db8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801db8c:	4413      	add	r3, r2
 801db8e:	b29a      	uxth	r2, r3
 801db90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db92:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d1dd      	bne.n	801db5c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801dba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dba2:	891a      	ldrh	r2, [r3, #8]
 801dba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dba6:	4413      	add	r3, r2
 801dba8:	b29a      	uxth	r2, r3
 801dbaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801dbae:	8a7a      	ldrh	r2, [r7, #18]
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801dbb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d018      	beq.n	801dbee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801dbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	d106      	bne.n	801dbd0 <tcp_write+0x508>
 801dbc2:	4b2a      	ldr	r3, [pc, #168]	; (801dc6c <tcp_write+0x5a4>)
 801dbc4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801dbc8:	492d      	ldr	r1, [pc, #180]	; (801dc80 <tcp_write+0x5b8>)
 801dbca:	482a      	ldr	r0, [pc, #168]	; (801dc74 <tcp_write+0x5ac>)
 801dbcc:	f002 fcc0 	bl	8020550 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801dbd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbd2:	685b      	ldr	r3, [r3, #4]
 801dbd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801dbd6:	4618      	mov	r0, r3
 801dbd8:	f7f9 fe96 	bl	8017908 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801dbdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbde:	891a      	ldrh	r2, [r3, #8]
 801dbe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbe2:	891b      	ldrh	r3, [r3, #8]
 801dbe4:	4413      	add	r3, r2
 801dbe6:	b29a      	uxth	r2, r3
 801dbe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbea:	811a      	strh	r2, [r3, #8]
 801dbec:	e037      	b.n	801dc5e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801dbee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	d034      	beq.n	801dc5e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801dbf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d003      	beq.n	801dc02 <tcp_write+0x53a>
 801dbfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbfc:	685b      	ldr	r3, [r3, #4]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d106      	bne.n	801dc10 <tcp_write+0x548>
 801dc02:	4b1a      	ldr	r3, [pc, #104]	; (801dc6c <tcp_write+0x5a4>)
 801dc04:	f240 22e6 	movw	r2, #742	; 0x2e6
 801dc08:	491e      	ldr	r1, [pc, #120]	; (801dc84 <tcp_write+0x5bc>)
 801dc0a:	481a      	ldr	r0, [pc, #104]	; (801dc74 <tcp_write+0x5ac>)
 801dc0c:	f002 fca0 	bl	8020550 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dc10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc12:	685b      	ldr	r3, [r3, #4]
 801dc14:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc16:	e009      	b.n	801dc2c <tcp_write+0x564>
      p->tot_len += extendlen;
 801dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc1a:	891a      	ldrh	r2, [r3, #8]
 801dc1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc1e:	4413      	add	r3, r2
 801dc20:	b29a      	uxth	r2, r3
 801dc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc24:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d1f1      	bne.n	801dc18 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801dc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc36:	891a      	ldrh	r2, [r3, #8]
 801dc38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc3a:	4413      	add	r3, r2
 801dc3c:	b29a      	uxth	r2, r3
 801dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc40:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801dc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc44:	895a      	ldrh	r2, [r3, #10]
 801dc46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc48:	4413      	add	r3, r2
 801dc4a:	b29a      	uxth	r2, r3
 801dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc4e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801dc50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc52:	891a      	ldrh	r2, [r3, #8]
 801dc54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc56:	4413      	add	r3, r2
 801dc58:	b29a      	uxth	r2, r3
 801dc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc5c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801dc5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d111      	bne.n	801dc88 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dc68:	66da      	str	r2, [r3, #108]	; 0x6c
 801dc6a:	e010      	b.n	801dc8e <tcp_write+0x5c6>
 801dc6c:	08024970 	.word	0x08024970
 801dc70:	08024c18 	.word	0x08024c18
 801dc74:	080249cc 	.word	0x080249cc
 801dc78:	08024c58 	.word	0x08024c58
 801dc7c:	08024c68 	.word	0x08024c68
 801dc80:	08024c7c 	.word	0x08024c7c
 801dc84:	08024cb4 	.word	0x08024cb4
  } else {
    last_unsent->next = queue;
 801dc88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dc8c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801dc8e:	68fb      	ldr	r3, [r7, #12]
 801dc90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801dc92:	88fb      	ldrh	r3, [r7, #6]
 801dc94:	441a      	add	r2, r3
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801dc9a:	68fb      	ldr	r3, [r7, #12]
 801dc9c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801dca0:	88fb      	ldrh	r3, [r7, #6]
 801dca2:	1ad3      	subs	r3, r2, r3
 801dca4:	b29a      	uxth	r2, r3
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801dcac:	68fb      	ldr	r3, [r7, #12]
 801dcae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801dcb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d00e      	beq.n	801dcde <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d10a      	bne.n	801dcde <tcp_write+0x616>
 801dcc8:	68fb      	ldr	r3, [r7, #12]
 801dcca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	d106      	bne.n	801dcde <tcp_write+0x616>
 801dcd0:	4b2c      	ldr	r3, [pc, #176]	; (801dd84 <tcp_write+0x6bc>)
 801dcd2:	f240 3212 	movw	r2, #786	; 0x312
 801dcd6:	492c      	ldr	r1, [pc, #176]	; (801dd88 <tcp_write+0x6c0>)
 801dcd8:	482c      	ldr	r0, [pc, #176]	; (801dd8c <tcp_write+0x6c4>)
 801dcda:	f002 fc39 	bl	8020550 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801dcde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d016      	beq.n	801dd12 <tcp_write+0x64a>
 801dce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dce6:	68db      	ldr	r3, [r3, #12]
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d012      	beq.n	801dd12 <tcp_write+0x64a>
 801dcec:	797b      	ldrb	r3, [r7, #5]
 801dcee:	f003 0302 	and.w	r3, r3, #2
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d10d      	bne.n	801dd12 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801dcf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dcf8:	68db      	ldr	r3, [r3, #12]
 801dcfa:	899b      	ldrh	r3, [r3, #12]
 801dcfc:	b29c      	uxth	r4, r3
 801dcfe:	2008      	movs	r0, #8
 801dd00:	f7f2 fee6 	bl	8010ad0 <lwip_htons>
 801dd04:	4603      	mov	r3, r0
 801dd06:	461a      	mov	r2, r3
 801dd08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd0a:	68db      	ldr	r3, [r3, #12]
 801dd0c:	4322      	orrs	r2, r4
 801dd0e:	b292      	uxth	r2, r2
 801dd10:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801dd12:	2300      	movs	r3, #0
 801dd14:	e031      	b.n	801dd7a <tcp_write+0x6b2>
          goto memerr;
 801dd16:	bf00      	nop
 801dd18:	e006      	b.n	801dd28 <tcp_write+0x660>
            goto memerr;
 801dd1a:	bf00      	nop
 801dd1c:	e004      	b.n	801dd28 <tcp_write+0x660>
        goto memerr;
 801dd1e:	bf00      	nop
 801dd20:	e002      	b.n	801dd28 <tcp_write+0x660>
        goto memerr;
 801dd22:	bf00      	nop
 801dd24:	e000      	b.n	801dd28 <tcp_write+0x660>
      goto memerr;
 801dd26:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dd28:	68fb      	ldr	r3, [r7, #12]
 801dd2a:	8b5b      	ldrh	r3, [r3, #26]
 801dd2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd30:	b29a      	uxth	r2, r3
 801dd32:	68fb      	ldr	r3, [r7, #12]
 801dd34:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801dd36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d002      	beq.n	801dd42 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801dd3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801dd3e:	f7f9 fd15 	bl	801776c <pbuf_free>
  }
  if (queue != NULL) {
 801dd42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d002      	beq.n	801dd4e <tcp_write+0x686>
    tcp_segs_free(queue);
 801dd48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801dd4a:	f7fc fb6b 	bl	801a424 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801dd4e:	68fb      	ldr	r3, [r7, #12]
 801dd50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d00e      	beq.n	801dd76 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	d10a      	bne.n	801dd76 <tcp_write+0x6ae>
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d106      	bne.n	801dd76 <tcp_write+0x6ae>
 801dd68:	4b06      	ldr	r3, [pc, #24]	; (801dd84 <tcp_write+0x6bc>)
 801dd6a:	f240 3227 	movw	r2, #807	; 0x327
 801dd6e:	4906      	ldr	r1, [pc, #24]	; (801dd88 <tcp_write+0x6c0>)
 801dd70:	4806      	ldr	r0, [pc, #24]	; (801dd8c <tcp_write+0x6c4>)
 801dd72:	f002 fbed 	bl	8020550 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801dd76:	f04f 33ff 	mov.w	r3, #4294967295
}
 801dd7a:	4618      	mov	r0, r3
 801dd7c:	375c      	adds	r7, #92	; 0x5c
 801dd7e:	46bd      	mov	sp, r7
 801dd80:	bd90      	pop	{r4, r7, pc}
 801dd82:	bf00      	nop
 801dd84:	08024970 	.word	0x08024970
 801dd88:	08024cec 	.word	0x08024cec
 801dd8c:	080249cc 	.word	0x080249cc

0801dd90 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801dd90:	b590      	push	{r4, r7, lr}
 801dd92:	b08b      	sub	sp, #44	; 0x2c
 801dd94:	af02      	add	r7, sp, #8
 801dd96:	6078      	str	r0, [r7, #4]
 801dd98:	460b      	mov	r3, r1
 801dd9a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801dd9c:	2300      	movs	r3, #0
 801dd9e:	61fb      	str	r3, [r7, #28]
 801dda0:	2300      	movs	r3, #0
 801dda2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801dda4:	2300      	movs	r3, #0
 801dda6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d106      	bne.n	801ddbc <tcp_split_unsent_seg+0x2c>
 801ddae:	4b95      	ldr	r3, [pc, #596]	; (801e004 <tcp_split_unsent_seg+0x274>)
 801ddb0:	f240 324b 	movw	r2, #843	; 0x34b
 801ddb4:	4994      	ldr	r1, [pc, #592]	; (801e008 <tcp_split_unsent_seg+0x278>)
 801ddb6:	4895      	ldr	r0, [pc, #596]	; (801e00c <tcp_split_unsent_seg+0x27c>)
 801ddb8:	f002 fbca 	bl	8020550 <iprintf>

  useg = pcb->unsent;
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ddc0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801ddc2:	697b      	ldr	r3, [r7, #20]
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d102      	bne.n	801ddce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801ddc8:	f04f 33ff 	mov.w	r3, #4294967295
 801ddcc:	e116      	b.n	801dffc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801ddce:	887b      	ldrh	r3, [r7, #2]
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	d109      	bne.n	801dde8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801ddd4:	4b8b      	ldr	r3, [pc, #556]	; (801e004 <tcp_split_unsent_seg+0x274>)
 801ddd6:	f240 3253 	movw	r2, #851	; 0x353
 801ddda:	498d      	ldr	r1, [pc, #564]	; (801e010 <tcp_split_unsent_seg+0x280>)
 801dddc:	488b      	ldr	r0, [pc, #556]	; (801e00c <tcp_split_unsent_seg+0x27c>)
 801ddde:	f002 fbb7 	bl	8020550 <iprintf>
    return ERR_VAL;
 801dde2:	f06f 0305 	mvn.w	r3, #5
 801dde6:	e109      	b.n	801dffc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801dde8:	697b      	ldr	r3, [r7, #20]
 801ddea:	891b      	ldrh	r3, [r3, #8]
 801ddec:	887a      	ldrh	r2, [r7, #2]
 801ddee:	429a      	cmp	r2, r3
 801ddf0:	d301      	bcc.n	801ddf6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801ddf2:	2300      	movs	r3, #0
 801ddf4:	e102      	b.n	801dffc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ddf6:	687b      	ldr	r3, [r7, #4]
 801ddf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ddfa:	887a      	ldrh	r2, [r7, #2]
 801ddfc:	429a      	cmp	r2, r3
 801ddfe:	d906      	bls.n	801de0e <tcp_split_unsent_seg+0x7e>
 801de00:	4b80      	ldr	r3, [pc, #512]	; (801e004 <tcp_split_unsent_seg+0x274>)
 801de02:	f240 325b 	movw	r2, #859	; 0x35b
 801de06:	4983      	ldr	r1, [pc, #524]	; (801e014 <tcp_split_unsent_seg+0x284>)
 801de08:	4880      	ldr	r0, [pc, #512]	; (801e00c <tcp_split_unsent_seg+0x27c>)
 801de0a:	f002 fba1 	bl	8020550 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801de0e:	697b      	ldr	r3, [r7, #20]
 801de10:	891b      	ldrh	r3, [r3, #8]
 801de12:	2b00      	cmp	r3, #0
 801de14:	d106      	bne.n	801de24 <tcp_split_unsent_seg+0x94>
 801de16:	4b7b      	ldr	r3, [pc, #492]	; (801e004 <tcp_split_unsent_seg+0x274>)
 801de18:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801de1c:	497e      	ldr	r1, [pc, #504]	; (801e018 <tcp_split_unsent_seg+0x288>)
 801de1e:	487b      	ldr	r0, [pc, #492]	; (801e00c <tcp_split_unsent_seg+0x27c>)
 801de20:	f002 fb96 	bl	8020550 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801de24:	697b      	ldr	r3, [r7, #20]
 801de26:	7a9b      	ldrb	r3, [r3, #10]
 801de28:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801de2a:	7bfb      	ldrb	r3, [r7, #15]
 801de2c:	009b      	lsls	r3, r3, #2
 801de2e:	b2db      	uxtb	r3, r3
 801de30:	f003 0304 	and.w	r3, r3, #4
 801de34:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801de36:	697b      	ldr	r3, [r7, #20]
 801de38:	891a      	ldrh	r2, [r3, #8]
 801de3a:	887b      	ldrh	r3, [r7, #2]
 801de3c:	1ad3      	subs	r3, r2, r3
 801de3e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801de40:	7bbb      	ldrb	r3, [r7, #14]
 801de42:	b29a      	uxth	r2, r3
 801de44:	89bb      	ldrh	r3, [r7, #12]
 801de46:	4413      	add	r3, r2
 801de48:	b29b      	uxth	r3, r3
 801de4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801de4e:	4619      	mov	r1, r3
 801de50:	2036      	movs	r0, #54	; 0x36
 801de52:	f7f9 f9a7 	bl	80171a4 <pbuf_alloc>
 801de56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801de58:	693b      	ldr	r3, [r7, #16]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	f000 80b7 	beq.w	801dfce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801de60:	697b      	ldr	r3, [r7, #20]
 801de62:	685b      	ldr	r3, [r3, #4]
 801de64:	891a      	ldrh	r2, [r3, #8]
 801de66:	697b      	ldr	r3, [r7, #20]
 801de68:	891b      	ldrh	r3, [r3, #8]
 801de6a:	1ad3      	subs	r3, r2, r3
 801de6c:	b29a      	uxth	r2, r3
 801de6e:	887b      	ldrh	r3, [r7, #2]
 801de70:	4413      	add	r3, r2
 801de72:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801de74:	697b      	ldr	r3, [r7, #20]
 801de76:	6858      	ldr	r0, [r3, #4]
 801de78:	693b      	ldr	r3, [r7, #16]
 801de7a:	685a      	ldr	r2, [r3, #4]
 801de7c:	7bbb      	ldrb	r3, [r7, #14]
 801de7e:	18d1      	adds	r1, r2, r3
 801de80:	897b      	ldrh	r3, [r7, #10]
 801de82:	89ba      	ldrh	r2, [r7, #12]
 801de84:	f7f9 fe78 	bl	8017b78 <pbuf_copy_partial>
 801de88:	4603      	mov	r3, r0
 801de8a:	461a      	mov	r2, r3
 801de8c:	89bb      	ldrh	r3, [r7, #12]
 801de8e:	4293      	cmp	r3, r2
 801de90:	f040 809f 	bne.w	801dfd2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801de94:	697b      	ldr	r3, [r7, #20]
 801de96:	68db      	ldr	r3, [r3, #12]
 801de98:	899b      	ldrh	r3, [r3, #12]
 801de9a:	b29b      	uxth	r3, r3
 801de9c:	4618      	mov	r0, r3
 801de9e:	f7f2 fe17 	bl	8010ad0 <lwip_htons>
 801dea2:	4603      	mov	r3, r0
 801dea4:	b2db      	uxtb	r3, r3
 801dea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801deaa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801deac:	2300      	movs	r3, #0
 801deae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801deb0:	7efb      	ldrb	r3, [r7, #27]
 801deb2:	f003 0308 	and.w	r3, r3, #8
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	d007      	beq.n	801deca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801deba:	7efb      	ldrb	r3, [r7, #27]
 801debc:	f023 0308 	bic.w	r3, r3, #8
 801dec0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801dec2:	7ebb      	ldrb	r3, [r7, #26]
 801dec4:	f043 0308 	orr.w	r3, r3, #8
 801dec8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801deca:	7efb      	ldrb	r3, [r7, #27]
 801decc:	f003 0301 	and.w	r3, r3, #1
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d007      	beq.n	801dee4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801ded4:	7efb      	ldrb	r3, [r7, #27]
 801ded6:	f023 0301 	bic.w	r3, r3, #1
 801deda:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801dedc:	7ebb      	ldrb	r3, [r7, #26]
 801dede:	f043 0301 	orr.w	r3, r3, #1
 801dee2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801dee4:	697b      	ldr	r3, [r7, #20]
 801dee6:	68db      	ldr	r3, [r3, #12]
 801dee8:	685b      	ldr	r3, [r3, #4]
 801deea:	4618      	mov	r0, r3
 801deec:	f7f2 fe05 	bl	8010afa <lwip_htonl>
 801def0:	4602      	mov	r2, r0
 801def2:	887b      	ldrh	r3, [r7, #2]
 801def4:	18d1      	adds	r1, r2, r3
 801def6:	7eba      	ldrb	r2, [r7, #26]
 801def8:	7bfb      	ldrb	r3, [r7, #15]
 801defa:	9300      	str	r3, [sp, #0]
 801defc:	460b      	mov	r3, r1
 801defe:	6939      	ldr	r1, [r7, #16]
 801df00:	6878      	ldr	r0, [r7, #4]
 801df02:	f7ff fa4f 	bl	801d3a4 <tcp_create_segment>
 801df06:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801df08:	69fb      	ldr	r3, [r7, #28]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d063      	beq.n	801dfd6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801df0e:	697b      	ldr	r3, [r7, #20]
 801df10:	685b      	ldr	r3, [r3, #4]
 801df12:	4618      	mov	r0, r3
 801df14:	f7f9 fcb8 	bl	8017888 <pbuf_clen>
 801df18:	4603      	mov	r3, r0
 801df1a:	461a      	mov	r2, r3
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801df22:	1a9b      	subs	r3, r3, r2
 801df24:	b29a      	uxth	r2, r3
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801df2c:	697b      	ldr	r3, [r7, #20]
 801df2e:	6858      	ldr	r0, [r3, #4]
 801df30:	697b      	ldr	r3, [r7, #20]
 801df32:	685b      	ldr	r3, [r3, #4]
 801df34:	891a      	ldrh	r2, [r3, #8]
 801df36:	89bb      	ldrh	r3, [r7, #12]
 801df38:	1ad3      	subs	r3, r2, r3
 801df3a:	b29b      	uxth	r3, r3
 801df3c:	4619      	mov	r1, r3
 801df3e:	f7f9 fa8f 	bl	8017460 <pbuf_realloc>
  useg->len -= remainder;
 801df42:	697b      	ldr	r3, [r7, #20]
 801df44:	891a      	ldrh	r2, [r3, #8]
 801df46:	89bb      	ldrh	r3, [r7, #12]
 801df48:	1ad3      	subs	r3, r2, r3
 801df4a:	b29a      	uxth	r2, r3
 801df4c:	697b      	ldr	r3, [r7, #20]
 801df4e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801df50:	697b      	ldr	r3, [r7, #20]
 801df52:	68db      	ldr	r3, [r3, #12]
 801df54:	899b      	ldrh	r3, [r3, #12]
 801df56:	b29c      	uxth	r4, r3
 801df58:	7efb      	ldrb	r3, [r7, #27]
 801df5a:	b29b      	uxth	r3, r3
 801df5c:	4618      	mov	r0, r3
 801df5e:	f7f2 fdb7 	bl	8010ad0 <lwip_htons>
 801df62:	4603      	mov	r3, r0
 801df64:	461a      	mov	r2, r3
 801df66:	697b      	ldr	r3, [r7, #20]
 801df68:	68db      	ldr	r3, [r3, #12]
 801df6a:	4322      	orrs	r2, r4
 801df6c:	b292      	uxth	r2, r2
 801df6e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801df70:	697b      	ldr	r3, [r7, #20]
 801df72:	685b      	ldr	r3, [r3, #4]
 801df74:	4618      	mov	r0, r3
 801df76:	f7f9 fc87 	bl	8017888 <pbuf_clen>
 801df7a:	4603      	mov	r3, r0
 801df7c:	461a      	mov	r2, r3
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801df84:	4413      	add	r3, r2
 801df86:	b29a      	uxth	r2, r3
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801df8e:	69fb      	ldr	r3, [r7, #28]
 801df90:	685b      	ldr	r3, [r3, #4]
 801df92:	4618      	mov	r0, r3
 801df94:	f7f9 fc78 	bl	8017888 <pbuf_clen>
 801df98:	4603      	mov	r3, r0
 801df9a:	461a      	mov	r2, r3
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dfa2:	4413      	add	r3, r2
 801dfa4:	b29a      	uxth	r2, r3
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801dfac:	697b      	ldr	r3, [r7, #20]
 801dfae:	681a      	ldr	r2, [r3, #0]
 801dfb0:	69fb      	ldr	r3, [r7, #28]
 801dfb2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801dfb4:	697b      	ldr	r3, [r7, #20]
 801dfb6:	69fa      	ldr	r2, [r7, #28]
 801dfb8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801dfba:	69fb      	ldr	r3, [r7, #28]
 801dfbc:	681b      	ldr	r3, [r3, #0]
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d103      	bne.n	801dfca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	2200      	movs	r2, #0
 801dfc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801dfca:	2300      	movs	r3, #0
 801dfcc:	e016      	b.n	801dffc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801dfce:	bf00      	nop
 801dfd0:	e002      	b.n	801dfd8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801dfd2:	bf00      	nop
 801dfd4:	e000      	b.n	801dfd8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801dfd6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801dfd8:	69fb      	ldr	r3, [r7, #28]
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d006      	beq.n	801dfec <tcp_split_unsent_seg+0x25c>
 801dfde:	4b09      	ldr	r3, [pc, #36]	; (801e004 <tcp_split_unsent_seg+0x274>)
 801dfe0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801dfe4:	490d      	ldr	r1, [pc, #52]	; (801e01c <tcp_split_unsent_seg+0x28c>)
 801dfe6:	4809      	ldr	r0, [pc, #36]	; (801e00c <tcp_split_unsent_seg+0x27c>)
 801dfe8:	f002 fab2 	bl	8020550 <iprintf>
  if (p != NULL) {
 801dfec:	693b      	ldr	r3, [r7, #16]
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	d002      	beq.n	801dff8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801dff2:	6938      	ldr	r0, [r7, #16]
 801dff4:	f7f9 fbba 	bl	801776c <pbuf_free>
  }

  return ERR_MEM;
 801dff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801dffc:	4618      	mov	r0, r3
 801dffe:	3724      	adds	r7, #36	; 0x24
 801e000:	46bd      	mov	sp, r7
 801e002:	bd90      	pop	{r4, r7, pc}
 801e004:	08024970 	.word	0x08024970
 801e008:	08024d0c 	.word	0x08024d0c
 801e00c:	080249cc 	.word	0x080249cc
 801e010:	08024d30 	.word	0x08024d30
 801e014:	08024d54 	.word	0x08024d54
 801e018:	08024d64 	.word	0x08024d64
 801e01c:	08024d74 	.word	0x08024d74

0801e020 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801e020:	b590      	push	{r4, r7, lr}
 801e022:	b085      	sub	sp, #20
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d106      	bne.n	801e03c <tcp_send_fin+0x1c>
 801e02e:	4b21      	ldr	r3, [pc, #132]	; (801e0b4 <tcp_send_fin+0x94>)
 801e030:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801e034:	4920      	ldr	r1, [pc, #128]	; (801e0b8 <tcp_send_fin+0x98>)
 801e036:	4821      	ldr	r0, [pc, #132]	; (801e0bc <tcp_send_fin+0x9c>)
 801e038:	f002 fa8a 	bl	8020550 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e040:	2b00      	cmp	r3, #0
 801e042:	d02e      	beq.n	801e0a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e048:	60fb      	str	r3, [r7, #12]
 801e04a:	e002      	b.n	801e052 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801e04c:	68fb      	ldr	r3, [r7, #12]
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	2b00      	cmp	r3, #0
 801e058:	d1f8      	bne.n	801e04c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	68db      	ldr	r3, [r3, #12]
 801e05e:	899b      	ldrh	r3, [r3, #12]
 801e060:	b29b      	uxth	r3, r3
 801e062:	4618      	mov	r0, r3
 801e064:	f7f2 fd34 	bl	8010ad0 <lwip_htons>
 801e068:	4603      	mov	r3, r0
 801e06a:	b2db      	uxtb	r3, r3
 801e06c:	f003 0307 	and.w	r3, r3, #7
 801e070:	2b00      	cmp	r3, #0
 801e072:	d116      	bne.n	801e0a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	68db      	ldr	r3, [r3, #12]
 801e078:	899b      	ldrh	r3, [r3, #12]
 801e07a:	b29c      	uxth	r4, r3
 801e07c:	2001      	movs	r0, #1
 801e07e:	f7f2 fd27 	bl	8010ad0 <lwip_htons>
 801e082:	4603      	mov	r3, r0
 801e084:	461a      	mov	r2, r3
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	68db      	ldr	r3, [r3, #12]
 801e08a:	4322      	orrs	r2, r4
 801e08c:	b292      	uxth	r2, r2
 801e08e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	8b5b      	ldrh	r3, [r3, #26]
 801e094:	f043 0320 	orr.w	r3, r3, #32
 801e098:	b29a      	uxth	r2, r3
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801e09e:	2300      	movs	r3, #0
 801e0a0:	e004      	b.n	801e0ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e0a2:	2101      	movs	r1, #1
 801e0a4:	6878      	ldr	r0, [r7, #4]
 801e0a6:	f000 f80b 	bl	801e0c0 <tcp_enqueue_flags>
 801e0aa:	4603      	mov	r3, r0
}
 801e0ac:	4618      	mov	r0, r3
 801e0ae:	3714      	adds	r7, #20
 801e0b0:	46bd      	mov	sp, r7
 801e0b2:	bd90      	pop	{r4, r7, pc}
 801e0b4:	08024970 	.word	0x08024970
 801e0b8:	08024d80 	.word	0x08024d80
 801e0bc:	080249cc 	.word	0x080249cc

0801e0c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801e0c0:	b580      	push	{r7, lr}
 801e0c2:	b08a      	sub	sp, #40	; 0x28
 801e0c4:	af02      	add	r7, sp, #8
 801e0c6:	6078      	str	r0, [r7, #4]
 801e0c8:	460b      	mov	r3, r1
 801e0ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801e0cc:	2300      	movs	r3, #0
 801e0ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801e0d0:	2300      	movs	r3, #0
 801e0d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e0d4:	78fb      	ldrb	r3, [r7, #3]
 801e0d6:	f003 0303 	and.w	r3, r3, #3
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d106      	bne.n	801e0ec <tcp_enqueue_flags+0x2c>
 801e0de:	4b67      	ldr	r3, [pc, #412]	; (801e27c <tcp_enqueue_flags+0x1bc>)
 801e0e0:	f240 4211 	movw	r2, #1041	; 0x411
 801e0e4:	4966      	ldr	r1, [pc, #408]	; (801e280 <tcp_enqueue_flags+0x1c0>)
 801e0e6:	4867      	ldr	r0, [pc, #412]	; (801e284 <tcp_enqueue_flags+0x1c4>)
 801e0e8:	f002 fa32 	bl	8020550 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d106      	bne.n	801e100 <tcp_enqueue_flags+0x40>
 801e0f2:	4b62      	ldr	r3, [pc, #392]	; (801e27c <tcp_enqueue_flags+0x1bc>)
 801e0f4:	f240 4213 	movw	r2, #1043	; 0x413
 801e0f8:	4963      	ldr	r1, [pc, #396]	; (801e288 <tcp_enqueue_flags+0x1c8>)
 801e0fa:	4862      	ldr	r0, [pc, #392]	; (801e284 <tcp_enqueue_flags+0x1c4>)
 801e0fc:	f002 fa28 	bl	8020550 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801e100:	78fb      	ldrb	r3, [r7, #3]
 801e102:	f003 0302 	and.w	r3, r3, #2
 801e106:	2b00      	cmp	r3, #0
 801e108:	d001      	beq.n	801e10e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801e10a:	2301      	movs	r3, #1
 801e10c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e10e:	7ffb      	ldrb	r3, [r7, #31]
 801e110:	009b      	lsls	r3, r3, #2
 801e112:	b2db      	uxtb	r3, r3
 801e114:	f003 0304 	and.w	r3, r3, #4
 801e118:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e11a:	7dfb      	ldrb	r3, [r7, #23]
 801e11c:	b29b      	uxth	r3, r3
 801e11e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e122:	4619      	mov	r1, r3
 801e124:	2036      	movs	r0, #54	; 0x36
 801e126:	f7f9 f83d 	bl	80171a4 <pbuf_alloc>
 801e12a:	6138      	str	r0, [r7, #16]
 801e12c:	693b      	ldr	r3, [r7, #16]
 801e12e:	2b00      	cmp	r3, #0
 801e130:	d109      	bne.n	801e146 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	8b5b      	ldrh	r3, [r3, #26]
 801e136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e13a:	b29a      	uxth	r2, r3
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e140:	f04f 33ff 	mov.w	r3, #4294967295
 801e144:	e095      	b.n	801e272 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e146:	693b      	ldr	r3, [r7, #16]
 801e148:	895a      	ldrh	r2, [r3, #10]
 801e14a:	7dfb      	ldrb	r3, [r7, #23]
 801e14c:	b29b      	uxth	r3, r3
 801e14e:	429a      	cmp	r2, r3
 801e150:	d206      	bcs.n	801e160 <tcp_enqueue_flags+0xa0>
 801e152:	4b4a      	ldr	r3, [pc, #296]	; (801e27c <tcp_enqueue_flags+0x1bc>)
 801e154:	f240 4239 	movw	r2, #1081	; 0x439
 801e158:	494c      	ldr	r1, [pc, #304]	; (801e28c <tcp_enqueue_flags+0x1cc>)
 801e15a:	484a      	ldr	r0, [pc, #296]	; (801e284 <tcp_enqueue_flags+0x1c4>)
 801e15c:	f002 f9f8 	bl	8020550 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801e164:	78fa      	ldrb	r2, [r7, #3]
 801e166:	7ffb      	ldrb	r3, [r7, #31]
 801e168:	9300      	str	r3, [sp, #0]
 801e16a:	460b      	mov	r3, r1
 801e16c:	6939      	ldr	r1, [r7, #16]
 801e16e:	6878      	ldr	r0, [r7, #4]
 801e170:	f7ff f918 	bl	801d3a4 <tcp_create_segment>
 801e174:	60f8      	str	r0, [r7, #12]
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d109      	bne.n	801e190 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	8b5b      	ldrh	r3, [r3, #26]
 801e180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e184:	b29a      	uxth	r2, r3
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e18a:	f04f 33ff 	mov.w	r3, #4294967295
 801e18e:	e070      	b.n	801e272 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	68db      	ldr	r3, [r3, #12]
 801e194:	f003 0303 	and.w	r3, r3, #3
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d006      	beq.n	801e1aa <tcp_enqueue_flags+0xea>
 801e19c:	4b37      	ldr	r3, [pc, #220]	; (801e27c <tcp_enqueue_flags+0x1bc>)
 801e19e:	f240 4242 	movw	r2, #1090	; 0x442
 801e1a2:	493b      	ldr	r1, [pc, #236]	; (801e290 <tcp_enqueue_flags+0x1d0>)
 801e1a4:	4837      	ldr	r0, [pc, #220]	; (801e284 <tcp_enqueue_flags+0x1c4>)
 801e1a6:	f002 f9d3 	bl	8020550 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	891b      	ldrh	r3, [r3, #8]
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d006      	beq.n	801e1c0 <tcp_enqueue_flags+0x100>
 801e1b2:	4b32      	ldr	r3, [pc, #200]	; (801e27c <tcp_enqueue_flags+0x1bc>)
 801e1b4:	f240 4243 	movw	r2, #1091	; 0x443
 801e1b8:	4936      	ldr	r1, [pc, #216]	; (801e294 <tcp_enqueue_flags+0x1d4>)
 801e1ba:	4832      	ldr	r0, [pc, #200]	; (801e284 <tcp_enqueue_flags+0x1c4>)
 801e1bc:	f002 f9c8 	bl	8020550 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d103      	bne.n	801e1d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	68fa      	ldr	r2, [r7, #12]
 801e1cc:	66da      	str	r2, [r3, #108]	; 0x6c
 801e1ce:	e00d      	b.n	801e1ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e1d4:	61bb      	str	r3, [r7, #24]
 801e1d6:	e002      	b.n	801e1de <tcp_enqueue_flags+0x11e>
 801e1d8:	69bb      	ldr	r3, [r7, #24]
 801e1da:	681b      	ldr	r3, [r3, #0]
 801e1dc:	61bb      	str	r3, [r7, #24]
 801e1de:	69bb      	ldr	r3, [r7, #24]
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d1f8      	bne.n	801e1d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e1e6:	69bb      	ldr	r3, [r7, #24]
 801e1e8:	68fa      	ldr	r2, [r7, #12]
 801e1ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	2200      	movs	r2, #0
 801e1f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e1f4:	78fb      	ldrb	r3, [r7, #3]
 801e1f6:	f003 0302 	and.w	r3, r3, #2
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d104      	bne.n	801e208 <tcp_enqueue_flags+0x148>
 801e1fe:	78fb      	ldrb	r3, [r7, #3]
 801e200:	f003 0301 	and.w	r3, r3, #1
 801e204:	2b00      	cmp	r3, #0
 801e206:	d004      	beq.n	801e212 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e20c:	1c5a      	adds	r2, r3, #1
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e212:	78fb      	ldrb	r3, [r7, #3]
 801e214:	f003 0301 	and.w	r3, r3, #1
 801e218:	2b00      	cmp	r3, #0
 801e21a:	d006      	beq.n	801e22a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e21c:	687b      	ldr	r3, [r7, #4]
 801e21e:	8b5b      	ldrh	r3, [r3, #26]
 801e220:	f043 0320 	orr.w	r3, r3, #32
 801e224:	b29a      	uxth	r2, r3
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e22a:	68fb      	ldr	r3, [r7, #12]
 801e22c:	685b      	ldr	r3, [r3, #4]
 801e22e:	4618      	mov	r0, r3
 801e230:	f7f9 fb2a 	bl	8017888 <pbuf_clen>
 801e234:	4603      	mov	r3, r0
 801e236:	461a      	mov	r2, r3
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e23e:	4413      	add	r3, r2
 801e240:	b29a      	uxth	r2, r3
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e24e:	2b00      	cmp	r3, #0
 801e250:	d00e      	beq.n	801e270 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e256:	2b00      	cmp	r3, #0
 801e258:	d10a      	bne.n	801e270 <tcp_enqueue_flags+0x1b0>
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e25e:	2b00      	cmp	r3, #0
 801e260:	d106      	bne.n	801e270 <tcp_enqueue_flags+0x1b0>
 801e262:	4b06      	ldr	r3, [pc, #24]	; (801e27c <tcp_enqueue_flags+0x1bc>)
 801e264:	f240 4265 	movw	r2, #1125	; 0x465
 801e268:	490b      	ldr	r1, [pc, #44]	; (801e298 <tcp_enqueue_flags+0x1d8>)
 801e26a:	4806      	ldr	r0, [pc, #24]	; (801e284 <tcp_enqueue_flags+0x1c4>)
 801e26c:	f002 f970 	bl	8020550 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e270:	2300      	movs	r3, #0
}
 801e272:	4618      	mov	r0, r3
 801e274:	3720      	adds	r7, #32
 801e276:	46bd      	mov	sp, r7
 801e278:	bd80      	pop	{r7, pc}
 801e27a:	bf00      	nop
 801e27c:	08024970 	.word	0x08024970
 801e280:	08024d9c 	.word	0x08024d9c
 801e284:	080249cc 	.word	0x080249cc
 801e288:	08024df4 	.word	0x08024df4
 801e28c:	08024e14 	.word	0x08024e14
 801e290:	08024e50 	.word	0x08024e50
 801e294:	08024e68 	.word	0x08024e68
 801e298:	08024e94 	.word	0x08024e94

0801e29c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e29c:	b5b0      	push	{r4, r5, r7, lr}
 801e29e:	b08a      	sub	sp, #40	; 0x28
 801e2a0:	af00      	add	r7, sp, #0
 801e2a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e2a4:	687b      	ldr	r3, [r7, #4]
 801e2a6:	2b00      	cmp	r3, #0
 801e2a8:	d106      	bne.n	801e2b8 <tcp_output+0x1c>
 801e2aa:	4b8a      	ldr	r3, [pc, #552]	; (801e4d4 <tcp_output+0x238>)
 801e2ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e2b0:	4989      	ldr	r1, [pc, #548]	; (801e4d8 <tcp_output+0x23c>)
 801e2b2:	488a      	ldr	r0, [pc, #552]	; (801e4dc <tcp_output+0x240>)
 801e2b4:	f002 f94c 	bl	8020550 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	7d1b      	ldrb	r3, [r3, #20]
 801e2bc:	2b01      	cmp	r3, #1
 801e2be:	d106      	bne.n	801e2ce <tcp_output+0x32>
 801e2c0:	4b84      	ldr	r3, [pc, #528]	; (801e4d4 <tcp_output+0x238>)
 801e2c2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e2c6:	4986      	ldr	r1, [pc, #536]	; (801e4e0 <tcp_output+0x244>)
 801e2c8:	4884      	ldr	r0, [pc, #528]	; (801e4dc <tcp_output+0x240>)
 801e2ca:	f002 f941 	bl	8020550 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e2ce:	4b85      	ldr	r3, [pc, #532]	; (801e4e4 <tcp_output+0x248>)
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	687a      	ldr	r2, [r7, #4]
 801e2d4:	429a      	cmp	r2, r3
 801e2d6:	d101      	bne.n	801e2dc <tcp_output+0x40>
    return ERR_OK;
 801e2d8:	2300      	movs	r3, #0
 801e2da:	e1ce      	b.n	801e67a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e2e8:	4293      	cmp	r3, r2
 801e2ea:	bf28      	it	cs
 801e2ec:	4613      	movcs	r3, r2
 801e2ee:	b29b      	uxth	r3, r3
 801e2f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d10b      	bne.n	801e316 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	8b5b      	ldrh	r3, [r3, #26]
 801e302:	f003 0302 	and.w	r3, r3, #2
 801e306:	2b00      	cmp	r3, #0
 801e308:	f000 81aa 	beq.w	801e660 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801e30c:	6878      	ldr	r0, [r7, #4]
 801e30e:	f000 fdcb 	bl	801eea8 <tcp_send_empty_ack>
 801e312:	4603      	mov	r3, r0
 801e314:	e1b1      	b.n	801e67a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e316:	6879      	ldr	r1, [r7, #4]
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	3304      	adds	r3, #4
 801e31c:	461a      	mov	r2, r3
 801e31e:	6878      	ldr	r0, [r7, #4]
 801e320:	f7ff f824 	bl	801d36c <tcp_route>
 801e324:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801e326:	697b      	ldr	r3, [r7, #20]
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d102      	bne.n	801e332 <tcp_output+0x96>
    return ERR_RTE;
 801e32c:	f06f 0303 	mvn.w	r3, #3
 801e330:	e1a3      	b.n	801e67a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	2b00      	cmp	r3, #0
 801e336:	d003      	beq.n	801e340 <tcp_output+0xa4>
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	d111      	bne.n	801e364 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801e340:	697b      	ldr	r3, [r7, #20]
 801e342:	2b00      	cmp	r3, #0
 801e344:	d002      	beq.n	801e34c <tcp_output+0xb0>
 801e346:	697b      	ldr	r3, [r7, #20]
 801e348:	3304      	adds	r3, #4
 801e34a:	e000      	b.n	801e34e <tcp_output+0xb2>
 801e34c:	2300      	movs	r3, #0
 801e34e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801e350:	693b      	ldr	r3, [r7, #16]
 801e352:	2b00      	cmp	r3, #0
 801e354:	d102      	bne.n	801e35c <tcp_output+0xc0>
      return ERR_RTE;
 801e356:	f06f 0303 	mvn.w	r3, #3
 801e35a:	e18e      	b.n	801e67a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e35c:	693b      	ldr	r3, [r7, #16]
 801e35e:	681a      	ldr	r2, [r3, #0]
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e366:	68db      	ldr	r3, [r3, #12]
 801e368:	685b      	ldr	r3, [r3, #4]
 801e36a:	4618      	mov	r0, r3
 801e36c:	f7f2 fbc5 	bl	8010afa <lwip_htonl>
 801e370:	4602      	mov	r2, r0
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e376:	1ad3      	subs	r3, r2, r3
 801e378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e37a:	8912      	ldrh	r2, [r2, #8]
 801e37c:	4413      	add	r3, r2
 801e37e:	69ba      	ldr	r2, [r7, #24]
 801e380:	429a      	cmp	r2, r3
 801e382:	d227      	bcs.n	801e3d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e38a:	461a      	mov	r2, r3
 801e38c:	69bb      	ldr	r3, [r7, #24]
 801e38e:	4293      	cmp	r3, r2
 801e390:	d114      	bne.n	801e3bc <tcp_output+0x120>
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e396:	2b00      	cmp	r3, #0
 801e398:	d110      	bne.n	801e3bc <tcp_output+0x120>
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d10b      	bne.n	801e3bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	2201      	movs	r2, #1
 801e3b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801e3b4:	687b      	ldr	r3, [r7, #4]
 801e3b6:	2200      	movs	r2, #0
 801e3b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	8b5b      	ldrh	r3, [r3, #26]
 801e3c0:	f003 0302 	and.w	r3, r3, #2
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	f000 814d 	beq.w	801e664 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801e3ca:	6878      	ldr	r0, [r7, #4]
 801e3cc:	f000 fd6c 	bl	801eea8 <tcp_send_empty_ack>
 801e3d0:	4603      	mov	r3, r0
 801e3d2:	e152      	b.n	801e67a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2200      	movs	r2, #0
 801e3d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e3e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e3e2:	6a3b      	ldr	r3, [r7, #32]
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	f000 811c 	beq.w	801e622 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801e3ea:	e002      	b.n	801e3f2 <tcp_output+0x156>
 801e3ec:	6a3b      	ldr	r3, [r7, #32]
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	623b      	str	r3, [r7, #32]
 801e3f2:	6a3b      	ldr	r3, [r7, #32]
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d1f8      	bne.n	801e3ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801e3fa:	e112      	b.n	801e622 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3fe:	68db      	ldr	r3, [r3, #12]
 801e400:	899b      	ldrh	r3, [r3, #12]
 801e402:	b29b      	uxth	r3, r3
 801e404:	4618      	mov	r0, r3
 801e406:	f7f2 fb63 	bl	8010ad0 <lwip_htons>
 801e40a:	4603      	mov	r3, r0
 801e40c:	b2db      	uxtb	r3, r3
 801e40e:	f003 0304 	and.w	r3, r3, #4
 801e412:	2b00      	cmp	r3, #0
 801e414:	d006      	beq.n	801e424 <tcp_output+0x188>
 801e416:	4b2f      	ldr	r3, [pc, #188]	; (801e4d4 <tcp_output+0x238>)
 801e418:	f240 5236 	movw	r2, #1334	; 0x536
 801e41c:	4932      	ldr	r1, [pc, #200]	; (801e4e8 <tcp_output+0x24c>)
 801e41e:	482f      	ldr	r0, [pc, #188]	; (801e4dc <tcp_output+0x240>)
 801e420:	f002 f896 	bl	8020550 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e428:	2b00      	cmp	r3, #0
 801e42a:	d01f      	beq.n	801e46c <tcp_output+0x1d0>
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	8b5b      	ldrh	r3, [r3, #26]
 801e430:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e434:	2b00      	cmp	r3, #0
 801e436:	d119      	bne.n	801e46c <tcp_output+0x1d0>
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d00b      	beq.n	801e458 <tcp_output+0x1bc>
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	2b00      	cmp	r3, #0
 801e448:	d110      	bne.n	801e46c <tcp_output+0x1d0>
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e44e:	891a      	ldrh	r2, [r3, #8]
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e454:	429a      	cmp	r2, r3
 801e456:	d209      	bcs.n	801e46c <tcp_output+0x1d0>
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d004      	beq.n	801e46c <tcp_output+0x1d0>
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e468:	2b08      	cmp	r3, #8
 801e46a:	d901      	bls.n	801e470 <tcp_output+0x1d4>
 801e46c:	2301      	movs	r3, #1
 801e46e:	e000      	b.n	801e472 <tcp_output+0x1d6>
 801e470:	2300      	movs	r3, #0
 801e472:	2b00      	cmp	r3, #0
 801e474:	d106      	bne.n	801e484 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	8b5b      	ldrh	r3, [r3, #26]
 801e47a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e47e:	2b00      	cmp	r3, #0
 801e480:	f000 80e4 	beq.w	801e64c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	7d1b      	ldrb	r3, [r3, #20]
 801e488:	2b02      	cmp	r3, #2
 801e48a:	d00d      	beq.n	801e4a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e48e:	68db      	ldr	r3, [r3, #12]
 801e490:	899b      	ldrh	r3, [r3, #12]
 801e492:	b29c      	uxth	r4, r3
 801e494:	2010      	movs	r0, #16
 801e496:	f7f2 fb1b 	bl	8010ad0 <lwip_htons>
 801e49a:	4603      	mov	r3, r0
 801e49c:	461a      	mov	r2, r3
 801e49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4a0:	68db      	ldr	r3, [r3, #12]
 801e4a2:	4322      	orrs	r2, r4
 801e4a4:	b292      	uxth	r2, r2
 801e4a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801e4a8:	697a      	ldr	r2, [r7, #20]
 801e4aa:	6879      	ldr	r1, [r7, #4]
 801e4ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e4ae:	f000 f909 	bl	801e6c4 <tcp_output_segment>
 801e4b2:	4603      	mov	r3, r0
 801e4b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801e4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d016      	beq.n	801e4ec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	8b5b      	ldrh	r3, [r3, #26]
 801e4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e4c6:	b29a      	uxth	r2, r3
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	835a      	strh	r2, [r3, #26]
      return err;
 801e4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e4d0:	e0d3      	b.n	801e67a <tcp_output+0x3de>
 801e4d2:	bf00      	nop
 801e4d4:	08024970 	.word	0x08024970
 801e4d8:	08024ebc 	.word	0x08024ebc
 801e4dc:	080249cc 	.word	0x080249cc
 801e4e0:	08024ed4 	.word	0x08024ed4
 801e4e4:	2400d41c 	.word	0x2400d41c
 801e4e8:	08024efc 	.word	0x08024efc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4ee:	681a      	ldr	r2, [r3, #0]
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	7d1b      	ldrb	r3, [r3, #20]
 801e4f8:	2b02      	cmp	r3, #2
 801e4fa:	d006      	beq.n	801e50a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	8b5b      	ldrh	r3, [r3, #26]
 801e500:	f023 0303 	bic.w	r3, r3, #3
 801e504:	b29a      	uxth	r2, r3
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e50c:	68db      	ldr	r3, [r3, #12]
 801e50e:	685b      	ldr	r3, [r3, #4]
 801e510:	4618      	mov	r0, r3
 801e512:	f7f2 faf2 	bl	8010afa <lwip_htonl>
 801e516:	4604      	mov	r4, r0
 801e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e51a:	891b      	ldrh	r3, [r3, #8]
 801e51c:	461d      	mov	r5, r3
 801e51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e520:	68db      	ldr	r3, [r3, #12]
 801e522:	899b      	ldrh	r3, [r3, #12]
 801e524:	b29b      	uxth	r3, r3
 801e526:	4618      	mov	r0, r3
 801e528:	f7f2 fad2 	bl	8010ad0 <lwip_htons>
 801e52c:	4603      	mov	r3, r0
 801e52e:	b2db      	uxtb	r3, r3
 801e530:	f003 0303 	and.w	r3, r3, #3
 801e534:	2b00      	cmp	r3, #0
 801e536:	d001      	beq.n	801e53c <tcp_output+0x2a0>
 801e538:	2301      	movs	r3, #1
 801e53a:	e000      	b.n	801e53e <tcp_output+0x2a2>
 801e53c:	2300      	movs	r3, #0
 801e53e:	442b      	add	r3, r5
 801e540:	4423      	add	r3, r4
 801e542:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e548:	68bb      	ldr	r3, [r7, #8]
 801e54a:	1ad3      	subs	r3, r2, r3
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	da02      	bge.n	801e556 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	68ba      	ldr	r2, [r7, #8]
 801e554:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801e556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e558:	891b      	ldrh	r3, [r3, #8]
 801e55a:	461c      	mov	r4, r3
 801e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e55e:	68db      	ldr	r3, [r3, #12]
 801e560:	899b      	ldrh	r3, [r3, #12]
 801e562:	b29b      	uxth	r3, r3
 801e564:	4618      	mov	r0, r3
 801e566:	f7f2 fab3 	bl	8010ad0 <lwip_htons>
 801e56a:	4603      	mov	r3, r0
 801e56c:	b2db      	uxtb	r3, r3
 801e56e:	f003 0303 	and.w	r3, r3, #3
 801e572:	2b00      	cmp	r3, #0
 801e574:	d001      	beq.n	801e57a <tcp_output+0x2de>
 801e576:	2301      	movs	r3, #1
 801e578:	e000      	b.n	801e57c <tcp_output+0x2e0>
 801e57a:	2300      	movs	r3, #0
 801e57c:	4423      	add	r3, r4
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d049      	beq.n	801e616 <tcp_output+0x37a>
      seg->next = NULL;
 801e582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e584:	2200      	movs	r2, #0
 801e586:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	d105      	bne.n	801e59c <tcp_output+0x300>
        pcb->unacked = seg;
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e594:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e598:	623b      	str	r3, [r7, #32]
 801e59a:	e03f      	b.n	801e61c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e59e:	68db      	ldr	r3, [r3, #12]
 801e5a0:	685b      	ldr	r3, [r3, #4]
 801e5a2:	4618      	mov	r0, r3
 801e5a4:	f7f2 faa9 	bl	8010afa <lwip_htonl>
 801e5a8:	4604      	mov	r4, r0
 801e5aa:	6a3b      	ldr	r3, [r7, #32]
 801e5ac:	68db      	ldr	r3, [r3, #12]
 801e5ae:	685b      	ldr	r3, [r3, #4]
 801e5b0:	4618      	mov	r0, r3
 801e5b2:	f7f2 faa2 	bl	8010afa <lwip_htonl>
 801e5b6:	4603      	mov	r3, r0
 801e5b8:	1ae3      	subs	r3, r4, r3
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	da24      	bge.n	801e608 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	3370      	adds	r3, #112	; 0x70
 801e5c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e5c4:	e002      	b.n	801e5cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801e5c6:	69fb      	ldr	r3, [r7, #28]
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e5cc:	69fb      	ldr	r3, [r7, #28]
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	d011      	beq.n	801e5f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e5d4:	69fb      	ldr	r3, [r7, #28]
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	68db      	ldr	r3, [r3, #12]
 801e5da:	685b      	ldr	r3, [r3, #4]
 801e5dc:	4618      	mov	r0, r3
 801e5de:	f7f2 fa8c 	bl	8010afa <lwip_htonl>
 801e5e2:	4604      	mov	r4, r0
 801e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5e6:	68db      	ldr	r3, [r3, #12]
 801e5e8:	685b      	ldr	r3, [r3, #4]
 801e5ea:	4618      	mov	r0, r3
 801e5ec:	f7f2 fa85 	bl	8010afa <lwip_htonl>
 801e5f0:	4603      	mov	r3, r0
 801e5f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801e5f4:	2b00      	cmp	r3, #0
 801e5f6:	dbe6      	blt.n	801e5c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801e5f8:	69fb      	ldr	r3, [r7, #28]
 801e5fa:	681a      	ldr	r2, [r3, #0]
 801e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801e600:	69fb      	ldr	r3, [r7, #28]
 801e602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e604:	601a      	str	r2, [r3, #0]
 801e606:	e009      	b.n	801e61c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801e608:	6a3b      	ldr	r3, [r7, #32]
 801e60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e60c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801e60e:	6a3b      	ldr	r3, [r7, #32]
 801e610:	681b      	ldr	r3, [r3, #0]
 801e612:	623b      	str	r3, [r7, #32]
 801e614:	e002      	b.n	801e61c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801e616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e618:	f7fb ff19 	bl	801a44e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e620:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801e622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e624:	2b00      	cmp	r3, #0
 801e626:	d012      	beq.n	801e64e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e62a:	68db      	ldr	r3, [r3, #12]
 801e62c:	685b      	ldr	r3, [r3, #4]
 801e62e:	4618      	mov	r0, r3
 801e630:	f7f2 fa63 	bl	8010afa <lwip_htonl>
 801e634:	4602      	mov	r2, r0
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e63a:	1ad3      	subs	r3, r2, r3
 801e63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e63e:	8912      	ldrh	r2, [r2, #8]
 801e640:	4413      	add	r3, r2
  while (seg != NULL &&
 801e642:	69ba      	ldr	r2, [r7, #24]
 801e644:	429a      	cmp	r2, r3
 801e646:	f4bf aed9 	bcs.w	801e3fc <tcp_output+0x160>
 801e64a:	e000      	b.n	801e64e <tcp_output+0x3b2>
      break;
 801e64c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e652:	2b00      	cmp	r3, #0
 801e654:	d108      	bne.n	801e668 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	2200      	movs	r2, #0
 801e65a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801e65e:	e004      	b.n	801e66a <tcp_output+0x3ce>
    goto output_done;
 801e660:	bf00      	nop
 801e662:	e002      	b.n	801e66a <tcp_output+0x3ce>
    goto output_done;
 801e664:	bf00      	nop
 801e666:	e000      	b.n	801e66a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801e668:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	8b5b      	ldrh	r3, [r3, #26]
 801e66e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e672:	b29a      	uxth	r2, r3
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801e678:	2300      	movs	r3, #0
}
 801e67a:	4618      	mov	r0, r3
 801e67c:	3728      	adds	r7, #40	; 0x28
 801e67e:	46bd      	mov	sp, r7
 801e680:	bdb0      	pop	{r4, r5, r7, pc}
 801e682:	bf00      	nop

0801e684 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801e684:	b580      	push	{r7, lr}
 801e686:	b082      	sub	sp, #8
 801e688:	af00      	add	r7, sp, #0
 801e68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d106      	bne.n	801e6a0 <tcp_output_segment_busy+0x1c>
 801e692:	4b09      	ldr	r3, [pc, #36]	; (801e6b8 <tcp_output_segment_busy+0x34>)
 801e694:	f240 529a 	movw	r2, #1434	; 0x59a
 801e698:	4908      	ldr	r1, [pc, #32]	; (801e6bc <tcp_output_segment_busy+0x38>)
 801e69a:	4809      	ldr	r0, [pc, #36]	; (801e6c0 <tcp_output_segment_busy+0x3c>)
 801e69c:	f001 ff58 	bl	8020550 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	685b      	ldr	r3, [r3, #4]
 801e6a4:	7b9b      	ldrb	r3, [r3, #14]
 801e6a6:	2b01      	cmp	r3, #1
 801e6a8:	d001      	beq.n	801e6ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801e6aa:	2301      	movs	r3, #1
 801e6ac:	e000      	b.n	801e6b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801e6ae:	2300      	movs	r3, #0
}
 801e6b0:	4618      	mov	r0, r3
 801e6b2:	3708      	adds	r7, #8
 801e6b4:	46bd      	mov	sp, r7
 801e6b6:	bd80      	pop	{r7, pc}
 801e6b8:	08024970 	.word	0x08024970
 801e6bc:	08024f14 	.word	0x08024f14
 801e6c0:	080249cc 	.word	0x080249cc

0801e6c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801e6c4:	b5b0      	push	{r4, r5, r7, lr}
 801e6c6:	b08c      	sub	sp, #48	; 0x30
 801e6c8:	af04      	add	r7, sp, #16
 801e6ca:	60f8      	str	r0, [r7, #12]
 801e6cc:	60b9      	str	r1, [r7, #8]
 801e6ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801e6d0:	68fb      	ldr	r3, [r7, #12]
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d106      	bne.n	801e6e4 <tcp_output_segment+0x20>
 801e6d6:	4b63      	ldr	r3, [pc, #396]	; (801e864 <tcp_output_segment+0x1a0>)
 801e6d8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801e6dc:	4962      	ldr	r1, [pc, #392]	; (801e868 <tcp_output_segment+0x1a4>)
 801e6de:	4863      	ldr	r0, [pc, #396]	; (801e86c <tcp_output_segment+0x1a8>)
 801e6e0:	f001 ff36 	bl	8020550 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801e6e4:	68bb      	ldr	r3, [r7, #8]
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d106      	bne.n	801e6f8 <tcp_output_segment+0x34>
 801e6ea:	4b5e      	ldr	r3, [pc, #376]	; (801e864 <tcp_output_segment+0x1a0>)
 801e6ec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801e6f0:	495f      	ldr	r1, [pc, #380]	; (801e870 <tcp_output_segment+0x1ac>)
 801e6f2:	485e      	ldr	r0, [pc, #376]	; (801e86c <tcp_output_segment+0x1a8>)
 801e6f4:	f001 ff2c 	bl	8020550 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	d106      	bne.n	801e70c <tcp_output_segment+0x48>
 801e6fe:	4b59      	ldr	r3, [pc, #356]	; (801e864 <tcp_output_segment+0x1a0>)
 801e700:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801e704:	495b      	ldr	r1, [pc, #364]	; (801e874 <tcp_output_segment+0x1b0>)
 801e706:	4859      	ldr	r0, [pc, #356]	; (801e86c <tcp_output_segment+0x1a8>)
 801e708:	f001 ff22 	bl	8020550 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801e70c:	68f8      	ldr	r0, [r7, #12]
 801e70e:	f7ff ffb9 	bl	801e684 <tcp_output_segment_busy>
 801e712:	4603      	mov	r3, r0
 801e714:	2b00      	cmp	r3, #0
 801e716:	d001      	beq.n	801e71c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801e718:	2300      	movs	r3, #0
 801e71a:	e09f      	b.n	801e85c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e71c:	68bb      	ldr	r3, [r7, #8]
 801e71e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e720:	68fb      	ldr	r3, [r7, #12]
 801e722:	68dc      	ldr	r4, [r3, #12]
 801e724:	4610      	mov	r0, r2
 801e726:	f7f2 f9e8 	bl	8010afa <lwip_htonl>
 801e72a:	4603      	mov	r3, r0
 801e72c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e72e:	68bb      	ldr	r3, [r7, #8]
 801e730:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e732:	68fb      	ldr	r3, [r7, #12]
 801e734:	68dc      	ldr	r4, [r3, #12]
 801e736:	4610      	mov	r0, r2
 801e738:	f7f2 f9ca 	bl	8010ad0 <lwip_htons>
 801e73c:	4603      	mov	r3, r0
 801e73e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e740:	68bb      	ldr	r3, [r7, #8]
 801e742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e744:	68ba      	ldr	r2, [r7, #8]
 801e746:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e748:	441a      	add	r2, r3
 801e74a:	68bb      	ldr	r3, [r7, #8]
 801e74c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e74e:	68fb      	ldr	r3, [r7, #12]
 801e750:	68db      	ldr	r3, [r3, #12]
 801e752:	3314      	adds	r3, #20
 801e754:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e756:	68fb      	ldr	r3, [r7, #12]
 801e758:	7a9b      	ldrb	r3, [r3, #10]
 801e75a:	f003 0301 	and.w	r3, r3, #1
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d015      	beq.n	801e78e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e762:	68bb      	ldr	r3, [r7, #8]
 801e764:	3304      	adds	r3, #4
 801e766:	461a      	mov	r2, r3
 801e768:	6879      	ldr	r1, [r7, #4]
 801e76a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801e76e:	f7fc fa33 	bl	801abd8 <tcp_eff_send_mss_netif>
 801e772:	4603      	mov	r3, r0
 801e774:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e776:	8b7b      	ldrh	r3, [r7, #26]
 801e778:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801e77c:	4618      	mov	r0, r3
 801e77e:	f7f2 f9bc 	bl	8010afa <lwip_htonl>
 801e782:	4602      	mov	r2, r0
 801e784:	69fb      	ldr	r3, [r7, #28]
 801e786:	601a      	str	r2, [r3, #0]
    opts += 1;
 801e788:	69fb      	ldr	r3, [r7, #28]
 801e78a:	3304      	adds	r3, #4
 801e78c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801e78e:	68bb      	ldr	r3, [r7, #8]
 801e790:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801e794:	2b00      	cmp	r3, #0
 801e796:	da02      	bge.n	801e79e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801e798:	68bb      	ldr	r3, [r7, #8]
 801e79a:	2200      	movs	r2, #0
 801e79c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801e79e:	68bb      	ldr	r3, [r7, #8]
 801e7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d10c      	bne.n	801e7c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801e7a6:	4b34      	ldr	r3, [pc, #208]	; (801e878 <tcp_output_segment+0x1b4>)
 801e7a8:	681a      	ldr	r2, [r3, #0]
 801e7aa:	68bb      	ldr	r3, [r7, #8]
 801e7ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	68db      	ldr	r3, [r3, #12]
 801e7b2:	685b      	ldr	r3, [r3, #4]
 801e7b4:	4618      	mov	r0, r3
 801e7b6:	f7f2 f9a0 	bl	8010afa <lwip_htonl>
 801e7ba:	4602      	mov	r2, r0
 801e7bc:	68bb      	ldr	r3, [r7, #8]
 801e7be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	68da      	ldr	r2, [r3, #12]
 801e7c4:	68fb      	ldr	r3, [r7, #12]
 801e7c6:	685b      	ldr	r3, [r3, #4]
 801e7c8:	685b      	ldr	r3, [r3, #4]
 801e7ca:	1ad3      	subs	r3, r2, r3
 801e7cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801e7ce:	68fb      	ldr	r3, [r7, #12]
 801e7d0:	685b      	ldr	r3, [r3, #4]
 801e7d2:	8959      	ldrh	r1, [r3, #10]
 801e7d4:	68fb      	ldr	r3, [r7, #12]
 801e7d6:	685b      	ldr	r3, [r3, #4]
 801e7d8:	8b3a      	ldrh	r2, [r7, #24]
 801e7da:	1a8a      	subs	r2, r1, r2
 801e7dc:	b292      	uxth	r2, r2
 801e7de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	685b      	ldr	r3, [r3, #4]
 801e7e4:	8919      	ldrh	r1, [r3, #8]
 801e7e6:	68fb      	ldr	r3, [r7, #12]
 801e7e8:	685b      	ldr	r3, [r3, #4]
 801e7ea:	8b3a      	ldrh	r2, [r7, #24]
 801e7ec:	1a8a      	subs	r2, r1, r2
 801e7ee:	b292      	uxth	r2, r2
 801e7f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	685b      	ldr	r3, [r3, #4]
 801e7f6:	68fa      	ldr	r2, [r7, #12]
 801e7f8:	68d2      	ldr	r2, [r2, #12]
 801e7fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801e7fc:	68fb      	ldr	r3, [r7, #12]
 801e7fe:	68db      	ldr	r3, [r3, #12]
 801e800:	2200      	movs	r2, #0
 801e802:	741a      	strb	r2, [r3, #16]
 801e804:	2200      	movs	r2, #0
 801e806:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e808:	68fb      	ldr	r3, [r7, #12]
 801e80a:	68db      	ldr	r3, [r3, #12]
 801e80c:	f103 0214 	add.w	r2, r3, #20
 801e810:	68fb      	ldr	r3, [r7, #12]
 801e812:	7a9b      	ldrb	r3, [r3, #10]
 801e814:	009b      	lsls	r3, r3, #2
 801e816:	f003 0304 	and.w	r3, r3, #4
 801e81a:	4413      	add	r3, r2
 801e81c:	69fa      	ldr	r2, [r7, #28]
 801e81e:	429a      	cmp	r2, r3
 801e820:	d006      	beq.n	801e830 <tcp_output_segment+0x16c>
 801e822:	4b10      	ldr	r3, [pc, #64]	; (801e864 <tcp_output_segment+0x1a0>)
 801e824:	f240 621c 	movw	r2, #1564	; 0x61c
 801e828:	4914      	ldr	r1, [pc, #80]	; (801e87c <tcp_output_segment+0x1b8>)
 801e82a:	4810      	ldr	r0, [pc, #64]	; (801e86c <tcp_output_segment+0x1a8>)
 801e82c:	f001 fe90 	bl	8020550 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	6858      	ldr	r0, [r3, #4]
 801e834:	68b9      	ldr	r1, [r7, #8]
 801e836:	68bb      	ldr	r3, [r7, #8]
 801e838:	1d1c      	adds	r4, r3, #4
 801e83a:	68bb      	ldr	r3, [r7, #8]
 801e83c:	7add      	ldrb	r5, [r3, #11]
 801e83e:	68bb      	ldr	r3, [r7, #8]
 801e840:	7a9b      	ldrb	r3, [r3, #10]
 801e842:	687a      	ldr	r2, [r7, #4]
 801e844:	9202      	str	r2, [sp, #8]
 801e846:	2206      	movs	r2, #6
 801e848:	9201      	str	r2, [sp, #4]
 801e84a:	9300      	str	r3, [sp, #0]
 801e84c:	462b      	mov	r3, r5
 801e84e:	4622      	mov	r2, r4
 801e850:	f7f5 ffe8 	bl	8014824 <ip4_output_if>
 801e854:	4603      	mov	r3, r0
 801e856:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801e858:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e85c:	4618      	mov	r0, r3
 801e85e:	3720      	adds	r7, #32
 801e860:	46bd      	mov	sp, r7
 801e862:	bdb0      	pop	{r4, r5, r7, pc}
 801e864:	08024970 	.word	0x08024970
 801e868:	08024f3c 	.word	0x08024f3c
 801e86c:	080249cc 	.word	0x080249cc
 801e870:	08024f5c 	.word	0x08024f5c
 801e874:	08024f7c 	.word	0x08024f7c
 801e878:	2400d3d0 	.word	0x2400d3d0
 801e87c:	08024fa0 	.word	0x08024fa0

0801e880 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801e880:	b5b0      	push	{r4, r5, r7, lr}
 801e882:	b084      	sub	sp, #16
 801e884:	af00      	add	r7, sp, #0
 801e886:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	d106      	bne.n	801e89c <tcp_rexmit_rto_prepare+0x1c>
 801e88e:	4b31      	ldr	r3, [pc, #196]	; (801e954 <tcp_rexmit_rto_prepare+0xd4>)
 801e890:	f240 6263 	movw	r2, #1635	; 0x663
 801e894:	4930      	ldr	r1, [pc, #192]	; (801e958 <tcp_rexmit_rto_prepare+0xd8>)
 801e896:	4831      	ldr	r0, [pc, #196]	; (801e95c <tcp_rexmit_rto_prepare+0xdc>)
 801e898:	f001 fe5a 	bl	8020550 <iprintf>

  if (pcb->unacked == NULL) {
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	d102      	bne.n	801e8aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801e8a4:	f06f 0305 	mvn.w	r3, #5
 801e8a8:	e050      	b.n	801e94c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8ae:	60fb      	str	r3, [r7, #12]
 801e8b0:	e00b      	b.n	801e8ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801e8b2:	68f8      	ldr	r0, [r7, #12]
 801e8b4:	f7ff fee6 	bl	801e684 <tcp_output_segment_busy>
 801e8b8:	4603      	mov	r3, r0
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d002      	beq.n	801e8c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801e8be:	f06f 0305 	mvn.w	r3, #5
 801e8c2:	e043      	b.n	801e94c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	60fb      	str	r3, [r7, #12]
 801e8ca:	68fb      	ldr	r3, [r7, #12]
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d1ef      	bne.n	801e8b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801e8d2:	68f8      	ldr	r0, [r7, #12]
 801e8d4:	f7ff fed6 	bl	801e684 <tcp_output_segment_busy>
 801e8d8:	4603      	mov	r3, r0
 801e8da:	2b00      	cmp	r3, #0
 801e8dc:	d002      	beq.n	801e8e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801e8de:	f06f 0305 	mvn.w	r3, #5
 801e8e2:	e033      	b.n	801e94c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801e8e8:	68fb      	ldr	r3, [r7, #12]
 801e8ea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	2200      	movs	r2, #0
 801e8f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	8b5b      	ldrh	r3, [r3, #26]
 801e8fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801e902:	b29a      	uxth	r2, r3
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	68db      	ldr	r3, [r3, #12]
 801e90c:	685b      	ldr	r3, [r3, #4]
 801e90e:	4618      	mov	r0, r3
 801e910:	f7f2 f8f3 	bl	8010afa <lwip_htonl>
 801e914:	4604      	mov	r4, r0
 801e916:	68fb      	ldr	r3, [r7, #12]
 801e918:	891b      	ldrh	r3, [r3, #8]
 801e91a:	461d      	mov	r5, r3
 801e91c:	68fb      	ldr	r3, [r7, #12]
 801e91e:	68db      	ldr	r3, [r3, #12]
 801e920:	899b      	ldrh	r3, [r3, #12]
 801e922:	b29b      	uxth	r3, r3
 801e924:	4618      	mov	r0, r3
 801e926:	f7f2 f8d3 	bl	8010ad0 <lwip_htons>
 801e92a:	4603      	mov	r3, r0
 801e92c:	b2db      	uxtb	r3, r3
 801e92e:	f003 0303 	and.w	r3, r3, #3
 801e932:	2b00      	cmp	r3, #0
 801e934:	d001      	beq.n	801e93a <tcp_rexmit_rto_prepare+0xba>
 801e936:	2301      	movs	r3, #1
 801e938:	e000      	b.n	801e93c <tcp_rexmit_rto_prepare+0xbc>
 801e93a:	2300      	movs	r3, #0
 801e93c:	442b      	add	r3, r5
 801e93e:	18e2      	adds	r2, r4, r3
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	2200      	movs	r2, #0
 801e948:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801e94a:	2300      	movs	r3, #0
}
 801e94c:	4618      	mov	r0, r3
 801e94e:	3710      	adds	r7, #16
 801e950:	46bd      	mov	sp, r7
 801e952:	bdb0      	pop	{r4, r5, r7, pc}
 801e954:	08024970 	.word	0x08024970
 801e958:	08024fb4 	.word	0x08024fb4
 801e95c:	080249cc 	.word	0x080249cc

0801e960 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801e960:	b580      	push	{r7, lr}
 801e962:	b082      	sub	sp, #8
 801e964:	af00      	add	r7, sp, #0
 801e966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d106      	bne.n	801e97c <tcp_rexmit_rto_commit+0x1c>
 801e96e:	4b0d      	ldr	r3, [pc, #52]	; (801e9a4 <tcp_rexmit_rto_commit+0x44>)
 801e970:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e974:	490c      	ldr	r1, [pc, #48]	; (801e9a8 <tcp_rexmit_rto_commit+0x48>)
 801e976:	480d      	ldr	r0, [pc, #52]	; (801e9ac <tcp_rexmit_rto_commit+0x4c>)
 801e978:	f001 fdea 	bl	8020550 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e982:	2bff      	cmp	r3, #255	; 0xff
 801e984:	d007      	beq.n	801e996 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e98c:	3301      	adds	r3, #1
 801e98e:	b2da      	uxtb	r2, r3
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801e996:	6878      	ldr	r0, [r7, #4]
 801e998:	f7ff fc80 	bl	801e29c <tcp_output>
}
 801e99c:	bf00      	nop
 801e99e:	3708      	adds	r7, #8
 801e9a0:	46bd      	mov	sp, r7
 801e9a2:	bd80      	pop	{r7, pc}
 801e9a4:	08024970 	.word	0x08024970
 801e9a8:	08024fd8 	.word	0x08024fd8
 801e9ac:	080249cc 	.word	0x080249cc

0801e9b0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801e9b0:	b580      	push	{r7, lr}
 801e9b2:	b082      	sub	sp, #8
 801e9b4:	af00      	add	r7, sp, #0
 801e9b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e9b8:	687b      	ldr	r3, [r7, #4]
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d106      	bne.n	801e9cc <tcp_rexmit_rto+0x1c>
 801e9be:	4b0a      	ldr	r3, [pc, #40]	; (801e9e8 <tcp_rexmit_rto+0x38>)
 801e9c0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801e9c4:	4909      	ldr	r1, [pc, #36]	; (801e9ec <tcp_rexmit_rto+0x3c>)
 801e9c6:	480a      	ldr	r0, [pc, #40]	; (801e9f0 <tcp_rexmit_rto+0x40>)
 801e9c8:	f001 fdc2 	bl	8020550 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e9cc:	6878      	ldr	r0, [r7, #4]
 801e9ce:	f7ff ff57 	bl	801e880 <tcp_rexmit_rto_prepare>
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d102      	bne.n	801e9de <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801e9d8:	6878      	ldr	r0, [r7, #4]
 801e9da:	f7ff ffc1 	bl	801e960 <tcp_rexmit_rto_commit>
  }
}
 801e9de:	bf00      	nop
 801e9e0:	3708      	adds	r7, #8
 801e9e2:	46bd      	mov	sp, r7
 801e9e4:	bd80      	pop	{r7, pc}
 801e9e6:	bf00      	nop
 801e9e8:	08024970 	.word	0x08024970
 801e9ec:	08024ffc 	.word	0x08024ffc
 801e9f0:	080249cc 	.word	0x080249cc

0801e9f4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801e9f4:	b590      	push	{r4, r7, lr}
 801e9f6:	b085      	sub	sp, #20
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d106      	bne.n	801ea10 <tcp_rexmit+0x1c>
 801ea02:	4b2f      	ldr	r3, [pc, #188]	; (801eac0 <tcp_rexmit+0xcc>)
 801ea04:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801ea08:	492e      	ldr	r1, [pc, #184]	; (801eac4 <tcp_rexmit+0xd0>)
 801ea0a:	482f      	ldr	r0, [pc, #188]	; (801eac8 <tcp_rexmit+0xd4>)
 801ea0c:	f001 fda0 	bl	8020550 <iprintf>

  if (pcb->unacked == NULL) {
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d102      	bne.n	801ea1e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801ea18:	f06f 0305 	mvn.w	r3, #5
 801ea1c:	e04c      	b.n	801eab8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ea22:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ea24:	68b8      	ldr	r0, [r7, #8]
 801ea26:	f7ff fe2d 	bl	801e684 <tcp_output_segment_busy>
 801ea2a:	4603      	mov	r3, r0
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	d002      	beq.n	801ea36 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ea30:	f06f 0305 	mvn.w	r3, #5
 801ea34:	e040      	b.n	801eab8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ea36:	68bb      	ldr	r3, [r7, #8]
 801ea38:	681a      	ldr	r2, [r3, #0]
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801ea3e:	687b      	ldr	r3, [r7, #4]
 801ea40:	336c      	adds	r3, #108	; 0x6c
 801ea42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ea44:	e002      	b.n	801ea4c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	681b      	ldr	r3, [r3, #0]
 801ea4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	d011      	beq.n	801ea78 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ea54:	68fb      	ldr	r3, [r7, #12]
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	68db      	ldr	r3, [r3, #12]
 801ea5a:	685b      	ldr	r3, [r3, #4]
 801ea5c:	4618      	mov	r0, r3
 801ea5e:	f7f2 f84c 	bl	8010afa <lwip_htonl>
 801ea62:	4604      	mov	r4, r0
 801ea64:	68bb      	ldr	r3, [r7, #8]
 801ea66:	68db      	ldr	r3, [r3, #12]
 801ea68:	685b      	ldr	r3, [r3, #4]
 801ea6a:	4618      	mov	r0, r3
 801ea6c:	f7f2 f845 	bl	8010afa <lwip_htonl>
 801ea70:	4603      	mov	r3, r0
 801ea72:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	dbe6      	blt.n	801ea46 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ea78:	68fb      	ldr	r3, [r7, #12]
 801ea7a:	681a      	ldr	r2, [r3, #0]
 801ea7c:	68bb      	ldr	r3, [r7, #8]
 801ea7e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	68ba      	ldr	r2, [r7, #8]
 801ea84:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ea86:	68bb      	ldr	r3, [r7, #8]
 801ea88:	681b      	ldr	r3, [r3, #0]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d103      	bne.n	801ea96 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	2200      	movs	r2, #0
 801ea92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ea9c:	2bff      	cmp	r3, #255	; 0xff
 801ea9e:	d007      	beq.n	801eab0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eaa6:	3301      	adds	r3, #1
 801eaa8:	b2da      	uxtb	r2, r3
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	2200      	movs	r2, #0
 801eab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801eab6:	2300      	movs	r3, #0
}
 801eab8:	4618      	mov	r0, r3
 801eaba:	3714      	adds	r7, #20
 801eabc:	46bd      	mov	sp, r7
 801eabe:	bd90      	pop	{r4, r7, pc}
 801eac0:	08024970 	.word	0x08024970
 801eac4:	08025018 	.word	0x08025018
 801eac8:	080249cc 	.word	0x080249cc

0801eacc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801eacc:	b580      	push	{r7, lr}
 801eace:	b082      	sub	sp, #8
 801ead0:	af00      	add	r7, sp, #0
 801ead2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	2b00      	cmp	r3, #0
 801ead8:	d106      	bne.n	801eae8 <tcp_rexmit_fast+0x1c>
 801eada:	4b2a      	ldr	r3, [pc, #168]	; (801eb84 <tcp_rexmit_fast+0xb8>)
 801eadc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801eae0:	4929      	ldr	r1, [pc, #164]	; (801eb88 <tcp_rexmit_fast+0xbc>)
 801eae2:	482a      	ldr	r0, [pc, #168]	; (801eb8c <tcp_rexmit_fast+0xc0>)
 801eae4:	f001 fd34 	bl	8020550 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d045      	beq.n	801eb7c <tcp_rexmit_fast+0xb0>
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	8b5b      	ldrh	r3, [r3, #26]
 801eaf4:	f003 0304 	and.w	r3, r3, #4
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d13f      	bne.n	801eb7c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801eafc:	6878      	ldr	r0, [r7, #4]
 801eafe:	f7ff ff79 	bl	801e9f4 <tcp_rexmit>
 801eb02:	4603      	mov	r3, r0
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d139      	bne.n	801eb7c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801eb14:	4293      	cmp	r3, r2
 801eb16:	bf28      	it	cs
 801eb18:	4613      	movcs	r3, r2
 801eb1a:	b29b      	uxth	r3, r3
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	da00      	bge.n	801eb22 <tcp_rexmit_fast+0x56>
 801eb20:	3301      	adds	r3, #1
 801eb22:	105b      	asrs	r3, r3, #1
 801eb24:	b29a      	uxth	r2, r3
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801eb32:	461a      	mov	r2, r3
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801eb38:	005b      	lsls	r3, r3, #1
 801eb3a:	429a      	cmp	r2, r3
 801eb3c:	d206      	bcs.n	801eb4c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801eb3e:	687b      	ldr	r3, [r7, #4]
 801eb40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801eb42:	005b      	lsls	r3, r3, #1
 801eb44:	b29a      	uxth	r2, r3
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801eb56:	4619      	mov	r1, r3
 801eb58:	0049      	lsls	r1, r1, #1
 801eb5a:	440b      	add	r3, r1
 801eb5c:	b29b      	uxth	r3, r3
 801eb5e:	4413      	add	r3, r2
 801eb60:	b29a      	uxth	r2, r3
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	8b5b      	ldrh	r3, [r3, #26]
 801eb6c:	f043 0304 	orr.w	r3, r3, #4
 801eb70:	b29a      	uxth	r2, r3
 801eb72:	687b      	ldr	r3, [r7, #4]
 801eb74:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	2200      	movs	r2, #0
 801eb7a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801eb7c:	bf00      	nop
 801eb7e:	3708      	adds	r7, #8
 801eb80:	46bd      	mov	sp, r7
 801eb82:	bd80      	pop	{r7, pc}
 801eb84:	08024970 	.word	0x08024970
 801eb88:	08025030 	.word	0x08025030
 801eb8c:	080249cc 	.word	0x080249cc

0801eb90 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801eb90:	b580      	push	{r7, lr}
 801eb92:	b086      	sub	sp, #24
 801eb94:	af00      	add	r7, sp, #0
 801eb96:	60f8      	str	r0, [r7, #12]
 801eb98:	607b      	str	r3, [r7, #4]
 801eb9a:	460b      	mov	r3, r1
 801eb9c:	817b      	strh	r3, [r7, #10]
 801eb9e:	4613      	mov	r3, r2
 801eba0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801eba2:	897a      	ldrh	r2, [r7, #10]
 801eba4:	893b      	ldrh	r3, [r7, #8]
 801eba6:	4413      	add	r3, r2
 801eba8:	b29b      	uxth	r3, r3
 801ebaa:	3314      	adds	r3, #20
 801ebac:	b29b      	uxth	r3, r3
 801ebae:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ebb2:	4619      	mov	r1, r3
 801ebb4:	2022      	movs	r0, #34	; 0x22
 801ebb6:	f7f8 faf5 	bl	80171a4 <pbuf_alloc>
 801ebba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ebbc:	697b      	ldr	r3, [r7, #20]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d04d      	beq.n	801ec5e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ebc2:	897b      	ldrh	r3, [r7, #10]
 801ebc4:	3313      	adds	r3, #19
 801ebc6:	697a      	ldr	r2, [r7, #20]
 801ebc8:	8952      	ldrh	r2, [r2, #10]
 801ebca:	4293      	cmp	r3, r2
 801ebcc:	db06      	blt.n	801ebdc <tcp_output_alloc_header_common+0x4c>
 801ebce:	4b26      	ldr	r3, [pc, #152]	; (801ec68 <tcp_output_alloc_header_common+0xd8>)
 801ebd0:	f240 7223 	movw	r2, #1827	; 0x723
 801ebd4:	4925      	ldr	r1, [pc, #148]	; (801ec6c <tcp_output_alloc_header_common+0xdc>)
 801ebd6:	4826      	ldr	r0, [pc, #152]	; (801ec70 <tcp_output_alloc_header_common+0xe0>)
 801ebd8:	f001 fcba 	bl	8020550 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ebdc:	697b      	ldr	r3, [r7, #20]
 801ebde:	685b      	ldr	r3, [r3, #4]
 801ebe0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ebe2:	8c3b      	ldrh	r3, [r7, #32]
 801ebe4:	4618      	mov	r0, r3
 801ebe6:	f7f1 ff73 	bl	8010ad0 <lwip_htons>
 801ebea:	4603      	mov	r3, r0
 801ebec:	461a      	mov	r2, r3
 801ebee:	693b      	ldr	r3, [r7, #16]
 801ebf0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ebf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	f7f1 ff6b 	bl	8010ad0 <lwip_htons>
 801ebfa:	4603      	mov	r3, r0
 801ebfc:	461a      	mov	r2, r3
 801ebfe:	693b      	ldr	r3, [r7, #16]
 801ec00:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801ec02:	693b      	ldr	r3, [r7, #16]
 801ec04:	687a      	ldr	r2, [r7, #4]
 801ec06:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801ec08:	68f8      	ldr	r0, [r7, #12]
 801ec0a:	f7f1 ff76 	bl	8010afa <lwip_htonl>
 801ec0e:	4602      	mov	r2, r0
 801ec10:	693b      	ldr	r3, [r7, #16]
 801ec12:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ec14:	897b      	ldrh	r3, [r7, #10]
 801ec16:	089b      	lsrs	r3, r3, #2
 801ec18:	b29b      	uxth	r3, r3
 801ec1a:	3305      	adds	r3, #5
 801ec1c:	b29b      	uxth	r3, r3
 801ec1e:	031b      	lsls	r3, r3, #12
 801ec20:	b29a      	uxth	r2, r3
 801ec22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ec26:	b29b      	uxth	r3, r3
 801ec28:	4313      	orrs	r3, r2
 801ec2a:	b29b      	uxth	r3, r3
 801ec2c:	4618      	mov	r0, r3
 801ec2e:	f7f1 ff4f 	bl	8010ad0 <lwip_htons>
 801ec32:	4603      	mov	r3, r0
 801ec34:	461a      	mov	r2, r3
 801ec36:	693b      	ldr	r3, [r7, #16]
 801ec38:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ec3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ec3c:	4618      	mov	r0, r3
 801ec3e:	f7f1 ff47 	bl	8010ad0 <lwip_htons>
 801ec42:	4603      	mov	r3, r0
 801ec44:	461a      	mov	r2, r3
 801ec46:	693b      	ldr	r3, [r7, #16]
 801ec48:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ec4a:	693b      	ldr	r3, [r7, #16]
 801ec4c:	2200      	movs	r2, #0
 801ec4e:	741a      	strb	r2, [r3, #16]
 801ec50:	2200      	movs	r2, #0
 801ec52:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ec54:	693b      	ldr	r3, [r7, #16]
 801ec56:	2200      	movs	r2, #0
 801ec58:	749a      	strb	r2, [r3, #18]
 801ec5a:	2200      	movs	r2, #0
 801ec5c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ec5e:	697b      	ldr	r3, [r7, #20]
}
 801ec60:	4618      	mov	r0, r3
 801ec62:	3718      	adds	r7, #24
 801ec64:	46bd      	mov	sp, r7
 801ec66:	bd80      	pop	{r7, pc}
 801ec68:	08024970 	.word	0x08024970
 801ec6c:	08025050 	.word	0x08025050
 801ec70:	080249cc 	.word	0x080249cc

0801ec74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ec74:	b5b0      	push	{r4, r5, r7, lr}
 801ec76:	b08a      	sub	sp, #40	; 0x28
 801ec78:	af04      	add	r7, sp, #16
 801ec7a:	60f8      	str	r0, [r7, #12]
 801ec7c:	607b      	str	r3, [r7, #4]
 801ec7e:	460b      	mov	r3, r1
 801ec80:	817b      	strh	r3, [r7, #10]
 801ec82:	4613      	mov	r3, r2
 801ec84:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ec86:	68fb      	ldr	r3, [r7, #12]
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	d106      	bne.n	801ec9a <tcp_output_alloc_header+0x26>
 801ec8c:	4b15      	ldr	r3, [pc, #84]	; (801ece4 <tcp_output_alloc_header+0x70>)
 801ec8e:	f240 7242 	movw	r2, #1858	; 0x742
 801ec92:	4915      	ldr	r1, [pc, #84]	; (801ece8 <tcp_output_alloc_header+0x74>)
 801ec94:	4815      	ldr	r0, [pc, #84]	; (801ecec <tcp_output_alloc_header+0x78>)
 801ec96:	f001 fc5b 	bl	8020550 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ec9a:	68fb      	ldr	r3, [r7, #12]
 801ec9c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ec9e:	68fb      	ldr	r3, [r7, #12]
 801eca0:	8adb      	ldrh	r3, [r3, #22]
 801eca2:	68fa      	ldr	r2, [r7, #12]
 801eca4:	8b12      	ldrh	r2, [r2, #24]
 801eca6:	68f9      	ldr	r1, [r7, #12]
 801eca8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801ecaa:	893d      	ldrh	r5, [r7, #8]
 801ecac:	897c      	ldrh	r4, [r7, #10]
 801ecae:	9103      	str	r1, [sp, #12]
 801ecb0:	2110      	movs	r1, #16
 801ecb2:	9102      	str	r1, [sp, #8]
 801ecb4:	9201      	str	r2, [sp, #4]
 801ecb6:	9300      	str	r3, [sp, #0]
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	462a      	mov	r2, r5
 801ecbc:	4621      	mov	r1, r4
 801ecbe:	f7ff ff67 	bl	801eb90 <tcp_output_alloc_header_common>
 801ecc2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ecc4:	697b      	ldr	r3, [r7, #20]
 801ecc6:	2b00      	cmp	r3, #0
 801ecc8:	d006      	beq.n	801ecd8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ecca:	68fb      	ldr	r3, [r7, #12]
 801eccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecce:	68fa      	ldr	r2, [r7, #12]
 801ecd0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ecd2:	441a      	add	r2, r3
 801ecd4:	68fb      	ldr	r3, [r7, #12]
 801ecd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801ecd8:	697b      	ldr	r3, [r7, #20]
}
 801ecda:	4618      	mov	r0, r3
 801ecdc:	3718      	adds	r7, #24
 801ecde:	46bd      	mov	sp, r7
 801ece0:	bdb0      	pop	{r4, r5, r7, pc}
 801ece2:	bf00      	nop
 801ece4:	08024970 	.word	0x08024970
 801ece8:	08025080 	.word	0x08025080
 801ecec:	080249cc 	.word	0x080249cc

0801ecf0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ecf0:	b580      	push	{r7, lr}
 801ecf2:	b088      	sub	sp, #32
 801ecf4:	af00      	add	r7, sp, #0
 801ecf6:	60f8      	str	r0, [r7, #12]
 801ecf8:	60b9      	str	r1, [r7, #8]
 801ecfa:	4611      	mov	r1, r2
 801ecfc:	461a      	mov	r2, r3
 801ecfe:	460b      	mov	r3, r1
 801ed00:	71fb      	strb	r3, [r7, #7]
 801ed02:	4613      	mov	r3, r2
 801ed04:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ed06:	2300      	movs	r3, #0
 801ed08:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801ed0a:	68bb      	ldr	r3, [r7, #8]
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	d106      	bne.n	801ed1e <tcp_output_fill_options+0x2e>
 801ed10:	4b13      	ldr	r3, [pc, #76]	; (801ed60 <tcp_output_fill_options+0x70>)
 801ed12:	f240 7256 	movw	r2, #1878	; 0x756
 801ed16:	4913      	ldr	r1, [pc, #76]	; (801ed64 <tcp_output_fill_options+0x74>)
 801ed18:	4813      	ldr	r0, [pc, #76]	; (801ed68 <tcp_output_fill_options+0x78>)
 801ed1a:	f001 fc19 	bl	8020550 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801ed1e:	68bb      	ldr	r3, [r7, #8]
 801ed20:	685b      	ldr	r3, [r3, #4]
 801ed22:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801ed24:	69bb      	ldr	r3, [r7, #24]
 801ed26:	3314      	adds	r3, #20
 801ed28:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801ed2a:	69bb      	ldr	r3, [r7, #24]
 801ed2c:	f103 0214 	add.w	r2, r3, #20
 801ed30:	8bfb      	ldrh	r3, [r7, #30]
 801ed32:	009b      	lsls	r3, r3, #2
 801ed34:	4619      	mov	r1, r3
 801ed36:	79fb      	ldrb	r3, [r7, #7]
 801ed38:	009b      	lsls	r3, r3, #2
 801ed3a:	f003 0304 	and.w	r3, r3, #4
 801ed3e:	440b      	add	r3, r1
 801ed40:	4413      	add	r3, r2
 801ed42:	697a      	ldr	r2, [r7, #20]
 801ed44:	429a      	cmp	r2, r3
 801ed46:	d006      	beq.n	801ed56 <tcp_output_fill_options+0x66>
 801ed48:	4b05      	ldr	r3, [pc, #20]	; (801ed60 <tcp_output_fill_options+0x70>)
 801ed4a:	f240 7275 	movw	r2, #1909	; 0x775
 801ed4e:	4907      	ldr	r1, [pc, #28]	; (801ed6c <tcp_output_fill_options+0x7c>)
 801ed50:	4805      	ldr	r0, [pc, #20]	; (801ed68 <tcp_output_fill_options+0x78>)
 801ed52:	f001 fbfd 	bl	8020550 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801ed56:	bf00      	nop
 801ed58:	3720      	adds	r7, #32
 801ed5a:	46bd      	mov	sp, r7
 801ed5c:	bd80      	pop	{r7, pc}
 801ed5e:	bf00      	nop
 801ed60:	08024970 	.word	0x08024970
 801ed64:	080250a8 	.word	0x080250a8
 801ed68:	080249cc 	.word	0x080249cc
 801ed6c:	08024fa0 	.word	0x08024fa0

0801ed70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ed70:	b580      	push	{r7, lr}
 801ed72:	b08a      	sub	sp, #40	; 0x28
 801ed74:	af04      	add	r7, sp, #16
 801ed76:	60f8      	str	r0, [r7, #12]
 801ed78:	60b9      	str	r1, [r7, #8]
 801ed7a:	607a      	str	r2, [r7, #4]
 801ed7c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ed7e:	68bb      	ldr	r3, [r7, #8]
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	d106      	bne.n	801ed92 <tcp_output_control_segment+0x22>
 801ed84:	4b1c      	ldr	r3, [pc, #112]	; (801edf8 <tcp_output_control_segment+0x88>)
 801ed86:	f240 7287 	movw	r2, #1927	; 0x787
 801ed8a:	491c      	ldr	r1, [pc, #112]	; (801edfc <tcp_output_control_segment+0x8c>)
 801ed8c:	481c      	ldr	r0, [pc, #112]	; (801ee00 <tcp_output_control_segment+0x90>)
 801ed8e:	f001 fbdf 	bl	8020550 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ed92:	683a      	ldr	r2, [r7, #0]
 801ed94:	6879      	ldr	r1, [r7, #4]
 801ed96:	68f8      	ldr	r0, [r7, #12]
 801ed98:	f7fe fae8 	bl	801d36c <tcp_route>
 801ed9c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ed9e:	693b      	ldr	r3, [r7, #16]
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	d102      	bne.n	801edaa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801eda4:	23fc      	movs	r3, #252	; 0xfc
 801eda6:	75fb      	strb	r3, [r7, #23]
 801eda8:	e01c      	b.n	801ede4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801edaa:	68fb      	ldr	r3, [r7, #12]
 801edac:	2b00      	cmp	r3, #0
 801edae:	d006      	beq.n	801edbe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	7adb      	ldrb	r3, [r3, #11]
 801edb4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801edb6:	68fb      	ldr	r3, [r7, #12]
 801edb8:	7a9b      	ldrb	r3, [r3, #10]
 801edba:	757b      	strb	r3, [r7, #21]
 801edbc:	e003      	b.n	801edc6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801edbe:	23ff      	movs	r3, #255	; 0xff
 801edc0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801edc2:	2300      	movs	r3, #0
 801edc4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801edc6:	7dba      	ldrb	r2, [r7, #22]
 801edc8:	693b      	ldr	r3, [r7, #16]
 801edca:	9302      	str	r3, [sp, #8]
 801edcc:	2306      	movs	r3, #6
 801edce:	9301      	str	r3, [sp, #4]
 801edd0:	7d7b      	ldrb	r3, [r7, #21]
 801edd2:	9300      	str	r3, [sp, #0]
 801edd4:	4613      	mov	r3, r2
 801edd6:	683a      	ldr	r2, [r7, #0]
 801edd8:	6879      	ldr	r1, [r7, #4]
 801edda:	68b8      	ldr	r0, [r7, #8]
 801eddc:	f7f5 fd22 	bl	8014824 <ip4_output_if>
 801ede0:	4603      	mov	r3, r0
 801ede2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ede4:	68b8      	ldr	r0, [r7, #8]
 801ede6:	f7f8 fcc1 	bl	801776c <pbuf_free>
  return err;
 801edea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801edee:	4618      	mov	r0, r3
 801edf0:	3718      	adds	r7, #24
 801edf2:	46bd      	mov	sp, r7
 801edf4:	bd80      	pop	{r7, pc}
 801edf6:	bf00      	nop
 801edf8:	08024970 	.word	0x08024970
 801edfc:	080250d0 	.word	0x080250d0
 801ee00:	080249cc 	.word	0x080249cc

0801ee04 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ee04:	b590      	push	{r4, r7, lr}
 801ee06:	b08b      	sub	sp, #44	; 0x2c
 801ee08:	af04      	add	r7, sp, #16
 801ee0a:	60f8      	str	r0, [r7, #12]
 801ee0c:	60b9      	str	r1, [r7, #8]
 801ee0e:	607a      	str	r2, [r7, #4]
 801ee10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ee12:	683b      	ldr	r3, [r7, #0]
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	d106      	bne.n	801ee26 <tcp_rst+0x22>
 801ee18:	4b1f      	ldr	r3, [pc, #124]	; (801ee98 <tcp_rst+0x94>)
 801ee1a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801ee1e:	491f      	ldr	r1, [pc, #124]	; (801ee9c <tcp_rst+0x98>)
 801ee20:	481f      	ldr	r0, [pc, #124]	; (801eea0 <tcp_rst+0x9c>)
 801ee22:	f001 fb95 	bl	8020550 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ee26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d106      	bne.n	801ee3a <tcp_rst+0x36>
 801ee2c:	4b1a      	ldr	r3, [pc, #104]	; (801ee98 <tcp_rst+0x94>)
 801ee2e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ee32:	491c      	ldr	r1, [pc, #112]	; (801eea4 <tcp_rst+0xa0>)
 801ee34:	481a      	ldr	r0, [pc, #104]	; (801eea0 <tcp_rst+0x9c>)
 801ee36:	f001 fb8b 	bl	8020550 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ee3a:	2300      	movs	r3, #0
 801ee3c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801ee3e:	f246 0308 	movw	r3, #24584	; 0x6008
 801ee42:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ee44:	7dfb      	ldrb	r3, [r7, #23]
 801ee46:	b29c      	uxth	r4, r3
 801ee48:	68b8      	ldr	r0, [r7, #8]
 801ee4a:	f7f1 fe56 	bl	8010afa <lwip_htonl>
 801ee4e:	4602      	mov	r2, r0
 801ee50:	8abb      	ldrh	r3, [r7, #20]
 801ee52:	9303      	str	r3, [sp, #12]
 801ee54:	2314      	movs	r3, #20
 801ee56:	9302      	str	r3, [sp, #8]
 801ee58:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801ee5a:	9301      	str	r3, [sp, #4]
 801ee5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ee5e:	9300      	str	r3, [sp, #0]
 801ee60:	4613      	mov	r3, r2
 801ee62:	2200      	movs	r2, #0
 801ee64:	4621      	mov	r1, r4
 801ee66:	6878      	ldr	r0, [r7, #4]
 801ee68:	f7ff fe92 	bl	801eb90 <tcp_output_alloc_header_common>
 801ee6c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ee6e:	693b      	ldr	r3, [r7, #16]
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d00c      	beq.n	801ee8e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ee74:	7dfb      	ldrb	r3, [r7, #23]
 801ee76:	2200      	movs	r2, #0
 801ee78:	6939      	ldr	r1, [r7, #16]
 801ee7a:	68f8      	ldr	r0, [r7, #12]
 801ee7c:	f7ff ff38 	bl	801ecf0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee82:	683a      	ldr	r2, [r7, #0]
 801ee84:	6939      	ldr	r1, [r7, #16]
 801ee86:	68f8      	ldr	r0, [r7, #12]
 801ee88:	f7ff ff72 	bl	801ed70 <tcp_output_control_segment>
 801ee8c:	e000      	b.n	801ee90 <tcp_rst+0x8c>
    return;
 801ee8e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ee90:	371c      	adds	r7, #28
 801ee92:	46bd      	mov	sp, r7
 801ee94:	bd90      	pop	{r4, r7, pc}
 801ee96:	bf00      	nop
 801ee98:	08024970 	.word	0x08024970
 801ee9c:	080250fc 	.word	0x080250fc
 801eea0:	080249cc 	.word	0x080249cc
 801eea4:	08025118 	.word	0x08025118

0801eea8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801eea8:	b590      	push	{r4, r7, lr}
 801eeaa:	b087      	sub	sp, #28
 801eeac:	af00      	add	r7, sp, #0
 801eeae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801eeb0:	2300      	movs	r3, #0
 801eeb2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801eeb4:	2300      	movs	r3, #0
 801eeb6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	2b00      	cmp	r3, #0
 801eebc:	d106      	bne.n	801eecc <tcp_send_empty_ack+0x24>
 801eebe:	4b28      	ldr	r3, [pc, #160]	; (801ef60 <tcp_send_empty_ack+0xb8>)
 801eec0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801eec4:	4927      	ldr	r1, [pc, #156]	; (801ef64 <tcp_send_empty_ack+0xbc>)
 801eec6:	4828      	ldr	r0, [pc, #160]	; (801ef68 <tcp_send_empty_ack+0xc0>)
 801eec8:	f001 fb42 	bl	8020550 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801eecc:	7dfb      	ldrb	r3, [r7, #23]
 801eece:	009b      	lsls	r3, r3, #2
 801eed0:	b2db      	uxtb	r3, r3
 801eed2:	f003 0304 	and.w	r3, r3, #4
 801eed6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801eed8:	7d7b      	ldrb	r3, [r7, #21]
 801eeda:	b29c      	uxth	r4, r3
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eee0:	4618      	mov	r0, r3
 801eee2:	f7f1 fe0a 	bl	8010afa <lwip_htonl>
 801eee6:	4603      	mov	r3, r0
 801eee8:	2200      	movs	r2, #0
 801eeea:	4621      	mov	r1, r4
 801eeec:	6878      	ldr	r0, [r7, #4]
 801eeee:	f7ff fec1 	bl	801ec74 <tcp_output_alloc_header>
 801eef2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801eef4:	693b      	ldr	r3, [r7, #16]
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d109      	bne.n	801ef0e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	8b5b      	ldrh	r3, [r3, #26]
 801eefe:	f043 0303 	orr.w	r3, r3, #3
 801ef02:	b29a      	uxth	r2, r3
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801ef08:	f06f 0301 	mvn.w	r3, #1
 801ef0c:	e023      	b.n	801ef56 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801ef0e:	7dbb      	ldrb	r3, [r7, #22]
 801ef10:	7dfa      	ldrb	r2, [r7, #23]
 801ef12:	6939      	ldr	r1, [r7, #16]
 801ef14:	6878      	ldr	r0, [r7, #4]
 801ef16:	f7ff feeb 	bl	801ecf0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ef1a:	687a      	ldr	r2, [r7, #4]
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	3304      	adds	r3, #4
 801ef20:	6939      	ldr	r1, [r7, #16]
 801ef22:	6878      	ldr	r0, [r7, #4]
 801ef24:	f7ff ff24 	bl	801ed70 <tcp_output_control_segment>
 801ef28:	4603      	mov	r3, r0
 801ef2a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801ef2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d007      	beq.n	801ef44 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	8b5b      	ldrh	r3, [r3, #26]
 801ef38:	f043 0303 	orr.w	r3, r3, #3
 801ef3c:	b29a      	uxth	r2, r3
 801ef3e:	687b      	ldr	r3, [r7, #4]
 801ef40:	835a      	strh	r2, [r3, #26]
 801ef42:	e006      	b.n	801ef52 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	8b5b      	ldrh	r3, [r3, #26]
 801ef48:	f023 0303 	bic.w	r3, r3, #3
 801ef4c:	b29a      	uxth	r2, r3
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801ef52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ef56:	4618      	mov	r0, r3
 801ef58:	371c      	adds	r7, #28
 801ef5a:	46bd      	mov	sp, r7
 801ef5c:	bd90      	pop	{r4, r7, pc}
 801ef5e:	bf00      	nop
 801ef60:	08024970 	.word	0x08024970
 801ef64:	08025134 	.word	0x08025134
 801ef68:	080249cc 	.word	0x080249cc

0801ef6c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801ef6c:	b590      	push	{r4, r7, lr}
 801ef6e:	b087      	sub	sp, #28
 801ef70:	af00      	add	r7, sp, #0
 801ef72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ef74:	2300      	movs	r3, #0
 801ef76:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d106      	bne.n	801ef8c <tcp_keepalive+0x20>
 801ef7e:	4b18      	ldr	r3, [pc, #96]	; (801efe0 <tcp_keepalive+0x74>)
 801ef80:	f640 0224 	movw	r2, #2084	; 0x824
 801ef84:	4917      	ldr	r1, [pc, #92]	; (801efe4 <tcp_keepalive+0x78>)
 801ef86:	4818      	ldr	r0, [pc, #96]	; (801efe8 <tcp_keepalive+0x7c>)
 801ef88:	f001 fae2 	bl	8020550 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801ef8c:	7dfb      	ldrb	r3, [r7, #23]
 801ef8e:	b29c      	uxth	r4, r3
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef94:	3b01      	subs	r3, #1
 801ef96:	4618      	mov	r0, r3
 801ef98:	f7f1 fdaf 	bl	8010afa <lwip_htonl>
 801ef9c:	4603      	mov	r3, r0
 801ef9e:	2200      	movs	r2, #0
 801efa0:	4621      	mov	r1, r4
 801efa2:	6878      	ldr	r0, [r7, #4]
 801efa4:	f7ff fe66 	bl	801ec74 <tcp_output_alloc_header>
 801efa8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801efaa:	693b      	ldr	r3, [r7, #16]
 801efac:	2b00      	cmp	r3, #0
 801efae:	d102      	bne.n	801efb6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801efb0:	f04f 33ff 	mov.w	r3, #4294967295
 801efb4:	e010      	b.n	801efd8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801efb6:	7dfb      	ldrb	r3, [r7, #23]
 801efb8:	2200      	movs	r2, #0
 801efba:	6939      	ldr	r1, [r7, #16]
 801efbc:	6878      	ldr	r0, [r7, #4]
 801efbe:	f7ff fe97 	bl	801ecf0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801efc2:	687a      	ldr	r2, [r7, #4]
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	3304      	adds	r3, #4
 801efc8:	6939      	ldr	r1, [r7, #16]
 801efca:	6878      	ldr	r0, [r7, #4]
 801efcc:	f7ff fed0 	bl	801ed70 <tcp_output_control_segment>
 801efd0:	4603      	mov	r3, r0
 801efd2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801efd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801efd8:	4618      	mov	r0, r3
 801efda:	371c      	adds	r7, #28
 801efdc:	46bd      	mov	sp, r7
 801efde:	bd90      	pop	{r4, r7, pc}
 801efe0:	08024970 	.word	0x08024970
 801efe4:	08025154 	.word	0x08025154
 801efe8:	080249cc 	.word	0x080249cc

0801efec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801efec:	b590      	push	{r4, r7, lr}
 801efee:	b08b      	sub	sp, #44	; 0x2c
 801eff0:	af00      	add	r7, sp, #0
 801eff2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801eff4:	2300      	movs	r3, #0
 801eff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	2b00      	cmp	r3, #0
 801effe:	d106      	bne.n	801f00e <tcp_zero_window_probe+0x22>
 801f000:	4b4c      	ldr	r3, [pc, #304]	; (801f134 <tcp_zero_window_probe+0x148>)
 801f002:	f640 024f 	movw	r2, #2127	; 0x84f
 801f006:	494c      	ldr	r1, [pc, #304]	; (801f138 <tcp_zero_window_probe+0x14c>)
 801f008:	484c      	ldr	r0, [pc, #304]	; (801f13c <tcp_zero_window_probe+0x150>)
 801f00a:	f001 faa1 	bl	8020550 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f012:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801f014:	6a3b      	ldr	r3, [r7, #32]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d101      	bne.n	801f01e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801f01a:	2300      	movs	r3, #0
 801f01c:	e086      	b.n	801f12c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f024:	2bff      	cmp	r3, #255	; 0xff
 801f026:	d007      	beq.n	801f038 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f02e:	3301      	adds	r3, #1
 801f030:	b2da      	uxtb	r2, r3
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f038:	6a3b      	ldr	r3, [r7, #32]
 801f03a:	68db      	ldr	r3, [r3, #12]
 801f03c:	899b      	ldrh	r3, [r3, #12]
 801f03e:	b29b      	uxth	r3, r3
 801f040:	4618      	mov	r0, r3
 801f042:	f7f1 fd45 	bl	8010ad0 <lwip_htons>
 801f046:	4603      	mov	r3, r0
 801f048:	b2db      	uxtb	r3, r3
 801f04a:	f003 0301 	and.w	r3, r3, #1
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d005      	beq.n	801f05e <tcp_zero_window_probe+0x72>
 801f052:	6a3b      	ldr	r3, [r7, #32]
 801f054:	891b      	ldrh	r3, [r3, #8]
 801f056:	2b00      	cmp	r3, #0
 801f058:	d101      	bne.n	801f05e <tcp_zero_window_probe+0x72>
 801f05a:	2301      	movs	r3, #1
 801f05c:	e000      	b.n	801f060 <tcp_zero_window_probe+0x74>
 801f05e:	2300      	movs	r3, #0
 801f060:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801f062:	7ffb      	ldrb	r3, [r7, #31]
 801f064:	2b00      	cmp	r3, #0
 801f066:	bf0c      	ite	eq
 801f068:	2301      	moveq	r3, #1
 801f06a:	2300      	movne	r3, #0
 801f06c:	b2db      	uxtb	r3, r3
 801f06e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f074:	b299      	uxth	r1, r3
 801f076:	6a3b      	ldr	r3, [r7, #32]
 801f078:	68db      	ldr	r3, [r3, #12]
 801f07a:	685b      	ldr	r3, [r3, #4]
 801f07c:	8bba      	ldrh	r2, [r7, #28]
 801f07e:	6878      	ldr	r0, [r7, #4]
 801f080:	f7ff fdf8 	bl	801ec74 <tcp_output_alloc_header>
 801f084:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801f086:	69bb      	ldr	r3, [r7, #24]
 801f088:	2b00      	cmp	r3, #0
 801f08a:	d102      	bne.n	801f092 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801f08c:	f04f 33ff 	mov.w	r3, #4294967295
 801f090:	e04c      	b.n	801f12c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f092:	69bb      	ldr	r3, [r7, #24]
 801f094:	685b      	ldr	r3, [r3, #4]
 801f096:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801f098:	7ffb      	ldrb	r3, [r7, #31]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d011      	beq.n	801f0c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f09e:	697b      	ldr	r3, [r7, #20]
 801f0a0:	899b      	ldrh	r3, [r3, #12]
 801f0a2:	b29b      	uxth	r3, r3
 801f0a4:	b21b      	sxth	r3, r3
 801f0a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f0aa:	b21c      	sxth	r4, r3
 801f0ac:	2011      	movs	r0, #17
 801f0ae:	f7f1 fd0f 	bl	8010ad0 <lwip_htons>
 801f0b2:	4603      	mov	r3, r0
 801f0b4:	b21b      	sxth	r3, r3
 801f0b6:	4323      	orrs	r3, r4
 801f0b8:	b21b      	sxth	r3, r3
 801f0ba:	b29a      	uxth	r2, r3
 801f0bc:	697b      	ldr	r3, [r7, #20]
 801f0be:	819a      	strh	r2, [r3, #12]
 801f0c0:	e010      	b.n	801f0e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801f0c2:	69bb      	ldr	r3, [r7, #24]
 801f0c4:	685b      	ldr	r3, [r3, #4]
 801f0c6:	3314      	adds	r3, #20
 801f0c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f0ca:	6a3b      	ldr	r3, [r7, #32]
 801f0cc:	6858      	ldr	r0, [r3, #4]
 801f0ce:	6a3b      	ldr	r3, [r7, #32]
 801f0d0:	685b      	ldr	r3, [r3, #4]
 801f0d2:	891a      	ldrh	r2, [r3, #8]
 801f0d4:	6a3b      	ldr	r3, [r7, #32]
 801f0d6:	891b      	ldrh	r3, [r3, #8]
 801f0d8:	1ad3      	subs	r3, r2, r3
 801f0da:	b29b      	uxth	r3, r3
 801f0dc:	2201      	movs	r2, #1
 801f0de:	6939      	ldr	r1, [r7, #16]
 801f0e0:	f7f8 fd4a 	bl	8017b78 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f0e4:	6a3b      	ldr	r3, [r7, #32]
 801f0e6:	68db      	ldr	r3, [r3, #12]
 801f0e8:	685b      	ldr	r3, [r3, #4]
 801f0ea:	4618      	mov	r0, r3
 801f0ec:	f7f1 fd05 	bl	8010afa <lwip_htonl>
 801f0f0:	4603      	mov	r3, r0
 801f0f2:	3301      	adds	r3, #1
 801f0f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f0fa:	68fb      	ldr	r3, [r7, #12]
 801f0fc:	1ad3      	subs	r3, r2, r3
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	da02      	bge.n	801f108 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	68fa      	ldr	r2, [r7, #12]
 801f106:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f10c:	2200      	movs	r2, #0
 801f10e:	69b9      	ldr	r1, [r7, #24]
 801f110:	6878      	ldr	r0, [r7, #4]
 801f112:	f7ff fded 	bl	801ecf0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f116:	687a      	ldr	r2, [r7, #4]
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	3304      	adds	r3, #4
 801f11c:	69b9      	ldr	r1, [r7, #24]
 801f11e:	6878      	ldr	r0, [r7, #4]
 801f120:	f7ff fe26 	bl	801ed70 <tcp_output_control_segment>
 801f124:	4603      	mov	r3, r0
 801f126:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f128:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801f12c:	4618      	mov	r0, r3
 801f12e:	372c      	adds	r7, #44	; 0x2c
 801f130:	46bd      	mov	sp, r7
 801f132:	bd90      	pop	{r4, r7, pc}
 801f134:	08024970 	.word	0x08024970
 801f138:	08025170 	.word	0x08025170
 801f13c:	080249cc 	.word	0x080249cc

0801f140 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801f140:	b580      	push	{r7, lr}
 801f142:	b084      	sub	sp, #16
 801f144:	af00      	add	r7, sp, #0
 801f146:	6078      	str	r0, [r7, #4]
 801f148:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801f14a:	f000 fb17 	bl	801f77c <sys_timeouts_sleeptime>
 801f14e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801f150:	68fb      	ldr	r3, [r7, #12]
 801f152:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f156:	d10b      	bne.n	801f170 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801f158:	4813      	ldr	r0, [pc, #76]	; (801f1a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801f15a:	f7f9 fe1a 	bl	8018d92 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801f15e:	2200      	movs	r2, #0
 801f160:	6839      	ldr	r1, [r7, #0]
 801f162:	6878      	ldr	r0, [r7, #4]
 801f164:	f7f9 fcf0 	bl	8018b48 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801f168:	480f      	ldr	r0, [pc, #60]	; (801f1a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801f16a:	f7f9 fe03 	bl	8018d74 <sys_mutex_lock>
    return;
 801f16e:	e018      	b.n	801f1a2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801f170:	68fb      	ldr	r3, [r7, #12]
 801f172:	2b00      	cmp	r3, #0
 801f174:	d102      	bne.n	801f17c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801f176:	f000 fac7 	bl	801f708 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801f17a:	e7e6      	b.n	801f14a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801f17c:	480a      	ldr	r0, [pc, #40]	; (801f1a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801f17e:	f7f9 fe08 	bl	8018d92 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801f182:	68fa      	ldr	r2, [r7, #12]
 801f184:	6839      	ldr	r1, [r7, #0]
 801f186:	6878      	ldr	r0, [r7, #4]
 801f188:	f7f9 fcde 	bl	8018b48 <sys_arch_mbox_fetch>
 801f18c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801f18e:	4806      	ldr	r0, [pc, #24]	; (801f1a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801f190:	f7f9 fdf0 	bl	8018d74 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801f194:	68bb      	ldr	r3, [r7, #8]
 801f196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f19a:	d102      	bne.n	801f1a2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801f19c:	f000 fab4 	bl	801f708 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801f1a0:	e7d3      	b.n	801f14a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801f1a2:	3710      	adds	r7, #16
 801f1a4:	46bd      	mov	sp, r7
 801f1a6:	bd80      	pop	{r7, pc}
 801f1a8:	2400d42c 	.word	0x2400d42c

0801f1ac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801f1ac:	b580      	push	{r7, lr}
 801f1ae:	b084      	sub	sp, #16
 801f1b0:	af00      	add	r7, sp, #0
 801f1b2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801f1b4:	4810      	ldr	r0, [pc, #64]	; (801f1f8 <tcpip_thread+0x4c>)
 801f1b6:	f7f9 fddd 	bl	8018d74 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801f1ba:	4b10      	ldr	r3, [pc, #64]	; (801f1fc <tcpip_thread+0x50>)
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d005      	beq.n	801f1ce <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801f1c2:	4b0e      	ldr	r3, [pc, #56]	; (801f1fc <tcpip_thread+0x50>)
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	4a0e      	ldr	r2, [pc, #56]	; (801f200 <tcpip_thread+0x54>)
 801f1c8:	6812      	ldr	r2, [r2, #0]
 801f1ca:	4610      	mov	r0, r2
 801f1cc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801f1ce:	f107 030c 	add.w	r3, r7, #12
 801f1d2:	4619      	mov	r1, r3
 801f1d4:	480b      	ldr	r0, [pc, #44]	; (801f204 <tcpip_thread+0x58>)
 801f1d6:	f7ff ffb3 	bl	801f140 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801f1da:	68fb      	ldr	r3, [r7, #12]
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d106      	bne.n	801f1ee <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801f1e0:	4b09      	ldr	r3, [pc, #36]	; (801f208 <tcpip_thread+0x5c>)
 801f1e2:	2291      	movs	r2, #145	; 0x91
 801f1e4:	4909      	ldr	r1, [pc, #36]	; (801f20c <tcpip_thread+0x60>)
 801f1e6:	480a      	ldr	r0, [pc, #40]	; (801f210 <tcpip_thread+0x64>)
 801f1e8:	f001 f9b2 	bl	8020550 <iprintf>
      continue;
 801f1ec:	e003      	b.n	801f1f6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801f1ee:	68fb      	ldr	r3, [r7, #12]
 801f1f0:	4618      	mov	r0, r3
 801f1f2:	f000 f80f 	bl	801f214 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801f1f6:	e7ea      	b.n	801f1ce <tcpip_thread+0x22>
 801f1f8:	2400d42c 	.word	0x2400d42c
 801f1fc:	2400d420 	.word	0x2400d420
 801f200:	2400d424 	.word	0x2400d424
 801f204:	2400d428 	.word	0x2400d428
 801f208:	08025194 	.word	0x08025194
 801f20c:	080251cc 	.word	0x080251cc
 801f210:	080251ec 	.word	0x080251ec

0801f214 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801f214:	b580      	push	{r7, lr}
 801f216:	b082      	sub	sp, #8
 801f218:	af00      	add	r7, sp, #0
 801f21a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	781b      	ldrb	r3, [r3, #0]
 801f220:	2b02      	cmp	r3, #2
 801f222:	d026      	beq.n	801f272 <tcpip_thread_handle_msg+0x5e>
 801f224:	2b02      	cmp	r3, #2
 801f226:	dc2b      	bgt.n	801f280 <tcpip_thread_handle_msg+0x6c>
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d002      	beq.n	801f232 <tcpip_thread_handle_msg+0x1e>
 801f22c:	2b01      	cmp	r3, #1
 801f22e:	d015      	beq.n	801f25c <tcpip_thread_handle_msg+0x48>
 801f230:	e026      	b.n	801f280 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	68db      	ldr	r3, [r3, #12]
 801f236:	687a      	ldr	r2, [r7, #4]
 801f238:	6850      	ldr	r0, [r2, #4]
 801f23a:	687a      	ldr	r2, [r7, #4]
 801f23c:	6892      	ldr	r2, [r2, #8]
 801f23e:	4611      	mov	r1, r2
 801f240:	4798      	blx	r3
 801f242:	4603      	mov	r3, r0
 801f244:	2b00      	cmp	r3, #0
 801f246:	d004      	beq.n	801f252 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	685b      	ldr	r3, [r3, #4]
 801f24c:	4618      	mov	r0, r3
 801f24e:	f7f8 fa8d 	bl	801776c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801f252:	6879      	ldr	r1, [r7, #4]
 801f254:	2009      	movs	r0, #9
 801f256:	f7f7 f91d 	bl	8016494 <memp_free>
      break;
 801f25a:	e018      	b.n	801f28e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	685b      	ldr	r3, [r3, #4]
 801f260:	687a      	ldr	r2, [r7, #4]
 801f262:	6892      	ldr	r2, [r2, #8]
 801f264:	4610      	mov	r0, r2
 801f266:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801f268:	6879      	ldr	r1, [r7, #4]
 801f26a:	2008      	movs	r0, #8
 801f26c:	f7f7 f912 	bl	8016494 <memp_free>
      break;
 801f270:	e00d      	b.n	801f28e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	685b      	ldr	r3, [r3, #4]
 801f276:	687a      	ldr	r2, [r7, #4]
 801f278:	6892      	ldr	r2, [r2, #8]
 801f27a:	4610      	mov	r0, r2
 801f27c:	4798      	blx	r3
      break;
 801f27e:	e006      	b.n	801f28e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801f280:	4b05      	ldr	r3, [pc, #20]	; (801f298 <tcpip_thread_handle_msg+0x84>)
 801f282:	22cf      	movs	r2, #207	; 0xcf
 801f284:	4905      	ldr	r1, [pc, #20]	; (801f29c <tcpip_thread_handle_msg+0x88>)
 801f286:	4806      	ldr	r0, [pc, #24]	; (801f2a0 <tcpip_thread_handle_msg+0x8c>)
 801f288:	f001 f962 	bl	8020550 <iprintf>
      break;
 801f28c:	bf00      	nop
  }
}
 801f28e:	bf00      	nop
 801f290:	3708      	adds	r7, #8
 801f292:	46bd      	mov	sp, r7
 801f294:	bd80      	pop	{r7, pc}
 801f296:	bf00      	nop
 801f298:	08025194 	.word	0x08025194
 801f29c:	080251cc 	.word	0x080251cc
 801f2a0:	080251ec 	.word	0x080251ec

0801f2a4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801f2a4:	b580      	push	{r7, lr}
 801f2a6:	b086      	sub	sp, #24
 801f2a8:	af00      	add	r7, sp, #0
 801f2aa:	60f8      	str	r0, [r7, #12]
 801f2ac:	60b9      	str	r1, [r7, #8]
 801f2ae:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801f2b0:	481a      	ldr	r0, [pc, #104]	; (801f31c <tcpip_inpkt+0x78>)
 801f2b2:	f7f9 fc91 	bl	8018bd8 <sys_mbox_valid>
 801f2b6:	4603      	mov	r3, r0
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d105      	bne.n	801f2c8 <tcpip_inpkt+0x24>
 801f2bc:	4b18      	ldr	r3, [pc, #96]	; (801f320 <tcpip_inpkt+0x7c>)
 801f2be:	22fc      	movs	r2, #252	; 0xfc
 801f2c0:	4918      	ldr	r1, [pc, #96]	; (801f324 <tcpip_inpkt+0x80>)
 801f2c2:	4819      	ldr	r0, [pc, #100]	; (801f328 <tcpip_inpkt+0x84>)
 801f2c4:	f001 f944 	bl	8020550 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801f2c8:	2009      	movs	r0, #9
 801f2ca:	f7f7 f86d 	bl	80163a8 <memp_malloc>
 801f2ce:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801f2d0:	697b      	ldr	r3, [r7, #20]
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d102      	bne.n	801f2dc <tcpip_inpkt+0x38>
    return ERR_MEM;
 801f2d6:	f04f 33ff 	mov.w	r3, #4294967295
 801f2da:	e01a      	b.n	801f312 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801f2dc:	697b      	ldr	r3, [r7, #20]
 801f2de:	2200      	movs	r2, #0
 801f2e0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801f2e2:	697b      	ldr	r3, [r7, #20]
 801f2e4:	68fa      	ldr	r2, [r7, #12]
 801f2e6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801f2e8:	697b      	ldr	r3, [r7, #20]
 801f2ea:	68ba      	ldr	r2, [r7, #8]
 801f2ec:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801f2ee:	697b      	ldr	r3, [r7, #20]
 801f2f0:	687a      	ldr	r2, [r7, #4]
 801f2f2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801f2f4:	6979      	ldr	r1, [r7, #20]
 801f2f6:	4809      	ldr	r0, [pc, #36]	; (801f31c <tcpip_inpkt+0x78>)
 801f2f8:	f7f9 fc0c 	bl	8018b14 <sys_mbox_trypost>
 801f2fc:	4603      	mov	r3, r0
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	d006      	beq.n	801f310 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801f302:	6979      	ldr	r1, [r7, #20]
 801f304:	2009      	movs	r0, #9
 801f306:	f7f7 f8c5 	bl	8016494 <memp_free>
    return ERR_MEM;
 801f30a:	f04f 33ff 	mov.w	r3, #4294967295
 801f30e:	e000      	b.n	801f312 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801f310:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801f312:	4618      	mov	r0, r3
 801f314:	3718      	adds	r7, #24
 801f316:	46bd      	mov	sp, r7
 801f318:	bd80      	pop	{r7, pc}
 801f31a:	bf00      	nop
 801f31c:	2400d428 	.word	0x2400d428
 801f320:	08025194 	.word	0x08025194
 801f324:	08025214 	.word	0x08025214
 801f328:	080251ec 	.word	0x080251ec

0801f32c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801f32c:	b580      	push	{r7, lr}
 801f32e:	b082      	sub	sp, #8
 801f330:	af00      	add	r7, sp, #0
 801f332:	6078      	str	r0, [r7, #4]
 801f334:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801f336:	683b      	ldr	r3, [r7, #0]
 801f338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f33c:	f003 0318 	and.w	r3, r3, #24
 801f340:	2b00      	cmp	r3, #0
 801f342:	d006      	beq.n	801f352 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801f344:	4a08      	ldr	r2, [pc, #32]	; (801f368 <tcpip_input+0x3c>)
 801f346:	6839      	ldr	r1, [r7, #0]
 801f348:	6878      	ldr	r0, [r7, #4]
 801f34a:	f7ff ffab 	bl	801f2a4 <tcpip_inpkt>
 801f34e:	4603      	mov	r3, r0
 801f350:	e005      	b.n	801f35e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801f352:	4a06      	ldr	r2, [pc, #24]	; (801f36c <tcpip_input+0x40>)
 801f354:	6839      	ldr	r1, [r7, #0]
 801f356:	6878      	ldr	r0, [r7, #4]
 801f358:	f7ff ffa4 	bl	801f2a4 <tcpip_inpkt>
 801f35c:	4603      	mov	r3, r0
}
 801f35e:	4618      	mov	r0, r3
 801f360:	3708      	adds	r7, #8
 801f362:	46bd      	mov	sp, r7
 801f364:	bd80      	pop	{r7, pc}
 801f366:	bf00      	nop
 801f368:	08013dad 	.word	0x08013dad
 801f36c:	080145a1 	.word	0x080145a1

0801f370 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801f370:	b580      	push	{r7, lr}
 801f372:	b084      	sub	sp, #16
 801f374:	af00      	add	r7, sp, #0
 801f376:	6078      	str	r0, [r7, #4]
 801f378:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801f37a:	4819      	ldr	r0, [pc, #100]	; (801f3e0 <tcpip_try_callback+0x70>)
 801f37c:	f7f9 fc2c 	bl	8018bd8 <sys_mbox_valid>
 801f380:	4603      	mov	r3, r0
 801f382:	2b00      	cmp	r3, #0
 801f384:	d106      	bne.n	801f394 <tcpip_try_callback+0x24>
 801f386:	4b17      	ldr	r3, [pc, #92]	; (801f3e4 <tcpip_try_callback+0x74>)
 801f388:	f240 125d 	movw	r2, #349	; 0x15d
 801f38c:	4916      	ldr	r1, [pc, #88]	; (801f3e8 <tcpip_try_callback+0x78>)
 801f38e:	4817      	ldr	r0, [pc, #92]	; (801f3ec <tcpip_try_callback+0x7c>)
 801f390:	f001 f8de 	bl	8020550 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801f394:	2008      	movs	r0, #8
 801f396:	f7f7 f807 	bl	80163a8 <memp_malloc>
 801f39a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801f39c:	68fb      	ldr	r3, [r7, #12]
 801f39e:	2b00      	cmp	r3, #0
 801f3a0:	d102      	bne.n	801f3a8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801f3a2:	f04f 33ff 	mov.w	r3, #4294967295
 801f3a6:	e017      	b.n	801f3d8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	2201      	movs	r2, #1
 801f3ac:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801f3ae:	68fb      	ldr	r3, [r7, #12]
 801f3b0:	687a      	ldr	r2, [r7, #4]
 801f3b2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801f3b4:	68fb      	ldr	r3, [r7, #12]
 801f3b6:	683a      	ldr	r2, [r7, #0]
 801f3b8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801f3ba:	68f9      	ldr	r1, [r7, #12]
 801f3bc:	4808      	ldr	r0, [pc, #32]	; (801f3e0 <tcpip_try_callback+0x70>)
 801f3be:	f7f9 fba9 	bl	8018b14 <sys_mbox_trypost>
 801f3c2:	4603      	mov	r3, r0
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d006      	beq.n	801f3d6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801f3c8:	68f9      	ldr	r1, [r7, #12]
 801f3ca:	2008      	movs	r0, #8
 801f3cc:	f7f7 f862 	bl	8016494 <memp_free>
    return ERR_MEM;
 801f3d0:	f04f 33ff 	mov.w	r3, #4294967295
 801f3d4:	e000      	b.n	801f3d8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801f3d6:	2300      	movs	r3, #0
}
 801f3d8:	4618      	mov	r0, r3
 801f3da:	3710      	adds	r7, #16
 801f3dc:	46bd      	mov	sp, r7
 801f3de:	bd80      	pop	{r7, pc}
 801f3e0:	2400d428 	.word	0x2400d428
 801f3e4:	08025194 	.word	0x08025194
 801f3e8:	08025214 	.word	0x08025214
 801f3ec:	080251ec 	.word	0x080251ec

0801f3f0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801f3f0:	b580      	push	{r7, lr}
 801f3f2:	b084      	sub	sp, #16
 801f3f4:	af00      	add	r7, sp, #0
 801f3f6:	60f8      	str	r0, [r7, #12]
 801f3f8:	60b9      	str	r1, [r7, #8]
 801f3fa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801f3fc:	4806      	ldr	r0, [pc, #24]	; (801f418 <tcpip_send_msg_wait_sem+0x28>)
 801f3fe:	f7f9 fcb9 	bl	8018d74 <sys_mutex_lock>
  fn(apimsg);
 801f402:	68fb      	ldr	r3, [r7, #12]
 801f404:	68b8      	ldr	r0, [r7, #8]
 801f406:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801f408:	4803      	ldr	r0, [pc, #12]	; (801f418 <tcpip_send_msg_wait_sem+0x28>)
 801f40a:	f7f9 fcc2 	bl	8018d92 <sys_mutex_unlock>
  return ERR_OK;
 801f40e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801f410:	4618      	mov	r0, r3
 801f412:	3710      	adds	r7, #16
 801f414:	46bd      	mov	sp, r7
 801f416:	bd80      	pop	{r7, pc}
 801f418:	2400d42c 	.word	0x2400d42c

0801f41c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801f41c:	b580      	push	{r7, lr}
 801f41e:	b084      	sub	sp, #16
 801f420:	af02      	add	r7, sp, #8
 801f422:	6078      	str	r0, [r7, #4]
 801f424:	6039      	str	r1, [r7, #0]
  lwip_init();
 801f426:	f7f5 f807 	bl	8014438 <lwip_init>

  tcpip_init_done = initfunc;
 801f42a:	4a17      	ldr	r2, [pc, #92]	; (801f488 <tcpip_init+0x6c>)
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801f430:	4a16      	ldr	r2, [pc, #88]	; (801f48c <tcpip_init+0x70>)
 801f432:	683b      	ldr	r3, [r7, #0]
 801f434:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801f436:	2106      	movs	r1, #6
 801f438:	4815      	ldr	r0, [pc, #84]	; (801f490 <tcpip_init+0x74>)
 801f43a:	f7f9 fb3f 	bl	8018abc <sys_mbox_new>
 801f43e:	4603      	mov	r3, r0
 801f440:	2b00      	cmp	r3, #0
 801f442:	d006      	beq.n	801f452 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801f444:	4b13      	ldr	r3, [pc, #76]	; (801f494 <tcpip_init+0x78>)
 801f446:	f240 2261 	movw	r2, #609	; 0x261
 801f44a:	4913      	ldr	r1, [pc, #76]	; (801f498 <tcpip_init+0x7c>)
 801f44c:	4813      	ldr	r0, [pc, #76]	; (801f49c <tcpip_init+0x80>)
 801f44e:	f001 f87f 	bl	8020550 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801f452:	4813      	ldr	r0, [pc, #76]	; (801f4a0 <tcpip_init+0x84>)
 801f454:	f7f9 fc78 	bl	8018d48 <sys_mutex_new>
 801f458:	4603      	mov	r3, r0
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	d006      	beq.n	801f46c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801f45e:	4b0d      	ldr	r3, [pc, #52]	; (801f494 <tcpip_init+0x78>)
 801f460:	f240 2265 	movw	r2, #613	; 0x265
 801f464:	490f      	ldr	r1, [pc, #60]	; (801f4a4 <tcpip_init+0x88>)
 801f466:	480d      	ldr	r0, [pc, #52]	; (801f49c <tcpip_init+0x80>)
 801f468:	f001 f872 	bl	8020550 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801f46c:	2308      	movs	r3, #8
 801f46e:	9300      	str	r3, [sp, #0]
 801f470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f474:	2200      	movs	r2, #0
 801f476:	490c      	ldr	r1, [pc, #48]	; (801f4a8 <tcpip_init+0x8c>)
 801f478:	480c      	ldr	r0, [pc, #48]	; (801f4ac <tcpip_init+0x90>)
 801f47a:	f7f9 fc97 	bl	8018dac <sys_thread_new>
}
 801f47e:	bf00      	nop
 801f480:	3708      	adds	r7, #8
 801f482:	46bd      	mov	sp, r7
 801f484:	bd80      	pop	{r7, pc}
 801f486:	bf00      	nop
 801f488:	2400d420 	.word	0x2400d420
 801f48c:	2400d424 	.word	0x2400d424
 801f490:	2400d428 	.word	0x2400d428
 801f494:	08025194 	.word	0x08025194
 801f498:	08025224 	.word	0x08025224
 801f49c:	080251ec 	.word	0x080251ec
 801f4a0:	2400d42c 	.word	0x2400d42c
 801f4a4:	08025248 	.word	0x08025248
 801f4a8:	0801f1ad 	.word	0x0801f1ad
 801f4ac:	0802526c 	.word	0x0802526c

0801f4b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f4b0:	b580      	push	{r7, lr}
 801f4b2:	b082      	sub	sp, #8
 801f4b4:	af00      	add	r7, sp, #0
 801f4b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f4b8:	f7f9 fd00 	bl	8018ebc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f4bc:	4b0a      	ldr	r3, [pc, #40]	; (801f4e8 <tcpip_tcp_timer+0x38>)
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	d103      	bne.n	801f4cc <tcpip_tcp_timer+0x1c>
 801f4c4:	4b09      	ldr	r3, [pc, #36]	; (801f4ec <tcpip_tcp_timer+0x3c>)
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	d005      	beq.n	801f4d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f4cc:	2200      	movs	r2, #0
 801f4ce:	4908      	ldr	r1, [pc, #32]	; (801f4f0 <tcpip_tcp_timer+0x40>)
 801f4d0:	20fa      	movs	r0, #250	; 0xfa
 801f4d2:	f000 f8f3 	bl	801f6bc <sys_timeout>
 801f4d6:	e003      	b.n	801f4e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f4d8:	4b06      	ldr	r3, [pc, #24]	; (801f4f4 <tcpip_tcp_timer+0x44>)
 801f4da:	2200      	movs	r2, #0
 801f4dc:	601a      	str	r2, [r3, #0]
  }
}
 801f4de:	bf00      	nop
 801f4e0:	bf00      	nop
 801f4e2:	3708      	adds	r7, #8
 801f4e4:	46bd      	mov	sp, r7
 801f4e6:	bd80      	pop	{r7, pc}
 801f4e8:	2400d3dc 	.word	0x2400d3dc
 801f4ec:	2400d3e0 	.word	0x2400d3e0
 801f4f0:	0801f4b1 	.word	0x0801f4b1
 801f4f4:	2400d438 	.word	0x2400d438

0801f4f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f4f8:	b580      	push	{r7, lr}
 801f4fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f4fc:	4b0a      	ldr	r3, [pc, #40]	; (801f528 <tcp_timer_needed+0x30>)
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	2b00      	cmp	r3, #0
 801f502:	d10f      	bne.n	801f524 <tcp_timer_needed+0x2c>
 801f504:	4b09      	ldr	r3, [pc, #36]	; (801f52c <tcp_timer_needed+0x34>)
 801f506:	681b      	ldr	r3, [r3, #0]
 801f508:	2b00      	cmp	r3, #0
 801f50a:	d103      	bne.n	801f514 <tcp_timer_needed+0x1c>
 801f50c:	4b08      	ldr	r3, [pc, #32]	; (801f530 <tcp_timer_needed+0x38>)
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	2b00      	cmp	r3, #0
 801f512:	d007      	beq.n	801f524 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f514:	4b04      	ldr	r3, [pc, #16]	; (801f528 <tcp_timer_needed+0x30>)
 801f516:	2201      	movs	r2, #1
 801f518:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f51a:	2200      	movs	r2, #0
 801f51c:	4905      	ldr	r1, [pc, #20]	; (801f534 <tcp_timer_needed+0x3c>)
 801f51e:	20fa      	movs	r0, #250	; 0xfa
 801f520:	f000 f8cc 	bl	801f6bc <sys_timeout>
  }
}
 801f524:	bf00      	nop
 801f526:	bd80      	pop	{r7, pc}
 801f528:	2400d438 	.word	0x2400d438
 801f52c:	2400d3dc 	.word	0x2400d3dc
 801f530:	2400d3e0 	.word	0x2400d3e0
 801f534:	0801f4b1 	.word	0x0801f4b1

0801f538 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f538:	b580      	push	{r7, lr}
 801f53a:	b086      	sub	sp, #24
 801f53c:	af00      	add	r7, sp, #0
 801f53e:	60f8      	str	r0, [r7, #12]
 801f540:	60b9      	str	r1, [r7, #8]
 801f542:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f544:	200a      	movs	r0, #10
 801f546:	f7f6 ff2f 	bl	80163a8 <memp_malloc>
 801f54a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f54c:	693b      	ldr	r3, [r7, #16]
 801f54e:	2b00      	cmp	r3, #0
 801f550:	d109      	bne.n	801f566 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f552:	693b      	ldr	r3, [r7, #16]
 801f554:	2b00      	cmp	r3, #0
 801f556:	d151      	bne.n	801f5fc <sys_timeout_abs+0xc4>
 801f558:	4b2a      	ldr	r3, [pc, #168]	; (801f604 <sys_timeout_abs+0xcc>)
 801f55a:	22be      	movs	r2, #190	; 0xbe
 801f55c:	492a      	ldr	r1, [pc, #168]	; (801f608 <sys_timeout_abs+0xd0>)
 801f55e:	482b      	ldr	r0, [pc, #172]	; (801f60c <sys_timeout_abs+0xd4>)
 801f560:	f000 fff6 	bl	8020550 <iprintf>
    return;
 801f564:	e04a      	b.n	801f5fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f566:	693b      	ldr	r3, [r7, #16]
 801f568:	2200      	movs	r2, #0
 801f56a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f56c:	693b      	ldr	r3, [r7, #16]
 801f56e:	68ba      	ldr	r2, [r7, #8]
 801f570:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f572:	693b      	ldr	r3, [r7, #16]
 801f574:	687a      	ldr	r2, [r7, #4]
 801f576:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f578:	693b      	ldr	r3, [r7, #16]
 801f57a:	68fa      	ldr	r2, [r7, #12]
 801f57c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f57e:	4b24      	ldr	r3, [pc, #144]	; (801f610 <sys_timeout_abs+0xd8>)
 801f580:	681b      	ldr	r3, [r3, #0]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d103      	bne.n	801f58e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f586:	4a22      	ldr	r2, [pc, #136]	; (801f610 <sys_timeout_abs+0xd8>)
 801f588:	693b      	ldr	r3, [r7, #16]
 801f58a:	6013      	str	r3, [r2, #0]
    return;
 801f58c:	e037      	b.n	801f5fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f58e:	693b      	ldr	r3, [r7, #16]
 801f590:	685a      	ldr	r2, [r3, #4]
 801f592:	4b1f      	ldr	r3, [pc, #124]	; (801f610 <sys_timeout_abs+0xd8>)
 801f594:	681b      	ldr	r3, [r3, #0]
 801f596:	685b      	ldr	r3, [r3, #4]
 801f598:	1ad3      	subs	r3, r2, r3
 801f59a:	0fdb      	lsrs	r3, r3, #31
 801f59c:	f003 0301 	and.w	r3, r3, #1
 801f5a0:	b2db      	uxtb	r3, r3
 801f5a2:	2b00      	cmp	r3, #0
 801f5a4:	d007      	beq.n	801f5b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f5a6:	4b1a      	ldr	r3, [pc, #104]	; (801f610 <sys_timeout_abs+0xd8>)
 801f5a8:	681a      	ldr	r2, [r3, #0]
 801f5aa:	693b      	ldr	r3, [r7, #16]
 801f5ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f5ae:	4a18      	ldr	r2, [pc, #96]	; (801f610 <sys_timeout_abs+0xd8>)
 801f5b0:	693b      	ldr	r3, [r7, #16]
 801f5b2:	6013      	str	r3, [r2, #0]
 801f5b4:	e023      	b.n	801f5fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f5b6:	4b16      	ldr	r3, [pc, #88]	; (801f610 <sys_timeout_abs+0xd8>)
 801f5b8:	681b      	ldr	r3, [r3, #0]
 801f5ba:	617b      	str	r3, [r7, #20]
 801f5bc:	e01a      	b.n	801f5f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f5be:	697b      	ldr	r3, [r7, #20]
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d00b      	beq.n	801f5de <sys_timeout_abs+0xa6>
 801f5c6:	693b      	ldr	r3, [r7, #16]
 801f5c8:	685a      	ldr	r2, [r3, #4]
 801f5ca:	697b      	ldr	r3, [r7, #20]
 801f5cc:	681b      	ldr	r3, [r3, #0]
 801f5ce:	685b      	ldr	r3, [r3, #4]
 801f5d0:	1ad3      	subs	r3, r2, r3
 801f5d2:	0fdb      	lsrs	r3, r3, #31
 801f5d4:	f003 0301 	and.w	r3, r3, #1
 801f5d8:	b2db      	uxtb	r3, r3
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	d007      	beq.n	801f5ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f5de:	697b      	ldr	r3, [r7, #20]
 801f5e0:	681a      	ldr	r2, [r3, #0]
 801f5e2:	693b      	ldr	r3, [r7, #16]
 801f5e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f5e6:	697b      	ldr	r3, [r7, #20]
 801f5e8:	693a      	ldr	r2, [r7, #16]
 801f5ea:	601a      	str	r2, [r3, #0]
        break;
 801f5ec:	e007      	b.n	801f5fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f5ee:	697b      	ldr	r3, [r7, #20]
 801f5f0:	681b      	ldr	r3, [r3, #0]
 801f5f2:	617b      	str	r3, [r7, #20]
 801f5f4:	697b      	ldr	r3, [r7, #20]
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d1e1      	bne.n	801f5be <sys_timeout_abs+0x86>
 801f5fa:	e000      	b.n	801f5fe <sys_timeout_abs+0xc6>
    return;
 801f5fc:	bf00      	nop
      }
    }
  }
}
 801f5fe:	3718      	adds	r7, #24
 801f600:	46bd      	mov	sp, r7
 801f602:	bd80      	pop	{r7, pc}
 801f604:	0802527c 	.word	0x0802527c
 801f608:	080252b8 	.word	0x080252b8
 801f60c:	080252f8 	.word	0x080252f8
 801f610:	2400d430 	.word	0x2400d430

0801f614 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f614:	b580      	push	{r7, lr}
 801f616:	b086      	sub	sp, #24
 801f618:	af00      	add	r7, sp, #0
 801f61a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f620:	697b      	ldr	r3, [r7, #20]
 801f622:	685b      	ldr	r3, [r3, #4]
 801f624:	4798      	blx	r3

  now = sys_now();
 801f626:	f7e2 f977 	bl	8001918 <sys_now>
 801f62a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f62c:	697b      	ldr	r3, [r7, #20]
 801f62e:	681a      	ldr	r2, [r3, #0]
 801f630:	4b0f      	ldr	r3, [pc, #60]	; (801f670 <lwip_cyclic_timer+0x5c>)
 801f632:	681b      	ldr	r3, [r3, #0]
 801f634:	4413      	add	r3, r2
 801f636:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f638:	68fa      	ldr	r2, [r7, #12]
 801f63a:	693b      	ldr	r3, [r7, #16]
 801f63c:	1ad3      	subs	r3, r2, r3
 801f63e:	0fdb      	lsrs	r3, r3, #31
 801f640:	f003 0301 	and.w	r3, r3, #1
 801f644:	b2db      	uxtb	r3, r3
 801f646:	2b00      	cmp	r3, #0
 801f648:	d009      	beq.n	801f65e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f64a:	697b      	ldr	r3, [r7, #20]
 801f64c:	681a      	ldr	r2, [r3, #0]
 801f64e:	693b      	ldr	r3, [r7, #16]
 801f650:	4413      	add	r3, r2
 801f652:	687a      	ldr	r2, [r7, #4]
 801f654:	4907      	ldr	r1, [pc, #28]	; (801f674 <lwip_cyclic_timer+0x60>)
 801f656:	4618      	mov	r0, r3
 801f658:	f7ff ff6e 	bl	801f538 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f65c:	e004      	b.n	801f668 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f65e:	687a      	ldr	r2, [r7, #4]
 801f660:	4904      	ldr	r1, [pc, #16]	; (801f674 <lwip_cyclic_timer+0x60>)
 801f662:	68f8      	ldr	r0, [r7, #12]
 801f664:	f7ff ff68 	bl	801f538 <sys_timeout_abs>
}
 801f668:	bf00      	nop
 801f66a:	3718      	adds	r7, #24
 801f66c:	46bd      	mov	sp, r7
 801f66e:	bd80      	pop	{r7, pc}
 801f670:	2400d434 	.word	0x2400d434
 801f674:	0801f615 	.word	0x0801f615

0801f678 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f678:	b580      	push	{r7, lr}
 801f67a:	b082      	sub	sp, #8
 801f67c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f67e:	2301      	movs	r3, #1
 801f680:	607b      	str	r3, [r7, #4]
 801f682:	e00e      	b.n	801f6a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f684:	4a0b      	ldr	r2, [pc, #44]	; (801f6b4 <sys_timeouts_init+0x3c>)
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	00db      	lsls	r3, r3, #3
 801f690:	4a08      	ldr	r2, [pc, #32]	; (801f6b4 <sys_timeouts_init+0x3c>)
 801f692:	4413      	add	r3, r2
 801f694:	461a      	mov	r2, r3
 801f696:	4908      	ldr	r1, [pc, #32]	; (801f6b8 <sys_timeouts_init+0x40>)
 801f698:	f000 f810 	bl	801f6bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	3301      	adds	r3, #1
 801f6a0:	607b      	str	r3, [r7, #4]
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	2b05      	cmp	r3, #5
 801f6a6:	d9ed      	bls.n	801f684 <sys_timeouts_init+0xc>
  }
}
 801f6a8:	bf00      	nop
 801f6aa:	bf00      	nop
 801f6ac:	3708      	adds	r7, #8
 801f6ae:	46bd      	mov	sp, r7
 801f6b0:	bd80      	pop	{r7, pc}
 801f6b2:	bf00      	nop
 801f6b4:	08025ef8 	.word	0x08025ef8
 801f6b8:	0801f615 	.word	0x0801f615

0801f6bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f6bc:	b580      	push	{r7, lr}
 801f6be:	b086      	sub	sp, #24
 801f6c0:	af00      	add	r7, sp, #0
 801f6c2:	60f8      	str	r0, [r7, #12]
 801f6c4:	60b9      	str	r1, [r7, #8]
 801f6c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f6ce:	d306      	bcc.n	801f6de <sys_timeout+0x22>
 801f6d0:	4b0a      	ldr	r3, [pc, #40]	; (801f6fc <sys_timeout+0x40>)
 801f6d2:	f240 1229 	movw	r2, #297	; 0x129
 801f6d6:	490a      	ldr	r1, [pc, #40]	; (801f700 <sys_timeout+0x44>)
 801f6d8:	480a      	ldr	r0, [pc, #40]	; (801f704 <sys_timeout+0x48>)
 801f6da:	f000 ff39 	bl	8020550 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f6de:	f7e2 f91b 	bl	8001918 <sys_now>
 801f6e2:	4602      	mov	r2, r0
 801f6e4:	68fb      	ldr	r3, [r7, #12]
 801f6e6:	4413      	add	r3, r2
 801f6e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f6ea:	687a      	ldr	r2, [r7, #4]
 801f6ec:	68b9      	ldr	r1, [r7, #8]
 801f6ee:	6978      	ldr	r0, [r7, #20]
 801f6f0:	f7ff ff22 	bl	801f538 <sys_timeout_abs>
#endif
}
 801f6f4:	bf00      	nop
 801f6f6:	3718      	adds	r7, #24
 801f6f8:	46bd      	mov	sp, r7
 801f6fa:	bd80      	pop	{r7, pc}
 801f6fc:	0802527c 	.word	0x0802527c
 801f700:	08025320 	.word	0x08025320
 801f704:	080252f8 	.word	0x080252f8

0801f708 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f708:	b580      	push	{r7, lr}
 801f70a:	b084      	sub	sp, #16
 801f70c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f70e:	f7e2 f903 	bl	8001918 <sys_now>
 801f712:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f714:	4b17      	ldr	r3, [pc, #92]	; (801f774 <sys_check_timeouts+0x6c>)
 801f716:	681b      	ldr	r3, [r3, #0]
 801f718:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f71a:	68bb      	ldr	r3, [r7, #8]
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	d022      	beq.n	801f766 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f720:	68bb      	ldr	r3, [r7, #8]
 801f722:	685b      	ldr	r3, [r3, #4]
 801f724:	68fa      	ldr	r2, [r7, #12]
 801f726:	1ad3      	subs	r3, r2, r3
 801f728:	0fdb      	lsrs	r3, r3, #31
 801f72a:	f003 0301 	and.w	r3, r3, #1
 801f72e:	b2db      	uxtb	r3, r3
 801f730:	2b00      	cmp	r3, #0
 801f732:	d11a      	bne.n	801f76a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f734:	68bb      	ldr	r3, [r7, #8]
 801f736:	681b      	ldr	r3, [r3, #0]
 801f738:	4a0e      	ldr	r2, [pc, #56]	; (801f774 <sys_check_timeouts+0x6c>)
 801f73a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f73c:	68bb      	ldr	r3, [r7, #8]
 801f73e:	689b      	ldr	r3, [r3, #8]
 801f740:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f742:	68bb      	ldr	r3, [r7, #8]
 801f744:	68db      	ldr	r3, [r3, #12]
 801f746:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f748:	68bb      	ldr	r3, [r7, #8]
 801f74a:	685b      	ldr	r3, [r3, #4]
 801f74c:	4a0a      	ldr	r2, [pc, #40]	; (801f778 <sys_check_timeouts+0x70>)
 801f74e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f750:	68b9      	ldr	r1, [r7, #8]
 801f752:	200a      	movs	r0, #10
 801f754:	f7f6 fe9e 	bl	8016494 <memp_free>
    if (handler != NULL) {
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d0da      	beq.n	801f714 <sys_check_timeouts+0xc>
      handler(arg);
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	6838      	ldr	r0, [r7, #0]
 801f762:	4798      	blx	r3
  do {
 801f764:	e7d6      	b.n	801f714 <sys_check_timeouts+0xc>
      return;
 801f766:	bf00      	nop
 801f768:	e000      	b.n	801f76c <sys_check_timeouts+0x64>
      return;
 801f76a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f76c:	3710      	adds	r7, #16
 801f76e:	46bd      	mov	sp, r7
 801f770:	bd80      	pop	{r7, pc}
 801f772:	bf00      	nop
 801f774:	2400d430 	.word	0x2400d430
 801f778:	2400d434 	.word	0x2400d434

0801f77c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f77c:	b580      	push	{r7, lr}
 801f77e:	b082      	sub	sp, #8
 801f780:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f782:	4b16      	ldr	r3, [pc, #88]	; (801f7dc <sys_timeouts_sleeptime+0x60>)
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	2b00      	cmp	r3, #0
 801f788:	d102      	bne.n	801f790 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f78a:	f04f 33ff 	mov.w	r3, #4294967295
 801f78e:	e020      	b.n	801f7d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801f790:	f7e2 f8c2 	bl	8001918 <sys_now>
 801f794:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f796:	4b11      	ldr	r3, [pc, #68]	; (801f7dc <sys_timeouts_sleeptime+0x60>)
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	685a      	ldr	r2, [r3, #4]
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	1ad3      	subs	r3, r2, r3
 801f7a0:	0fdb      	lsrs	r3, r3, #31
 801f7a2:	f003 0301 	and.w	r3, r3, #1
 801f7a6:	b2db      	uxtb	r3, r3
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	d001      	beq.n	801f7b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801f7ac:	2300      	movs	r3, #0
 801f7ae:	e010      	b.n	801f7d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801f7b0:	4b0a      	ldr	r3, [pc, #40]	; (801f7dc <sys_timeouts_sleeptime+0x60>)
 801f7b2:	681b      	ldr	r3, [r3, #0]
 801f7b4:	685a      	ldr	r2, [r3, #4]
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	1ad3      	subs	r3, r2, r3
 801f7ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801f7bc:	683b      	ldr	r3, [r7, #0]
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	da06      	bge.n	801f7d0 <sys_timeouts_sleeptime+0x54>
 801f7c2:	4b07      	ldr	r3, [pc, #28]	; (801f7e0 <sys_timeouts_sleeptime+0x64>)
 801f7c4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801f7c8:	4906      	ldr	r1, [pc, #24]	; (801f7e4 <sys_timeouts_sleeptime+0x68>)
 801f7ca:	4807      	ldr	r0, [pc, #28]	; (801f7e8 <sys_timeouts_sleeptime+0x6c>)
 801f7cc:	f000 fec0 	bl	8020550 <iprintf>
    return ret;
 801f7d0:	683b      	ldr	r3, [r7, #0]
  }
}
 801f7d2:	4618      	mov	r0, r3
 801f7d4:	3708      	adds	r7, #8
 801f7d6:	46bd      	mov	sp, r7
 801f7d8:	bd80      	pop	{r7, pc}
 801f7da:	bf00      	nop
 801f7dc:	2400d430 	.word	0x2400d430
 801f7e0:	0802527c 	.word	0x0802527c
 801f7e4:	08025358 	.word	0x08025358
 801f7e8:	080252f8 	.word	0x080252f8

0801f7ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f7ec:	b580      	push	{r7, lr}
 801f7ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f7f0:	f000 fec6 	bl	8020580 <rand>
 801f7f4:	4603      	mov	r3, r0
 801f7f6:	b29b      	uxth	r3, r3
 801f7f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f7fc:	b29b      	uxth	r3, r3
 801f7fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f802:	b29a      	uxth	r2, r3
 801f804:	4b01      	ldr	r3, [pc, #4]	; (801f80c <udp_init+0x20>)
 801f806:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f808:	bf00      	nop
 801f80a:	bd80      	pop	{r7, pc}
 801f80c:	2400003c 	.word	0x2400003c

0801f810 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f810:	b480      	push	{r7}
 801f812:	b083      	sub	sp, #12
 801f814:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f816:	2300      	movs	r3, #0
 801f818:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f81a:	4b17      	ldr	r3, [pc, #92]	; (801f878 <udp_new_port+0x68>)
 801f81c:	881b      	ldrh	r3, [r3, #0]
 801f81e:	1c5a      	adds	r2, r3, #1
 801f820:	b291      	uxth	r1, r2
 801f822:	4a15      	ldr	r2, [pc, #84]	; (801f878 <udp_new_port+0x68>)
 801f824:	8011      	strh	r1, [r2, #0]
 801f826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f82a:	4293      	cmp	r3, r2
 801f82c:	d103      	bne.n	801f836 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f82e:	4b12      	ldr	r3, [pc, #72]	; (801f878 <udp_new_port+0x68>)
 801f830:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f834:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f836:	4b11      	ldr	r3, [pc, #68]	; (801f87c <udp_new_port+0x6c>)
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	603b      	str	r3, [r7, #0]
 801f83c:	e011      	b.n	801f862 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f83e:	683b      	ldr	r3, [r7, #0]
 801f840:	8a5a      	ldrh	r2, [r3, #18]
 801f842:	4b0d      	ldr	r3, [pc, #52]	; (801f878 <udp_new_port+0x68>)
 801f844:	881b      	ldrh	r3, [r3, #0]
 801f846:	429a      	cmp	r2, r3
 801f848:	d108      	bne.n	801f85c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f84a:	88fb      	ldrh	r3, [r7, #6]
 801f84c:	3301      	adds	r3, #1
 801f84e:	80fb      	strh	r3, [r7, #6]
 801f850:	88fb      	ldrh	r3, [r7, #6]
 801f852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f856:	d3e0      	bcc.n	801f81a <udp_new_port+0xa>
        return 0;
 801f858:	2300      	movs	r3, #0
 801f85a:	e007      	b.n	801f86c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f85c:	683b      	ldr	r3, [r7, #0]
 801f85e:	68db      	ldr	r3, [r3, #12]
 801f860:	603b      	str	r3, [r7, #0]
 801f862:	683b      	ldr	r3, [r7, #0]
 801f864:	2b00      	cmp	r3, #0
 801f866:	d1ea      	bne.n	801f83e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f868:	4b03      	ldr	r3, [pc, #12]	; (801f878 <udp_new_port+0x68>)
 801f86a:	881b      	ldrh	r3, [r3, #0]
}
 801f86c:	4618      	mov	r0, r3
 801f86e:	370c      	adds	r7, #12
 801f870:	46bd      	mov	sp, r7
 801f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f876:	4770      	bx	lr
 801f878:	2400003c 	.word	0x2400003c
 801f87c:	2400d43c 	.word	0x2400d43c

0801f880 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f880:	b580      	push	{r7, lr}
 801f882:	b084      	sub	sp, #16
 801f884:	af00      	add	r7, sp, #0
 801f886:	60f8      	str	r0, [r7, #12]
 801f888:	60b9      	str	r1, [r7, #8]
 801f88a:	4613      	mov	r3, r2
 801f88c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	2b00      	cmp	r3, #0
 801f892:	d105      	bne.n	801f8a0 <udp_input_local_match+0x20>
 801f894:	4b27      	ldr	r3, [pc, #156]	; (801f934 <udp_input_local_match+0xb4>)
 801f896:	2287      	movs	r2, #135	; 0x87
 801f898:	4927      	ldr	r1, [pc, #156]	; (801f938 <udp_input_local_match+0xb8>)
 801f89a:	4828      	ldr	r0, [pc, #160]	; (801f93c <udp_input_local_match+0xbc>)
 801f89c:	f000 fe58 	bl	8020550 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f8a0:	68bb      	ldr	r3, [r7, #8]
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d105      	bne.n	801f8b2 <udp_input_local_match+0x32>
 801f8a6:	4b23      	ldr	r3, [pc, #140]	; (801f934 <udp_input_local_match+0xb4>)
 801f8a8:	2288      	movs	r2, #136	; 0x88
 801f8aa:	4925      	ldr	r1, [pc, #148]	; (801f940 <udp_input_local_match+0xc0>)
 801f8ac:	4823      	ldr	r0, [pc, #140]	; (801f93c <udp_input_local_match+0xbc>)
 801f8ae:	f000 fe4f 	bl	8020550 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f8b2:	68fb      	ldr	r3, [r7, #12]
 801f8b4:	7a1b      	ldrb	r3, [r3, #8]
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d00b      	beq.n	801f8d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f8ba:	68fb      	ldr	r3, [r7, #12]
 801f8bc:	7a1a      	ldrb	r2, [r3, #8]
 801f8be:	4b21      	ldr	r3, [pc, #132]	; (801f944 <udp_input_local_match+0xc4>)
 801f8c0:	685b      	ldr	r3, [r3, #4]
 801f8c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801f8c6:	3301      	adds	r3, #1
 801f8c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f8ca:	429a      	cmp	r2, r3
 801f8cc:	d001      	beq.n	801f8d2 <udp_input_local_match+0x52>
    return 0;
 801f8ce:	2300      	movs	r3, #0
 801f8d0:	e02b      	b.n	801f92a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f8d2:	79fb      	ldrb	r3, [r7, #7]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d018      	beq.n	801f90a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f8d8:	68fb      	ldr	r3, [r7, #12]
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	d013      	beq.n	801f906 <udp_input_local_match+0x86>
 801f8de:	68fb      	ldr	r3, [r7, #12]
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d00f      	beq.n	801f906 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f8e6:	4b17      	ldr	r3, [pc, #92]	; (801f944 <udp_input_local_match+0xc4>)
 801f8e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f8ee:	d00a      	beq.n	801f906 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f8f0:	68fb      	ldr	r3, [r7, #12]
 801f8f2:	681a      	ldr	r2, [r3, #0]
 801f8f4:	4b13      	ldr	r3, [pc, #76]	; (801f944 <udp_input_local_match+0xc4>)
 801f8f6:	695b      	ldr	r3, [r3, #20]
 801f8f8:	405a      	eors	r2, r3
 801f8fa:	68bb      	ldr	r3, [r7, #8]
 801f8fc:	3308      	adds	r3, #8
 801f8fe:	681b      	ldr	r3, [r3, #0]
 801f900:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f902:	2b00      	cmp	r3, #0
 801f904:	d110      	bne.n	801f928 <udp_input_local_match+0xa8>
          return 1;
 801f906:	2301      	movs	r3, #1
 801f908:	e00f      	b.n	801f92a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f90a:	68fb      	ldr	r3, [r7, #12]
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d009      	beq.n	801f924 <udp_input_local_match+0xa4>
 801f910:	68fb      	ldr	r3, [r7, #12]
 801f912:	681b      	ldr	r3, [r3, #0]
 801f914:	2b00      	cmp	r3, #0
 801f916:	d005      	beq.n	801f924 <udp_input_local_match+0xa4>
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	681a      	ldr	r2, [r3, #0]
 801f91c:	4b09      	ldr	r3, [pc, #36]	; (801f944 <udp_input_local_match+0xc4>)
 801f91e:	695b      	ldr	r3, [r3, #20]
 801f920:	429a      	cmp	r2, r3
 801f922:	d101      	bne.n	801f928 <udp_input_local_match+0xa8>
        return 1;
 801f924:	2301      	movs	r3, #1
 801f926:	e000      	b.n	801f92a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f928:	2300      	movs	r3, #0
}
 801f92a:	4618      	mov	r0, r3
 801f92c:	3710      	adds	r7, #16
 801f92e:	46bd      	mov	sp, r7
 801f930:	bd80      	pop	{r7, pc}
 801f932:	bf00      	nop
 801f934:	0802536c 	.word	0x0802536c
 801f938:	080253a4 	.word	0x080253a4
 801f93c:	080253c8 	.word	0x080253c8
 801f940:	080253f0 	.word	0x080253f0
 801f944:	2400a0b0 	.word	0x2400a0b0

0801f948 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f948:	b590      	push	{r4, r7, lr}
 801f94a:	b08d      	sub	sp, #52	; 0x34
 801f94c:	af02      	add	r7, sp, #8
 801f94e:	6078      	str	r0, [r7, #4]
 801f950:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f952:	2300      	movs	r3, #0
 801f954:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d105      	bne.n	801f968 <udp_input+0x20>
 801f95c:	4b7c      	ldr	r3, [pc, #496]	; (801fb50 <udp_input+0x208>)
 801f95e:	22cf      	movs	r2, #207	; 0xcf
 801f960:	497c      	ldr	r1, [pc, #496]	; (801fb54 <udp_input+0x20c>)
 801f962:	487d      	ldr	r0, [pc, #500]	; (801fb58 <udp_input+0x210>)
 801f964:	f000 fdf4 	bl	8020550 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f968:	683b      	ldr	r3, [r7, #0]
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d105      	bne.n	801f97a <udp_input+0x32>
 801f96e:	4b78      	ldr	r3, [pc, #480]	; (801fb50 <udp_input+0x208>)
 801f970:	22d0      	movs	r2, #208	; 0xd0
 801f972:	497a      	ldr	r1, [pc, #488]	; (801fb5c <udp_input+0x214>)
 801f974:	4878      	ldr	r0, [pc, #480]	; (801fb58 <udp_input+0x210>)
 801f976:	f000 fdeb 	bl	8020550 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	895b      	ldrh	r3, [r3, #10]
 801f97e:	2b07      	cmp	r3, #7
 801f980:	d803      	bhi.n	801f98a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f982:	6878      	ldr	r0, [r7, #4]
 801f984:	f7f7 fef2 	bl	801776c <pbuf_free>
    goto end;
 801f988:	e0de      	b.n	801fb48 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	685b      	ldr	r3, [r3, #4]
 801f98e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f990:	4b73      	ldr	r3, [pc, #460]	; (801fb60 <udp_input+0x218>)
 801f992:	695b      	ldr	r3, [r3, #20]
 801f994:	4a72      	ldr	r2, [pc, #456]	; (801fb60 <udp_input+0x218>)
 801f996:	6812      	ldr	r2, [r2, #0]
 801f998:	4611      	mov	r1, r2
 801f99a:	4618      	mov	r0, r3
 801f99c:	f7f5 f828 	bl	80149f0 <ip4_addr_isbroadcast_u32>
 801f9a0:	4603      	mov	r3, r0
 801f9a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f9a4:	697b      	ldr	r3, [r7, #20]
 801f9a6:	881b      	ldrh	r3, [r3, #0]
 801f9a8:	b29b      	uxth	r3, r3
 801f9aa:	4618      	mov	r0, r3
 801f9ac:	f7f1 f890 	bl	8010ad0 <lwip_htons>
 801f9b0:	4603      	mov	r3, r0
 801f9b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f9b4:	697b      	ldr	r3, [r7, #20]
 801f9b6:	885b      	ldrh	r3, [r3, #2]
 801f9b8:	b29b      	uxth	r3, r3
 801f9ba:	4618      	mov	r0, r3
 801f9bc:	f7f1 f888 	bl	8010ad0 <lwip_htons>
 801f9c0:	4603      	mov	r3, r0
 801f9c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f9c4:	2300      	movs	r3, #0
 801f9c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f9c8:	2300      	movs	r3, #0
 801f9ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f9cc:	2300      	movs	r3, #0
 801f9ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f9d0:	4b64      	ldr	r3, [pc, #400]	; (801fb64 <udp_input+0x21c>)
 801f9d2:	681b      	ldr	r3, [r3, #0]
 801f9d4:	627b      	str	r3, [r7, #36]	; 0x24
 801f9d6:	e054      	b.n	801fa82 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9da:	8a5b      	ldrh	r3, [r3, #18]
 801f9dc:	89fa      	ldrh	r2, [r7, #14]
 801f9de:	429a      	cmp	r2, r3
 801f9e0:	d14a      	bne.n	801fa78 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f9e2:	7cfb      	ldrb	r3, [r7, #19]
 801f9e4:	461a      	mov	r2, r3
 801f9e6:	6839      	ldr	r1, [r7, #0]
 801f9e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f9ea:	f7ff ff49 	bl	801f880 <udp_input_local_match>
 801f9ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	d041      	beq.n	801fa78 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9f6:	7c1b      	ldrb	r3, [r3, #16]
 801f9f8:	f003 0304 	and.w	r3, r3, #4
 801f9fc:	2b00      	cmp	r3, #0
 801f9fe:	d11d      	bne.n	801fa3c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801fa00:	69fb      	ldr	r3, [r7, #28]
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d102      	bne.n	801fa0c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa08:	61fb      	str	r3, [r7, #28]
 801fa0a:	e017      	b.n	801fa3c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801fa0c:	7cfb      	ldrb	r3, [r7, #19]
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d014      	beq.n	801fa3c <udp_input+0xf4>
 801fa12:	4b53      	ldr	r3, [pc, #332]	; (801fb60 <udp_input+0x218>)
 801fa14:	695b      	ldr	r3, [r3, #20]
 801fa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fa1a:	d10f      	bne.n	801fa3c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801fa1c:	69fb      	ldr	r3, [r7, #28]
 801fa1e:	681a      	ldr	r2, [r3, #0]
 801fa20:	683b      	ldr	r3, [r7, #0]
 801fa22:	3304      	adds	r3, #4
 801fa24:	681b      	ldr	r3, [r3, #0]
 801fa26:	429a      	cmp	r2, r3
 801fa28:	d008      	beq.n	801fa3c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa2c:	681a      	ldr	r2, [r3, #0]
 801fa2e:	683b      	ldr	r3, [r7, #0]
 801fa30:	3304      	adds	r3, #4
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	429a      	cmp	r2, r3
 801fa36:	d101      	bne.n	801fa3c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801fa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa3a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801fa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa3e:	8a9b      	ldrh	r3, [r3, #20]
 801fa40:	8a3a      	ldrh	r2, [r7, #16]
 801fa42:	429a      	cmp	r2, r3
 801fa44:	d118      	bne.n	801fa78 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa48:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	d005      	beq.n	801fa5a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801fa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa50:	685a      	ldr	r2, [r3, #4]
 801fa52:	4b43      	ldr	r3, [pc, #268]	; (801fb60 <udp_input+0x218>)
 801fa54:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fa56:	429a      	cmp	r2, r3
 801fa58:	d10e      	bne.n	801fa78 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801fa5a:	6a3b      	ldr	r3, [r7, #32]
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	d014      	beq.n	801fa8a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801fa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa62:	68da      	ldr	r2, [r3, #12]
 801fa64:	6a3b      	ldr	r3, [r7, #32]
 801fa66:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801fa68:	4b3e      	ldr	r3, [pc, #248]	; (801fb64 <udp_input+0x21c>)
 801fa6a:	681a      	ldr	r2, [r3, #0]
 801fa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa6e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801fa70:	4a3c      	ldr	r2, [pc, #240]	; (801fb64 <udp_input+0x21c>)
 801fa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa74:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801fa76:	e008      	b.n	801fa8a <udp_input+0x142>
      }
    }

    prev = pcb;
 801fa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa7a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa7e:	68db      	ldr	r3, [r3, #12]
 801fa80:	627b      	str	r3, [r7, #36]	; 0x24
 801fa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d1a7      	bne.n	801f9d8 <udp_input+0x90>
 801fa88:	e000      	b.n	801fa8c <udp_input+0x144>
        break;
 801fa8a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801fa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	d101      	bne.n	801fa96 <udp_input+0x14e>
    pcb = uncon_pcb;
 801fa92:	69fb      	ldr	r3, [r7, #28]
 801fa94:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801fa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa98:	2b00      	cmp	r3, #0
 801fa9a:	d002      	beq.n	801faa2 <udp_input+0x15a>
    for_us = 1;
 801fa9c:	2301      	movs	r3, #1
 801fa9e:	76fb      	strb	r3, [r7, #27]
 801faa0:	e00a      	b.n	801fab8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801faa2:	683b      	ldr	r3, [r7, #0]
 801faa4:	3304      	adds	r3, #4
 801faa6:	681a      	ldr	r2, [r3, #0]
 801faa8:	4b2d      	ldr	r3, [pc, #180]	; (801fb60 <udp_input+0x218>)
 801faaa:	695b      	ldr	r3, [r3, #20]
 801faac:	429a      	cmp	r2, r3
 801faae:	bf0c      	ite	eq
 801fab0:	2301      	moveq	r3, #1
 801fab2:	2300      	movne	r3, #0
 801fab4:	b2db      	uxtb	r3, r3
 801fab6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801fab8:	7efb      	ldrb	r3, [r7, #27]
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d041      	beq.n	801fb42 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fabe:	2108      	movs	r1, #8
 801fac0:	6878      	ldr	r0, [r7, #4]
 801fac2:	f7f7 fdcd 	bl	8017660 <pbuf_remove_header>
 801fac6:	4603      	mov	r3, r0
 801fac8:	2b00      	cmp	r3, #0
 801faca:	d00a      	beq.n	801fae2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801facc:	4b20      	ldr	r3, [pc, #128]	; (801fb50 <udp_input+0x208>)
 801face:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801fad2:	4925      	ldr	r1, [pc, #148]	; (801fb68 <udp_input+0x220>)
 801fad4:	4820      	ldr	r0, [pc, #128]	; (801fb58 <udp_input+0x210>)
 801fad6:	f000 fd3b 	bl	8020550 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801fada:	6878      	ldr	r0, [r7, #4]
 801fadc:	f7f7 fe46 	bl	801776c <pbuf_free>
      goto end;
 801fae0:	e032      	b.n	801fb48 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801fae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	d012      	beq.n	801fb0e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faea:	699b      	ldr	r3, [r3, #24]
 801faec:	2b00      	cmp	r3, #0
 801faee:	d00a      	beq.n	801fb06 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faf2:	699c      	ldr	r4, [r3, #24]
 801faf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faf6:	69d8      	ldr	r0, [r3, #28]
 801faf8:	8a3b      	ldrh	r3, [r7, #16]
 801fafa:	9300      	str	r3, [sp, #0]
 801fafc:	4b1b      	ldr	r3, [pc, #108]	; (801fb6c <udp_input+0x224>)
 801fafe:	687a      	ldr	r2, [r7, #4]
 801fb00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fb02:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801fb04:	e021      	b.n	801fb4a <udp_input+0x202>
        pbuf_free(p);
 801fb06:	6878      	ldr	r0, [r7, #4]
 801fb08:	f7f7 fe30 	bl	801776c <pbuf_free>
        goto end;
 801fb0c:	e01c      	b.n	801fb48 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801fb0e:	7cfb      	ldrb	r3, [r7, #19]
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d112      	bne.n	801fb3a <udp_input+0x1f2>
 801fb14:	4b12      	ldr	r3, [pc, #72]	; (801fb60 <udp_input+0x218>)
 801fb16:	695b      	ldr	r3, [r3, #20]
 801fb18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fb1c:	2be0      	cmp	r3, #224	; 0xe0
 801fb1e:	d00c      	beq.n	801fb3a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801fb20:	4b0f      	ldr	r3, [pc, #60]	; (801fb60 <udp_input+0x218>)
 801fb22:	899b      	ldrh	r3, [r3, #12]
 801fb24:	3308      	adds	r3, #8
 801fb26:	b29b      	uxth	r3, r3
 801fb28:	b21b      	sxth	r3, r3
 801fb2a:	4619      	mov	r1, r3
 801fb2c:	6878      	ldr	r0, [r7, #4]
 801fb2e:	f7f7 fe0a 	bl	8017746 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801fb32:	2103      	movs	r1, #3
 801fb34:	6878      	ldr	r0, [r7, #4]
 801fb36:	f7f4 fb2f 	bl	8014198 <icmp_dest_unreach>
      pbuf_free(p);
 801fb3a:	6878      	ldr	r0, [r7, #4]
 801fb3c:	f7f7 fe16 	bl	801776c <pbuf_free>
  return;
 801fb40:	e003      	b.n	801fb4a <udp_input+0x202>
    pbuf_free(p);
 801fb42:	6878      	ldr	r0, [r7, #4]
 801fb44:	f7f7 fe12 	bl	801776c <pbuf_free>
  return;
 801fb48:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fb4a:	372c      	adds	r7, #44	; 0x2c
 801fb4c:	46bd      	mov	sp, r7
 801fb4e:	bd90      	pop	{r4, r7, pc}
 801fb50:	0802536c 	.word	0x0802536c
 801fb54:	08025418 	.word	0x08025418
 801fb58:	080253c8 	.word	0x080253c8
 801fb5c:	08025430 	.word	0x08025430
 801fb60:	2400a0b0 	.word	0x2400a0b0
 801fb64:	2400d43c 	.word	0x2400d43c
 801fb68:	0802544c 	.word	0x0802544c
 801fb6c:	2400a0c0 	.word	0x2400a0c0

0801fb70 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801fb70:	b580      	push	{r7, lr}
 801fb72:	b082      	sub	sp, #8
 801fb74:	af00      	add	r7, sp, #0
 801fb76:	6078      	str	r0, [r7, #4]
 801fb78:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	2b00      	cmp	r3, #0
 801fb7e:	d109      	bne.n	801fb94 <udp_send+0x24>
 801fb80:	4b11      	ldr	r3, [pc, #68]	; (801fbc8 <udp_send+0x58>)
 801fb82:	f240 12d5 	movw	r2, #469	; 0x1d5
 801fb86:	4911      	ldr	r1, [pc, #68]	; (801fbcc <udp_send+0x5c>)
 801fb88:	4811      	ldr	r0, [pc, #68]	; (801fbd0 <udp_send+0x60>)
 801fb8a:	f000 fce1 	bl	8020550 <iprintf>
 801fb8e:	f06f 030f 	mvn.w	r3, #15
 801fb92:	e015      	b.n	801fbc0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801fb94:	683b      	ldr	r3, [r7, #0]
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	d109      	bne.n	801fbae <udp_send+0x3e>
 801fb9a:	4b0b      	ldr	r3, [pc, #44]	; (801fbc8 <udp_send+0x58>)
 801fb9c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801fba0:	490c      	ldr	r1, [pc, #48]	; (801fbd4 <udp_send+0x64>)
 801fba2:	480b      	ldr	r0, [pc, #44]	; (801fbd0 <udp_send+0x60>)
 801fba4:	f000 fcd4 	bl	8020550 <iprintf>
 801fba8:	f06f 030f 	mvn.w	r3, #15
 801fbac:	e008      	b.n	801fbc0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801fbae:	687b      	ldr	r3, [r7, #4]
 801fbb0:	1d1a      	adds	r2, r3, #4
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	8a9b      	ldrh	r3, [r3, #20]
 801fbb6:	6839      	ldr	r1, [r7, #0]
 801fbb8:	6878      	ldr	r0, [r7, #4]
 801fbba:	f000 f80d 	bl	801fbd8 <udp_sendto>
 801fbbe:	4603      	mov	r3, r0
}
 801fbc0:	4618      	mov	r0, r3
 801fbc2:	3708      	adds	r7, #8
 801fbc4:	46bd      	mov	sp, r7
 801fbc6:	bd80      	pop	{r7, pc}
 801fbc8:	0802536c 	.word	0x0802536c
 801fbcc:	08025468 	.word	0x08025468
 801fbd0:	080253c8 	.word	0x080253c8
 801fbd4:	08025480 	.word	0x08025480

0801fbd8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801fbd8:	b580      	push	{r7, lr}
 801fbda:	b088      	sub	sp, #32
 801fbdc:	af02      	add	r7, sp, #8
 801fbde:	60f8      	str	r0, [r7, #12]
 801fbe0:	60b9      	str	r1, [r7, #8]
 801fbe2:	607a      	str	r2, [r7, #4]
 801fbe4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801fbe6:	68fb      	ldr	r3, [r7, #12]
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	d109      	bne.n	801fc00 <udp_sendto+0x28>
 801fbec:	4b23      	ldr	r3, [pc, #140]	; (801fc7c <udp_sendto+0xa4>)
 801fbee:	f44f 7206 	mov.w	r2, #536	; 0x218
 801fbf2:	4923      	ldr	r1, [pc, #140]	; (801fc80 <udp_sendto+0xa8>)
 801fbf4:	4823      	ldr	r0, [pc, #140]	; (801fc84 <udp_sendto+0xac>)
 801fbf6:	f000 fcab 	bl	8020550 <iprintf>
 801fbfa:	f06f 030f 	mvn.w	r3, #15
 801fbfe:	e038      	b.n	801fc72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801fc00:	68bb      	ldr	r3, [r7, #8]
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	d109      	bne.n	801fc1a <udp_sendto+0x42>
 801fc06:	4b1d      	ldr	r3, [pc, #116]	; (801fc7c <udp_sendto+0xa4>)
 801fc08:	f240 2219 	movw	r2, #537	; 0x219
 801fc0c:	491e      	ldr	r1, [pc, #120]	; (801fc88 <udp_sendto+0xb0>)
 801fc0e:	481d      	ldr	r0, [pc, #116]	; (801fc84 <udp_sendto+0xac>)
 801fc10:	f000 fc9e 	bl	8020550 <iprintf>
 801fc14:	f06f 030f 	mvn.w	r3, #15
 801fc18:	e02b      	b.n	801fc72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d109      	bne.n	801fc34 <udp_sendto+0x5c>
 801fc20:	4b16      	ldr	r3, [pc, #88]	; (801fc7c <udp_sendto+0xa4>)
 801fc22:	f240 221a 	movw	r2, #538	; 0x21a
 801fc26:	4919      	ldr	r1, [pc, #100]	; (801fc8c <udp_sendto+0xb4>)
 801fc28:	4816      	ldr	r0, [pc, #88]	; (801fc84 <udp_sendto+0xac>)
 801fc2a:	f000 fc91 	bl	8020550 <iprintf>
 801fc2e:	f06f 030f 	mvn.w	r3, #15
 801fc32:	e01e      	b.n	801fc72 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	7a1b      	ldrb	r3, [r3, #8]
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d006      	beq.n	801fc4a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801fc3c:	68fb      	ldr	r3, [r7, #12]
 801fc3e:	7a1b      	ldrb	r3, [r3, #8]
 801fc40:	4618      	mov	r0, r3
 801fc42:	f7f7 f9d7 	bl	8016ff4 <netif_get_by_index>
 801fc46:	6178      	str	r0, [r7, #20]
 801fc48:	e003      	b.n	801fc52 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801fc4a:	6878      	ldr	r0, [r7, #4]
 801fc4c:	f7f4 fc0e 	bl	801446c <ip4_route>
 801fc50:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801fc52:	697b      	ldr	r3, [r7, #20]
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	d102      	bne.n	801fc5e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801fc58:	f06f 0303 	mvn.w	r3, #3
 801fc5c:	e009      	b.n	801fc72 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801fc5e:	887a      	ldrh	r2, [r7, #2]
 801fc60:	697b      	ldr	r3, [r7, #20]
 801fc62:	9300      	str	r3, [sp, #0]
 801fc64:	4613      	mov	r3, r2
 801fc66:	687a      	ldr	r2, [r7, #4]
 801fc68:	68b9      	ldr	r1, [r7, #8]
 801fc6a:	68f8      	ldr	r0, [r7, #12]
 801fc6c:	f000 f810 	bl	801fc90 <udp_sendto_if>
 801fc70:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fc72:	4618      	mov	r0, r3
 801fc74:	3718      	adds	r7, #24
 801fc76:	46bd      	mov	sp, r7
 801fc78:	bd80      	pop	{r7, pc}
 801fc7a:	bf00      	nop
 801fc7c:	0802536c 	.word	0x0802536c
 801fc80:	08025498 	.word	0x08025498
 801fc84:	080253c8 	.word	0x080253c8
 801fc88:	080254b0 	.word	0x080254b0
 801fc8c:	080254cc 	.word	0x080254cc

0801fc90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801fc90:	b580      	push	{r7, lr}
 801fc92:	b088      	sub	sp, #32
 801fc94:	af02      	add	r7, sp, #8
 801fc96:	60f8      	str	r0, [r7, #12]
 801fc98:	60b9      	str	r1, [r7, #8]
 801fc9a:	607a      	str	r2, [r7, #4]
 801fc9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fc9e:	68fb      	ldr	r3, [r7, #12]
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	d109      	bne.n	801fcb8 <udp_sendto_if+0x28>
 801fca4:	4b2e      	ldr	r3, [pc, #184]	; (801fd60 <udp_sendto_if+0xd0>)
 801fca6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fcaa:	492e      	ldr	r1, [pc, #184]	; (801fd64 <udp_sendto_if+0xd4>)
 801fcac:	482e      	ldr	r0, [pc, #184]	; (801fd68 <udp_sendto_if+0xd8>)
 801fcae:	f000 fc4f 	bl	8020550 <iprintf>
 801fcb2:	f06f 030f 	mvn.w	r3, #15
 801fcb6:	e04f      	b.n	801fd58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801fcb8:	68bb      	ldr	r3, [r7, #8]
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	d109      	bne.n	801fcd2 <udp_sendto_if+0x42>
 801fcbe:	4b28      	ldr	r3, [pc, #160]	; (801fd60 <udp_sendto_if+0xd0>)
 801fcc0:	f240 2281 	movw	r2, #641	; 0x281
 801fcc4:	4929      	ldr	r1, [pc, #164]	; (801fd6c <udp_sendto_if+0xdc>)
 801fcc6:	4828      	ldr	r0, [pc, #160]	; (801fd68 <udp_sendto_if+0xd8>)
 801fcc8:	f000 fc42 	bl	8020550 <iprintf>
 801fccc:	f06f 030f 	mvn.w	r3, #15
 801fcd0:	e042      	b.n	801fd58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fcd2:	687b      	ldr	r3, [r7, #4]
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d109      	bne.n	801fcec <udp_sendto_if+0x5c>
 801fcd8:	4b21      	ldr	r3, [pc, #132]	; (801fd60 <udp_sendto_if+0xd0>)
 801fcda:	f240 2282 	movw	r2, #642	; 0x282
 801fcde:	4924      	ldr	r1, [pc, #144]	; (801fd70 <udp_sendto_if+0xe0>)
 801fce0:	4821      	ldr	r0, [pc, #132]	; (801fd68 <udp_sendto_if+0xd8>)
 801fce2:	f000 fc35 	bl	8020550 <iprintf>
 801fce6:	f06f 030f 	mvn.w	r3, #15
 801fcea:	e035      	b.n	801fd58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fcec:	6a3b      	ldr	r3, [r7, #32]
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d109      	bne.n	801fd06 <udp_sendto_if+0x76>
 801fcf2:	4b1b      	ldr	r3, [pc, #108]	; (801fd60 <udp_sendto_if+0xd0>)
 801fcf4:	f240 2283 	movw	r2, #643	; 0x283
 801fcf8:	491e      	ldr	r1, [pc, #120]	; (801fd74 <udp_sendto_if+0xe4>)
 801fcfa:	481b      	ldr	r0, [pc, #108]	; (801fd68 <udp_sendto_if+0xd8>)
 801fcfc:	f000 fc28 	bl	8020550 <iprintf>
 801fd00:	f06f 030f 	mvn.w	r3, #15
 801fd04:	e028      	b.n	801fd58 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fd06:	68fb      	ldr	r3, [r7, #12]
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	d009      	beq.n	801fd20 <udp_sendto_if+0x90>
 801fd0c:	68fb      	ldr	r3, [r7, #12]
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	d005      	beq.n	801fd20 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801fd14:	68fb      	ldr	r3, [r7, #12]
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fd1c:	2be0      	cmp	r3, #224	; 0xe0
 801fd1e:	d103      	bne.n	801fd28 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801fd20:	6a3b      	ldr	r3, [r7, #32]
 801fd22:	3304      	adds	r3, #4
 801fd24:	617b      	str	r3, [r7, #20]
 801fd26:	e00b      	b.n	801fd40 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801fd28:	68fb      	ldr	r3, [r7, #12]
 801fd2a:	681a      	ldr	r2, [r3, #0]
 801fd2c:	6a3b      	ldr	r3, [r7, #32]
 801fd2e:	3304      	adds	r3, #4
 801fd30:	681b      	ldr	r3, [r3, #0]
 801fd32:	429a      	cmp	r2, r3
 801fd34:	d002      	beq.n	801fd3c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801fd36:	f06f 0303 	mvn.w	r3, #3
 801fd3a:	e00d      	b.n	801fd58 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801fd3c:	68fb      	ldr	r3, [r7, #12]
 801fd3e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801fd40:	887a      	ldrh	r2, [r7, #2]
 801fd42:	697b      	ldr	r3, [r7, #20]
 801fd44:	9301      	str	r3, [sp, #4]
 801fd46:	6a3b      	ldr	r3, [r7, #32]
 801fd48:	9300      	str	r3, [sp, #0]
 801fd4a:	4613      	mov	r3, r2
 801fd4c:	687a      	ldr	r2, [r7, #4]
 801fd4e:	68b9      	ldr	r1, [r7, #8]
 801fd50:	68f8      	ldr	r0, [r7, #12]
 801fd52:	f000 f811 	bl	801fd78 <udp_sendto_if_src>
 801fd56:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fd58:	4618      	mov	r0, r3
 801fd5a:	3718      	adds	r7, #24
 801fd5c:	46bd      	mov	sp, r7
 801fd5e:	bd80      	pop	{r7, pc}
 801fd60:	0802536c 	.word	0x0802536c
 801fd64:	080254e8 	.word	0x080254e8
 801fd68:	080253c8 	.word	0x080253c8
 801fd6c:	08025504 	.word	0x08025504
 801fd70:	08025520 	.word	0x08025520
 801fd74:	08025540 	.word	0x08025540

0801fd78 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801fd78:	b580      	push	{r7, lr}
 801fd7a:	b08c      	sub	sp, #48	; 0x30
 801fd7c:	af04      	add	r7, sp, #16
 801fd7e:	60f8      	str	r0, [r7, #12]
 801fd80:	60b9      	str	r1, [r7, #8]
 801fd82:	607a      	str	r2, [r7, #4]
 801fd84:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd86:	68fb      	ldr	r3, [r7, #12]
 801fd88:	2b00      	cmp	r3, #0
 801fd8a:	d109      	bne.n	801fda0 <udp_sendto_if_src+0x28>
 801fd8c:	4b65      	ldr	r3, [pc, #404]	; (801ff24 <udp_sendto_if_src+0x1ac>)
 801fd8e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fd92:	4965      	ldr	r1, [pc, #404]	; (801ff28 <udp_sendto_if_src+0x1b0>)
 801fd94:	4865      	ldr	r0, [pc, #404]	; (801ff2c <udp_sendto_if_src+0x1b4>)
 801fd96:	f000 fbdb 	bl	8020550 <iprintf>
 801fd9a:	f06f 030f 	mvn.w	r3, #15
 801fd9e:	e0bc      	b.n	801ff1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fda0:	68bb      	ldr	r3, [r7, #8]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d109      	bne.n	801fdba <udp_sendto_if_src+0x42>
 801fda6:	4b5f      	ldr	r3, [pc, #380]	; (801ff24 <udp_sendto_if_src+0x1ac>)
 801fda8:	f240 22d2 	movw	r2, #722	; 0x2d2
 801fdac:	4960      	ldr	r1, [pc, #384]	; (801ff30 <udp_sendto_if_src+0x1b8>)
 801fdae:	485f      	ldr	r0, [pc, #380]	; (801ff2c <udp_sendto_if_src+0x1b4>)
 801fdb0:	f000 fbce 	bl	8020550 <iprintf>
 801fdb4:	f06f 030f 	mvn.w	r3, #15
 801fdb8:	e0af      	b.n	801ff1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fdba:	687b      	ldr	r3, [r7, #4]
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	d109      	bne.n	801fdd4 <udp_sendto_if_src+0x5c>
 801fdc0:	4b58      	ldr	r3, [pc, #352]	; (801ff24 <udp_sendto_if_src+0x1ac>)
 801fdc2:	f240 22d3 	movw	r2, #723	; 0x2d3
 801fdc6:	495b      	ldr	r1, [pc, #364]	; (801ff34 <udp_sendto_if_src+0x1bc>)
 801fdc8:	4858      	ldr	r0, [pc, #352]	; (801ff2c <udp_sendto_if_src+0x1b4>)
 801fdca:	f000 fbc1 	bl	8020550 <iprintf>
 801fdce:	f06f 030f 	mvn.w	r3, #15
 801fdd2:	e0a2      	b.n	801ff1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d109      	bne.n	801fdee <udp_sendto_if_src+0x76>
 801fdda:	4b52      	ldr	r3, [pc, #328]	; (801ff24 <udp_sendto_if_src+0x1ac>)
 801fddc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801fde0:	4955      	ldr	r1, [pc, #340]	; (801ff38 <udp_sendto_if_src+0x1c0>)
 801fde2:	4852      	ldr	r0, [pc, #328]	; (801ff2c <udp_sendto_if_src+0x1b4>)
 801fde4:	f000 fbb4 	bl	8020550 <iprintf>
 801fde8:	f06f 030f 	mvn.w	r3, #15
 801fdec:	e095      	b.n	801ff1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	d109      	bne.n	801fe08 <udp_sendto_if_src+0x90>
 801fdf4:	4b4b      	ldr	r3, [pc, #300]	; (801ff24 <udp_sendto_if_src+0x1ac>)
 801fdf6:	f240 22d5 	movw	r2, #725	; 0x2d5
 801fdfa:	4950      	ldr	r1, [pc, #320]	; (801ff3c <udp_sendto_if_src+0x1c4>)
 801fdfc:	484b      	ldr	r0, [pc, #300]	; (801ff2c <udp_sendto_if_src+0x1b4>)
 801fdfe:	f000 fba7 	bl	8020550 <iprintf>
 801fe02:	f06f 030f 	mvn.w	r3, #15
 801fe06:	e088      	b.n	801ff1a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801fe08:	68fb      	ldr	r3, [r7, #12]
 801fe0a:	8a5b      	ldrh	r3, [r3, #18]
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d10f      	bne.n	801fe30 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fe10:	68f9      	ldr	r1, [r7, #12]
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	8a5b      	ldrh	r3, [r3, #18]
 801fe16:	461a      	mov	r2, r3
 801fe18:	68f8      	ldr	r0, [r7, #12]
 801fe1a:	f000 f893 	bl	801ff44 <udp_bind>
 801fe1e:	4603      	mov	r3, r0
 801fe20:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801fe22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d002      	beq.n	801fe30 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801fe2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fe2e:	e074      	b.n	801ff1a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801fe30:	68bb      	ldr	r3, [r7, #8]
 801fe32:	891b      	ldrh	r3, [r3, #8]
 801fe34:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801fe38:	4293      	cmp	r3, r2
 801fe3a:	d902      	bls.n	801fe42 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801fe3c:	f04f 33ff 	mov.w	r3, #4294967295
 801fe40:	e06b      	b.n	801ff1a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801fe42:	2108      	movs	r1, #8
 801fe44:	68b8      	ldr	r0, [r7, #8]
 801fe46:	f7f7 fbfb 	bl	8017640 <pbuf_add_header>
 801fe4a:	4603      	mov	r3, r0
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	d015      	beq.n	801fe7c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801fe50:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fe54:	2108      	movs	r1, #8
 801fe56:	2022      	movs	r0, #34	; 0x22
 801fe58:	f7f7 f9a4 	bl	80171a4 <pbuf_alloc>
 801fe5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801fe5e:	69fb      	ldr	r3, [r7, #28]
 801fe60:	2b00      	cmp	r3, #0
 801fe62:	d102      	bne.n	801fe6a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801fe64:	f04f 33ff 	mov.w	r3, #4294967295
 801fe68:	e057      	b.n	801ff1a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801fe6a:	68bb      	ldr	r3, [r7, #8]
 801fe6c:	891b      	ldrh	r3, [r3, #8]
 801fe6e:	2b00      	cmp	r3, #0
 801fe70:	d006      	beq.n	801fe80 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801fe72:	68b9      	ldr	r1, [r7, #8]
 801fe74:	69f8      	ldr	r0, [r7, #28]
 801fe76:	f7f7 fd9d 	bl	80179b4 <pbuf_chain>
 801fe7a:	e001      	b.n	801fe80 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801fe7c:	68bb      	ldr	r3, [r7, #8]
 801fe7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fe80:	69fb      	ldr	r3, [r7, #28]
 801fe82:	895b      	ldrh	r3, [r3, #10]
 801fe84:	2b07      	cmp	r3, #7
 801fe86:	d806      	bhi.n	801fe96 <udp_sendto_if_src+0x11e>
 801fe88:	4b26      	ldr	r3, [pc, #152]	; (801ff24 <udp_sendto_if_src+0x1ac>)
 801fe8a:	f240 320d 	movw	r2, #781	; 0x30d
 801fe8e:	492c      	ldr	r1, [pc, #176]	; (801ff40 <udp_sendto_if_src+0x1c8>)
 801fe90:	4826      	ldr	r0, [pc, #152]	; (801ff2c <udp_sendto_if_src+0x1b4>)
 801fe92:	f000 fb5d 	bl	8020550 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801fe96:	69fb      	ldr	r3, [r7, #28]
 801fe98:	685b      	ldr	r3, [r3, #4]
 801fe9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801fe9c:	68fb      	ldr	r3, [r7, #12]
 801fe9e:	8a5b      	ldrh	r3, [r3, #18]
 801fea0:	4618      	mov	r0, r3
 801fea2:	f7f0 fe15 	bl	8010ad0 <lwip_htons>
 801fea6:	4603      	mov	r3, r0
 801fea8:	461a      	mov	r2, r3
 801feaa:	697b      	ldr	r3, [r7, #20]
 801feac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801feae:	887b      	ldrh	r3, [r7, #2]
 801feb0:	4618      	mov	r0, r3
 801feb2:	f7f0 fe0d 	bl	8010ad0 <lwip_htons>
 801feb6:	4603      	mov	r3, r0
 801feb8:	461a      	mov	r2, r3
 801feba:	697b      	ldr	r3, [r7, #20]
 801febc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801febe:	697b      	ldr	r3, [r7, #20]
 801fec0:	2200      	movs	r2, #0
 801fec2:	719a      	strb	r2, [r3, #6]
 801fec4:	2200      	movs	r2, #0
 801fec6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801fec8:	69fb      	ldr	r3, [r7, #28]
 801feca:	891b      	ldrh	r3, [r3, #8]
 801fecc:	4618      	mov	r0, r3
 801fece:	f7f0 fdff 	bl	8010ad0 <lwip_htons>
 801fed2:	4603      	mov	r3, r0
 801fed4:	461a      	mov	r2, r3
 801fed6:	697b      	ldr	r3, [r7, #20]
 801fed8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801feda:	2311      	movs	r3, #17
 801fedc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801fede:	68fb      	ldr	r3, [r7, #12]
 801fee0:	7adb      	ldrb	r3, [r3, #11]
 801fee2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fee4:	68fb      	ldr	r3, [r7, #12]
 801fee6:	7a9b      	ldrb	r3, [r3, #10]
 801fee8:	7cb9      	ldrb	r1, [r7, #18]
 801feea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801feec:	9202      	str	r2, [sp, #8]
 801feee:	7cfa      	ldrb	r2, [r7, #19]
 801fef0:	9201      	str	r2, [sp, #4]
 801fef2:	9300      	str	r3, [sp, #0]
 801fef4:	460b      	mov	r3, r1
 801fef6:	687a      	ldr	r2, [r7, #4]
 801fef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fefa:	69f8      	ldr	r0, [r7, #28]
 801fefc:	f7f4 fcbc 	bl	8014878 <ip4_output_if_src>
 801ff00:	4603      	mov	r3, r0
 801ff02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801ff04:	69fa      	ldr	r2, [r7, #28]
 801ff06:	68bb      	ldr	r3, [r7, #8]
 801ff08:	429a      	cmp	r2, r3
 801ff0a:	d004      	beq.n	801ff16 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801ff0c:	69f8      	ldr	r0, [r7, #28]
 801ff0e:	f7f7 fc2d 	bl	801776c <pbuf_free>
    q = NULL;
 801ff12:	2300      	movs	r3, #0
 801ff14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801ff16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801ff1a:	4618      	mov	r0, r3
 801ff1c:	3720      	adds	r7, #32
 801ff1e:	46bd      	mov	sp, r7
 801ff20:	bd80      	pop	{r7, pc}
 801ff22:	bf00      	nop
 801ff24:	0802536c 	.word	0x0802536c
 801ff28:	08025560 	.word	0x08025560
 801ff2c:	080253c8 	.word	0x080253c8
 801ff30:	08025580 	.word	0x08025580
 801ff34:	080255a0 	.word	0x080255a0
 801ff38:	080255c4 	.word	0x080255c4
 801ff3c:	080255e8 	.word	0x080255e8
 801ff40:	0802560c 	.word	0x0802560c

0801ff44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ff44:	b580      	push	{r7, lr}
 801ff46:	b086      	sub	sp, #24
 801ff48:	af00      	add	r7, sp, #0
 801ff4a:	60f8      	str	r0, [r7, #12]
 801ff4c:	60b9      	str	r1, [r7, #8]
 801ff4e:	4613      	mov	r3, r2
 801ff50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801ff52:	68bb      	ldr	r3, [r7, #8]
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d101      	bne.n	801ff5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801ff58:	4b39      	ldr	r3, [pc, #228]	; (8020040 <udp_bind+0xfc>)
 801ff5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff5c:	68fb      	ldr	r3, [r7, #12]
 801ff5e:	2b00      	cmp	r3, #0
 801ff60:	d109      	bne.n	801ff76 <udp_bind+0x32>
 801ff62:	4b38      	ldr	r3, [pc, #224]	; (8020044 <udp_bind+0x100>)
 801ff64:	f240 32b7 	movw	r2, #951	; 0x3b7
 801ff68:	4937      	ldr	r1, [pc, #220]	; (8020048 <udp_bind+0x104>)
 801ff6a:	4838      	ldr	r0, [pc, #224]	; (802004c <udp_bind+0x108>)
 801ff6c:	f000 faf0 	bl	8020550 <iprintf>
 801ff70:	f06f 030f 	mvn.w	r3, #15
 801ff74:	e060      	b.n	8020038 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801ff76:	2300      	movs	r3, #0
 801ff78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff7a:	4b35      	ldr	r3, [pc, #212]	; (8020050 <udp_bind+0x10c>)
 801ff7c:	681b      	ldr	r3, [r3, #0]
 801ff7e:	617b      	str	r3, [r7, #20]
 801ff80:	e009      	b.n	801ff96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ff82:	68fa      	ldr	r2, [r7, #12]
 801ff84:	697b      	ldr	r3, [r7, #20]
 801ff86:	429a      	cmp	r2, r3
 801ff88:	d102      	bne.n	801ff90 <udp_bind+0x4c>
      rebind = 1;
 801ff8a:	2301      	movs	r3, #1
 801ff8c:	74fb      	strb	r3, [r7, #19]
      break;
 801ff8e:	e005      	b.n	801ff9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff90:	697b      	ldr	r3, [r7, #20]
 801ff92:	68db      	ldr	r3, [r3, #12]
 801ff94:	617b      	str	r3, [r7, #20]
 801ff96:	697b      	ldr	r3, [r7, #20]
 801ff98:	2b00      	cmp	r3, #0
 801ff9a:	d1f2      	bne.n	801ff82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ff9c:	88fb      	ldrh	r3, [r7, #6]
 801ff9e:	2b00      	cmp	r3, #0
 801ffa0:	d109      	bne.n	801ffb6 <udp_bind+0x72>
    port = udp_new_port();
 801ffa2:	f7ff fc35 	bl	801f810 <udp_new_port>
 801ffa6:	4603      	mov	r3, r0
 801ffa8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801ffaa:	88fb      	ldrh	r3, [r7, #6]
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	d12c      	bne.n	802000a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801ffb0:	f06f 0307 	mvn.w	r3, #7
 801ffb4:	e040      	b.n	8020038 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ffb6:	4b26      	ldr	r3, [pc, #152]	; (8020050 <udp_bind+0x10c>)
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	617b      	str	r3, [r7, #20]
 801ffbc:	e022      	b.n	8020004 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801ffbe:	68fa      	ldr	r2, [r7, #12]
 801ffc0:	697b      	ldr	r3, [r7, #20]
 801ffc2:	429a      	cmp	r2, r3
 801ffc4:	d01b      	beq.n	801fffe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ffc6:	697b      	ldr	r3, [r7, #20]
 801ffc8:	8a5b      	ldrh	r3, [r3, #18]
 801ffca:	88fa      	ldrh	r2, [r7, #6]
 801ffcc:	429a      	cmp	r2, r3
 801ffce:	d116      	bne.n	801fffe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffd0:	697b      	ldr	r3, [r7, #20]
 801ffd2:	681a      	ldr	r2, [r3, #0]
 801ffd4:	68bb      	ldr	r3, [r7, #8]
 801ffd6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ffd8:	429a      	cmp	r2, r3
 801ffda:	d00d      	beq.n	801fff8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffdc:	68bb      	ldr	r3, [r7, #8]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d00a      	beq.n	801fff8 <udp_bind+0xb4>
 801ffe2:	68bb      	ldr	r3, [r7, #8]
 801ffe4:	681b      	ldr	r3, [r3, #0]
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d006      	beq.n	801fff8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ffea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffec:	2b00      	cmp	r3, #0
 801ffee:	d003      	beq.n	801fff8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fff0:	697b      	ldr	r3, [r7, #20]
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	2b00      	cmp	r3, #0
 801fff6:	d102      	bne.n	801fffe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fff8:	f06f 0307 	mvn.w	r3, #7
 801fffc:	e01c      	b.n	8020038 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fffe:	697b      	ldr	r3, [r7, #20]
 8020000:	68db      	ldr	r3, [r3, #12]
 8020002:	617b      	str	r3, [r7, #20]
 8020004:	697b      	ldr	r3, [r7, #20]
 8020006:	2b00      	cmp	r3, #0
 8020008:	d1d9      	bne.n	801ffbe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802000a:	68bb      	ldr	r3, [r7, #8]
 802000c:	2b00      	cmp	r3, #0
 802000e:	d002      	beq.n	8020016 <udp_bind+0xd2>
 8020010:	68bb      	ldr	r3, [r7, #8]
 8020012:	681b      	ldr	r3, [r3, #0]
 8020014:	e000      	b.n	8020018 <udp_bind+0xd4>
 8020016:	2300      	movs	r3, #0
 8020018:	68fa      	ldr	r2, [r7, #12]
 802001a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 802001c:	68fb      	ldr	r3, [r7, #12]
 802001e:	88fa      	ldrh	r2, [r7, #6]
 8020020:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8020022:	7cfb      	ldrb	r3, [r7, #19]
 8020024:	2b00      	cmp	r3, #0
 8020026:	d106      	bne.n	8020036 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8020028:	4b09      	ldr	r3, [pc, #36]	; (8020050 <udp_bind+0x10c>)
 802002a:	681a      	ldr	r2, [r3, #0]
 802002c:	68fb      	ldr	r3, [r7, #12]
 802002e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8020030:	4a07      	ldr	r2, [pc, #28]	; (8020050 <udp_bind+0x10c>)
 8020032:	68fb      	ldr	r3, [r7, #12]
 8020034:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8020036:	2300      	movs	r3, #0
}
 8020038:	4618      	mov	r0, r3
 802003a:	3718      	adds	r7, #24
 802003c:	46bd      	mov	sp, r7
 802003e:	bd80      	pop	{r7, pc}
 8020040:	08025de8 	.word	0x08025de8
 8020044:	0802536c 	.word	0x0802536c
 8020048:	0802563c 	.word	0x0802563c
 802004c:	080253c8 	.word	0x080253c8
 8020050:	2400d43c 	.word	0x2400d43c

08020054 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8020054:	b580      	push	{r7, lr}
 8020056:	b086      	sub	sp, #24
 8020058:	af00      	add	r7, sp, #0
 802005a:	60f8      	str	r0, [r7, #12]
 802005c:	60b9      	str	r1, [r7, #8]
 802005e:	4613      	mov	r3, r2
 8020060:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8020062:	68fb      	ldr	r3, [r7, #12]
 8020064:	2b00      	cmp	r3, #0
 8020066:	d109      	bne.n	802007c <udp_connect+0x28>
 8020068:	4b2c      	ldr	r3, [pc, #176]	; (802011c <udp_connect+0xc8>)
 802006a:	f240 4235 	movw	r2, #1077	; 0x435
 802006e:	492c      	ldr	r1, [pc, #176]	; (8020120 <udp_connect+0xcc>)
 8020070:	482c      	ldr	r0, [pc, #176]	; (8020124 <udp_connect+0xd0>)
 8020072:	f000 fa6d 	bl	8020550 <iprintf>
 8020076:	f06f 030f 	mvn.w	r3, #15
 802007a:	e04b      	b.n	8020114 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 802007c:	68bb      	ldr	r3, [r7, #8]
 802007e:	2b00      	cmp	r3, #0
 8020080:	d109      	bne.n	8020096 <udp_connect+0x42>
 8020082:	4b26      	ldr	r3, [pc, #152]	; (802011c <udp_connect+0xc8>)
 8020084:	f240 4236 	movw	r2, #1078	; 0x436
 8020088:	4927      	ldr	r1, [pc, #156]	; (8020128 <udp_connect+0xd4>)
 802008a:	4826      	ldr	r0, [pc, #152]	; (8020124 <udp_connect+0xd0>)
 802008c:	f000 fa60 	bl	8020550 <iprintf>
 8020090:	f06f 030f 	mvn.w	r3, #15
 8020094:	e03e      	b.n	8020114 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8020096:	68fb      	ldr	r3, [r7, #12]
 8020098:	8a5b      	ldrh	r3, [r3, #18]
 802009a:	2b00      	cmp	r3, #0
 802009c:	d10f      	bne.n	80200be <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 802009e:	68f9      	ldr	r1, [r7, #12]
 80200a0:	68fb      	ldr	r3, [r7, #12]
 80200a2:	8a5b      	ldrh	r3, [r3, #18]
 80200a4:	461a      	mov	r2, r3
 80200a6:	68f8      	ldr	r0, [r7, #12]
 80200a8:	f7ff ff4c 	bl	801ff44 <udp_bind>
 80200ac:	4603      	mov	r3, r0
 80200ae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80200b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	d002      	beq.n	80200be <udp_connect+0x6a>
      return err;
 80200b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80200bc:	e02a      	b.n	8020114 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80200be:	68bb      	ldr	r3, [r7, #8]
 80200c0:	2b00      	cmp	r3, #0
 80200c2:	d002      	beq.n	80200ca <udp_connect+0x76>
 80200c4:	68bb      	ldr	r3, [r7, #8]
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	e000      	b.n	80200cc <udp_connect+0x78>
 80200ca:	2300      	movs	r3, #0
 80200cc:	68fa      	ldr	r2, [r7, #12]
 80200ce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80200d0:	68fb      	ldr	r3, [r7, #12]
 80200d2:	88fa      	ldrh	r2, [r7, #6]
 80200d4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80200d6:	68fb      	ldr	r3, [r7, #12]
 80200d8:	7c1b      	ldrb	r3, [r3, #16]
 80200da:	f043 0304 	orr.w	r3, r3, #4
 80200de:	b2da      	uxtb	r2, r3
 80200e0:	68fb      	ldr	r3, [r7, #12]
 80200e2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80200e4:	4b11      	ldr	r3, [pc, #68]	; (802012c <udp_connect+0xd8>)
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	617b      	str	r3, [r7, #20]
 80200ea:	e008      	b.n	80200fe <udp_connect+0xaa>
    if (pcb == ipcb) {
 80200ec:	68fa      	ldr	r2, [r7, #12]
 80200ee:	697b      	ldr	r3, [r7, #20]
 80200f0:	429a      	cmp	r2, r3
 80200f2:	d101      	bne.n	80200f8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80200f4:	2300      	movs	r3, #0
 80200f6:	e00d      	b.n	8020114 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80200f8:	697b      	ldr	r3, [r7, #20]
 80200fa:	68db      	ldr	r3, [r3, #12]
 80200fc:	617b      	str	r3, [r7, #20]
 80200fe:	697b      	ldr	r3, [r7, #20]
 8020100:	2b00      	cmp	r3, #0
 8020102:	d1f3      	bne.n	80200ec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8020104:	4b09      	ldr	r3, [pc, #36]	; (802012c <udp_connect+0xd8>)
 8020106:	681a      	ldr	r2, [r3, #0]
 8020108:	68fb      	ldr	r3, [r7, #12]
 802010a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 802010c:	4a07      	ldr	r2, [pc, #28]	; (802012c <udp_connect+0xd8>)
 802010e:	68fb      	ldr	r3, [r7, #12]
 8020110:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8020112:	2300      	movs	r3, #0
}
 8020114:	4618      	mov	r0, r3
 8020116:	3718      	adds	r7, #24
 8020118:	46bd      	mov	sp, r7
 802011a:	bd80      	pop	{r7, pc}
 802011c:	0802536c 	.word	0x0802536c
 8020120:	08025654 	.word	0x08025654
 8020124:	080253c8 	.word	0x080253c8
 8020128:	08025670 	.word	0x08025670
 802012c:	2400d43c 	.word	0x2400d43c

08020130 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8020130:	b580      	push	{r7, lr}
 8020132:	b082      	sub	sp, #8
 8020134:	af00      	add	r7, sp, #0
 8020136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8020138:	687b      	ldr	r3, [r7, #4]
 802013a:	2b00      	cmp	r3, #0
 802013c:	d107      	bne.n	802014e <udp_disconnect+0x1e>
 802013e:	4b0d      	ldr	r3, [pc, #52]	; (8020174 <udp_disconnect+0x44>)
 8020140:	f240 426a 	movw	r2, #1130	; 0x46a
 8020144:	490c      	ldr	r1, [pc, #48]	; (8020178 <udp_disconnect+0x48>)
 8020146:	480d      	ldr	r0, [pc, #52]	; (802017c <udp_disconnect+0x4c>)
 8020148:	f000 fa02 	bl	8020550 <iprintf>
 802014c:	e00f      	b.n	802016e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 802014e:	687b      	ldr	r3, [r7, #4]
 8020150:	2200      	movs	r2, #0
 8020152:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	2200      	movs	r2, #0
 8020158:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	2200      	movs	r2, #0
 802015e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	7c1b      	ldrb	r3, [r3, #16]
 8020164:	f023 0304 	bic.w	r3, r3, #4
 8020168:	b2da      	uxtb	r2, r3
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	741a      	strb	r2, [r3, #16]
}
 802016e:	3708      	adds	r7, #8
 8020170:	46bd      	mov	sp, r7
 8020172:	bd80      	pop	{r7, pc}
 8020174:	0802536c 	.word	0x0802536c
 8020178:	0802568c 	.word	0x0802568c
 802017c:	080253c8 	.word	0x080253c8

08020180 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8020180:	b580      	push	{r7, lr}
 8020182:	b084      	sub	sp, #16
 8020184:	af00      	add	r7, sp, #0
 8020186:	60f8      	str	r0, [r7, #12]
 8020188:	60b9      	str	r1, [r7, #8]
 802018a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 802018c:	68fb      	ldr	r3, [r7, #12]
 802018e:	2b00      	cmp	r3, #0
 8020190:	d107      	bne.n	80201a2 <udp_recv+0x22>
 8020192:	4b08      	ldr	r3, [pc, #32]	; (80201b4 <udp_recv+0x34>)
 8020194:	f240 428a 	movw	r2, #1162	; 0x48a
 8020198:	4907      	ldr	r1, [pc, #28]	; (80201b8 <udp_recv+0x38>)
 802019a:	4808      	ldr	r0, [pc, #32]	; (80201bc <udp_recv+0x3c>)
 802019c:	f000 f9d8 	bl	8020550 <iprintf>
 80201a0:	e005      	b.n	80201ae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80201a2:	68fb      	ldr	r3, [r7, #12]
 80201a4:	68ba      	ldr	r2, [r7, #8]
 80201a6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80201a8:	68fb      	ldr	r3, [r7, #12]
 80201aa:	687a      	ldr	r2, [r7, #4]
 80201ac:	61da      	str	r2, [r3, #28]
}
 80201ae:	3710      	adds	r7, #16
 80201b0:	46bd      	mov	sp, r7
 80201b2:	bd80      	pop	{r7, pc}
 80201b4:	0802536c 	.word	0x0802536c
 80201b8:	080256a8 	.word	0x080256a8
 80201bc:	080253c8 	.word	0x080253c8

080201c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80201c0:	b580      	push	{r7, lr}
 80201c2:	b084      	sub	sp, #16
 80201c4:	af00      	add	r7, sp, #0
 80201c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	d107      	bne.n	80201de <udp_remove+0x1e>
 80201ce:	4b19      	ldr	r3, [pc, #100]	; (8020234 <udp_remove+0x74>)
 80201d0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80201d4:	4918      	ldr	r1, [pc, #96]	; (8020238 <udp_remove+0x78>)
 80201d6:	4819      	ldr	r0, [pc, #100]	; (802023c <udp_remove+0x7c>)
 80201d8:	f000 f9ba 	bl	8020550 <iprintf>
 80201dc:	e026      	b.n	802022c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80201de:	4b18      	ldr	r3, [pc, #96]	; (8020240 <udp_remove+0x80>)
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	687a      	ldr	r2, [r7, #4]
 80201e4:	429a      	cmp	r2, r3
 80201e6:	d105      	bne.n	80201f4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80201e8:	4b15      	ldr	r3, [pc, #84]	; (8020240 <udp_remove+0x80>)
 80201ea:	681b      	ldr	r3, [r3, #0]
 80201ec:	68db      	ldr	r3, [r3, #12]
 80201ee:	4a14      	ldr	r2, [pc, #80]	; (8020240 <udp_remove+0x80>)
 80201f0:	6013      	str	r3, [r2, #0]
 80201f2:	e017      	b.n	8020224 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80201f4:	4b12      	ldr	r3, [pc, #72]	; (8020240 <udp_remove+0x80>)
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	60fb      	str	r3, [r7, #12]
 80201fa:	e010      	b.n	802021e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80201fc:	68fb      	ldr	r3, [r7, #12]
 80201fe:	68db      	ldr	r3, [r3, #12]
 8020200:	2b00      	cmp	r3, #0
 8020202:	d009      	beq.n	8020218 <udp_remove+0x58>
 8020204:	68fb      	ldr	r3, [r7, #12]
 8020206:	68db      	ldr	r3, [r3, #12]
 8020208:	687a      	ldr	r2, [r7, #4]
 802020a:	429a      	cmp	r2, r3
 802020c:	d104      	bne.n	8020218 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 802020e:	687b      	ldr	r3, [r7, #4]
 8020210:	68da      	ldr	r2, [r3, #12]
 8020212:	68fb      	ldr	r3, [r7, #12]
 8020214:	60da      	str	r2, [r3, #12]
        break;
 8020216:	e005      	b.n	8020224 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8020218:	68fb      	ldr	r3, [r7, #12]
 802021a:	68db      	ldr	r3, [r3, #12]
 802021c:	60fb      	str	r3, [r7, #12]
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	2b00      	cmp	r3, #0
 8020222:	d1eb      	bne.n	80201fc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8020224:	6879      	ldr	r1, [r7, #4]
 8020226:	2000      	movs	r0, #0
 8020228:	f7f6 f934 	bl	8016494 <memp_free>
}
 802022c:	3710      	adds	r7, #16
 802022e:	46bd      	mov	sp, r7
 8020230:	bd80      	pop	{r7, pc}
 8020232:	bf00      	nop
 8020234:	0802536c 	.word	0x0802536c
 8020238:	080256c0 	.word	0x080256c0
 802023c:	080253c8 	.word	0x080253c8
 8020240:	2400d43c 	.word	0x2400d43c

08020244 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8020244:	b580      	push	{r7, lr}
 8020246:	b082      	sub	sp, #8
 8020248:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802024a:	2000      	movs	r0, #0
 802024c:	f7f6 f8ac 	bl	80163a8 <memp_malloc>
 8020250:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8020252:	687b      	ldr	r3, [r7, #4]
 8020254:	2b00      	cmp	r3, #0
 8020256:	d007      	beq.n	8020268 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8020258:	2220      	movs	r2, #32
 802025a:	2100      	movs	r1, #0
 802025c:	6878      	ldr	r0, [r7, #4]
 802025e:	f000 f88f 	bl	8020380 <memset>
    pcb->ttl = UDP_TTL;
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	22ff      	movs	r2, #255	; 0xff
 8020266:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8020268:	687b      	ldr	r3, [r7, #4]
}
 802026a:	4618      	mov	r0, r3
 802026c:	3708      	adds	r7, #8
 802026e:	46bd      	mov	sp, r7
 8020270:	bd80      	pop	{r7, pc}

08020272 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8020272:	b580      	push	{r7, lr}
 8020274:	b084      	sub	sp, #16
 8020276:	af00      	add	r7, sp, #0
 8020278:	4603      	mov	r3, r0
 802027a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 802027c:	f7ff ffe2 	bl	8020244 <udp_new>
 8020280:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8020282:	68fb      	ldr	r3, [r7, #12]
}
 8020284:	4618      	mov	r0, r3
 8020286:	3710      	adds	r7, #16
 8020288:	46bd      	mov	sp, r7
 802028a:	bd80      	pop	{r7, pc}

0802028c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 802028c:	b480      	push	{r7}
 802028e:	b085      	sub	sp, #20
 8020290:	af00      	add	r7, sp, #0
 8020292:	6078      	str	r0, [r7, #4]
 8020294:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	2b00      	cmp	r3, #0
 802029a:	d01e      	beq.n	80202da <udp_netif_ip_addr_changed+0x4e>
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	681b      	ldr	r3, [r3, #0]
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	d01a      	beq.n	80202da <udp_netif_ip_addr_changed+0x4e>
 80202a4:	683b      	ldr	r3, [r7, #0]
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	d017      	beq.n	80202da <udp_netif_ip_addr_changed+0x4e>
 80202aa:	683b      	ldr	r3, [r7, #0]
 80202ac:	681b      	ldr	r3, [r3, #0]
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	d013      	beq.n	80202da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80202b2:	4b0d      	ldr	r3, [pc, #52]	; (80202e8 <udp_netif_ip_addr_changed+0x5c>)
 80202b4:	681b      	ldr	r3, [r3, #0]
 80202b6:	60fb      	str	r3, [r7, #12]
 80202b8:	e00c      	b.n	80202d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	681a      	ldr	r2, [r3, #0]
 80202be:	687b      	ldr	r3, [r7, #4]
 80202c0:	681b      	ldr	r3, [r3, #0]
 80202c2:	429a      	cmp	r2, r3
 80202c4:	d103      	bne.n	80202ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80202c6:	683b      	ldr	r3, [r7, #0]
 80202c8:	681a      	ldr	r2, [r3, #0]
 80202ca:	68fb      	ldr	r3, [r7, #12]
 80202cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80202ce:	68fb      	ldr	r3, [r7, #12]
 80202d0:	68db      	ldr	r3, [r3, #12]
 80202d2:	60fb      	str	r3, [r7, #12]
 80202d4:	68fb      	ldr	r3, [r7, #12]
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d1ef      	bne.n	80202ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80202da:	bf00      	nop
 80202dc:	3714      	adds	r7, #20
 80202de:	46bd      	mov	sp, r7
 80202e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202e4:	4770      	bx	lr
 80202e6:	bf00      	nop
 80202e8:	2400d43c 	.word	0x2400d43c

080202ec <__libc_init_array>:
 80202ec:	b570      	push	{r4, r5, r6, lr}
 80202ee:	4d0d      	ldr	r5, [pc, #52]	; (8020324 <__libc_init_array+0x38>)
 80202f0:	4c0d      	ldr	r4, [pc, #52]	; (8020328 <__libc_init_array+0x3c>)
 80202f2:	1b64      	subs	r4, r4, r5
 80202f4:	10a4      	asrs	r4, r4, #2
 80202f6:	2600      	movs	r6, #0
 80202f8:	42a6      	cmp	r6, r4
 80202fa:	d109      	bne.n	8020310 <__libc_init_array+0x24>
 80202fc:	4d0b      	ldr	r5, [pc, #44]	; (802032c <__libc_init_array+0x40>)
 80202fe:	4c0c      	ldr	r4, [pc, #48]	; (8020330 <__libc_init_array+0x44>)
 8020300:	f001 f88c 	bl	802141c <_init>
 8020304:	1b64      	subs	r4, r4, r5
 8020306:	10a4      	asrs	r4, r4, #2
 8020308:	2600      	movs	r6, #0
 802030a:	42a6      	cmp	r6, r4
 802030c:	d105      	bne.n	802031a <__libc_init_array+0x2e>
 802030e:	bd70      	pop	{r4, r5, r6, pc}
 8020310:	f855 3b04 	ldr.w	r3, [r5], #4
 8020314:	4798      	blx	r3
 8020316:	3601      	adds	r6, #1
 8020318:	e7ee      	b.n	80202f8 <__libc_init_array+0xc>
 802031a:	f855 3b04 	ldr.w	r3, [r5], #4
 802031e:	4798      	blx	r3
 8020320:	3601      	adds	r6, #1
 8020322:	e7f2      	b.n	802030a <__libc_init_array+0x1e>
 8020324:	08026174 	.word	0x08026174
 8020328:	08026174 	.word	0x08026174
 802032c:	08026174 	.word	0x08026174
 8020330:	08026178 	.word	0x08026178

08020334 <malloc>:
 8020334:	4b02      	ldr	r3, [pc, #8]	; (8020340 <malloc+0xc>)
 8020336:	4601      	mov	r1, r0
 8020338:	6818      	ldr	r0, [r3, #0]
 802033a:	f000 b895 	b.w	8020468 <_malloc_r>
 802033e:	bf00      	nop
 8020340:	24000040 	.word	0x24000040

08020344 <memcmp>:
 8020344:	b510      	push	{r4, lr}
 8020346:	3901      	subs	r1, #1
 8020348:	4402      	add	r2, r0
 802034a:	4290      	cmp	r0, r2
 802034c:	d101      	bne.n	8020352 <memcmp+0xe>
 802034e:	2000      	movs	r0, #0
 8020350:	e005      	b.n	802035e <memcmp+0x1a>
 8020352:	7803      	ldrb	r3, [r0, #0]
 8020354:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020358:	42a3      	cmp	r3, r4
 802035a:	d001      	beq.n	8020360 <memcmp+0x1c>
 802035c:	1b18      	subs	r0, r3, r4
 802035e:	bd10      	pop	{r4, pc}
 8020360:	3001      	adds	r0, #1
 8020362:	e7f2      	b.n	802034a <memcmp+0x6>

08020364 <memcpy>:
 8020364:	440a      	add	r2, r1
 8020366:	4291      	cmp	r1, r2
 8020368:	f100 33ff 	add.w	r3, r0, #4294967295
 802036c:	d100      	bne.n	8020370 <memcpy+0xc>
 802036e:	4770      	bx	lr
 8020370:	b510      	push	{r4, lr}
 8020372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020376:	f803 4f01 	strb.w	r4, [r3, #1]!
 802037a:	4291      	cmp	r1, r2
 802037c:	d1f9      	bne.n	8020372 <memcpy+0xe>
 802037e:	bd10      	pop	{r4, pc}

08020380 <memset>:
 8020380:	4402      	add	r2, r0
 8020382:	4603      	mov	r3, r0
 8020384:	4293      	cmp	r3, r2
 8020386:	d100      	bne.n	802038a <memset+0xa>
 8020388:	4770      	bx	lr
 802038a:	f803 1b01 	strb.w	r1, [r3], #1
 802038e:	e7f9      	b.n	8020384 <memset+0x4>

08020390 <_free_r>:
 8020390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020392:	2900      	cmp	r1, #0
 8020394:	d044      	beq.n	8020420 <_free_r+0x90>
 8020396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802039a:	9001      	str	r0, [sp, #4]
 802039c:	2b00      	cmp	r3, #0
 802039e:	f1a1 0404 	sub.w	r4, r1, #4
 80203a2:	bfb8      	it	lt
 80203a4:	18e4      	addlt	r4, r4, r3
 80203a6:	f000 fa5f 	bl	8020868 <__malloc_lock>
 80203aa:	4a1e      	ldr	r2, [pc, #120]	; (8020424 <_free_r+0x94>)
 80203ac:	9801      	ldr	r0, [sp, #4]
 80203ae:	6813      	ldr	r3, [r2, #0]
 80203b0:	b933      	cbnz	r3, 80203c0 <_free_r+0x30>
 80203b2:	6063      	str	r3, [r4, #4]
 80203b4:	6014      	str	r4, [r2, #0]
 80203b6:	b003      	add	sp, #12
 80203b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80203bc:	f000 ba5a 	b.w	8020874 <__malloc_unlock>
 80203c0:	42a3      	cmp	r3, r4
 80203c2:	d908      	bls.n	80203d6 <_free_r+0x46>
 80203c4:	6825      	ldr	r5, [r4, #0]
 80203c6:	1961      	adds	r1, r4, r5
 80203c8:	428b      	cmp	r3, r1
 80203ca:	bf01      	itttt	eq
 80203cc:	6819      	ldreq	r1, [r3, #0]
 80203ce:	685b      	ldreq	r3, [r3, #4]
 80203d0:	1949      	addeq	r1, r1, r5
 80203d2:	6021      	streq	r1, [r4, #0]
 80203d4:	e7ed      	b.n	80203b2 <_free_r+0x22>
 80203d6:	461a      	mov	r2, r3
 80203d8:	685b      	ldr	r3, [r3, #4]
 80203da:	b10b      	cbz	r3, 80203e0 <_free_r+0x50>
 80203dc:	42a3      	cmp	r3, r4
 80203de:	d9fa      	bls.n	80203d6 <_free_r+0x46>
 80203e0:	6811      	ldr	r1, [r2, #0]
 80203e2:	1855      	adds	r5, r2, r1
 80203e4:	42a5      	cmp	r5, r4
 80203e6:	d10b      	bne.n	8020400 <_free_r+0x70>
 80203e8:	6824      	ldr	r4, [r4, #0]
 80203ea:	4421      	add	r1, r4
 80203ec:	1854      	adds	r4, r2, r1
 80203ee:	42a3      	cmp	r3, r4
 80203f0:	6011      	str	r1, [r2, #0]
 80203f2:	d1e0      	bne.n	80203b6 <_free_r+0x26>
 80203f4:	681c      	ldr	r4, [r3, #0]
 80203f6:	685b      	ldr	r3, [r3, #4]
 80203f8:	6053      	str	r3, [r2, #4]
 80203fa:	4421      	add	r1, r4
 80203fc:	6011      	str	r1, [r2, #0]
 80203fe:	e7da      	b.n	80203b6 <_free_r+0x26>
 8020400:	d902      	bls.n	8020408 <_free_r+0x78>
 8020402:	230c      	movs	r3, #12
 8020404:	6003      	str	r3, [r0, #0]
 8020406:	e7d6      	b.n	80203b6 <_free_r+0x26>
 8020408:	6825      	ldr	r5, [r4, #0]
 802040a:	1961      	adds	r1, r4, r5
 802040c:	428b      	cmp	r3, r1
 802040e:	bf04      	itt	eq
 8020410:	6819      	ldreq	r1, [r3, #0]
 8020412:	685b      	ldreq	r3, [r3, #4]
 8020414:	6063      	str	r3, [r4, #4]
 8020416:	bf04      	itt	eq
 8020418:	1949      	addeq	r1, r1, r5
 802041a:	6021      	streq	r1, [r4, #0]
 802041c:	6054      	str	r4, [r2, #4]
 802041e:	e7ca      	b.n	80203b6 <_free_r+0x26>
 8020420:	b003      	add	sp, #12
 8020422:	bd30      	pop	{r4, r5, pc}
 8020424:	2400d440 	.word	0x2400d440

08020428 <sbrk_aligned>:
 8020428:	b570      	push	{r4, r5, r6, lr}
 802042a:	4e0e      	ldr	r6, [pc, #56]	; (8020464 <sbrk_aligned+0x3c>)
 802042c:	460c      	mov	r4, r1
 802042e:	6831      	ldr	r1, [r6, #0]
 8020430:	4605      	mov	r5, r0
 8020432:	b911      	cbnz	r1, 802043a <sbrk_aligned+0x12>
 8020434:	f000 f8e2 	bl	80205fc <_sbrk_r>
 8020438:	6030      	str	r0, [r6, #0]
 802043a:	4621      	mov	r1, r4
 802043c:	4628      	mov	r0, r5
 802043e:	f000 f8dd 	bl	80205fc <_sbrk_r>
 8020442:	1c43      	adds	r3, r0, #1
 8020444:	d00a      	beq.n	802045c <sbrk_aligned+0x34>
 8020446:	1cc4      	adds	r4, r0, #3
 8020448:	f024 0403 	bic.w	r4, r4, #3
 802044c:	42a0      	cmp	r0, r4
 802044e:	d007      	beq.n	8020460 <sbrk_aligned+0x38>
 8020450:	1a21      	subs	r1, r4, r0
 8020452:	4628      	mov	r0, r5
 8020454:	f000 f8d2 	bl	80205fc <_sbrk_r>
 8020458:	3001      	adds	r0, #1
 802045a:	d101      	bne.n	8020460 <sbrk_aligned+0x38>
 802045c:	f04f 34ff 	mov.w	r4, #4294967295
 8020460:	4620      	mov	r0, r4
 8020462:	bd70      	pop	{r4, r5, r6, pc}
 8020464:	2400d444 	.word	0x2400d444

08020468 <_malloc_r>:
 8020468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802046c:	1ccd      	adds	r5, r1, #3
 802046e:	f025 0503 	bic.w	r5, r5, #3
 8020472:	3508      	adds	r5, #8
 8020474:	2d0c      	cmp	r5, #12
 8020476:	bf38      	it	cc
 8020478:	250c      	movcc	r5, #12
 802047a:	2d00      	cmp	r5, #0
 802047c:	4607      	mov	r7, r0
 802047e:	db01      	blt.n	8020484 <_malloc_r+0x1c>
 8020480:	42a9      	cmp	r1, r5
 8020482:	d905      	bls.n	8020490 <_malloc_r+0x28>
 8020484:	230c      	movs	r3, #12
 8020486:	603b      	str	r3, [r7, #0]
 8020488:	2600      	movs	r6, #0
 802048a:	4630      	mov	r0, r6
 802048c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020490:	4e2e      	ldr	r6, [pc, #184]	; (802054c <_malloc_r+0xe4>)
 8020492:	f000 f9e9 	bl	8020868 <__malloc_lock>
 8020496:	6833      	ldr	r3, [r6, #0]
 8020498:	461c      	mov	r4, r3
 802049a:	bb34      	cbnz	r4, 80204ea <_malloc_r+0x82>
 802049c:	4629      	mov	r1, r5
 802049e:	4638      	mov	r0, r7
 80204a0:	f7ff ffc2 	bl	8020428 <sbrk_aligned>
 80204a4:	1c43      	adds	r3, r0, #1
 80204a6:	4604      	mov	r4, r0
 80204a8:	d14d      	bne.n	8020546 <_malloc_r+0xde>
 80204aa:	6834      	ldr	r4, [r6, #0]
 80204ac:	4626      	mov	r6, r4
 80204ae:	2e00      	cmp	r6, #0
 80204b0:	d140      	bne.n	8020534 <_malloc_r+0xcc>
 80204b2:	6823      	ldr	r3, [r4, #0]
 80204b4:	4631      	mov	r1, r6
 80204b6:	4638      	mov	r0, r7
 80204b8:	eb04 0803 	add.w	r8, r4, r3
 80204bc:	f000 f89e 	bl	80205fc <_sbrk_r>
 80204c0:	4580      	cmp	r8, r0
 80204c2:	d13a      	bne.n	802053a <_malloc_r+0xd2>
 80204c4:	6821      	ldr	r1, [r4, #0]
 80204c6:	3503      	adds	r5, #3
 80204c8:	1a6d      	subs	r5, r5, r1
 80204ca:	f025 0503 	bic.w	r5, r5, #3
 80204ce:	3508      	adds	r5, #8
 80204d0:	2d0c      	cmp	r5, #12
 80204d2:	bf38      	it	cc
 80204d4:	250c      	movcc	r5, #12
 80204d6:	4629      	mov	r1, r5
 80204d8:	4638      	mov	r0, r7
 80204da:	f7ff ffa5 	bl	8020428 <sbrk_aligned>
 80204de:	3001      	adds	r0, #1
 80204e0:	d02b      	beq.n	802053a <_malloc_r+0xd2>
 80204e2:	6823      	ldr	r3, [r4, #0]
 80204e4:	442b      	add	r3, r5
 80204e6:	6023      	str	r3, [r4, #0]
 80204e8:	e00e      	b.n	8020508 <_malloc_r+0xa0>
 80204ea:	6822      	ldr	r2, [r4, #0]
 80204ec:	1b52      	subs	r2, r2, r5
 80204ee:	d41e      	bmi.n	802052e <_malloc_r+0xc6>
 80204f0:	2a0b      	cmp	r2, #11
 80204f2:	d916      	bls.n	8020522 <_malloc_r+0xba>
 80204f4:	1961      	adds	r1, r4, r5
 80204f6:	42a3      	cmp	r3, r4
 80204f8:	6025      	str	r5, [r4, #0]
 80204fa:	bf18      	it	ne
 80204fc:	6059      	strne	r1, [r3, #4]
 80204fe:	6863      	ldr	r3, [r4, #4]
 8020500:	bf08      	it	eq
 8020502:	6031      	streq	r1, [r6, #0]
 8020504:	5162      	str	r2, [r4, r5]
 8020506:	604b      	str	r3, [r1, #4]
 8020508:	4638      	mov	r0, r7
 802050a:	f104 060b 	add.w	r6, r4, #11
 802050e:	f000 f9b1 	bl	8020874 <__malloc_unlock>
 8020512:	f026 0607 	bic.w	r6, r6, #7
 8020516:	1d23      	adds	r3, r4, #4
 8020518:	1af2      	subs	r2, r6, r3
 802051a:	d0b6      	beq.n	802048a <_malloc_r+0x22>
 802051c:	1b9b      	subs	r3, r3, r6
 802051e:	50a3      	str	r3, [r4, r2]
 8020520:	e7b3      	b.n	802048a <_malloc_r+0x22>
 8020522:	6862      	ldr	r2, [r4, #4]
 8020524:	42a3      	cmp	r3, r4
 8020526:	bf0c      	ite	eq
 8020528:	6032      	streq	r2, [r6, #0]
 802052a:	605a      	strne	r2, [r3, #4]
 802052c:	e7ec      	b.n	8020508 <_malloc_r+0xa0>
 802052e:	4623      	mov	r3, r4
 8020530:	6864      	ldr	r4, [r4, #4]
 8020532:	e7b2      	b.n	802049a <_malloc_r+0x32>
 8020534:	4634      	mov	r4, r6
 8020536:	6876      	ldr	r6, [r6, #4]
 8020538:	e7b9      	b.n	80204ae <_malloc_r+0x46>
 802053a:	230c      	movs	r3, #12
 802053c:	603b      	str	r3, [r7, #0]
 802053e:	4638      	mov	r0, r7
 8020540:	f000 f998 	bl	8020874 <__malloc_unlock>
 8020544:	e7a1      	b.n	802048a <_malloc_r+0x22>
 8020546:	6025      	str	r5, [r4, #0]
 8020548:	e7de      	b.n	8020508 <_malloc_r+0xa0>
 802054a:	bf00      	nop
 802054c:	2400d440 	.word	0x2400d440

08020550 <iprintf>:
 8020550:	b40f      	push	{r0, r1, r2, r3}
 8020552:	4b0a      	ldr	r3, [pc, #40]	; (802057c <iprintf+0x2c>)
 8020554:	b513      	push	{r0, r1, r4, lr}
 8020556:	681c      	ldr	r4, [r3, #0]
 8020558:	b124      	cbz	r4, 8020564 <iprintf+0x14>
 802055a:	69a3      	ldr	r3, [r4, #24]
 802055c:	b913      	cbnz	r3, 8020564 <iprintf+0x14>
 802055e:	4620      	mov	r0, r4
 8020560:	f000 f8d2 	bl	8020708 <__sinit>
 8020564:	ab05      	add	r3, sp, #20
 8020566:	9a04      	ldr	r2, [sp, #16]
 8020568:	68a1      	ldr	r1, [r4, #8]
 802056a:	9301      	str	r3, [sp, #4]
 802056c:	4620      	mov	r0, r4
 802056e:	f000 f9b1 	bl	80208d4 <_vfiprintf_r>
 8020572:	b002      	add	sp, #8
 8020574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020578:	b004      	add	sp, #16
 802057a:	4770      	bx	lr
 802057c:	24000040 	.word	0x24000040

08020580 <rand>:
 8020580:	4b16      	ldr	r3, [pc, #88]	; (80205dc <rand+0x5c>)
 8020582:	b510      	push	{r4, lr}
 8020584:	681c      	ldr	r4, [r3, #0]
 8020586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020588:	b9b3      	cbnz	r3, 80205b8 <rand+0x38>
 802058a:	2018      	movs	r0, #24
 802058c:	f7ff fed2 	bl	8020334 <malloc>
 8020590:	63a0      	str	r0, [r4, #56]	; 0x38
 8020592:	b928      	cbnz	r0, 80205a0 <rand+0x20>
 8020594:	4602      	mov	r2, r0
 8020596:	4b12      	ldr	r3, [pc, #72]	; (80205e0 <rand+0x60>)
 8020598:	4812      	ldr	r0, [pc, #72]	; (80205e4 <rand+0x64>)
 802059a:	214e      	movs	r1, #78	; 0x4e
 802059c:	f000 f83e 	bl	802061c <__assert_func>
 80205a0:	4a11      	ldr	r2, [pc, #68]	; (80205e8 <rand+0x68>)
 80205a2:	4b12      	ldr	r3, [pc, #72]	; (80205ec <rand+0x6c>)
 80205a4:	e9c0 2300 	strd	r2, r3, [r0]
 80205a8:	4b11      	ldr	r3, [pc, #68]	; (80205f0 <rand+0x70>)
 80205aa:	6083      	str	r3, [r0, #8]
 80205ac:	230b      	movs	r3, #11
 80205ae:	8183      	strh	r3, [r0, #12]
 80205b0:	2201      	movs	r2, #1
 80205b2:	2300      	movs	r3, #0
 80205b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80205b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80205ba:	4a0e      	ldr	r2, [pc, #56]	; (80205f4 <rand+0x74>)
 80205bc:	6920      	ldr	r0, [r4, #16]
 80205be:	6963      	ldr	r3, [r4, #20]
 80205c0:	490d      	ldr	r1, [pc, #52]	; (80205f8 <rand+0x78>)
 80205c2:	4342      	muls	r2, r0
 80205c4:	fb01 2203 	mla	r2, r1, r3, r2
 80205c8:	fba0 0101 	umull	r0, r1, r0, r1
 80205cc:	1c43      	adds	r3, r0, #1
 80205ce:	eb42 0001 	adc.w	r0, r2, r1
 80205d2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80205d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80205da:	bd10      	pop	{r4, pc}
 80205dc:	24000040 	.word	0x24000040
 80205e0:	08026030 	.word	0x08026030
 80205e4:	08026047 	.word	0x08026047
 80205e8:	abcd330e 	.word	0xabcd330e
 80205ec:	e66d1234 	.word	0xe66d1234
 80205f0:	0005deec 	.word	0x0005deec
 80205f4:	5851f42d 	.word	0x5851f42d
 80205f8:	4c957f2d 	.word	0x4c957f2d

080205fc <_sbrk_r>:
 80205fc:	b538      	push	{r3, r4, r5, lr}
 80205fe:	4d06      	ldr	r5, [pc, #24]	; (8020618 <_sbrk_r+0x1c>)
 8020600:	2300      	movs	r3, #0
 8020602:	4604      	mov	r4, r0
 8020604:	4608      	mov	r0, r1
 8020606:	602b      	str	r3, [r5, #0]
 8020608:	f7e0 fc08 	bl	8000e1c <_sbrk>
 802060c:	1c43      	adds	r3, r0, #1
 802060e:	d102      	bne.n	8020616 <_sbrk_r+0x1a>
 8020610:	682b      	ldr	r3, [r5, #0]
 8020612:	b103      	cbz	r3, 8020616 <_sbrk_r+0x1a>
 8020614:	6023      	str	r3, [r4, #0]
 8020616:	bd38      	pop	{r3, r4, r5, pc}
 8020618:	2400d3c8 	.word	0x2400d3c8

0802061c <__assert_func>:
 802061c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802061e:	4614      	mov	r4, r2
 8020620:	461a      	mov	r2, r3
 8020622:	4b09      	ldr	r3, [pc, #36]	; (8020648 <__assert_func+0x2c>)
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	4605      	mov	r5, r0
 8020628:	68d8      	ldr	r0, [r3, #12]
 802062a:	b14c      	cbz	r4, 8020640 <__assert_func+0x24>
 802062c:	4b07      	ldr	r3, [pc, #28]	; (802064c <__assert_func+0x30>)
 802062e:	9100      	str	r1, [sp, #0]
 8020630:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020634:	4906      	ldr	r1, [pc, #24]	; (8020650 <__assert_func+0x34>)
 8020636:	462b      	mov	r3, r5
 8020638:	f000 f8e4 	bl	8020804 <fiprintf>
 802063c:	f000 fd24 	bl	8021088 <abort>
 8020640:	4b04      	ldr	r3, [pc, #16]	; (8020654 <__assert_func+0x38>)
 8020642:	461c      	mov	r4, r3
 8020644:	e7f3      	b.n	802062e <__assert_func+0x12>
 8020646:	bf00      	nop
 8020648:	24000040 	.word	0x24000040
 802064c:	080260a2 	.word	0x080260a2
 8020650:	080260af 	.word	0x080260af
 8020654:	080260dd 	.word	0x080260dd

08020658 <std>:
 8020658:	2300      	movs	r3, #0
 802065a:	b510      	push	{r4, lr}
 802065c:	4604      	mov	r4, r0
 802065e:	e9c0 3300 	strd	r3, r3, [r0]
 8020662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020666:	6083      	str	r3, [r0, #8]
 8020668:	8181      	strh	r1, [r0, #12]
 802066a:	6643      	str	r3, [r0, #100]	; 0x64
 802066c:	81c2      	strh	r2, [r0, #14]
 802066e:	6183      	str	r3, [r0, #24]
 8020670:	4619      	mov	r1, r3
 8020672:	2208      	movs	r2, #8
 8020674:	305c      	adds	r0, #92	; 0x5c
 8020676:	f7ff fe83 	bl	8020380 <memset>
 802067a:	4b05      	ldr	r3, [pc, #20]	; (8020690 <std+0x38>)
 802067c:	6263      	str	r3, [r4, #36]	; 0x24
 802067e:	4b05      	ldr	r3, [pc, #20]	; (8020694 <std+0x3c>)
 8020680:	62a3      	str	r3, [r4, #40]	; 0x28
 8020682:	4b05      	ldr	r3, [pc, #20]	; (8020698 <std+0x40>)
 8020684:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020686:	4b05      	ldr	r3, [pc, #20]	; (802069c <std+0x44>)
 8020688:	6224      	str	r4, [r4, #32]
 802068a:	6323      	str	r3, [r4, #48]	; 0x30
 802068c:	bd10      	pop	{r4, pc}
 802068e:	bf00      	nop
 8020690:	08020e5d 	.word	0x08020e5d
 8020694:	08020e7f 	.word	0x08020e7f
 8020698:	08020eb7 	.word	0x08020eb7
 802069c:	08020edb 	.word	0x08020edb

080206a0 <_cleanup_r>:
 80206a0:	4901      	ldr	r1, [pc, #4]	; (80206a8 <_cleanup_r+0x8>)
 80206a2:	f000 b8c1 	b.w	8020828 <_fwalk_reent>
 80206a6:	bf00      	nop
 80206a8:	080211c5 	.word	0x080211c5

080206ac <__sfmoreglue>:
 80206ac:	b570      	push	{r4, r5, r6, lr}
 80206ae:	2268      	movs	r2, #104	; 0x68
 80206b0:	1e4d      	subs	r5, r1, #1
 80206b2:	4355      	muls	r5, r2
 80206b4:	460e      	mov	r6, r1
 80206b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80206ba:	f7ff fed5 	bl	8020468 <_malloc_r>
 80206be:	4604      	mov	r4, r0
 80206c0:	b140      	cbz	r0, 80206d4 <__sfmoreglue+0x28>
 80206c2:	2100      	movs	r1, #0
 80206c4:	e9c0 1600 	strd	r1, r6, [r0]
 80206c8:	300c      	adds	r0, #12
 80206ca:	60a0      	str	r0, [r4, #8]
 80206cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80206d0:	f7ff fe56 	bl	8020380 <memset>
 80206d4:	4620      	mov	r0, r4
 80206d6:	bd70      	pop	{r4, r5, r6, pc}

080206d8 <__sfp_lock_acquire>:
 80206d8:	4801      	ldr	r0, [pc, #4]	; (80206e0 <__sfp_lock_acquire+0x8>)
 80206da:	f7e1 bc3d 	b.w	8001f58 <__retarget_lock_acquire_recursive>
 80206de:	bf00      	nop
 80206e0:	24004d64 	.word	0x24004d64

080206e4 <__sfp_lock_release>:
 80206e4:	4801      	ldr	r0, [pc, #4]	; (80206ec <__sfp_lock_release+0x8>)
 80206e6:	f7e1 bc4b 	b.w	8001f80 <__retarget_lock_release_recursive>
 80206ea:	bf00      	nop
 80206ec:	24004d64 	.word	0x24004d64

080206f0 <__sinit_lock_acquire>:
 80206f0:	4801      	ldr	r0, [pc, #4]	; (80206f8 <__sinit_lock_acquire+0x8>)
 80206f2:	f7e1 bc31 	b.w	8001f58 <__retarget_lock_acquire_recursive>
 80206f6:	bf00      	nop
 80206f8:	24004d58 	.word	0x24004d58

080206fc <__sinit_lock_release>:
 80206fc:	4801      	ldr	r0, [pc, #4]	; (8020704 <__sinit_lock_release+0x8>)
 80206fe:	f7e1 bc3f 	b.w	8001f80 <__retarget_lock_release_recursive>
 8020702:	bf00      	nop
 8020704:	24004d58 	.word	0x24004d58

08020708 <__sinit>:
 8020708:	b510      	push	{r4, lr}
 802070a:	4604      	mov	r4, r0
 802070c:	f7ff fff0 	bl	80206f0 <__sinit_lock_acquire>
 8020710:	69a3      	ldr	r3, [r4, #24]
 8020712:	b11b      	cbz	r3, 802071c <__sinit+0x14>
 8020714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020718:	f7ff bff0 	b.w	80206fc <__sinit_lock_release>
 802071c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020720:	6523      	str	r3, [r4, #80]	; 0x50
 8020722:	4b13      	ldr	r3, [pc, #76]	; (8020770 <__sinit+0x68>)
 8020724:	4a13      	ldr	r2, [pc, #76]	; (8020774 <__sinit+0x6c>)
 8020726:	681b      	ldr	r3, [r3, #0]
 8020728:	62a2      	str	r2, [r4, #40]	; 0x28
 802072a:	42a3      	cmp	r3, r4
 802072c:	bf04      	itt	eq
 802072e:	2301      	moveq	r3, #1
 8020730:	61a3      	streq	r3, [r4, #24]
 8020732:	4620      	mov	r0, r4
 8020734:	f000 f820 	bl	8020778 <__sfp>
 8020738:	6060      	str	r0, [r4, #4]
 802073a:	4620      	mov	r0, r4
 802073c:	f000 f81c 	bl	8020778 <__sfp>
 8020740:	60a0      	str	r0, [r4, #8]
 8020742:	4620      	mov	r0, r4
 8020744:	f000 f818 	bl	8020778 <__sfp>
 8020748:	2200      	movs	r2, #0
 802074a:	60e0      	str	r0, [r4, #12]
 802074c:	2104      	movs	r1, #4
 802074e:	6860      	ldr	r0, [r4, #4]
 8020750:	f7ff ff82 	bl	8020658 <std>
 8020754:	68a0      	ldr	r0, [r4, #8]
 8020756:	2201      	movs	r2, #1
 8020758:	2109      	movs	r1, #9
 802075a:	f7ff ff7d 	bl	8020658 <std>
 802075e:	68e0      	ldr	r0, [r4, #12]
 8020760:	2202      	movs	r2, #2
 8020762:	2112      	movs	r1, #18
 8020764:	f7ff ff78 	bl	8020658 <std>
 8020768:	2301      	movs	r3, #1
 802076a:	61a3      	str	r3, [r4, #24]
 802076c:	e7d2      	b.n	8020714 <__sinit+0xc>
 802076e:	bf00      	nop
 8020770:	0802602c 	.word	0x0802602c
 8020774:	080206a1 	.word	0x080206a1

08020778 <__sfp>:
 8020778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802077a:	4607      	mov	r7, r0
 802077c:	f7ff ffac 	bl	80206d8 <__sfp_lock_acquire>
 8020780:	4b1e      	ldr	r3, [pc, #120]	; (80207fc <__sfp+0x84>)
 8020782:	681e      	ldr	r6, [r3, #0]
 8020784:	69b3      	ldr	r3, [r6, #24]
 8020786:	b913      	cbnz	r3, 802078e <__sfp+0x16>
 8020788:	4630      	mov	r0, r6
 802078a:	f7ff ffbd 	bl	8020708 <__sinit>
 802078e:	3648      	adds	r6, #72	; 0x48
 8020790:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020794:	3b01      	subs	r3, #1
 8020796:	d503      	bpl.n	80207a0 <__sfp+0x28>
 8020798:	6833      	ldr	r3, [r6, #0]
 802079a:	b30b      	cbz	r3, 80207e0 <__sfp+0x68>
 802079c:	6836      	ldr	r6, [r6, #0]
 802079e:	e7f7      	b.n	8020790 <__sfp+0x18>
 80207a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80207a4:	b9d5      	cbnz	r5, 80207dc <__sfp+0x64>
 80207a6:	4b16      	ldr	r3, [pc, #88]	; (8020800 <__sfp+0x88>)
 80207a8:	60e3      	str	r3, [r4, #12]
 80207aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80207ae:	6665      	str	r5, [r4, #100]	; 0x64
 80207b0:	f7e1 fbac 	bl	8001f0c <__retarget_lock_init_recursive>
 80207b4:	f7ff ff96 	bl	80206e4 <__sfp_lock_release>
 80207b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80207bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80207c0:	6025      	str	r5, [r4, #0]
 80207c2:	61a5      	str	r5, [r4, #24]
 80207c4:	2208      	movs	r2, #8
 80207c6:	4629      	mov	r1, r5
 80207c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80207cc:	f7ff fdd8 	bl	8020380 <memset>
 80207d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80207d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80207d8:	4620      	mov	r0, r4
 80207da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80207dc:	3468      	adds	r4, #104	; 0x68
 80207de:	e7d9      	b.n	8020794 <__sfp+0x1c>
 80207e0:	2104      	movs	r1, #4
 80207e2:	4638      	mov	r0, r7
 80207e4:	f7ff ff62 	bl	80206ac <__sfmoreglue>
 80207e8:	4604      	mov	r4, r0
 80207ea:	6030      	str	r0, [r6, #0]
 80207ec:	2800      	cmp	r0, #0
 80207ee:	d1d5      	bne.n	802079c <__sfp+0x24>
 80207f0:	f7ff ff78 	bl	80206e4 <__sfp_lock_release>
 80207f4:	230c      	movs	r3, #12
 80207f6:	603b      	str	r3, [r7, #0]
 80207f8:	e7ee      	b.n	80207d8 <__sfp+0x60>
 80207fa:	bf00      	nop
 80207fc:	0802602c 	.word	0x0802602c
 8020800:	ffff0001 	.word	0xffff0001

08020804 <fiprintf>:
 8020804:	b40e      	push	{r1, r2, r3}
 8020806:	b503      	push	{r0, r1, lr}
 8020808:	4601      	mov	r1, r0
 802080a:	ab03      	add	r3, sp, #12
 802080c:	4805      	ldr	r0, [pc, #20]	; (8020824 <fiprintf+0x20>)
 802080e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020812:	6800      	ldr	r0, [r0, #0]
 8020814:	9301      	str	r3, [sp, #4]
 8020816:	f000 f85d 	bl	80208d4 <_vfiprintf_r>
 802081a:	b002      	add	sp, #8
 802081c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020820:	b003      	add	sp, #12
 8020822:	4770      	bx	lr
 8020824:	24000040 	.word	0x24000040

08020828 <_fwalk_reent>:
 8020828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802082c:	4606      	mov	r6, r0
 802082e:	4688      	mov	r8, r1
 8020830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020834:	2700      	movs	r7, #0
 8020836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802083a:	f1b9 0901 	subs.w	r9, r9, #1
 802083e:	d505      	bpl.n	802084c <_fwalk_reent+0x24>
 8020840:	6824      	ldr	r4, [r4, #0]
 8020842:	2c00      	cmp	r4, #0
 8020844:	d1f7      	bne.n	8020836 <_fwalk_reent+0xe>
 8020846:	4638      	mov	r0, r7
 8020848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802084c:	89ab      	ldrh	r3, [r5, #12]
 802084e:	2b01      	cmp	r3, #1
 8020850:	d907      	bls.n	8020862 <_fwalk_reent+0x3a>
 8020852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020856:	3301      	adds	r3, #1
 8020858:	d003      	beq.n	8020862 <_fwalk_reent+0x3a>
 802085a:	4629      	mov	r1, r5
 802085c:	4630      	mov	r0, r6
 802085e:	47c0      	blx	r8
 8020860:	4307      	orrs	r7, r0
 8020862:	3568      	adds	r5, #104	; 0x68
 8020864:	e7e9      	b.n	802083a <_fwalk_reent+0x12>
	...

08020868 <__malloc_lock>:
 8020868:	4801      	ldr	r0, [pc, #4]	; (8020870 <__malloc_lock+0x8>)
 802086a:	f7e1 bb75 	b.w	8001f58 <__retarget_lock_acquire_recursive>
 802086e:	bf00      	nop
 8020870:	24004d70 	.word	0x24004d70

08020874 <__malloc_unlock>:
 8020874:	4801      	ldr	r0, [pc, #4]	; (802087c <__malloc_unlock+0x8>)
 8020876:	f7e1 bb83 	b.w	8001f80 <__retarget_lock_release_recursive>
 802087a:	bf00      	nop
 802087c:	24004d70 	.word	0x24004d70

08020880 <__sfputc_r>:
 8020880:	6893      	ldr	r3, [r2, #8]
 8020882:	3b01      	subs	r3, #1
 8020884:	2b00      	cmp	r3, #0
 8020886:	b410      	push	{r4}
 8020888:	6093      	str	r3, [r2, #8]
 802088a:	da08      	bge.n	802089e <__sfputc_r+0x1e>
 802088c:	6994      	ldr	r4, [r2, #24]
 802088e:	42a3      	cmp	r3, r4
 8020890:	db01      	blt.n	8020896 <__sfputc_r+0x16>
 8020892:	290a      	cmp	r1, #10
 8020894:	d103      	bne.n	802089e <__sfputc_r+0x1e>
 8020896:	f85d 4b04 	ldr.w	r4, [sp], #4
 802089a:	f000 bb23 	b.w	8020ee4 <__swbuf_r>
 802089e:	6813      	ldr	r3, [r2, #0]
 80208a0:	1c58      	adds	r0, r3, #1
 80208a2:	6010      	str	r0, [r2, #0]
 80208a4:	7019      	strb	r1, [r3, #0]
 80208a6:	4608      	mov	r0, r1
 80208a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80208ac:	4770      	bx	lr

080208ae <__sfputs_r>:
 80208ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208b0:	4606      	mov	r6, r0
 80208b2:	460f      	mov	r7, r1
 80208b4:	4614      	mov	r4, r2
 80208b6:	18d5      	adds	r5, r2, r3
 80208b8:	42ac      	cmp	r4, r5
 80208ba:	d101      	bne.n	80208c0 <__sfputs_r+0x12>
 80208bc:	2000      	movs	r0, #0
 80208be:	e007      	b.n	80208d0 <__sfputs_r+0x22>
 80208c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80208c4:	463a      	mov	r2, r7
 80208c6:	4630      	mov	r0, r6
 80208c8:	f7ff ffda 	bl	8020880 <__sfputc_r>
 80208cc:	1c43      	adds	r3, r0, #1
 80208ce:	d1f3      	bne.n	80208b8 <__sfputs_r+0xa>
 80208d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080208d4 <_vfiprintf_r>:
 80208d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208d8:	460d      	mov	r5, r1
 80208da:	b09d      	sub	sp, #116	; 0x74
 80208dc:	4614      	mov	r4, r2
 80208de:	4698      	mov	r8, r3
 80208e0:	4606      	mov	r6, r0
 80208e2:	b118      	cbz	r0, 80208ec <_vfiprintf_r+0x18>
 80208e4:	6983      	ldr	r3, [r0, #24]
 80208e6:	b90b      	cbnz	r3, 80208ec <_vfiprintf_r+0x18>
 80208e8:	f7ff ff0e 	bl	8020708 <__sinit>
 80208ec:	4b89      	ldr	r3, [pc, #548]	; (8020b14 <_vfiprintf_r+0x240>)
 80208ee:	429d      	cmp	r5, r3
 80208f0:	d11b      	bne.n	802092a <_vfiprintf_r+0x56>
 80208f2:	6875      	ldr	r5, [r6, #4]
 80208f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80208f6:	07d9      	lsls	r1, r3, #31
 80208f8:	d405      	bmi.n	8020906 <_vfiprintf_r+0x32>
 80208fa:	89ab      	ldrh	r3, [r5, #12]
 80208fc:	059a      	lsls	r2, r3, #22
 80208fe:	d402      	bmi.n	8020906 <_vfiprintf_r+0x32>
 8020900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020902:	f7e1 fb29 	bl	8001f58 <__retarget_lock_acquire_recursive>
 8020906:	89ab      	ldrh	r3, [r5, #12]
 8020908:	071b      	lsls	r3, r3, #28
 802090a:	d501      	bpl.n	8020910 <_vfiprintf_r+0x3c>
 802090c:	692b      	ldr	r3, [r5, #16]
 802090e:	b9eb      	cbnz	r3, 802094c <_vfiprintf_r+0x78>
 8020910:	4629      	mov	r1, r5
 8020912:	4630      	mov	r0, r6
 8020914:	f000 fb4a 	bl	8020fac <__swsetup_r>
 8020918:	b1c0      	cbz	r0, 802094c <_vfiprintf_r+0x78>
 802091a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802091c:	07dc      	lsls	r4, r3, #31
 802091e:	d50e      	bpl.n	802093e <_vfiprintf_r+0x6a>
 8020920:	f04f 30ff 	mov.w	r0, #4294967295
 8020924:	b01d      	add	sp, #116	; 0x74
 8020926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802092a:	4b7b      	ldr	r3, [pc, #492]	; (8020b18 <_vfiprintf_r+0x244>)
 802092c:	429d      	cmp	r5, r3
 802092e:	d101      	bne.n	8020934 <_vfiprintf_r+0x60>
 8020930:	68b5      	ldr	r5, [r6, #8]
 8020932:	e7df      	b.n	80208f4 <_vfiprintf_r+0x20>
 8020934:	4b79      	ldr	r3, [pc, #484]	; (8020b1c <_vfiprintf_r+0x248>)
 8020936:	429d      	cmp	r5, r3
 8020938:	bf08      	it	eq
 802093a:	68f5      	ldreq	r5, [r6, #12]
 802093c:	e7da      	b.n	80208f4 <_vfiprintf_r+0x20>
 802093e:	89ab      	ldrh	r3, [r5, #12]
 8020940:	0598      	lsls	r0, r3, #22
 8020942:	d4ed      	bmi.n	8020920 <_vfiprintf_r+0x4c>
 8020944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020946:	f7e1 fb1b 	bl	8001f80 <__retarget_lock_release_recursive>
 802094a:	e7e9      	b.n	8020920 <_vfiprintf_r+0x4c>
 802094c:	2300      	movs	r3, #0
 802094e:	9309      	str	r3, [sp, #36]	; 0x24
 8020950:	2320      	movs	r3, #32
 8020952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020956:	f8cd 800c 	str.w	r8, [sp, #12]
 802095a:	2330      	movs	r3, #48	; 0x30
 802095c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020b20 <_vfiprintf_r+0x24c>
 8020960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020964:	f04f 0901 	mov.w	r9, #1
 8020968:	4623      	mov	r3, r4
 802096a:	469a      	mov	sl, r3
 802096c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020970:	b10a      	cbz	r2, 8020976 <_vfiprintf_r+0xa2>
 8020972:	2a25      	cmp	r2, #37	; 0x25
 8020974:	d1f9      	bne.n	802096a <_vfiprintf_r+0x96>
 8020976:	ebba 0b04 	subs.w	fp, sl, r4
 802097a:	d00b      	beq.n	8020994 <_vfiprintf_r+0xc0>
 802097c:	465b      	mov	r3, fp
 802097e:	4622      	mov	r2, r4
 8020980:	4629      	mov	r1, r5
 8020982:	4630      	mov	r0, r6
 8020984:	f7ff ff93 	bl	80208ae <__sfputs_r>
 8020988:	3001      	adds	r0, #1
 802098a:	f000 80aa 	beq.w	8020ae2 <_vfiprintf_r+0x20e>
 802098e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020990:	445a      	add	r2, fp
 8020992:	9209      	str	r2, [sp, #36]	; 0x24
 8020994:	f89a 3000 	ldrb.w	r3, [sl]
 8020998:	2b00      	cmp	r3, #0
 802099a:	f000 80a2 	beq.w	8020ae2 <_vfiprintf_r+0x20e>
 802099e:	2300      	movs	r3, #0
 80209a0:	f04f 32ff 	mov.w	r2, #4294967295
 80209a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80209a8:	f10a 0a01 	add.w	sl, sl, #1
 80209ac:	9304      	str	r3, [sp, #16]
 80209ae:	9307      	str	r3, [sp, #28]
 80209b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80209b4:	931a      	str	r3, [sp, #104]	; 0x68
 80209b6:	4654      	mov	r4, sl
 80209b8:	2205      	movs	r2, #5
 80209ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80209be:	4858      	ldr	r0, [pc, #352]	; (8020b20 <_vfiprintf_r+0x24c>)
 80209c0:	f7df fc96 	bl	80002f0 <memchr>
 80209c4:	9a04      	ldr	r2, [sp, #16]
 80209c6:	b9d8      	cbnz	r0, 8020a00 <_vfiprintf_r+0x12c>
 80209c8:	06d1      	lsls	r1, r2, #27
 80209ca:	bf44      	itt	mi
 80209cc:	2320      	movmi	r3, #32
 80209ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80209d2:	0713      	lsls	r3, r2, #28
 80209d4:	bf44      	itt	mi
 80209d6:	232b      	movmi	r3, #43	; 0x2b
 80209d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80209dc:	f89a 3000 	ldrb.w	r3, [sl]
 80209e0:	2b2a      	cmp	r3, #42	; 0x2a
 80209e2:	d015      	beq.n	8020a10 <_vfiprintf_r+0x13c>
 80209e4:	9a07      	ldr	r2, [sp, #28]
 80209e6:	4654      	mov	r4, sl
 80209e8:	2000      	movs	r0, #0
 80209ea:	f04f 0c0a 	mov.w	ip, #10
 80209ee:	4621      	mov	r1, r4
 80209f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80209f4:	3b30      	subs	r3, #48	; 0x30
 80209f6:	2b09      	cmp	r3, #9
 80209f8:	d94e      	bls.n	8020a98 <_vfiprintf_r+0x1c4>
 80209fa:	b1b0      	cbz	r0, 8020a2a <_vfiprintf_r+0x156>
 80209fc:	9207      	str	r2, [sp, #28]
 80209fe:	e014      	b.n	8020a2a <_vfiprintf_r+0x156>
 8020a00:	eba0 0308 	sub.w	r3, r0, r8
 8020a04:	fa09 f303 	lsl.w	r3, r9, r3
 8020a08:	4313      	orrs	r3, r2
 8020a0a:	9304      	str	r3, [sp, #16]
 8020a0c:	46a2      	mov	sl, r4
 8020a0e:	e7d2      	b.n	80209b6 <_vfiprintf_r+0xe2>
 8020a10:	9b03      	ldr	r3, [sp, #12]
 8020a12:	1d19      	adds	r1, r3, #4
 8020a14:	681b      	ldr	r3, [r3, #0]
 8020a16:	9103      	str	r1, [sp, #12]
 8020a18:	2b00      	cmp	r3, #0
 8020a1a:	bfbb      	ittet	lt
 8020a1c:	425b      	neglt	r3, r3
 8020a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8020a22:	9307      	strge	r3, [sp, #28]
 8020a24:	9307      	strlt	r3, [sp, #28]
 8020a26:	bfb8      	it	lt
 8020a28:	9204      	strlt	r2, [sp, #16]
 8020a2a:	7823      	ldrb	r3, [r4, #0]
 8020a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8020a2e:	d10c      	bne.n	8020a4a <_vfiprintf_r+0x176>
 8020a30:	7863      	ldrb	r3, [r4, #1]
 8020a32:	2b2a      	cmp	r3, #42	; 0x2a
 8020a34:	d135      	bne.n	8020aa2 <_vfiprintf_r+0x1ce>
 8020a36:	9b03      	ldr	r3, [sp, #12]
 8020a38:	1d1a      	adds	r2, r3, #4
 8020a3a:	681b      	ldr	r3, [r3, #0]
 8020a3c:	9203      	str	r2, [sp, #12]
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	bfb8      	it	lt
 8020a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8020a46:	3402      	adds	r4, #2
 8020a48:	9305      	str	r3, [sp, #20]
 8020a4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020b30 <_vfiprintf_r+0x25c>
 8020a4e:	7821      	ldrb	r1, [r4, #0]
 8020a50:	2203      	movs	r2, #3
 8020a52:	4650      	mov	r0, sl
 8020a54:	f7df fc4c 	bl	80002f0 <memchr>
 8020a58:	b140      	cbz	r0, 8020a6c <_vfiprintf_r+0x198>
 8020a5a:	2340      	movs	r3, #64	; 0x40
 8020a5c:	eba0 000a 	sub.w	r0, r0, sl
 8020a60:	fa03 f000 	lsl.w	r0, r3, r0
 8020a64:	9b04      	ldr	r3, [sp, #16]
 8020a66:	4303      	orrs	r3, r0
 8020a68:	3401      	adds	r4, #1
 8020a6a:	9304      	str	r3, [sp, #16]
 8020a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a70:	482c      	ldr	r0, [pc, #176]	; (8020b24 <_vfiprintf_r+0x250>)
 8020a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020a76:	2206      	movs	r2, #6
 8020a78:	f7df fc3a 	bl	80002f0 <memchr>
 8020a7c:	2800      	cmp	r0, #0
 8020a7e:	d03f      	beq.n	8020b00 <_vfiprintf_r+0x22c>
 8020a80:	4b29      	ldr	r3, [pc, #164]	; (8020b28 <_vfiprintf_r+0x254>)
 8020a82:	bb1b      	cbnz	r3, 8020acc <_vfiprintf_r+0x1f8>
 8020a84:	9b03      	ldr	r3, [sp, #12]
 8020a86:	3307      	adds	r3, #7
 8020a88:	f023 0307 	bic.w	r3, r3, #7
 8020a8c:	3308      	adds	r3, #8
 8020a8e:	9303      	str	r3, [sp, #12]
 8020a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a92:	443b      	add	r3, r7
 8020a94:	9309      	str	r3, [sp, #36]	; 0x24
 8020a96:	e767      	b.n	8020968 <_vfiprintf_r+0x94>
 8020a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8020a9c:	460c      	mov	r4, r1
 8020a9e:	2001      	movs	r0, #1
 8020aa0:	e7a5      	b.n	80209ee <_vfiprintf_r+0x11a>
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	3401      	adds	r4, #1
 8020aa6:	9305      	str	r3, [sp, #20]
 8020aa8:	4619      	mov	r1, r3
 8020aaa:	f04f 0c0a 	mov.w	ip, #10
 8020aae:	4620      	mov	r0, r4
 8020ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ab4:	3a30      	subs	r2, #48	; 0x30
 8020ab6:	2a09      	cmp	r2, #9
 8020ab8:	d903      	bls.n	8020ac2 <_vfiprintf_r+0x1ee>
 8020aba:	2b00      	cmp	r3, #0
 8020abc:	d0c5      	beq.n	8020a4a <_vfiprintf_r+0x176>
 8020abe:	9105      	str	r1, [sp, #20]
 8020ac0:	e7c3      	b.n	8020a4a <_vfiprintf_r+0x176>
 8020ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8020ac6:	4604      	mov	r4, r0
 8020ac8:	2301      	movs	r3, #1
 8020aca:	e7f0      	b.n	8020aae <_vfiprintf_r+0x1da>
 8020acc:	ab03      	add	r3, sp, #12
 8020ace:	9300      	str	r3, [sp, #0]
 8020ad0:	462a      	mov	r2, r5
 8020ad2:	4b16      	ldr	r3, [pc, #88]	; (8020b2c <_vfiprintf_r+0x258>)
 8020ad4:	a904      	add	r1, sp, #16
 8020ad6:	4630      	mov	r0, r6
 8020ad8:	f3af 8000 	nop.w
 8020adc:	4607      	mov	r7, r0
 8020ade:	1c78      	adds	r0, r7, #1
 8020ae0:	d1d6      	bne.n	8020a90 <_vfiprintf_r+0x1bc>
 8020ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020ae4:	07d9      	lsls	r1, r3, #31
 8020ae6:	d405      	bmi.n	8020af4 <_vfiprintf_r+0x220>
 8020ae8:	89ab      	ldrh	r3, [r5, #12]
 8020aea:	059a      	lsls	r2, r3, #22
 8020aec:	d402      	bmi.n	8020af4 <_vfiprintf_r+0x220>
 8020aee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020af0:	f7e1 fa46 	bl	8001f80 <__retarget_lock_release_recursive>
 8020af4:	89ab      	ldrh	r3, [r5, #12]
 8020af6:	065b      	lsls	r3, r3, #25
 8020af8:	f53f af12 	bmi.w	8020920 <_vfiprintf_r+0x4c>
 8020afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020afe:	e711      	b.n	8020924 <_vfiprintf_r+0x50>
 8020b00:	ab03      	add	r3, sp, #12
 8020b02:	9300      	str	r3, [sp, #0]
 8020b04:	462a      	mov	r2, r5
 8020b06:	4b09      	ldr	r3, [pc, #36]	; (8020b2c <_vfiprintf_r+0x258>)
 8020b08:	a904      	add	r1, sp, #16
 8020b0a:	4630      	mov	r0, r6
 8020b0c:	f000 f880 	bl	8020c10 <_printf_i>
 8020b10:	e7e4      	b.n	8020adc <_vfiprintf_r+0x208>
 8020b12:	bf00      	nop
 8020b14:	08026100 	.word	0x08026100
 8020b18:	08026120 	.word	0x08026120
 8020b1c:	080260e0 	.word	0x080260e0
 8020b20:	08026140 	.word	0x08026140
 8020b24:	0802614a 	.word	0x0802614a
 8020b28:	00000000 	.word	0x00000000
 8020b2c:	080208af 	.word	0x080208af
 8020b30:	08026146 	.word	0x08026146

08020b34 <_printf_common>:
 8020b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b38:	4616      	mov	r6, r2
 8020b3a:	4699      	mov	r9, r3
 8020b3c:	688a      	ldr	r2, [r1, #8]
 8020b3e:	690b      	ldr	r3, [r1, #16]
 8020b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020b44:	4293      	cmp	r3, r2
 8020b46:	bfb8      	it	lt
 8020b48:	4613      	movlt	r3, r2
 8020b4a:	6033      	str	r3, [r6, #0]
 8020b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020b50:	4607      	mov	r7, r0
 8020b52:	460c      	mov	r4, r1
 8020b54:	b10a      	cbz	r2, 8020b5a <_printf_common+0x26>
 8020b56:	3301      	adds	r3, #1
 8020b58:	6033      	str	r3, [r6, #0]
 8020b5a:	6823      	ldr	r3, [r4, #0]
 8020b5c:	0699      	lsls	r1, r3, #26
 8020b5e:	bf42      	ittt	mi
 8020b60:	6833      	ldrmi	r3, [r6, #0]
 8020b62:	3302      	addmi	r3, #2
 8020b64:	6033      	strmi	r3, [r6, #0]
 8020b66:	6825      	ldr	r5, [r4, #0]
 8020b68:	f015 0506 	ands.w	r5, r5, #6
 8020b6c:	d106      	bne.n	8020b7c <_printf_common+0x48>
 8020b6e:	f104 0a19 	add.w	sl, r4, #25
 8020b72:	68e3      	ldr	r3, [r4, #12]
 8020b74:	6832      	ldr	r2, [r6, #0]
 8020b76:	1a9b      	subs	r3, r3, r2
 8020b78:	42ab      	cmp	r3, r5
 8020b7a:	dc26      	bgt.n	8020bca <_printf_common+0x96>
 8020b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020b80:	1e13      	subs	r3, r2, #0
 8020b82:	6822      	ldr	r2, [r4, #0]
 8020b84:	bf18      	it	ne
 8020b86:	2301      	movne	r3, #1
 8020b88:	0692      	lsls	r2, r2, #26
 8020b8a:	d42b      	bmi.n	8020be4 <_printf_common+0xb0>
 8020b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020b90:	4649      	mov	r1, r9
 8020b92:	4638      	mov	r0, r7
 8020b94:	47c0      	blx	r8
 8020b96:	3001      	adds	r0, #1
 8020b98:	d01e      	beq.n	8020bd8 <_printf_common+0xa4>
 8020b9a:	6823      	ldr	r3, [r4, #0]
 8020b9c:	68e5      	ldr	r5, [r4, #12]
 8020b9e:	6832      	ldr	r2, [r6, #0]
 8020ba0:	f003 0306 	and.w	r3, r3, #6
 8020ba4:	2b04      	cmp	r3, #4
 8020ba6:	bf08      	it	eq
 8020ba8:	1aad      	subeq	r5, r5, r2
 8020baa:	68a3      	ldr	r3, [r4, #8]
 8020bac:	6922      	ldr	r2, [r4, #16]
 8020bae:	bf0c      	ite	eq
 8020bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020bb4:	2500      	movne	r5, #0
 8020bb6:	4293      	cmp	r3, r2
 8020bb8:	bfc4      	itt	gt
 8020bba:	1a9b      	subgt	r3, r3, r2
 8020bbc:	18ed      	addgt	r5, r5, r3
 8020bbe:	2600      	movs	r6, #0
 8020bc0:	341a      	adds	r4, #26
 8020bc2:	42b5      	cmp	r5, r6
 8020bc4:	d11a      	bne.n	8020bfc <_printf_common+0xc8>
 8020bc6:	2000      	movs	r0, #0
 8020bc8:	e008      	b.n	8020bdc <_printf_common+0xa8>
 8020bca:	2301      	movs	r3, #1
 8020bcc:	4652      	mov	r2, sl
 8020bce:	4649      	mov	r1, r9
 8020bd0:	4638      	mov	r0, r7
 8020bd2:	47c0      	blx	r8
 8020bd4:	3001      	adds	r0, #1
 8020bd6:	d103      	bne.n	8020be0 <_printf_common+0xac>
 8020bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8020bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020be0:	3501      	adds	r5, #1
 8020be2:	e7c6      	b.n	8020b72 <_printf_common+0x3e>
 8020be4:	18e1      	adds	r1, r4, r3
 8020be6:	1c5a      	adds	r2, r3, #1
 8020be8:	2030      	movs	r0, #48	; 0x30
 8020bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020bee:	4422      	add	r2, r4
 8020bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020bf8:	3302      	adds	r3, #2
 8020bfa:	e7c7      	b.n	8020b8c <_printf_common+0x58>
 8020bfc:	2301      	movs	r3, #1
 8020bfe:	4622      	mov	r2, r4
 8020c00:	4649      	mov	r1, r9
 8020c02:	4638      	mov	r0, r7
 8020c04:	47c0      	blx	r8
 8020c06:	3001      	adds	r0, #1
 8020c08:	d0e6      	beq.n	8020bd8 <_printf_common+0xa4>
 8020c0a:	3601      	adds	r6, #1
 8020c0c:	e7d9      	b.n	8020bc2 <_printf_common+0x8e>
	...

08020c10 <_printf_i>:
 8020c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020c14:	7e0f      	ldrb	r7, [r1, #24]
 8020c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020c18:	2f78      	cmp	r7, #120	; 0x78
 8020c1a:	4691      	mov	r9, r2
 8020c1c:	4680      	mov	r8, r0
 8020c1e:	460c      	mov	r4, r1
 8020c20:	469a      	mov	sl, r3
 8020c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020c26:	d807      	bhi.n	8020c38 <_printf_i+0x28>
 8020c28:	2f62      	cmp	r7, #98	; 0x62
 8020c2a:	d80a      	bhi.n	8020c42 <_printf_i+0x32>
 8020c2c:	2f00      	cmp	r7, #0
 8020c2e:	f000 80d8 	beq.w	8020de2 <_printf_i+0x1d2>
 8020c32:	2f58      	cmp	r7, #88	; 0x58
 8020c34:	f000 80a3 	beq.w	8020d7e <_printf_i+0x16e>
 8020c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020c40:	e03a      	b.n	8020cb8 <_printf_i+0xa8>
 8020c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020c46:	2b15      	cmp	r3, #21
 8020c48:	d8f6      	bhi.n	8020c38 <_printf_i+0x28>
 8020c4a:	a101      	add	r1, pc, #4	; (adr r1, 8020c50 <_printf_i+0x40>)
 8020c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020c50:	08020ca9 	.word	0x08020ca9
 8020c54:	08020cbd 	.word	0x08020cbd
 8020c58:	08020c39 	.word	0x08020c39
 8020c5c:	08020c39 	.word	0x08020c39
 8020c60:	08020c39 	.word	0x08020c39
 8020c64:	08020c39 	.word	0x08020c39
 8020c68:	08020cbd 	.word	0x08020cbd
 8020c6c:	08020c39 	.word	0x08020c39
 8020c70:	08020c39 	.word	0x08020c39
 8020c74:	08020c39 	.word	0x08020c39
 8020c78:	08020c39 	.word	0x08020c39
 8020c7c:	08020dc9 	.word	0x08020dc9
 8020c80:	08020ced 	.word	0x08020ced
 8020c84:	08020dab 	.word	0x08020dab
 8020c88:	08020c39 	.word	0x08020c39
 8020c8c:	08020c39 	.word	0x08020c39
 8020c90:	08020deb 	.word	0x08020deb
 8020c94:	08020c39 	.word	0x08020c39
 8020c98:	08020ced 	.word	0x08020ced
 8020c9c:	08020c39 	.word	0x08020c39
 8020ca0:	08020c39 	.word	0x08020c39
 8020ca4:	08020db3 	.word	0x08020db3
 8020ca8:	682b      	ldr	r3, [r5, #0]
 8020caa:	1d1a      	adds	r2, r3, #4
 8020cac:	681b      	ldr	r3, [r3, #0]
 8020cae:	602a      	str	r2, [r5, #0]
 8020cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020cb8:	2301      	movs	r3, #1
 8020cba:	e0a3      	b.n	8020e04 <_printf_i+0x1f4>
 8020cbc:	6820      	ldr	r0, [r4, #0]
 8020cbe:	6829      	ldr	r1, [r5, #0]
 8020cc0:	0606      	lsls	r6, r0, #24
 8020cc2:	f101 0304 	add.w	r3, r1, #4
 8020cc6:	d50a      	bpl.n	8020cde <_printf_i+0xce>
 8020cc8:	680e      	ldr	r6, [r1, #0]
 8020cca:	602b      	str	r3, [r5, #0]
 8020ccc:	2e00      	cmp	r6, #0
 8020cce:	da03      	bge.n	8020cd8 <_printf_i+0xc8>
 8020cd0:	232d      	movs	r3, #45	; 0x2d
 8020cd2:	4276      	negs	r6, r6
 8020cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020cd8:	485e      	ldr	r0, [pc, #376]	; (8020e54 <_printf_i+0x244>)
 8020cda:	230a      	movs	r3, #10
 8020cdc:	e019      	b.n	8020d12 <_printf_i+0x102>
 8020cde:	680e      	ldr	r6, [r1, #0]
 8020ce0:	602b      	str	r3, [r5, #0]
 8020ce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020ce6:	bf18      	it	ne
 8020ce8:	b236      	sxthne	r6, r6
 8020cea:	e7ef      	b.n	8020ccc <_printf_i+0xbc>
 8020cec:	682b      	ldr	r3, [r5, #0]
 8020cee:	6820      	ldr	r0, [r4, #0]
 8020cf0:	1d19      	adds	r1, r3, #4
 8020cf2:	6029      	str	r1, [r5, #0]
 8020cf4:	0601      	lsls	r1, r0, #24
 8020cf6:	d501      	bpl.n	8020cfc <_printf_i+0xec>
 8020cf8:	681e      	ldr	r6, [r3, #0]
 8020cfa:	e002      	b.n	8020d02 <_printf_i+0xf2>
 8020cfc:	0646      	lsls	r6, r0, #25
 8020cfe:	d5fb      	bpl.n	8020cf8 <_printf_i+0xe8>
 8020d00:	881e      	ldrh	r6, [r3, #0]
 8020d02:	4854      	ldr	r0, [pc, #336]	; (8020e54 <_printf_i+0x244>)
 8020d04:	2f6f      	cmp	r7, #111	; 0x6f
 8020d06:	bf0c      	ite	eq
 8020d08:	2308      	moveq	r3, #8
 8020d0a:	230a      	movne	r3, #10
 8020d0c:	2100      	movs	r1, #0
 8020d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020d12:	6865      	ldr	r5, [r4, #4]
 8020d14:	60a5      	str	r5, [r4, #8]
 8020d16:	2d00      	cmp	r5, #0
 8020d18:	bfa2      	ittt	ge
 8020d1a:	6821      	ldrge	r1, [r4, #0]
 8020d1c:	f021 0104 	bicge.w	r1, r1, #4
 8020d20:	6021      	strge	r1, [r4, #0]
 8020d22:	b90e      	cbnz	r6, 8020d28 <_printf_i+0x118>
 8020d24:	2d00      	cmp	r5, #0
 8020d26:	d04d      	beq.n	8020dc4 <_printf_i+0x1b4>
 8020d28:	4615      	mov	r5, r2
 8020d2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8020d2e:	fb03 6711 	mls	r7, r3, r1, r6
 8020d32:	5dc7      	ldrb	r7, [r0, r7]
 8020d34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020d38:	4637      	mov	r7, r6
 8020d3a:	42bb      	cmp	r3, r7
 8020d3c:	460e      	mov	r6, r1
 8020d3e:	d9f4      	bls.n	8020d2a <_printf_i+0x11a>
 8020d40:	2b08      	cmp	r3, #8
 8020d42:	d10b      	bne.n	8020d5c <_printf_i+0x14c>
 8020d44:	6823      	ldr	r3, [r4, #0]
 8020d46:	07de      	lsls	r6, r3, #31
 8020d48:	d508      	bpl.n	8020d5c <_printf_i+0x14c>
 8020d4a:	6923      	ldr	r3, [r4, #16]
 8020d4c:	6861      	ldr	r1, [r4, #4]
 8020d4e:	4299      	cmp	r1, r3
 8020d50:	bfde      	ittt	le
 8020d52:	2330      	movle	r3, #48	; 0x30
 8020d54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020d58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020d5c:	1b52      	subs	r2, r2, r5
 8020d5e:	6122      	str	r2, [r4, #16]
 8020d60:	f8cd a000 	str.w	sl, [sp]
 8020d64:	464b      	mov	r3, r9
 8020d66:	aa03      	add	r2, sp, #12
 8020d68:	4621      	mov	r1, r4
 8020d6a:	4640      	mov	r0, r8
 8020d6c:	f7ff fee2 	bl	8020b34 <_printf_common>
 8020d70:	3001      	adds	r0, #1
 8020d72:	d14c      	bne.n	8020e0e <_printf_i+0x1fe>
 8020d74:	f04f 30ff 	mov.w	r0, #4294967295
 8020d78:	b004      	add	sp, #16
 8020d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d7e:	4835      	ldr	r0, [pc, #212]	; (8020e54 <_printf_i+0x244>)
 8020d80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020d84:	6829      	ldr	r1, [r5, #0]
 8020d86:	6823      	ldr	r3, [r4, #0]
 8020d88:	f851 6b04 	ldr.w	r6, [r1], #4
 8020d8c:	6029      	str	r1, [r5, #0]
 8020d8e:	061d      	lsls	r5, r3, #24
 8020d90:	d514      	bpl.n	8020dbc <_printf_i+0x1ac>
 8020d92:	07df      	lsls	r7, r3, #31
 8020d94:	bf44      	itt	mi
 8020d96:	f043 0320 	orrmi.w	r3, r3, #32
 8020d9a:	6023      	strmi	r3, [r4, #0]
 8020d9c:	b91e      	cbnz	r6, 8020da6 <_printf_i+0x196>
 8020d9e:	6823      	ldr	r3, [r4, #0]
 8020da0:	f023 0320 	bic.w	r3, r3, #32
 8020da4:	6023      	str	r3, [r4, #0]
 8020da6:	2310      	movs	r3, #16
 8020da8:	e7b0      	b.n	8020d0c <_printf_i+0xfc>
 8020daa:	6823      	ldr	r3, [r4, #0]
 8020dac:	f043 0320 	orr.w	r3, r3, #32
 8020db0:	6023      	str	r3, [r4, #0]
 8020db2:	2378      	movs	r3, #120	; 0x78
 8020db4:	4828      	ldr	r0, [pc, #160]	; (8020e58 <_printf_i+0x248>)
 8020db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020dba:	e7e3      	b.n	8020d84 <_printf_i+0x174>
 8020dbc:	0659      	lsls	r1, r3, #25
 8020dbe:	bf48      	it	mi
 8020dc0:	b2b6      	uxthmi	r6, r6
 8020dc2:	e7e6      	b.n	8020d92 <_printf_i+0x182>
 8020dc4:	4615      	mov	r5, r2
 8020dc6:	e7bb      	b.n	8020d40 <_printf_i+0x130>
 8020dc8:	682b      	ldr	r3, [r5, #0]
 8020dca:	6826      	ldr	r6, [r4, #0]
 8020dcc:	6961      	ldr	r1, [r4, #20]
 8020dce:	1d18      	adds	r0, r3, #4
 8020dd0:	6028      	str	r0, [r5, #0]
 8020dd2:	0635      	lsls	r5, r6, #24
 8020dd4:	681b      	ldr	r3, [r3, #0]
 8020dd6:	d501      	bpl.n	8020ddc <_printf_i+0x1cc>
 8020dd8:	6019      	str	r1, [r3, #0]
 8020dda:	e002      	b.n	8020de2 <_printf_i+0x1d2>
 8020ddc:	0670      	lsls	r0, r6, #25
 8020dde:	d5fb      	bpl.n	8020dd8 <_printf_i+0x1c8>
 8020de0:	8019      	strh	r1, [r3, #0]
 8020de2:	2300      	movs	r3, #0
 8020de4:	6123      	str	r3, [r4, #16]
 8020de6:	4615      	mov	r5, r2
 8020de8:	e7ba      	b.n	8020d60 <_printf_i+0x150>
 8020dea:	682b      	ldr	r3, [r5, #0]
 8020dec:	1d1a      	adds	r2, r3, #4
 8020dee:	602a      	str	r2, [r5, #0]
 8020df0:	681d      	ldr	r5, [r3, #0]
 8020df2:	6862      	ldr	r2, [r4, #4]
 8020df4:	2100      	movs	r1, #0
 8020df6:	4628      	mov	r0, r5
 8020df8:	f7df fa7a 	bl	80002f0 <memchr>
 8020dfc:	b108      	cbz	r0, 8020e02 <_printf_i+0x1f2>
 8020dfe:	1b40      	subs	r0, r0, r5
 8020e00:	6060      	str	r0, [r4, #4]
 8020e02:	6863      	ldr	r3, [r4, #4]
 8020e04:	6123      	str	r3, [r4, #16]
 8020e06:	2300      	movs	r3, #0
 8020e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020e0c:	e7a8      	b.n	8020d60 <_printf_i+0x150>
 8020e0e:	6923      	ldr	r3, [r4, #16]
 8020e10:	462a      	mov	r2, r5
 8020e12:	4649      	mov	r1, r9
 8020e14:	4640      	mov	r0, r8
 8020e16:	47d0      	blx	sl
 8020e18:	3001      	adds	r0, #1
 8020e1a:	d0ab      	beq.n	8020d74 <_printf_i+0x164>
 8020e1c:	6823      	ldr	r3, [r4, #0]
 8020e1e:	079b      	lsls	r3, r3, #30
 8020e20:	d413      	bmi.n	8020e4a <_printf_i+0x23a>
 8020e22:	68e0      	ldr	r0, [r4, #12]
 8020e24:	9b03      	ldr	r3, [sp, #12]
 8020e26:	4298      	cmp	r0, r3
 8020e28:	bfb8      	it	lt
 8020e2a:	4618      	movlt	r0, r3
 8020e2c:	e7a4      	b.n	8020d78 <_printf_i+0x168>
 8020e2e:	2301      	movs	r3, #1
 8020e30:	4632      	mov	r2, r6
 8020e32:	4649      	mov	r1, r9
 8020e34:	4640      	mov	r0, r8
 8020e36:	47d0      	blx	sl
 8020e38:	3001      	adds	r0, #1
 8020e3a:	d09b      	beq.n	8020d74 <_printf_i+0x164>
 8020e3c:	3501      	adds	r5, #1
 8020e3e:	68e3      	ldr	r3, [r4, #12]
 8020e40:	9903      	ldr	r1, [sp, #12]
 8020e42:	1a5b      	subs	r3, r3, r1
 8020e44:	42ab      	cmp	r3, r5
 8020e46:	dcf2      	bgt.n	8020e2e <_printf_i+0x21e>
 8020e48:	e7eb      	b.n	8020e22 <_printf_i+0x212>
 8020e4a:	2500      	movs	r5, #0
 8020e4c:	f104 0619 	add.w	r6, r4, #25
 8020e50:	e7f5      	b.n	8020e3e <_printf_i+0x22e>
 8020e52:	bf00      	nop
 8020e54:	08026151 	.word	0x08026151
 8020e58:	08026162 	.word	0x08026162

08020e5c <__sread>:
 8020e5c:	b510      	push	{r4, lr}
 8020e5e:	460c      	mov	r4, r1
 8020e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e64:	f000 fa62 	bl	802132c <_read_r>
 8020e68:	2800      	cmp	r0, #0
 8020e6a:	bfab      	itete	ge
 8020e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8020e70:	181b      	addge	r3, r3, r0
 8020e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020e76:	bfac      	ite	ge
 8020e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8020e7a:	81a3      	strhlt	r3, [r4, #12]
 8020e7c:	bd10      	pop	{r4, pc}

08020e7e <__swrite>:
 8020e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e82:	461f      	mov	r7, r3
 8020e84:	898b      	ldrh	r3, [r1, #12]
 8020e86:	05db      	lsls	r3, r3, #23
 8020e88:	4605      	mov	r5, r0
 8020e8a:	460c      	mov	r4, r1
 8020e8c:	4616      	mov	r6, r2
 8020e8e:	d505      	bpl.n	8020e9c <__swrite+0x1e>
 8020e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e94:	2302      	movs	r3, #2
 8020e96:	2200      	movs	r2, #0
 8020e98:	f000 f9d0 	bl	802123c <_lseek_r>
 8020e9c:	89a3      	ldrh	r3, [r4, #12]
 8020e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020ea6:	81a3      	strh	r3, [r4, #12]
 8020ea8:	4632      	mov	r2, r6
 8020eaa:	463b      	mov	r3, r7
 8020eac:	4628      	mov	r0, r5
 8020eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020eb2:	f000 b869 	b.w	8020f88 <_write_r>

08020eb6 <__sseek>:
 8020eb6:	b510      	push	{r4, lr}
 8020eb8:	460c      	mov	r4, r1
 8020eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ebe:	f000 f9bd 	bl	802123c <_lseek_r>
 8020ec2:	1c43      	adds	r3, r0, #1
 8020ec4:	89a3      	ldrh	r3, [r4, #12]
 8020ec6:	bf15      	itete	ne
 8020ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8020eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020ed2:	81a3      	strheq	r3, [r4, #12]
 8020ed4:	bf18      	it	ne
 8020ed6:	81a3      	strhne	r3, [r4, #12]
 8020ed8:	bd10      	pop	{r4, pc}

08020eda <__sclose>:
 8020eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ede:	f000 b8db 	b.w	8021098 <_close_r>
	...

08020ee4 <__swbuf_r>:
 8020ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ee6:	460e      	mov	r6, r1
 8020ee8:	4614      	mov	r4, r2
 8020eea:	4605      	mov	r5, r0
 8020eec:	b118      	cbz	r0, 8020ef6 <__swbuf_r+0x12>
 8020eee:	6983      	ldr	r3, [r0, #24]
 8020ef0:	b90b      	cbnz	r3, 8020ef6 <__swbuf_r+0x12>
 8020ef2:	f7ff fc09 	bl	8020708 <__sinit>
 8020ef6:	4b21      	ldr	r3, [pc, #132]	; (8020f7c <__swbuf_r+0x98>)
 8020ef8:	429c      	cmp	r4, r3
 8020efa:	d12b      	bne.n	8020f54 <__swbuf_r+0x70>
 8020efc:	686c      	ldr	r4, [r5, #4]
 8020efe:	69a3      	ldr	r3, [r4, #24]
 8020f00:	60a3      	str	r3, [r4, #8]
 8020f02:	89a3      	ldrh	r3, [r4, #12]
 8020f04:	071a      	lsls	r2, r3, #28
 8020f06:	d52f      	bpl.n	8020f68 <__swbuf_r+0x84>
 8020f08:	6923      	ldr	r3, [r4, #16]
 8020f0a:	b36b      	cbz	r3, 8020f68 <__swbuf_r+0x84>
 8020f0c:	6923      	ldr	r3, [r4, #16]
 8020f0e:	6820      	ldr	r0, [r4, #0]
 8020f10:	1ac0      	subs	r0, r0, r3
 8020f12:	6963      	ldr	r3, [r4, #20]
 8020f14:	b2f6      	uxtb	r6, r6
 8020f16:	4283      	cmp	r3, r0
 8020f18:	4637      	mov	r7, r6
 8020f1a:	dc04      	bgt.n	8020f26 <__swbuf_r+0x42>
 8020f1c:	4621      	mov	r1, r4
 8020f1e:	4628      	mov	r0, r5
 8020f20:	f000 f950 	bl	80211c4 <_fflush_r>
 8020f24:	bb30      	cbnz	r0, 8020f74 <__swbuf_r+0x90>
 8020f26:	68a3      	ldr	r3, [r4, #8]
 8020f28:	3b01      	subs	r3, #1
 8020f2a:	60a3      	str	r3, [r4, #8]
 8020f2c:	6823      	ldr	r3, [r4, #0]
 8020f2e:	1c5a      	adds	r2, r3, #1
 8020f30:	6022      	str	r2, [r4, #0]
 8020f32:	701e      	strb	r6, [r3, #0]
 8020f34:	6963      	ldr	r3, [r4, #20]
 8020f36:	3001      	adds	r0, #1
 8020f38:	4283      	cmp	r3, r0
 8020f3a:	d004      	beq.n	8020f46 <__swbuf_r+0x62>
 8020f3c:	89a3      	ldrh	r3, [r4, #12]
 8020f3e:	07db      	lsls	r3, r3, #31
 8020f40:	d506      	bpl.n	8020f50 <__swbuf_r+0x6c>
 8020f42:	2e0a      	cmp	r6, #10
 8020f44:	d104      	bne.n	8020f50 <__swbuf_r+0x6c>
 8020f46:	4621      	mov	r1, r4
 8020f48:	4628      	mov	r0, r5
 8020f4a:	f000 f93b 	bl	80211c4 <_fflush_r>
 8020f4e:	b988      	cbnz	r0, 8020f74 <__swbuf_r+0x90>
 8020f50:	4638      	mov	r0, r7
 8020f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f54:	4b0a      	ldr	r3, [pc, #40]	; (8020f80 <__swbuf_r+0x9c>)
 8020f56:	429c      	cmp	r4, r3
 8020f58:	d101      	bne.n	8020f5e <__swbuf_r+0x7a>
 8020f5a:	68ac      	ldr	r4, [r5, #8]
 8020f5c:	e7cf      	b.n	8020efe <__swbuf_r+0x1a>
 8020f5e:	4b09      	ldr	r3, [pc, #36]	; (8020f84 <__swbuf_r+0xa0>)
 8020f60:	429c      	cmp	r4, r3
 8020f62:	bf08      	it	eq
 8020f64:	68ec      	ldreq	r4, [r5, #12]
 8020f66:	e7ca      	b.n	8020efe <__swbuf_r+0x1a>
 8020f68:	4621      	mov	r1, r4
 8020f6a:	4628      	mov	r0, r5
 8020f6c:	f000 f81e 	bl	8020fac <__swsetup_r>
 8020f70:	2800      	cmp	r0, #0
 8020f72:	d0cb      	beq.n	8020f0c <__swbuf_r+0x28>
 8020f74:	f04f 37ff 	mov.w	r7, #4294967295
 8020f78:	e7ea      	b.n	8020f50 <__swbuf_r+0x6c>
 8020f7a:	bf00      	nop
 8020f7c:	08026100 	.word	0x08026100
 8020f80:	08026120 	.word	0x08026120
 8020f84:	080260e0 	.word	0x080260e0

08020f88 <_write_r>:
 8020f88:	b538      	push	{r3, r4, r5, lr}
 8020f8a:	4d07      	ldr	r5, [pc, #28]	; (8020fa8 <_write_r+0x20>)
 8020f8c:	4604      	mov	r4, r0
 8020f8e:	4608      	mov	r0, r1
 8020f90:	4611      	mov	r1, r2
 8020f92:	2200      	movs	r2, #0
 8020f94:	602a      	str	r2, [r5, #0]
 8020f96:	461a      	mov	r2, r3
 8020f98:	f7df feef 	bl	8000d7a <_write>
 8020f9c:	1c43      	adds	r3, r0, #1
 8020f9e:	d102      	bne.n	8020fa6 <_write_r+0x1e>
 8020fa0:	682b      	ldr	r3, [r5, #0]
 8020fa2:	b103      	cbz	r3, 8020fa6 <_write_r+0x1e>
 8020fa4:	6023      	str	r3, [r4, #0]
 8020fa6:	bd38      	pop	{r3, r4, r5, pc}
 8020fa8:	2400d3c8 	.word	0x2400d3c8

08020fac <__swsetup_r>:
 8020fac:	4b32      	ldr	r3, [pc, #200]	; (8021078 <__swsetup_r+0xcc>)
 8020fae:	b570      	push	{r4, r5, r6, lr}
 8020fb0:	681d      	ldr	r5, [r3, #0]
 8020fb2:	4606      	mov	r6, r0
 8020fb4:	460c      	mov	r4, r1
 8020fb6:	b125      	cbz	r5, 8020fc2 <__swsetup_r+0x16>
 8020fb8:	69ab      	ldr	r3, [r5, #24]
 8020fba:	b913      	cbnz	r3, 8020fc2 <__swsetup_r+0x16>
 8020fbc:	4628      	mov	r0, r5
 8020fbe:	f7ff fba3 	bl	8020708 <__sinit>
 8020fc2:	4b2e      	ldr	r3, [pc, #184]	; (802107c <__swsetup_r+0xd0>)
 8020fc4:	429c      	cmp	r4, r3
 8020fc6:	d10f      	bne.n	8020fe8 <__swsetup_r+0x3c>
 8020fc8:	686c      	ldr	r4, [r5, #4]
 8020fca:	89a3      	ldrh	r3, [r4, #12]
 8020fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020fd0:	0719      	lsls	r1, r3, #28
 8020fd2:	d42c      	bmi.n	802102e <__swsetup_r+0x82>
 8020fd4:	06dd      	lsls	r5, r3, #27
 8020fd6:	d411      	bmi.n	8020ffc <__swsetup_r+0x50>
 8020fd8:	2309      	movs	r3, #9
 8020fda:	6033      	str	r3, [r6, #0]
 8020fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020fe0:	81a3      	strh	r3, [r4, #12]
 8020fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8020fe6:	e03e      	b.n	8021066 <__swsetup_r+0xba>
 8020fe8:	4b25      	ldr	r3, [pc, #148]	; (8021080 <__swsetup_r+0xd4>)
 8020fea:	429c      	cmp	r4, r3
 8020fec:	d101      	bne.n	8020ff2 <__swsetup_r+0x46>
 8020fee:	68ac      	ldr	r4, [r5, #8]
 8020ff0:	e7eb      	b.n	8020fca <__swsetup_r+0x1e>
 8020ff2:	4b24      	ldr	r3, [pc, #144]	; (8021084 <__swsetup_r+0xd8>)
 8020ff4:	429c      	cmp	r4, r3
 8020ff6:	bf08      	it	eq
 8020ff8:	68ec      	ldreq	r4, [r5, #12]
 8020ffa:	e7e6      	b.n	8020fca <__swsetup_r+0x1e>
 8020ffc:	0758      	lsls	r0, r3, #29
 8020ffe:	d512      	bpl.n	8021026 <__swsetup_r+0x7a>
 8021000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021002:	b141      	cbz	r1, 8021016 <__swsetup_r+0x6a>
 8021004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021008:	4299      	cmp	r1, r3
 802100a:	d002      	beq.n	8021012 <__swsetup_r+0x66>
 802100c:	4630      	mov	r0, r6
 802100e:	f7ff f9bf 	bl	8020390 <_free_r>
 8021012:	2300      	movs	r3, #0
 8021014:	6363      	str	r3, [r4, #52]	; 0x34
 8021016:	89a3      	ldrh	r3, [r4, #12]
 8021018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802101c:	81a3      	strh	r3, [r4, #12]
 802101e:	2300      	movs	r3, #0
 8021020:	6063      	str	r3, [r4, #4]
 8021022:	6923      	ldr	r3, [r4, #16]
 8021024:	6023      	str	r3, [r4, #0]
 8021026:	89a3      	ldrh	r3, [r4, #12]
 8021028:	f043 0308 	orr.w	r3, r3, #8
 802102c:	81a3      	strh	r3, [r4, #12]
 802102e:	6923      	ldr	r3, [r4, #16]
 8021030:	b94b      	cbnz	r3, 8021046 <__swsetup_r+0x9a>
 8021032:	89a3      	ldrh	r3, [r4, #12]
 8021034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802103c:	d003      	beq.n	8021046 <__swsetup_r+0x9a>
 802103e:	4621      	mov	r1, r4
 8021040:	4630      	mov	r0, r6
 8021042:	f000 f933 	bl	80212ac <__smakebuf_r>
 8021046:	89a0      	ldrh	r0, [r4, #12]
 8021048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802104c:	f010 0301 	ands.w	r3, r0, #1
 8021050:	d00a      	beq.n	8021068 <__swsetup_r+0xbc>
 8021052:	2300      	movs	r3, #0
 8021054:	60a3      	str	r3, [r4, #8]
 8021056:	6963      	ldr	r3, [r4, #20]
 8021058:	425b      	negs	r3, r3
 802105a:	61a3      	str	r3, [r4, #24]
 802105c:	6923      	ldr	r3, [r4, #16]
 802105e:	b943      	cbnz	r3, 8021072 <__swsetup_r+0xc6>
 8021060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021064:	d1ba      	bne.n	8020fdc <__swsetup_r+0x30>
 8021066:	bd70      	pop	{r4, r5, r6, pc}
 8021068:	0781      	lsls	r1, r0, #30
 802106a:	bf58      	it	pl
 802106c:	6963      	ldrpl	r3, [r4, #20]
 802106e:	60a3      	str	r3, [r4, #8]
 8021070:	e7f4      	b.n	802105c <__swsetup_r+0xb0>
 8021072:	2000      	movs	r0, #0
 8021074:	e7f7      	b.n	8021066 <__swsetup_r+0xba>
 8021076:	bf00      	nop
 8021078:	24000040 	.word	0x24000040
 802107c:	08026100 	.word	0x08026100
 8021080:	08026120 	.word	0x08026120
 8021084:	080260e0 	.word	0x080260e0

08021088 <abort>:
 8021088:	b508      	push	{r3, lr}
 802108a:	2006      	movs	r0, #6
 802108c:	f000 f988 	bl	80213a0 <raise>
 8021090:	2001      	movs	r0, #1
 8021092:	f7df fe4b 	bl	8000d2c <_exit>
	...

08021098 <_close_r>:
 8021098:	b538      	push	{r3, r4, r5, lr}
 802109a:	4d06      	ldr	r5, [pc, #24]	; (80210b4 <_close_r+0x1c>)
 802109c:	2300      	movs	r3, #0
 802109e:	4604      	mov	r4, r0
 80210a0:	4608      	mov	r0, r1
 80210a2:	602b      	str	r3, [r5, #0]
 80210a4:	f7df fe85 	bl	8000db2 <_close>
 80210a8:	1c43      	adds	r3, r0, #1
 80210aa:	d102      	bne.n	80210b2 <_close_r+0x1a>
 80210ac:	682b      	ldr	r3, [r5, #0]
 80210ae:	b103      	cbz	r3, 80210b2 <_close_r+0x1a>
 80210b0:	6023      	str	r3, [r4, #0]
 80210b2:	bd38      	pop	{r3, r4, r5, pc}
 80210b4:	2400d3c8 	.word	0x2400d3c8

080210b8 <__sflush_r>:
 80210b8:	898a      	ldrh	r2, [r1, #12]
 80210ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210be:	4605      	mov	r5, r0
 80210c0:	0710      	lsls	r0, r2, #28
 80210c2:	460c      	mov	r4, r1
 80210c4:	d458      	bmi.n	8021178 <__sflush_r+0xc0>
 80210c6:	684b      	ldr	r3, [r1, #4]
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	dc05      	bgt.n	80210d8 <__sflush_r+0x20>
 80210cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	dc02      	bgt.n	80210d8 <__sflush_r+0x20>
 80210d2:	2000      	movs	r0, #0
 80210d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80210da:	2e00      	cmp	r6, #0
 80210dc:	d0f9      	beq.n	80210d2 <__sflush_r+0x1a>
 80210de:	2300      	movs	r3, #0
 80210e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80210e4:	682f      	ldr	r7, [r5, #0]
 80210e6:	602b      	str	r3, [r5, #0]
 80210e8:	d032      	beq.n	8021150 <__sflush_r+0x98>
 80210ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80210ec:	89a3      	ldrh	r3, [r4, #12]
 80210ee:	075a      	lsls	r2, r3, #29
 80210f0:	d505      	bpl.n	80210fe <__sflush_r+0x46>
 80210f2:	6863      	ldr	r3, [r4, #4]
 80210f4:	1ac0      	subs	r0, r0, r3
 80210f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80210f8:	b10b      	cbz	r3, 80210fe <__sflush_r+0x46>
 80210fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80210fc:	1ac0      	subs	r0, r0, r3
 80210fe:	2300      	movs	r3, #0
 8021100:	4602      	mov	r2, r0
 8021102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021104:	6a21      	ldr	r1, [r4, #32]
 8021106:	4628      	mov	r0, r5
 8021108:	47b0      	blx	r6
 802110a:	1c43      	adds	r3, r0, #1
 802110c:	89a3      	ldrh	r3, [r4, #12]
 802110e:	d106      	bne.n	802111e <__sflush_r+0x66>
 8021110:	6829      	ldr	r1, [r5, #0]
 8021112:	291d      	cmp	r1, #29
 8021114:	d82c      	bhi.n	8021170 <__sflush_r+0xb8>
 8021116:	4a2a      	ldr	r2, [pc, #168]	; (80211c0 <__sflush_r+0x108>)
 8021118:	40ca      	lsrs	r2, r1
 802111a:	07d6      	lsls	r6, r2, #31
 802111c:	d528      	bpl.n	8021170 <__sflush_r+0xb8>
 802111e:	2200      	movs	r2, #0
 8021120:	6062      	str	r2, [r4, #4]
 8021122:	04d9      	lsls	r1, r3, #19
 8021124:	6922      	ldr	r2, [r4, #16]
 8021126:	6022      	str	r2, [r4, #0]
 8021128:	d504      	bpl.n	8021134 <__sflush_r+0x7c>
 802112a:	1c42      	adds	r2, r0, #1
 802112c:	d101      	bne.n	8021132 <__sflush_r+0x7a>
 802112e:	682b      	ldr	r3, [r5, #0]
 8021130:	b903      	cbnz	r3, 8021134 <__sflush_r+0x7c>
 8021132:	6560      	str	r0, [r4, #84]	; 0x54
 8021134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021136:	602f      	str	r7, [r5, #0]
 8021138:	2900      	cmp	r1, #0
 802113a:	d0ca      	beq.n	80210d2 <__sflush_r+0x1a>
 802113c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021140:	4299      	cmp	r1, r3
 8021142:	d002      	beq.n	802114a <__sflush_r+0x92>
 8021144:	4628      	mov	r0, r5
 8021146:	f7ff f923 	bl	8020390 <_free_r>
 802114a:	2000      	movs	r0, #0
 802114c:	6360      	str	r0, [r4, #52]	; 0x34
 802114e:	e7c1      	b.n	80210d4 <__sflush_r+0x1c>
 8021150:	6a21      	ldr	r1, [r4, #32]
 8021152:	2301      	movs	r3, #1
 8021154:	4628      	mov	r0, r5
 8021156:	47b0      	blx	r6
 8021158:	1c41      	adds	r1, r0, #1
 802115a:	d1c7      	bne.n	80210ec <__sflush_r+0x34>
 802115c:	682b      	ldr	r3, [r5, #0]
 802115e:	2b00      	cmp	r3, #0
 8021160:	d0c4      	beq.n	80210ec <__sflush_r+0x34>
 8021162:	2b1d      	cmp	r3, #29
 8021164:	d001      	beq.n	802116a <__sflush_r+0xb2>
 8021166:	2b16      	cmp	r3, #22
 8021168:	d101      	bne.n	802116e <__sflush_r+0xb6>
 802116a:	602f      	str	r7, [r5, #0]
 802116c:	e7b1      	b.n	80210d2 <__sflush_r+0x1a>
 802116e:	89a3      	ldrh	r3, [r4, #12]
 8021170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021174:	81a3      	strh	r3, [r4, #12]
 8021176:	e7ad      	b.n	80210d4 <__sflush_r+0x1c>
 8021178:	690f      	ldr	r7, [r1, #16]
 802117a:	2f00      	cmp	r7, #0
 802117c:	d0a9      	beq.n	80210d2 <__sflush_r+0x1a>
 802117e:	0793      	lsls	r3, r2, #30
 8021180:	680e      	ldr	r6, [r1, #0]
 8021182:	bf08      	it	eq
 8021184:	694b      	ldreq	r3, [r1, #20]
 8021186:	600f      	str	r7, [r1, #0]
 8021188:	bf18      	it	ne
 802118a:	2300      	movne	r3, #0
 802118c:	eba6 0807 	sub.w	r8, r6, r7
 8021190:	608b      	str	r3, [r1, #8]
 8021192:	f1b8 0f00 	cmp.w	r8, #0
 8021196:	dd9c      	ble.n	80210d2 <__sflush_r+0x1a>
 8021198:	6a21      	ldr	r1, [r4, #32]
 802119a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802119c:	4643      	mov	r3, r8
 802119e:	463a      	mov	r2, r7
 80211a0:	4628      	mov	r0, r5
 80211a2:	47b0      	blx	r6
 80211a4:	2800      	cmp	r0, #0
 80211a6:	dc06      	bgt.n	80211b6 <__sflush_r+0xfe>
 80211a8:	89a3      	ldrh	r3, [r4, #12]
 80211aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80211ae:	81a3      	strh	r3, [r4, #12]
 80211b0:	f04f 30ff 	mov.w	r0, #4294967295
 80211b4:	e78e      	b.n	80210d4 <__sflush_r+0x1c>
 80211b6:	4407      	add	r7, r0
 80211b8:	eba8 0800 	sub.w	r8, r8, r0
 80211bc:	e7e9      	b.n	8021192 <__sflush_r+0xda>
 80211be:	bf00      	nop
 80211c0:	20400001 	.word	0x20400001

080211c4 <_fflush_r>:
 80211c4:	b538      	push	{r3, r4, r5, lr}
 80211c6:	690b      	ldr	r3, [r1, #16]
 80211c8:	4605      	mov	r5, r0
 80211ca:	460c      	mov	r4, r1
 80211cc:	b913      	cbnz	r3, 80211d4 <_fflush_r+0x10>
 80211ce:	2500      	movs	r5, #0
 80211d0:	4628      	mov	r0, r5
 80211d2:	bd38      	pop	{r3, r4, r5, pc}
 80211d4:	b118      	cbz	r0, 80211de <_fflush_r+0x1a>
 80211d6:	6983      	ldr	r3, [r0, #24]
 80211d8:	b90b      	cbnz	r3, 80211de <_fflush_r+0x1a>
 80211da:	f7ff fa95 	bl	8020708 <__sinit>
 80211de:	4b14      	ldr	r3, [pc, #80]	; (8021230 <_fflush_r+0x6c>)
 80211e0:	429c      	cmp	r4, r3
 80211e2:	d11b      	bne.n	802121c <_fflush_r+0x58>
 80211e4:	686c      	ldr	r4, [r5, #4]
 80211e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d0ef      	beq.n	80211ce <_fflush_r+0xa>
 80211ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80211f0:	07d0      	lsls	r0, r2, #31
 80211f2:	d404      	bmi.n	80211fe <_fflush_r+0x3a>
 80211f4:	0599      	lsls	r1, r3, #22
 80211f6:	d402      	bmi.n	80211fe <_fflush_r+0x3a>
 80211f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80211fa:	f7e0 fead 	bl	8001f58 <__retarget_lock_acquire_recursive>
 80211fe:	4628      	mov	r0, r5
 8021200:	4621      	mov	r1, r4
 8021202:	f7ff ff59 	bl	80210b8 <__sflush_r>
 8021206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021208:	07da      	lsls	r2, r3, #31
 802120a:	4605      	mov	r5, r0
 802120c:	d4e0      	bmi.n	80211d0 <_fflush_r+0xc>
 802120e:	89a3      	ldrh	r3, [r4, #12]
 8021210:	059b      	lsls	r3, r3, #22
 8021212:	d4dd      	bmi.n	80211d0 <_fflush_r+0xc>
 8021214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021216:	f7e0 feb3 	bl	8001f80 <__retarget_lock_release_recursive>
 802121a:	e7d9      	b.n	80211d0 <_fflush_r+0xc>
 802121c:	4b05      	ldr	r3, [pc, #20]	; (8021234 <_fflush_r+0x70>)
 802121e:	429c      	cmp	r4, r3
 8021220:	d101      	bne.n	8021226 <_fflush_r+0x62>
 8021222:	68ac      	ldr	r4, [r5, #8]
 8021224:	e7df      	b.n	80211e6 <_fflush_r+0x22>
 8021226:	4b04      	ldr	r3, [pc, #16]	; (8021238 <_fflush_r+0x74>)
 8021228:	429c      	cmp	r4, r3
 802122a:	bf08      	it	eq
 802122c:	68ec      	ldreq	r4, [r5, #12]
 802122e:	e7da      	b.n	80211e6 <_fflush_r+0x22>
 8021230:	08026100 	.word	0x08026100
 8021234:	08026120 	.word	0x08026120
 8021238:	080260e0 	.word	0x080260e0

0802123c <_lseek_r>:
 802123c:	b538      	push	{r3, r4, r5, lr}
 802123e:	4d07      	ldr	r5, [pc, #28]	; (802125c <_lseek_r+0x20>)
 8021240:	4604      	mov	r4, r0
 8021242:	4608      	mov	r0, r1
 8021244:	4611      	mov	r1, r2
 8021246:	2200      	movs	r2, #0
 8021248:	602a      	str	r2, [r5, #0]
 802124a:	461a      	mov	r2, r3
 802124c:	f7df fdd8 	bl	8000e00 <_lseek>
 8021250:	1c43      	adds	r3, r0, #1
 8021252:	d102      	bne.n	802125a <_lseek_r+0x1e>
 8021254:	682b      	ldr	r3, [r5, #0]
 8021256:	b103      	cbz	r3, 802125a <_lseek_r+0x1e>
 8021258:	6023      	str	r3, [r4, #0]
 802125a:	bd38      	pop	{r3, r4, r5, pc}
 802125c:	2400d3c8 	.word	0x2400d3c8

08021260 <__swhatbuf_r>:
 8021260:	b570      	push	{r4, r5, r6, lr}
 8021262:	460e      	mov	r6, r1
 8021264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021268:	2900      	cmp	r1, #0
 802126a:	b096      	sub	sp, #88	; 0x58
 802126c:	4614      	mov	r4, r2
 802126e:	461d      	mov	r5, r3
 8021270:	da08      	bge.n	8021284 <__swhatbuf_r+0x24>
 8021272:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021276:	2200      	movs	r2, #0
 8021278:	602a      	str	r2, [r5, #0]
 802127a:	061a      	lsls	r2, r3, #24
 802127c:	d410      	bmi.n	80212a0 <__swhatbuf_r+0x40>
 802127e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021282:	e00e      	b.n	80212a2 <__swhatbuf_r+0x42>
 8021284:	466a      	mov	r2, sp
 8021286:	f000 f8a7 	bl	80213d8 <_fstat_r>
 802128a:	2800      	cmp	r0, #0
 802128c:	dbf1      	blt.n	8021272 <__swhatbuf_r+0x12>
 802128e:	9a01      	ldr	r2, [sp, #4]
 8021290:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021294:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021298:	425a      	negs	r2, r3
 802129a:	415a      	adcs	r2, r3
 802129c:	602a      	str	r2, [r5, #0]
 802129e:	e7ee      	b.n	802127e <__swhatbuf_r+0x1e>
 80212a0:	2340      	movs	r3, #64	; 0x40
 80212a2:	2000      	movs	r0, #0
 80212a4:	6023      	str	r3, [r4, #0]
 80212a6:	b016      	add	sp, #88	; 0x58
 80212a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080212ac <__smakebuf_r>:
 80212ac:	898b      	ldrh	r3, [r1, #12]
 80212ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80212b0:	079d      	lsls	r5, r3, #30
 80212b2:	4606      	mov	r6, r0
 80212b4:	460c      	mov	r4, r1
 80212b6:	d507      	bpl.n	80212c8 <__smakebuf_r+0x1c>
 80212b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80212bc:	6023      	str	r3, [r4, #0]
 80212be:	6123      	str	r3, [r4, #16]
 80212c0:	2301      	movs	r3, #1
 80212c2:	6163      	str	r3, [r4, #20]
 80212c4:	b002      	add	sp, #8
 80212c6:	bd70      	pop	{r4, r5, r6, pc}
 80212c8:	ab01      	add	r3, sp, #4
 80212ca:	466a      	mov	r2, sp
 80212cc:	f7ff ffc8 	bl	8021260 <__swhatbuf_r>
 80212d0:	9900      	ldr	r1, [sp, #0]
 80212d2:	4605      	mov	r5, r0
 80212d4:	4630      	mov	r0, r6
 80212d6:	f7ff f8c7 	bl	8020468 <_malloc_r>
 80212da:	b948      	cbnz	r0, 80212f0 <__smakebuf_r+0x44>
 80212dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80212e0:	059a      	lsls	r2, r3, #22
 80212e2:	d4ef      	bmi.n	80212c4 <__smakebuf_r+0x18>
 80212e4:	f023 0303 	bic.w	r3, r3, #3
 80212e8:	f043 0302 	orr.w	r3, r3, #2
 80212ec:	81a3      	strh	r3, [r4, #12]
 80212ee:	e7e3      	b.n	80212b8 <__smakebuf_r+0xc>
 80212f0:	4b0d      	ldr	r3, [pc, #52]	; (8021328 <__smakebuf_r+0x7c>)
 80212f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80212f4:	89a3      	ldrh	r3, [r4, #12]
 80212f6:	6020      	str	r0, [r4, #0]
 80212f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80212fc:	81a3      	strh	r3, [r4, #12]
 80212fe:	9b00      	ldr	r3, [sp, #0]
 8021300:	6163      	str	r3, [r4, #20]
 8021302:	9b01      	ldr	r3, [sp, #4]
 8021304:	6120      	str	r0, [r4, #16]
 8021306:	b15b      	cbz	r3, 8021320 <__smakebuf_r+0x74>
 8021308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802130c:	4630      	mov	r0, r6
 802130e:	f000 f875 	bl	80213fc <_isatty_r>
 8021312:	b128      	cbz	r0, 8021320 <__smakebuf_r+0x74>
 8021314:	89a3      	ldrh	r3, [r4, #12]
 8021316:	f023 0303 	bic.w	r3, r3, #3
 802131a:	f043 0301 	orr.w	r3, r3, #1
 802131e:	81a3      	strh	r3, [r4, #12]
 8021320:	89a0      	ldrh	r0, [r4, #12]
 8021322:	4305      	orrs	r5, r0
 8021324:	81a5      	strh	r5, [r4, #12]
 8021326:	e7cd      	b.n	80212c4 <__smakebuf_r+0x18>
 8021328:	080206a1 	.word	0x080206a1

0802132c <_read_r>:
 802132c:	b538      	push	{r3, r4, r5, lr}
 802132e:	4d07      	ldr	r5, [pc, #28]	; (802134c <_read_r+0x20>)
 8021330:	4604      	mov	r4, r0
 8021332:	4608      	mov	r0, r1
 8021334:	4611      	mov	r1, r2
 8021336:	2200      	movs	r2, #0
 8021338:	602a      	str	r2, [r5, #0]
 802133a:	461a      	mov	r2, r3
 802133c:	f7df fd00 	bl	8000d40 <_read>
 8021340:	1c43      	adds	r3, r0, #1
 8021342:	d102      	bne.n	802134a <_read_r+0x1e>
 8021344:	682b      	ldr	r3, [r5, #0]
 8021346:	b103      	cbz	r3, 802134a <_read_r+0x1e>
 8021348:	6023      	str	r3, [r4, #0]
 802134a:	bd38      	pop	{r3, r4, r5, pc}
 802134c:	2400d3c8 	.word	0x2400d3c8

08021350 <_raise_r>:
 8021350:	291f      	cmp	r1, #31
 8021352:	b538      	push	{r3, r4, r5, lr}
 8021354:	4604      	mov	r4, r0
 8021356:	460d      	mov	r5, r1
 8021358:	d904      	bls.n	8021364 <_raise_r+0x14>
 802135a:	2316      	movs	r3, #22
 802135c:	6003      	str	r3, [r0, #0]
 802135e:	f04f 30ff 	mov.w	r0, #4294967295
 8021362:	bd38      	pop	{r3, r4, r5, pc}
 8021364:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021366:	b112      	cbz	r2, 802136e <_raise_r+0x1e>
 8021368:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802136c:	b94b      	cbnz	r3, 8021382 <_raise_r+0x32>
 802136e:	4620      	mov	r0, r4
 8021370:	f000 f830 	bl	80213d4 <_getpid_r>
 8021374:	462a      	mov	r2, r5
 8021376:	4601      	mov	r1, r0
 8021378:	4620      	mov	r0, r4
 802137a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802137e:	f000 b817 	b.w	80213b0 <_kill_r>
 8021382:	2b01      	cmp	r3, #1
 8021384:	d00a      	beq.n	802139c <_raise_r+0x4c>
 8021386:	1c59      	adds	r1, r3, #1
 8021388:	d103      	bne.n	8021392 <_raise_r+0x42>
 802138a:	2316      	movs	r3, #22
 802138c:	6003      	str	r3, [r0, #0]
 802138e:	2001      	movs	r0, #1
 8021390:	e7e7      	b.n	8021362 <_raise_r+0x12>
 8021392:	2400      	movs	r4, #0
 8021394:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021398:	4628      	mov	r0, r5
 802139a:	4798      	blx	r3
 802139c:	2000      	movs	r0, #0
 802139e:	e7e0      	b.n	8021362 <_raise_r+0x12>

080213a0 <raise>:
 80213a0:	4b02      	ldr	r3, [pc, #8]	; (80213ac <raise+0xc>)
 80213a2:	4601      	mov	r1, r0
 80213a4:	6818      	ldr	r0, [r3, #0]
 80213a6:	f7ff bfd3 	b.w	8021350 <_raise_r>
 80213aa:	bf00      	nop
 80213ac:	24000040 	.word	0x24000040

080213b0 <_kill_r>:
 80213b0:	b538      	push	{r3, r4, r5, lr}
 80213b2:	4d07      	ldr	r5, [pc, #28]	; (80213d0 <_kill_r+0x20>)
 80213b4:	2300      	movs	r3, #0
 80213b6:	4604      	mov	r4, r0
 80213b8:	4608      	mov	r0, r1
 80213ba:	4611      	mov	r1, r2
 80213bc:	602b      	str	r3, [r5, #0]
 80213be:	f7df fca3 	bl	8000d08 <_kill>
 80213c2:	1c43      	adds	r3, r0, #1
 80213c4:	d102      	bne.n	80213cc <_kill_r+0x1c>
 80213c6:	682b      	ldr	r3, [r5, #0]
 80213c8:	b103      	cbz	r3, 80213cc <_kill_r+0x1c>
 80213ca:	6023      	str	r3, [r4, #0]
 80213cc:	bd38      	pop	{r3, r4, r5, pc}
 80213ce:	bf00      	nop
 80213d0:	2400d3c8 	.word	0x2400d3c8

080213d4 <_getpid_r>:
 80213d4:	f7df bc90 	b.w	8000cf8 <_getpid>

080213d8 <_fstat_r>:
 80213d8:	b538      	push	{r3, r4, r5, lr}
 80213da:	4d07      	ldr	r5, [pc, #28]	; (80213f8 <_fstat_r+0x20>)
 80213dc:	2300      	movs	r3, #0
 80213de:	4604      	mov	r4, r0
 80213e0:	4608      	mov	r0, r1
 80213e2:	4611      	mov	r1, r2
 80213e4:	602b      	str	r3, [r5, #0]
 80213e6:	f7df fcf0 	bl	8000dca <_fstat>
 80213ea:	1c43      	adds	r3, r0, #1
 80213ec:	d102      	bne.n	80213f4 <_fstat_r+0x1c>
 80213ee:	682b      	ldr	r3, [r5, #0]
 80213f0:	b103      	cbz	r3, 80213f4 <_fstat_r+0x1c>
 80213f2:	6023      	str	r3, [r4, #0]
 80213f4:	bd38      	pop	{r3, r4, r5, pc}
 80213f6:	bf00      	nop
 80213f8:	2400d3c8 	.word	0x2400d3c8

080213fc <_isatty_r>:
 80213fc:	b538      	push	{r3, r4, r5, lr}
 80213fe:	4d06      	ldr	r5, [pc, #24]	; (8021418 <_isatty_r+0x1c>)
 8021400:	2300      	movs	r3, #0
 8021402:	4604      	mov	r4, r0
 8021404:	4608      	mov	r0, r1
 8021406:	602b      	str	r3, [r5, #0]
 8021408:	f7df fcef 	bl	8000dea <_isatty>
 802140c:	1c43      	adds	r3, r0, #1
 802140e:	d102      	bne.n	8021416 <_isatty_r+0x1a>
 8021410:	682b      	ldr	r3, [r5, #0]
 8021412:	b103      	cbz	r3, 8021416 <_isatty_r+0x1a>
 8021414:	6023      	str	r3, [r4, #0]
 8021416:	bd38      	pop	{r3, r4, r5, pc}
 8021418:	2400d3c8 	.word	0x2400d3c8

0802141c <_init>:
 802141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802141e:	bf00      	nop
 8021420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021422:	bc08      	pop	{r3}
 8021424:	469e      	mov	lr, r3
 8021426:	4770      	bx	lr

08021428 <_fini>:
 8021428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802142a:	bf00      	nop
 802142c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802142e:	bc08      	pop	{r3}
 8021430:	469e      	mov	lr, r3
 8021432:	4770      	bx	lr
